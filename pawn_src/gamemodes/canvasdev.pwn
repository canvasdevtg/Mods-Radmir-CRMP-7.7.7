//Author CanVas Dev

@___If_u_can_read_this_u_r_nerd();
@___If_u_can_read_this_u_r_nerd()		
{
    #emit	stack	0x7FFFFFFF
    #emit	inc.s	cellmax		
    static const ___[][] = {"", ""};
    #emit	retn
    #emit	load.s.pri	___		
    #emit	proc				
    #emit	proc				
    #emit	fill		cellmax	
    #emit	proc
    #emit	stack		1	
    #emit	stor.alt	___		
    #emit	strb.i		2    
    #emit	switch		4
    #emit	retn    	
L1:
    #emit	jump	L1		
    #emit	zero	cellmin	
}

#include <a_samp>
#include <a_mysql>
#include <a_http> 
#include <crashdetect>
#include <foreach>
#include <performance>
#include <streamer>
#include <sscanf2>
#include <pawncmd>
#include <timerfix>
#include <profiler>
#include <zones>
#include <mxdate>
#include <yom_buttons>
#include <md5>
#include <crp>
#include <fly>
#include <string>
#include "systems/pawn_system/cp.inc"
#include "systems/pawn_system/cp_race.inc"
#include "systems/pawn_system/pickup.inc"
#include <FCNPC>
#include <colandreas>
#include <dini>

#include "systems/samp_bcrypt.inc"

#include "systems/mysql.inc"

#define public:%0(%1) \
	forward %0(%1); \
	public %0(%1)

#define MAX_ALLOWED_PING 560

#define TOKEN_LENGTH 16
#define TOKEN_BUFFER (TOKEN_LENGTH + 1)

#define BCRYPT_COSST 8

#define INVALID_RETURN -1
#define SUCCESS 1
#define FAIL    0

#define MAX_JOBS 3

#define MAX_STAGE 6
new gPaintProgress[MAX_PLAYERS];
new gPaintTimer[MAX_PLAYERS];
new bool:gIsPainting[MAX_PLAYERS];

new g_player_daily_items[MAX_PLAYERS][28];
new g_player_daily_open[MAX_PLAYERS][28];
new g_player_daily_type[MAX_PLAYERS][28];

new g_player_newpass[MAX_PLAYERS][65];

new g_jobs_str[512];
new g_player_jobs[MAX_PLAYERS][MAX_JOBS];

new detector[MAX_PLAYERS];

new player_job_active[MAX_PLAYERS];

new SelectedCars[MAX_PLAYERS][25];
new SelectedCarCount[MAX_PLAYERS];

new CraftModelList[MAX_PLAYERS][25];
new CraftModelCount[MAX_PLAYERS];

new ActiveAcsTimer;

new old_nickname[MAX_PLAYERS][64];

new area_koryakino;
new area_uzniy;

new camera_detailyng[MAX_PLAYERS];

new SelectedCraft[MAX_PLAYERS];
new CraftError[MAX_PLAYERS];
new CraftModel[MAX_PLAYERS];
new CraftSet[MAX_PLAYERS];
new CraftDialog[MAX_PLAYERS];

new item_store_kd[MAX_PLAYERS];
new selectedNeftType[MAX_PLAYERS];

new employment_kd[MAX_PLAYERS];

static string_owned[4096];
new org_status[64];

new g_decoration_id[MAX_PLAYERS];
new g_decoration_mysql_id[MAX_PLAYERS];

const MAX_CREATE_OBJECTS = 1000;
const MAX_DECORATION_OBJECTS = 1000;

enum Decor_Info
{
	Decor_ID,
	Decor_Object,
	Decor_Model,
	Float:Decor_PosX,
	Float:Decor_PosY,
	Float:Decor_PosZ,
	Float:Decor_RotX,
	Float:Decor_RotY,
	Float:Decor_RotZ,
	Decor_Owner,
	Decor_Status
}

new DecorInfo[MAX_DECORATION_OBJECTS][Decor_Info],
	TOTALDECOR;

new PlayerText3D:g_object_text[MAX_PLAYERS][MAX_CREATE_OBJECTS];

new bool:g_player_use_editing[MAX_PLAYERS] = false;

new Float:bus_spawn_positions[][] = 
{
    {838.0722,787.0397,12.5330,69.6846},
    {835.4897,781.5926,12.5392,69.1957},
    {834.3732,775.6921,12.5428,69.1016},
    {831.3211,770.4863,12.5516,68.6740},
	{830.1661,764.6810,12.5525,68.9100}
};

new const stoyanka_spawn_counts[2] = {13, 17};
new const Float:stoyanka_spawn_positions[2][17][4] = 
{
    //Арзамас
    {
        {-265.4486,1135.6903,11.7018,89.4888},
        {-265.1913,1128.0975,11.7510,90.2510},
		{-265.5448,1120.4585,11.7989,89.0004},
		{-265.1172,1112.3369,11.7918,89.8566},
		{-265.3475,1108.2972,11.7695,89.5231},
		{-265.5281,1104.5074,11.7479,90.0981}, 
		{-265.1900,1100.6179,11.7261,89.7743},
		{-265.7309,1073.6840,11.8118,89.6176},
		{-265.1558,1070.0321,11.8029,89.2202},
		{-287.0141,1081.1072,11.7603,270.3729},
		{-286.8026,1088.7458,11.7073,269.1847},
		{-286.6456,1092.5031,11.6870,269.8761},
		{-286.7012,1096.4001,11.6888,269.3271},
		{0.0, 0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0, 0.0}
    },

    //Южный
    {
        {2493.6157,-2348.6343,21.7943,180.6969},
		{2489.7104,-2348.9109,21.8061,179.4412},
		{2485.7729,-2348.4192,21.7889,179.3768},
		{2496.1113,-2369.4001,21.7889,359.9045},
		{2499.8284,-2369.4900,21.7888,357.8806},
		{2503.5125,-2369.7871,21.7881,359.1323},
		{2507.3464,-2369.6338,21.7849,358.2228},
		{2511.2566,-2369.4460,21.7890,358.7881},
		{2515.1995,-2369.3569,21.7922,358.9107},
		{2523.2783,-2369.7800,21.7890,0.3464},
		{2527.0786,-2369.6062,21.7889,359.0091},
		{2531.0046,-2369.2461,21.8070,359.5539},
		{2534.7568,-2369.5295,21.7888,359.0781},
		{2538.6211,-2369.5095,21.7888,359.5229},
		{2527.3328,-2348.7439,21.7890,180.3813},
		{2523.6677,-2348.0964,21.7895,179.8103},
		{2519.8796,-2348.3733,21.7890,178.4645}
    }
};

new player_slot[MAX_PLAYERS];
new player_type[MAX_PLAYERS];

new inventory_plate_id[MAX_PLAYERS];

new stop_bus_job[MAX_PLAYERS];

//=============Особняки=============//
new bool:CentralMansionCapture = false; //Центральный особняк
new bool:WestMansionCapture = false; //Западный особняк
new bool:NorthMansionCapture = false; //Северный особняк
new bool:PelaBaseCapture = false; //База Пэла

new Timer_CentralMansionCapture[MAX_PLAYERS];
new Timer_WestMansionCapture[MAX_PLAYERS];
new Timer_NorthMansionCapture[MAX_PLAYERS];
new Timer_PelaBaseCapture[MAX_PLAYERS];

new Timer_Oxrana1[MAX_PLAYERS];
new Timer_Oxrana2[MAX_PLAYERS];
new Timer_Oxrana3[MAX_PLAYERS];

new HackerID = INVALID_PLAYER_ID;
new HackerID2 = INVALID_PLAYER_ID;
new HackerID3 = INVALID_PLAYER_ID;
new HackerID4 = INVALID_PLAYER_ID;

new hackinghouse[MAX_PLAYERS][4];

new bool:ActiveWar = false;

new Gang_CentralMansionCapture, Gang_WestMansionCapture, Gang_NorthMansionCapture, Gang_PelaBaseCapture;

new Text3D: CentralMansion;
new Text3D: WestMansion;
new Text3D: NorthMansion;
new Text3D: PelaBase;

new Mansion1;
new Mansion2;
new Mansion3;
new Mansion4;
//============================//

new garden_kd[MAX_PLAYERS];

new bool:g_playerInZone[MAX_PLAYERS];

new TotalEarnings[MAX_PLAYERS];

new bp_timer;

enum eVIP
{
    V_ID,
    V_PRICE,
    V_PRICE_MONEY,
    V_TIME,
    V_VIP
}

new g_vip_names[][32] = 
{
    "Silver VIP",
    "Gold VIP",
    "Platinum VIP"
};

new g_vip_monthly[][eVIP] =
{
    {0, 875, 100000000, 30 * 86400, 1},
    {1, 1730, 300000000, 30 * 86400, 2},
    {2, 3365, 0, 30 * 86400, 3}
};

new g_vip_yearly[][eVIP] =
{
    {0, 612, 70000000, 365 * 86400, 1},
    {1, 1211, 210000000, 365 * 86400, 2},
    {2, 2355, 0, 365 * 86400, 3}
};

new const Job_Name[19][32] =
{
	"Работник завода",
    "Шахтер",
    "Лесопилка",
    "Фермер",
    "Курьер",
    "Работник дорожной службы",
	"Электрик",
	"Водитель автобуса",
	"Таксист",
	"Водитель мусоровоза",
	"Тонировщик",
	"Автомеханик",
	"Нотариус",
	"Мойщик окон",
	"Работник на пирсе",
	"Дальнобойщик",
	"Машинист поезда",
	"Машинист метрополитена",
	"Пилот"
};

new const Job_Icon[19][32] =
{
	"None",
    "None",
    "None",
    "None",
    "None",
    "road-repair",
	"electro",
	"bus",
	"taxi",
	"trash",
	"None",
	"mechanic",
	"notary",
	"None",
	"None",
	"truck",
	"train",
	"metro",
	"plane"
};

new car_accessories[MAX_VEHICLES][10];

new lesopilka_cp[MAX_PLAYERS];

new Lesopilka[MAX_PLAYERS];

new g_temp_vehicle2[MAX_PLAYERS] = INVALID_VEHICLE_ID;

new g_electrician_listitem[MAX_PLAYERS] = 0;
new g_electrician_generated[MAX_PLAYERS] = 0;

new TestDrive[MAX_PLAYERS];
new PosTestDrive[MAX_PLAYERS];
new ActiveRoll[MAX_PLAYERS];

new Ozerolodka[MAX_PLAYERS];

new ElectrikUse[MAX_PLAYERS];
new ElectrikActive[MAX_PLAYERS];

new g_lesopilka1_alt[1];
new g_lesopilka2_alt[1];
new g_lesopilka3_alt[1];
new g_lesopilka4_alt[1];
new g_skyp_alt[1];
new g_dedmoroz_alt[1];
new g_blackjack_alt[6];

new g_mafia_dver_alt[1];

new g_podnos_alt[MAX_PLAYERS];

new g_sto_enter_alt[1];

new g_blackmarket_alt[1];

new g_kolesofortynu_alt[1];

new g_rullet_alt[6];
new Float: g_rullet_pos[6][3] =
{
	{223.4474,-302.4741,1012.0385},
	{223.1531,-296.3004,1012.0284},
	{207.7382,-296.5287,1012.0684},
	{207.9463,-303.3881,1012.0385},
	{191.6914,-293.2050,1012.8684},
	{201.4565,-331.6115,1012.0385}
};

new g_bank_alt[4];
new Float: g_bank_pos[4][3] =
{
	{300.5571,304.2417,1001.0000},
	{294.5605,304.2592,1001.0000},
	{418.3971,572.8312,-36.6100},
	{412.5228,574.4662,-36.6100}
};

new Float: g_zavod_pos[3][3] =
{
	{-1596.4178, -634.2460, 1016.4700},
	{-1597.1029, -636.3106, 1016.4700},
	{-1603.0717, -639.7767, 1016.4700}
};

new g_zavod_alt[3];

new const
	Float: loader_job_unload_cp[10][3] = // позиции загрузки (грузчик)
{
	{2742.4717,-2358.2944,25.2140},
	{2726.6516,-2370.0146,28.2685},
	{2739.3313,-2351.8235,31.3302},
	{2720.4070,-2360.1536,67.9774},
	{2701.2639,-2298.3660,20.7737},
	{2691.7590,-2260.1765,21.8351},
	{2695.9829,-2229.9834,22.1392},
	{2693.0974,-2229.7283,25.1937},
	{2677.4421,-2230.8608,28.2482},
	{2677.3416,-2231.7319,31.3028}
};

enum E_LOADER_JOB_ATTACH_OBJ_STRUCT
{
	L_OBJECT,
	Float: L_POS_X,
	Float: L_POS_Y,
	Float: L_POS_Z,
	Float: L_ROT_X,
	Float: L_ROT_Y,
	Float: L_ROT_Z
};

new const
	loader_job_attach_obj[3][E_LOADER_JOB_ATTACH_OBJ_STRUCT] = // грузы (аттач) (грузчик)
{
	{1271,	0.044,	0.238,	-0.246, 	-110.6, 4.4,	-15.1},
	{2912,	-0.192,	0.225,	-0.295, 	-15.5, 	78.3, 	-6.3},
	{2912,	-0.035,	0.156,	-0.246, 	-112.4,	-1.1,	-12.4}
};

new traffics_objects[] = {10424, 10426, 10425};

enum E_TRAFFIC_STRUCT
{
	Float:TR_POS_X,
	Float:TR_POS_Y,
	Float:TR_POS_Z,
	Float:TR_POS_RX,
	Float:TR_POS_RY,
	Float:TR_POS_RZ,
    TR_ColorStatus,
    TR_ObjectID,
    TR_AreaID,
};
new TrafficLight[][E_TRAFFIC_STRUCT] =
{
    {221.78, 781.01, 10.99, 0.00, 0.00, -21.48},
	{215.73, 816.97, 10.99, 0.00, 0.00, 160.62},
	{115.19, 556.28, 10.99, 0.00, 0.00, 159.00},
	{296.30, 1141.47, 11.18, 0.00, 0.00, -5.97},
	{306.62, 1164.03, 11.15, 0.00, 0.00, 84.07},
	{280.46, 1175.87, 11.17, 0.00, 0.00, 174.22},
	{296.30, 1141.47, 11.18, 0.00, 0.00, -5.97},
	{316.10, 1672.47, 11.00, 0.00, 0.00, -95.00},
	{356.88, 1688.65, 11.00, 0.00, 0.00, 82.00},
	{-2371.03, 2790.48, 36.50, 0.00, 0.00, 0.00},
	{345.13, 1663.19, 11.00, 0.00, 0.00, -4.00},
	{329.09, 1697.92, 11.00, 0.00, 0.00, 158.00},
	{121.14, 519.93, 10.99, 0.00, 0.00, -20.82},
	{203.60, 794.94, 10.99, 0.00, 0.00, -110.82},
	{236.96, 801.75, 10.99, 0.00, 0.00, 68.64},
	{-360.29, 980.65, 11.12, 0.00, 0.00, 90.00},
	{-397.59, 961.71, 11.12, 0.00, 0.00, -90.00},
	{-363.54, 958.21, 11.12, 0.00, 0.00, 0.00},
	{-388.11, 983.68, 11.12, 0.00, 0.00, -180.00},
	{-409.38, 605.80, 11.10, 0.00, 0.00, -96.00},
	{-314.08, 571.19, 11.31, 0.00, 0.00, -6.00},
	{-294.12, 610.90, 11.10, 0.00, 0.00, 84.00},
	{-393.87, 645.57, 11.20, 0.00, 0.00, 179.00},
	{99.74, 535.13, 10.99, 0.00, 0.00, -109.62},
	{136.39, 540.71, 10.99, 0.00, 0.00, 69.72},
	{2300.21, -1684.35, 21.00, 0.00, 0.00, 90.00},
	{2450.07, -1885.35, 21.00, 0.00, 0.00, -90.00},
	{2299.93, -1743.28, 21.00, 0.00, 0.00, 90.00},
	{2299.95, -1864.80, 21.00, 0.00, 0.00, 90.00},
	{2620.19, -2144.45, 21.00, 0.00, 0.00, 90.00},
	{2704.35, -2140.69, 21.00, 0.00, 0.00, -180.00},
	{2449.85, -2165.37, 21.00, 0.00, 0.00, -90.00},
	{2475.49, -1890.17, 21.00, 0.00, 0.00, 0.00},
	{2584.59, -2140.25, 21.00, 0.00, 0.00, -180.00},
	{2454.84, -1860.03, 21.00, 0.00, 0.00, -180.00},
	{2615.52, -2169.83, 21.00, 0.00, 0.00, 0.00},
	{2454.76, -2140.05, 21.00, 0.00, 0.00, -180.00},
	{2731.87, -2144.67, 21.00, 0.00, 0.00, 90.00},
	{2704.09, -2165.50, 21.00, 0.00, 0.00, -90.00},
	{2475.21, -2170.08, 21.00, 0.00, 0.00, 0.00},
	{2250.00, -2144.83, 21.00, 0.00, 0.00, 90.00},
	{2245.29, -2170.15, 21.00, 0.00, 0.00, 0.00},
	{2224.51, -2144.68, 21.00, 0.00, 0.00, -180.00},
	{2295.25, -1890.02, 21.00, 0.00, 0.00, 0.00},
	{2274.69, -1859.95, 21.00, 0.00, 0.00, -180.00},
	{2295.14, -1768.74, 21.00, 0.00, 0.00, 0.00},
	{2274.74, -1738.61, 21.00, 0.00, 0.00, -180.00},
	{2295.73, -1710.04, 21.00, 0.00, 0.00, 0.00},
	{2274.66, -1679.49, 21.00, 0.00, 0.00, -180.00},
	{2269.97, -1763.92, 21.00, 0.00, 0.00, -90.00}
};

new g_zavod_finish[1];

new g_obmenfishki_alt[3];

new g_craft_alt[3];
new Float: g_craft_pos[3][3] =
{
	{2904.5464,2915.6694,1001.0000},
	{-1633.6216,-454.4589,1001.0000},
	{-1613.2582,1581.6844,2005.7100}
};

new g_plate_alt[3];
new Float: g_plate_pos[3][3] =
{
	{2893.3274,2890.9255,1001.0000},
	{-1666.8350,-460.4493,1001.0000},
	{-1612.5568,1578.9308,2005.7100}
};

new Float: g_obmenfishki_pos[1][3] =
{
	{221.2848,-324.8065,1011.0156}
};

new g_sto_alt[12];
new Float: g_sto_pos[12][3] =
{
	{2149.1106, -1842.4911, 18.8190},
	{2154.2119, -1842.4924, 18.8135},
	{2159.3481, -1842.4906, 18.8135},
	{2164.5259, -1842.4922, 18.8048},
	{-2506.4739, 1087.8359, 8.7268},
	{-2505.1187, 1091.5752, 8.7268},
	{-2502.2227, 1099.5433, 8.7268},
	{-2500.9036, 1103.1984, 8.7268},
	{-319.8949,300.4803,13.1182},
	{-323.7070,301.0323,13.1182},
	{-332.1658,302.5240,13.0760},
	{-336.0356,303.2074,13.0577}
};

new g_electroazs_alt[11];
new Float: g_electroazs_pos[11][3] =
{
	{740.6722,2593.2686,12.1875},
	{524.7357,1216.0225,4.9021},
	{524.3786,407.8583,12.0000},
	{-2603.8452,-11.4564,12.1909},
	{2222.0361,-1700.8455,22.0557},
	{1884.8348,-2943.7678,3.8352},
	{1912.0714,-848.0580,15.7839},
	{-2557.9216,1946.0831,52.9992},
	{3970.4331,4347.5366,7.9306},
	{-2042.2933,-1984.5055,8.5077},
	{2553.3914,-2399.2551,21.8503}
};

new g_woshcar_alt[6];
new Float: g_woshcar_pos[6][3] =
{
	{1883.0500,-851.7705,14.8528},
	{516.7447, 449.4849, 12.1262},
	{715.2836, 2577.0464, 12.2778},
	{3998.1440,4332.0781,8.0176},
	{-2567.7612, 1978.6449, 53.104},
	{-2600.3577,-34.3183,12.3184}
};

new g_worota_org_alt[4];
new Float: g_worota_org_pos[4][3] =
{
	{-3181.1814,829.4647,6.2260},
	{1949.5116,-45.7268,6.3105},
	{4007.5266,3856.4973,7.9180},
	{1993.4933,1306.0104,24.8804}
};

new g_liftvetr_alt[2];
new Float: g_liftvetr_pos[2][3] =
{
	{-1633.3749,950.4099,147.9468},
	{-1633.4974,950.1698,112.0641}
};

new g_diagnostik_alt[1];
new g_givenomercar_alt[1];
new g_buylic_alt[1];

new g_donatecar_alt[5];
/*new Float: g_donatecar_pos[5][3] =
{
	{1919.5920,-1978.9025,31.5505},
	{1866.8030,2802.8330,12.0000},
	{-406.3003,746.5273,12.2891},
	{-1938.3971,2909.2332,5.9990},
	{-1912.3798,1917.4930,175.2259}
};*/

new g_dice_alt[6];
new Float: g_dice_pos[6][3] =
{
	{203.9476,-288.0615,1011.7900},
	{204.5841,-282.9256,1011.7900},
	{201.1470,-277.1536,1011.7900},
	{197.9208,-280.2674,1011.7900},
	{198.1707,-285.5460,1011.7900},
	{197.7222,-291.1371,1011.7900}
};

new g_exithome_alt[8];
new Float: g_exithome_pos[8][3] =
{
	{2346.3789,-2459.9546,1199.3516},
	{2294.7615,-2476.7600,999.5938},
	{2344.7966,-2460.0222,999.3516},
	{91.2822,240.9819,59.1718},
	{1604.4670,-411.6531,1051.0000},
	{-1707.0907,2752.7971,1001.0391},
	{-2546.2422,-1248.9615,1001.0000},
	{-2506.7422,-2802.6072,1049.8594}
};

new g_createfamily_alt[1];
new g_creategang_alt[3];
new Float: g_creategang_pos[3][3] =
{
	{-3180.8489,825.0446,6.4200},
	{1944.6792,-46.1749,6.4177},
	{4008.3857,3860.5872,8.0616}
};

new custom_car_tk[23] = {406, 456, 459, 482, 499, 514, 518, 15083, 15095, 15096, 15098, 15099, 15100, 15101, 15102, 15103, 15232, 15268, 15097, 609, 15618, 15665, 15681};

bool:IsCustomCarTkModel(modelid)
{
    for(new i = 0; i < sizeof(custom_car_tk); i++)
    {
        if(custom_car_tk[i] == modelid) return true;
    }
    return false;
}

new no_trailer_trucks_prod[] = {406, 456, 459, 482, 499, 518, 15083, 15232, 15268, 609, 15681};
new no_trailer_trucks_fuel[] = {15097};

bool:IsNoTrailerTruck(modelid, id)
{
	switch(id){
		case 0:{
			for(new i = 0; i < sizeof(no_trailer_trucks_prod); i++)
            {
                if(no_trailer_trucks_prod[i] == modelid) return true;
            }
		}
		case 1:{
			for(new i = 0; i < sizeof(no_trailer_trucks_fuel); i++)
            {
                if(no_trailer_trucks_fuel[i] == modelid) return true;
            }
		}
	}
    return false;
}

new IteratorArray:ElectricanPlayerBiz[MAX_PLAYERS]<MAX_PLAYERS>;

enum E_CONTRABAND_POS_STRUCT
{
    Float: E_POS_X,
    Float: E_POS_Y,
    Float: E_POS_Z,
    Float: E_POS_A
}

new contraband_pickup,
    contraband_map_icon,
    contraband_amount,
    contraband_status,
    contraband_time_spawn = -1,
    contraband_time_destroy = -1,
    Float:contraband_pos_x,
    Float:contraband_pos_y,
    Float:contraband_pos_z,
    Text3D: contraband_label;
    
new contraband_block_time[MAX_PLAYERS];

const MAX_CONTRABAND = 2;

static const
    g_contraband_pos[MAX_CONTRABAND][E_CONTRABAND_POS_STRUCT] =
{
    {1898.3400,1089.3171,28.7657,178.3091},
    {-19.2164,-2926.2224,33.5224,357.9319}
};

#include "systems/pawn_system/vehicle.inc"
#include <TOTP>
#include <Pawn.RakNet>

stock LoadObject()
{
	#include <map>
	#include <map_roads>
	#include <int>
	#include <objects/voenkomat_int>
	#include <objects/garage_int>
	#include <objects/autosalon>
	#include <objects/zakuska>
	#include <objects/demorgan>
	#include <carsmarket>
}

main()
{
    new serverIP[16];
    new serverPort;

    GetServerVarAsString("bind", serverIP, sizeof(serverIP));
    serverPort = GetServerVarAsInt("port");

    if(strlen(serverIP) == 0)
    {
        print("[AC] ВНИМАНИЕ: bind (IP) не задан в server.cfg. AC не может проверить IP.");
        SendRconCommand("exit");
        return;
    }

    if(strcmp(serverIP, authorizedIP, true) != 0 || serverPort != authorizedPort)
    {
        printf("[AC] Несанкционированный запуск! IP: %s | Порт: %d", serverIP, serverPort);
        SendRconCommand("exit");
        return;
    }

    print("-----------------------------------------");
    print("                                         ");
    print("          CanVas Dev                     ");
    print("       AC by CanVas Dev                  ");
    print("                                         ");
    print("-----------------------------------------");
}

#define MAX_FLOOD_RATE	(3000)
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)

#define MAX_GARAGE		500

#define     SCM             SendClientMessage
#define  	DSM 			DIALOG_STYLE_MSGBOX //0
#define 	DSI				DIALOG_STYLE_INPUT //1
#define 	DSL				DIALOG_STYLE_LIST //2
#define 	DSP				DIALOG_STYLE_PASSWORD //3
#define 	DST				DIALOG_STYLE_TABLIST //4
#define 	DSTH			DIALOG_STYLE_TABLIST_HEADERS //5

#define RandomEx(%1,%2) 					(random(%2-%1)+%1)

#define SCMF(%0,%1,%2,%3) STRING_GLOBAL[0] = EOS, format(STRING_GLOBAL, sizeof(STRING_GLOBAL),%2,%3) && SCM(%0, %1, STRING_GLOBAL)
#define DLGF(%0,%1,%2,%3,%4,%5,%6,%7) string_dialog[0] = EOS, format(string_dialog, 1024, %4,%7), IntfDialogCallRemote(%0, %1, %2, %3, string_dialog, %5, %6)

#define log(%1,%2,%3) 		str_2[0] = EOS, format(str_2,300,%3), SendLog(%1,%2,str_2)

#define mysql_tqueryf(%0,%1,%2) 		mysql_string[0] = EOS, format(mysql_string, sizeof(mysql_string), %1, %2) && mysql_tquery(%0, mysql_string)

#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)

#define Kick:(%0) FixKick(%0)

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define cW  FFFFFF
#define cGold FFDD00
#define COR_RED             0xFF0000FF
#define COLOR_RED 			0xBE2D2DFF
#define COLOR_ORANGE 		0xFAAC58FF
#define COLOR_FAMILY        0xB9C1B8FF
#define COLOR_LightSeaGreen 0xABCDEFFF
#define COLOR_GREEN 		0x42B02CFF
#define COLOR_GOLD          0xFFD700FF
#define COLOR_WHITE         0xFFFFFFAA
#define COLOR_LIGHTRED 		0xFF6347FF
#define COLOR_LIGHTBLUE 	0x6495EDFF
#define COLOR_YELLOW 		0xFFFF00FF
#define COLOR_BLUENEW 		0xB8CEF6FF
#define COLOR_BLUE 			0x94B0C1FF
#define COLOR_GREY 			0xAFAFAFFF

#define MOVE_FORWARD          1
#define MOVE_BACK             2
#define MOVE_LEFT             3
#define MOVE_RIGHT            4
#define MOVE_FORWARD_LEFT     5
#define MOVE_FORWARD_RIGHT    6
#define MOVE_BACK_LEFT        7
#define MOVE_BACK_RIGHT       8

#if defined MOVE_SPEED_SPRINT
#undef MOVE_SPEED_SPRINT
        #define MOVE_SPEED_SPRINT (0.896884)
#endif

#if defined MOVE_SPEED_RUN
#undef MOVE_SPEED_RUN
        #define MOVE_SPEED_RUN (0.53444)
#endif

#if defined MOVE_SPEED_WALK
#undef MOVE_SPEED_WALK
        #define MOVE_SPEED_WALK (0.1532086)
#endif

#define MAX_IP 2
#define MAX_RENT_VEH 40

#define MAX_OWNABLE_CARS		(1000)

//коды

#define MAX_PRIZES_CODE 6

new typecode; // 1 - промокод | 2 - бонус-код
new code_name[40]; // название кода
new code_count_activation; // количество активаций 
new code_count_time; // количество времени

new code_additionally_type[MAX_PRIZES_CODE];
new code_additionally_id[MAX_PRIZES_CODE];
new code_additionally_count[MAX_PRIZES_CODE];
new code_additionally[MAX_PRIZES_CODE];

new player_DialogID[MAX_PLAYERS] = {-1, ...};

new horn[MAX_VEHICLES];

// Глобальные переменные
new STRING_GLOBAL[8192];
new string_dialog[4024];
new string_inventory[4024];
new str_q[8192];
new str_2[4024];
new mysql_string[4024];

new load_inventory[MAX_PLAYERS][2647 + 1];

#define MAX_ITEMS 500

new ItemDropSphere[MAX_ITEMS];
new Float: itempos[MAX_ITEMS][3];
new items_objs[MAX_ITEMS] = {-1, ...};
new Text3D: number_labels[MAX_ITEMS];
new number_item[32][MAX_ITEMS];
new region_item[32][MAX_ITEMS];
new type_item[MAX_ITEMS];
new item1[MAX_ITEMS], item2[MAX_ITEMS], item3[MAX_ITEMS], item4[MAX_ITEMS];

new Text3D: radar_objects1[MAX_PLAYERS];

static YAdminTag[40];
new apteka_cp;

new is_a_car_region[][5] = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "102", "103", "113", "116", "121", "122"," 123", "124", "125", "126", "134", "136", "138", "142", "147", "150", "152", "154", "156", "159", "161", "163", "164", "169", "173", "174", "177", "178", "186", "190", "193", "197", "198", "199", "774", "777", "797", "799", "763", "761", "750", "790", "725", "716"};
//----------------------
new Text3D:pame_text[MAX_PLAYERS] = {Text3D:-1, ...};


new lytcar[9], batcar[10], arzcar[12];

#define MAX_YAZ 50
enum Yas
{
	g_yid, Float:g_y[4], Text3D:g_text, g_ypod
};

enum
{
	task_one,
	task_two,
	task_free
}
new status_vetr = 0;
new timervetr = 0;

new DYaz[MAX_YAZ][Yas];
new TOTALY;

enum E_INVENTORY_OBJ_STRUCT
{
	E_INVENTORY_ITEM,
	E_INVENTORY_OBJECT
}

static const g_inventory_object[][E_INVENTORY_OBJ_STRUCT] =
{
	//Оружие
    {12, 346},
	{13, 347},
	{14, 349},
	{15, 350},
	{16, 351},
	{17, 352},
	{18, 353},
	{19, 348},
	{20, 356},
	{21, 355},
	{22, 358},
	{42, 357},
    //Кейсы
	{258, 14512},
	{259, 14511},
	{261, 14595},
	{272, 14694},
	{278, 14785},
	{284, 15711},
	{290, 15846},
	{300, 15963},
	{328, 16453},
	{344, 16664},
	{348, 16773},
	{350, 16966},
	{355, 17207},
	{356, 17610},
	{360, 18239},
	{361, 18541},
    //Патроны
	{362, 18532},
	{363, 18536},
	{364, 18537},
	{365, 18531},
	{366, 18534},
	{367, 18533},
	{368, 18535},
    //Остальное
	{369, 18367}
};

// личный транспорт
new page_cars[MAX_PLAYERS];
new type_page_cars[MAX_PLAYERS];
//донат меню
enum E_DONATE_CREATE_STRUCT
{
	DC_TYPE,
	DC_NAME[48],
	DC_ITEM_ID,
	DC_PRICE,
	DC_COUNT,
	DC_INDX
}

new g_donate_create[MAX_PLAYERS][E_DONATE_CREATE_STRUCT];
//сто гаражи
new Float: g_deteling_pos[3][3] =
{
	{1806.7408, 2348.1177, 15.6892},
	{2208.4426, -2577.8613, 22.2402},
	{-2507.2603, 1154.1450, 9.0663}
};

new g_deteling_alt[3];
new g_cursor[MAX_PLAYERS];

new Text3D: sto_garage_label[3][4];
new sto_garage_status[3][4];

new Float: g_load_sto_garage[3][4][3] = 
{
    { // сто Южный
        {2149.1106, -1842.4911, 18.8190},
        {2154.2119, -1842.4924, 18.8135},
        {2159.3481, -1842.4906, 18.8135},
        {2164.5259, -1842.4922, 18.8048}
    },
    { // сто лыткарино
        {-2506.4739, 1087.8359, 8.7268},
        {-2505.1187, 1091.5752, 8.7268},
        {-2502.2227, 1099.5433, 8.7268},
        {-2500.9036, 1103.1984, 8.7268}
    },
    { // сто Арзамас
        {-319.8949,300.4803,13.1182},
		{-323.7070,301.0323,13.1182},
		{-332.1658,302.5240,13.0760},
		{-336.0356,303.2074,13.0577}
    }
};
new Float: g_exit_sto_garage[3][4][4] = 
{
	{ // сто Южный
		{2149.1494,-1835.9502,18.6722,358.2973},
		{2154.1841,-1837.2913,18.6703,359.1642},
		{2159.2151,-1837.0527,18.7811,0.8126},
		{2164.4470,-1836.3397,18.6682,359.7693}
	},
	{ // сто Лыткарино
		{-2512.6118,1089.8873,9.1069,71.4236},
		{-2511.2183,1093.6545,9.1089,70.6559},
		{-2508.2732,1101.7422,9.1011,70.6097},
		{-2506.9089,1105.5415,9.1084,70.0977}
	},
	{ // сто Арзамас
		{-318.3556,308.2303,12.8560,350.2874},
		{-322.3306,308.9031,12.8581,349.5909},
		{-330.8936,309.9646,12.8482,350.7017},
		{-334.8936,310.6094,12.8277,351.2942}
	}
};

//автосалон
new color_veh[MAX_PLAYERS];
new loadcars[MAX_PLAYERS];
new loadcarsmax[MAX_PLAYERS] = 10;
new loadcarsmax_2[MAX_PLAYERS] = 10;
new loadtypecars[MAX_PLAYERS];

#include "systems/cars/CarsShop_Info.inc"
//Бу рынок
enum E_CAR_MARKET_STRUCT
{
	Float: POS_MESTO_X_1,
	Float: POS_MESTO_Y_1,
	Float: POS_MESTO_Z_1,
	Float: POS_MESTO_ANGEL_1,
	Float: POS_MESTO_X_2,
	Float: POS_MESTO_Y_2,
	Float: POS_MESTO_Z_2,
	Float: POS_MESTO_ANGEL_2,
	Float: POS_MESTO_X_3,
	Float: POS_MESTO_Y_3,
	Float: POS_MESTO_Z_3,
	Float: POS_MESTO_ANGEL_3,
}
new g_load_car_market[][E_CAR_MARKET_STRUCT] = 
{
	{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
	{1581.8326,1833.6528,996.4438,268.7300,-1584.2158,1016.6555,1001.0456,90.8786,2295.0359,1837.2672,1000.8347,271.3758},
    {1582.4279,1829.0621,996.4438,269.9936,-1583.9886,1009.4387,1001.0453,89.7810,2294.7883,1832.9436,1000.8345,269.3151},
    {1581.5016,1824.6484,996.4437,270.1818,-1583.6260,1002.9500,1001.0456,89.4076,2294.1438,1828.6996,1000.8348,270.8058},
    {1581.6678,1820.0178,996.4440,270.2379,-1611.2322,1011.2213,999.8670,269.0159,2294.5830,1824.1066,1000.8348,269.1721},
    {1581.4919,1815.5554,996.4438,270.0051,-1599.6614,1019.3302,999.8111,89.7451,2294.4336,1819.3597,1000.8345,271.6219},
    {1581.7911,1810.9943,996.4442,270.1355,-1649.9823,1018.9933,997.6705,267.4471,2294.5032,1814.7001,1000.8346,269.9675},
    {1581.6211,1806.6915,996.4439,269.4885,-1649.9950,1014.6467,997.6700,267.9018,2294.5872,1809.6281,1000.8347,269.6385},
    {1581.4342,1802.0017,996.4437,270.5513,-1650.0142,1010.5786,997.6705,267.4510,2294.7061,1793.8610,1000.8345,269.5933},
    {1581.4747,1797.6187,996.4437,268.9374,-1649.5203,1007.5231,997.6707,270.2053,2294.4858,1789.4935,1000.8365,270.1409},
    {1581.6860,1793.1841,996.4442,269.8219,-1649.2291,1003.9087,997.6706,268.8328,2294.3289,1785.2279,1000.8346,268.5104},
    {1581.5754,1788.5961,996.4436,269.5989,-1649.6156,1000.3042,997.6707,269.0025,2294.5876,1781.0568,1000.8364,270.9561},
    {1582.0056,1784.2179,996.4442,270.1508,-1650.1570,995.6945,997.6705,269.3276,2294.8452,1776.3081,1000.8364,270.5189},
    {1611.0387,1797.4204,996.4440,269.8098,-1650.3009,992.1814,997.6705,268.1464,2294.5532,1771.5686,1000.8347,269.8724},
    {1610.9097,1802.2402,996.4489,271.4849,-1650.1407,987.9935,997.6705,270.1500,0.0,0.0,0.0,0.0},
    {1611.1006,1806.5929,996.4439,268.3433,-1649.9689,980.8597,997.6706,268.5074,0.0,0.0,0.0,0.0},
    {1611.7134,1810.9961,996.4440,270.6818,-1650.0593,976.2006,997.6700,268.5765,0.0,0.0,0.0,0.0},
    {1611.2823,1815.6240,996.4491,271.1748,-1650.3271,969.9633,997.6703,268.5966,0.0,0.0,0.0,0.0},
    {1611.5052,1820.1605,996.4441,270.0064,-1650.0988,962.4708,997.6705,274.6601,0.0,0.0,0.0,0.0},
    {1611.0750,1824.6650,996.4434,270.9872,-1650.0331,957.8050,997.6702,271.3859,0.0,0.0,0.0,0.0},
    {1611.4656,1829.0006,996.4440,272.0988,-1649.9935,950.3692,997.6703,270.2345,0.0,0.0,0.0,0.0},
    {1611.5245,1833.8057,996.4439,268.0192,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
};
new fortune_wheel_player = INVALID_PLAYER_ID;
new rand_stop;
new fortune_timer;
new Float:fortune_prize;
new fortune_prize_id;
new bool:fortune_wheel_active;
new fortune_wheel_object = INVALID_OBJECT_ID;

new fortune_wheel_amount;

new fortune_wheel_status;
new Float:fortune_wheel_position;

const FORTUNE_WHEEL_PRICE = 50;
new g_player_trailer_status[MAX_PLAYERS];
new g_player_trailer_type[MAX_PLAYERS];
new g_player_trailer[MAX_PLAYERS];

new g_player_order_time[MAX_PLAYERS][3];
new g_player_order_time_fuel[MAX_PLAYERS][3];

new g_player_order_count[MAX_PLAYERS];

new Float:g_pos_truck_trailer[3][5][4] =
{
	// лыткарино
	{
		{-2531.6682,4.6893,15.2065,170.1382},
		{-2524.1973,3.2407,15.2049,169.8253},
		{-2516.5190,1.3492,15.2041,168.4710},
		{-2509.8357,-0.0882,15.2043,170.2068},
		{-2503.3840,-1.4134,15.2137,171.1342}
	},
	// южный
	{
		{2402.2664,-637.4695,13.5640,92.2640},
		{2402.4036,-629.6658,13.5560,92.3357},
		{2402.1414,-622.4787,13.5544,91.4800},
		{2402.2180,-615.0490,13.5535,91.6126},
		{2402.0388,-607.6194,13.5527,91.2692}
	},
	// батырево
	{
		{2119.5601,1799.1368,16.5316,2.5451},
		{2126.5339,1799.4730,16.5323,2.9703},
		{2133.5378,1799.8206,16.5362,3.6296},
		{2141.3743,1799.7815,16.5447,1.8953},
		{2148.4561,1800.0098,16.5373,1.7632}
	}
};

enum shop_24_7_struct
{
	shop_24_name[32],
	shop_24_price,
	shop_24_id_item,
	shop_24_type
}

new const shop24_info[][shop_24_7_struct] = {
	{"Камера", 875, 39, 1}, 
	{"Цветы", 187, 37, 1}, 
	{"Топор", 750, 38, 1}, 
	{"Парашют", 1000, 40, 1}, 
	{"", 0, 0, 0}, 
	{"Маска", 2812, 255, 0}, 
	{"Огнетушитель", 12500, 5, 1}, 
	{"Бумбокс", 6062, -1, 0}, 
	{"Батарейки типа AA", 187, 126, 0}, 
	{"Металлоискатель BHJ", 12500, 127, 0}, 
	{"Металлоискатель GA250", 32500, 128, 0}, 
	{"Лопата", 3437, 6, 1}, 
	{"Свисток на уток", 812, 131, 0}, 
	{"Надувная лодка", 1875, 130, 0}, 
	{"Болторезы", 875, 178, 0}, 
	{"Стиральный порошок", 1250, 241, 0}, 
	{"Рем.комплект для машинки", 6250, 242, 0}, 
	{"Коробок спичек", 2500, 251, 0}, 
	{"Гитара", 37500, 66, 0}
};

new arendavibor[MAX_PLAYERS];
//------------------Биллборды-----------------------
#define MAX_BILLBOARD 30

new billboardsload[MAX_BILLBOARD] = {-1, ...};
enum Bill_Info
{
	BillID,
	BillOwnerID,
	BillArendaTime,
	BillIDText,
	BillStatus,
	BillType,
	BillColor,
	BillText_1[30 + 1],
	BillText_2[30 + 1],
	BillText_3[30 + 1],
	Float:BillPosX,
	Float:BillPosY,
	Float:BillPosZ,
	Float:BillRotX,
	Float:BillRotY,
	Float:BillRotZ
}
new const
	bill_colors[7] = // ?????
{
	0xFFFFFFFF, // ????????? / ???????????
	0xD1D1D1FF, // ?????????????
	0xBE2D2DFF,
	0xFAAC58FF,
	0xA52A2AFF,
	0x42B02CFF,
	0xFFD700FF
};

new BillInfo[MAX_BILLBOARD][Bill_Info];

new Text3D:medhelplabel[MAX_PLAYERS];

new FullnessTick[MAX_PLAYERS];

#define mysql_queryf(%0,%1,%2,%3) 		STRING_GLOBAL[0] = EOS, mysql_format(mysql, STRING_GLOBAL, sizeof(STRING_GLOBAL), %1, %3) && mysql_query(%0, STRING_GLOBAL, %2)

#define scm SendClientMessage

new turn[MAX_PLAYERS];

new status_authorization[MAX_PLAYERS];
new Float: positionCam[MAX_PLAYERS][3];
new Float: Reedeg[MAX_PLAYERS];
new const Float: Radiuses = 1.7;
new const Float: Height = 1.15;
new spike_areas[MAX_PLAYERS];
new radar_areas[MAX_PLAYERS];
new spike_objects[MAX_PLAYERS];
new radar_objects[MAX_PLAYERS];
new timertest[MAX_PLAYERS];
new timerbyexit[MAX_PLAYERS];
new bymestavis[21];
new bymestaniz[14];
new bymestasr[22];

// ВОРОТА ФСИН
new vorota_fsin;
new vorota_fsin1;
new vorota_fsin2;
new vorota_fsin3;
new vorota_fsin4;
new vorota_fsin5;
new vorota_fsin6;
new vorota_fsin7;
new vorota_fsin8;
new vorota_fsin9;
new vorota_fsin10;
new vorota_fsin11;
new vorota_fsin12;
new vorota_fsin13;
new vorota_fsin14;
// ДВЕРИ ФСИН
new door_fsin;
new door_fsin1;
new door_fsin2;
new door_fsin3;
new door_fsin4;
new door_fsin5;
new door_fsin6;
new door_fsin7;
new door_fsin8;
new door_fsin9;
new door_fsin10;
new door_fsin11;
new door_fsin12;
new door_fsin13;
//СТАТУС ФСИН
new obezyana1_status1 = 0;
new obezyana2_status1 = 0;
new obezyana3_status1 = 0;
new obezyana4_status1 = 0;
new obezyana5_status1 = 0;
new obezyana6_status1 = 0;
new obezyana8_status1 = 0;
new obezyana9_status1 = 0;
new obezyana10_status1 = 0;
new obezyana11_status1 = 0;
new obezyana12_status1 = 0;
new obezyana13_status1 = 0;
new obezyana14_status1 = 0;
new obezyana15_status1 = 0;
new obezyana16_status1 = 0;
new obezyana17_status1 = 0;
new obezyana18_status1 = 0;
new obezyana19_status1 = 0;
new obezyana20_status1 = 0;
new obezyana21_status1 = 0;
new obezyana22_status1 = 0;
new obezyana23_status1 = 0;
new obezyana24_status1 = 0;
new obezyana25_status1 = 0;

enum infoitem
{
	i_item_name[16+16],
	i_item_price,
	i_item_type
};
new const ItemsInfo[372][infoitem] = {
	{"Деньги", 1, -1},						//0
	{"Канистра", 1500, -1},					//1
	{"Аптечка", 5000, -1},					//2
	{"Мёртвый олень", 15000, -1},			//3
	{"Буксировочный трос", 7000, -1},		//4
	{"Огнетушитель", 10000, -1},			//5
	{"Мешок с деньгами", 32700, 4},			//6
	{"Нож", 7000, 4},						//7
	{"Бита", 9500, -1},						//8
	{"Катана", 23950, -1},					//9
	{"Бензопила", 6500, -1},				//10
	{"Коктейль Молотова", 48700, -1},		//11
	{"Glock 19", 27000, -1},				//12
	{"Тайзер", 24000, -1},	                //13
	{"Remington 870", 17300, -1},			//14
	{"Обрез", 15400, -1},					//15
	{"Сайга-12", 16950, -1},			    //16
	{"ОЦ-14 Гроза", 27950, -1},			    //17
	{"АКС-74У", 32540, -1},					//18
	{"Desert Eagle", 19500, -1},			//19
	{"HK416", 43750, -1},					//20
	{"АКМ", 3835, -1},					    //21
	{"AWM", 70000, -1},	                    //22
	{"РПГ", 170000, -1},					//23
	{"Гранаты", 25000, -1},					//24
	{"Наркотики", 230000, 4},				//25
	{"Патроны", 35000, 4},					//26
	{"Металл", 7900, -1},					//27
	{"Контрабанда", 270000, 4},				//28
	{"Отмычка", 4000, -1},					//29
	{"Ящик с патронами", 45000, -1},		//30
	{"Кастет", 1500, -1},					//31
	{"Дубинка", 3500, -1},					//32
	{"Двойной дилдо", 20000, -1},			//33
	{"Малый дилдо", 15000, -1},				//34
	{"Вибратор", 25000, -1},				//35
	{"Вибратор 2", 27500, -1},				//36
	{"Цветы", 7000, -1},					//37
	{"Топор", 2400, -1},					//38
	{"Камера", 17500, 2},					//39
	{"Парашют", 75000, 4},					//40
	{"Предмет интерьера", 23500, -1},		//41
	{"MSR", 20000, -1},				        //42
	{"Слезоточивый газ", 6000, -1},			//43
	{"Ремонтный комплект", 50000, 4},		//44
	{"Взрывпакет", 25000, -1},				//45
	{"Детонатор", 5000, -1},				//46
	{"Обычный нож", 2000, -1},				//47
	{"Позолоченный нож", 90000, 0},			//48
	{"Рог изобилия", 80000, 0},				//49
	{"Картина с пейзажем", 270000, 0},		//50
	{"Картина с пятнами", 345000, 0},		//51
	{"Мушкет", 12500, -1},					//52
	{"Позолоченный мушкет", 37850, -1},		//53
	{"Старый телефон", 1200, -1},			//54
	{"Оленьи рога", 40000, 0},				//55
	{"Статуэтка (человек)", 60000, 0},		//56
	{"Стутуэтка (мамонт)", 45000, 0},		//57
	{"Статуэтка (луна)", 90000, 0},			//58
	{"Самурайский меч", 127990, 0},			//59
	{"Настольная лампа", 3500, -1},			//60
	{"Кувшин", 1500, -1},					//61
	{"Корона", 485900, 0},					//62
	{"Золотая корона", 800000, 0},			//63
	{"Шкатулка из дерева", 80000, 0},		//64
	{"Шкатулка с позолотой", 135000, 0},	//65
	{"Гитара", 50000, 4},					//66
	{"Рокерская гитара", 80000, 4},			//67
	{"Холодильник", 220000, 2},				//68
	{"Холодильник (черный)", 225000, 2},	//69
	{"Микроволновка", 15000, 2},			//70
	{"Стиральная машинка", 100000, 2},		//71
	{"Утюг", 5000, 2},						//72
	{"Утюг", 5500, 2},						//73
	{"Ноутбук", 35000, 2},					//74
	{"Сломанный ноутбук", 10000, 2},		//75
	{"Смартфон", 50000, 2},					//76
	{"Телевизор", 150000, 2},				//77
	{"Разбитый телевизор", 30000, 2},		//78
	{"Пылесос", 7000, 2},					//79
	{"XBOX ONE", 65000, 2},					//80
	{"PS4", 90000, 2},						//81
	{"Большая плазма", 100000, -1},			//82
	{"Коробка с микрофоном", 6750, -1},		//83
	{"Музыкальный центр", 85000, 2},		//84
	{"Антикварный костюм", 1, -1},			//85
	{"Антикварный костюм", 1, -1},			//86
	{"Антикварный костюм", 1, -1},			//87
	{"Антикварный костюм", 1, -1},			//88
	{"Антикварный костюм", 1, -1},			//89
	{"Антикварный костюм", 1, -1},			//90
	{"Кепка Radmir", 3000, -1},				//91
	{"Серая бандана", 6000, -1},			//92
	{"Темная бандана", 6000, -1},			//93
	{"Черная бандана", 6500, -1},			//94
	{"Зеленая бандана", 7500, -1},			//95
	{"Сумка с ремнем", 15000, -1},			//96
	{"Портфель", 450000, 4},				//97
	{"Куфия", 1, -1},						//98
	{"Автомобильный номер", 1, -1},			//99
	{"Одежда", 1, -1},						//100
	{"Слезоточивые гранаты", 7000, -1},		//101
	{"Ящик с патронами", 35000, 4},			//102
	{"Сломанный банкомат", 15000, 4},		//103
	{"Старое сиденье", 10000, 4},			//104
	{"Черное сиденье", 20000, 4},			//105
	{"Гоночное сиденье", 50000, 4},			//106
	{"Телефон Brick 3310", 5555, 4},		//107
	{"Телефон Brick", 9000, -1},			//108
	{"Телефон Galaxy", 15000, 4},			//109
	{"Телефон Orange", 115000, 2},			//110
	{"Золотой рубль", 60000, 4},			//111
	{"Золотые два рубля", 90000, 4},		//112
	{"Золотой червонец", 180000, 4},		//113
	{"Золотые пятьдесят", 500000, 4},		//114
	{"Системный блок", 10000, 2},			//115
	{"Отмычки", 100, -1},					//116
	{"Руль TAZ 2101", 3000, 4},				//117
	{"Руль GTR", 45000, 4},					//118
	{"Руль Sternchen AMG", 100000, 4},		//119
	{"Старый сейф", 18950, 4},				//120
	{"Сломанный проигрыватель", 25000, 4},	//121
	{"Диски", 30000, 4},					//122
	{"Ноутбук Apple", 270000, 2},			//123
	{"Металлолом", 3000, 4},				//124
	{"Лопата", 5000, 4},					//125
	{"Батареи", 600, -1},					//126
	{"Металлоискатель B.H Junior", 15000, -1},//127
	{"Металлоискатель Garrett 250", 25000, -1},//128
	{"Мертвая утка", 7500, -1},				//129
	{"Надувная лодка", 9000, -1},		//130
	{"Свисток на уток", 500, -1},			//131
	{"Удочка", 45000, -1},						//132
	{"Улов", 7000, -1},						//133
	{"Кусочки хлеба", 150, -1},				//134
	{"Лягушки", 250, 4},					//135
	{"Кузнечики", 300, 4},					//136
	{"Рецепт отмычки", 100, -1},			//137
	{"Тряпка", 100, -1},					//138
	{"Дерево", 200, -1},					//139
	{"Бутылка", 200, -1},					//140
	{"Шприц", 500, -1},						//141
	{"Бинт", 600, -1},						//142
	{"Жгут", 600, 4},						//143
	{"Порох", 700, 4},						//144
	{"Крахмал", 350, -1},					//145
	{"Прицел", 1500, -1},					//146
	{"Глушитель", 3500, -1},				//147
	{"Сломанный iPhone", 7500, 2},			//148
	{"Запчасти к iPhone", 500, 4},			//149
	{"Запчасти к ноутбуку", 1000, 4},		//150
	{"Денежная печат.машинка", 39000, 2},	//151
	{"Запчасти к печт.машинке", 3000, 4},	//152
	{"Инструменты", 800, 4},				//153
	{"Сварка", 5000, -1},					//154
	{"Колесо", 50000, 4},					//155
	{"Аккумулятор", 2500, 4},				//156
	{"Рецепт кастета", 200, -1},			//157
	{"Рецепт обреза", 250, -1},				//158
	{"Рецепт глюкозы", 250, -1},			//159
	{"Рецепт печат.машинки", 1000, -1},		//160
	{"Стеклянная бутылка", 300, -1},		//161
	{"Солярка", 1000, -1},					//162
	{"Наручные часы (корич)", 15000, -1},	//163
	{"Наручные часы (белые)", 15000, -1},	//164
	{"Моторное масло", 1000, -1},			//165
	{"Воздушный фильтр", 1500, -1},			//166
	{"Масляной фильтр", 1950, -1},			//167
	{"Лейка", 700, -1},						//168
	{"Марихуанна", 75000, -1},				//169
	{"Огурцы", 1000, -1},					//170
	{"Помидоры", 1000, -1},					//171
	{"Семена конопли", 1000, -1},			//172
	{"Семена томата", 350, -1},			//173
	{"Семена огурцов", 350, -1},			//174
	{"Косяк", 1400, -1},					//175
	{"Кристаллы", 75000, 4},				//176
	{"Ящик с материалами", 5000, 4},		//177
	{"Болторезы", 2000, -1},				//178
	{"Материалы", 3000, -1},				//179
	{"Сабвуфер", 150000, 2},				//180
	{"Очки", 5000, -1},						//181
	{"Бандана",6000, -1},					//182
	{"Маска",10000, -1},					//183
	{"Берет",3000, -1},						//184
	{"Шляпа", 1000, -1},					//185
	{"Бочка", 15000, 4},					//186
	{"Химия", 7000, 4},						//187
	{"Двигатель", 170000, 4},				//188
	{"Старый руль AMG", 14000, 4},			//189
	{"Запчасти к рулю AMG", 3000, 4},		//190
	{"Лобовое стекло", 30000, 4},			//191
	{"Спутник", 129600, -1},				//192
	{"Кристалл (красный)", 70000, 4},		//193
	{"Кристалл (фиолетовый)", 90000, 4},	//194
	{"Кристалл (зеленый)", 150000, 4},		//195
	{"Кристалл (синий)", 50000, 4},			//196
	{"Модель Volga", 45000, -1},			//197
	{"Модель ВАЗ 2109", 50000, 4},			//198
	{"Модель РАФ-2203", 47500, 4},			//199
	{"Гироскутер", 60000, 2},				//200
	{"Бинокль", 6000, -1},					//201
	{"Телескоп", 129000, 2},				//202
	{"Комиксы (Spider Man)", 1000, -1},		//203
	{"Комиксы (Ninja)", 1190, -1},			//204
	{"Комиксы (Bakugan)", 990, -1},			//205
	{"Клавиатура RGB", 15290, 2},			//206
	{"Клавиатура", 9000, 2},				//207
	{"Шахматы", 5000, -1},					//208
	{"Складной зонтик", 6000, -1},			//209
	{"Зонтик", 4000, -1},					//210
	{"Пирамидка", 400, -1},					//211
	{"Самокат", 7000, -1},					//212
	{"Фигурка пришельца", 15900, -1},		//213
	{"Фигурка пони", 6000, -1},				//214
	{"PSP", 9000, -1},						//215
	{"Анаболики", 6000, -1},				//216
	{"Противорвотное", 3450, -1},			//217
	{"Запчасти к двигателю", 29990, 4},		//218
	{"Сумка", 10000, -1},					//219
	{"Аксессуар на пояс", 2500, -1},		//220
	{"Украшение на руку", 29000, -1},		//221
	{"Рюкзак", 7900, -1},					//222
	{"Самовар", 29390, -1},					//223
	{"Фаберже", 25000, -1},					//224
	{"Часы", 25000, -1},					//225
	{"Граммофон", 170000, 0},				//226
	{"Кресло", 80000, 4},					//227
	{"Чайник", 2500, -1},					//228
	{"Статуя", 4000, -1},					//229
	{"Проигрыватель", 5990, -1},			//230
	{"Глобус", 4300, -1},					//231
	{"Печат.машинка", 23400, 4},			//232
	{"Поп-ит", 600, -1},					//233
	{"Брелок поп-ит", 150, -1},				//234
	{"Маска Гая-Фокса", 7000, -1},			//235
	{"Красный нож", 15000, -1},				//236
	{"Цветной нож", 25000, 4},				//237
	{"Золотой кастет", 70000, 4},			//238
	{"Поп-ит", 350, -1},					//239
	{"Поп-ит", 450, -1},					//240
	{"Стиральный порошок", 790, 4},			//241
	{"Рем.комплект к стир.машинке", 1500, 4},//242
	{"Конфеты", 350, -1},					//243
	{"Ёлочные украшения", 290, -1},			//244
	{"Снегоуборочная машинка", 15000, 4},	//245
	{"Украшение на шею", 3000, -1},			//246
	{"Наполненная лейка", 600, 4},			//247
	{"Животное", 100000, -1},				//248
	{"Будка для животных", 65000, -1},		//249
	{"Корм для животных", 1500, 4},			//250
	{"Коробка спичек", 500, -1},			//251
	{"Жареная рыба", 1000, -1},				//252
	{"Нелегальная продукция", 500, 4},		//253
	{"Аппарат для диагностики", 50000, -1},	//254
	{"Маска", 700, -1},						//255
	{"Автосигнализация", 300000, -1},		//256
	{"Лотерейный билет", 100, -1},			//257
	{"Кейс `Форсаж`", 0, -1},			//258
	{"Ключ от кейса", 0, -1},			//259
	{"Украшение на шею", 5000, -1},			//260
	{"Кейс `Темные дела`", 5000, -1},		//261
	{"Книга рецептов", 5000, -1},			//262
	{"Плащ", 5000, -1},						//263
	{"Растение (одуванчик)", 5000, -1},		//264
	{"Растение (крапива)", 5000, -1},		//265
	{"Растение (валериана)", 5000, -1},		//266
	{"Растение (пещерный гриб)", 5000, -1}, //267
	{"Плот монстра", 5000, -1},				//268
	{"Эликсир здоровья", 5000, -1},			//269
	{"Эликсир силы", 5000, -1},				//270
	{"Эликсир выносливости", 5000, -1},		//271
	{"Кейс `Велесова ночь`", 0, -1},		//272
	{"Эликсир точности", 5000, -1},			//273
	{"Зеленые кристаллы", 5000, -1},		//274
	{"Акссесуар на левое плечо", 5000, -1},	//275
	{"Тауметр", 5000, -1},					//276
	{"Бронежилет", 5000, -1},				//277
	{"Кейс `Оперской`", 0, -1},			//278
	{"Балончик с краской", 5000, -1},		//279
	{"Напиток", 5000, -1},					//280
	{"Трап", 5000, -1},						//281
	{"Лекарство", 5000, -1},				//282
	{"Гарелка", 5000, -1},					//283
	{"Кейс `Новогодний`", 0, -1},		//284
	{"Украшение для транспорта", 5000, -1},	//285
	{"Бутылка", 5000, -1},					//286
	{"Крылья", 5000, -1},					//287
	{"Ценная бумага", 5000, -1},			//288
	{"Посох", 5000, -1},					//289
	{"Кейс `Черное золото`", 0, -1},		//290
	{"Аксессуар на спину", 5000, -1},		//291
	{"Аксессуар на ногу", 5000, -1},		//292
	{"Фишки", 5000, -1},					//293
	{"Нож для свежевания", 5000, -1},		//294
	{"Шкура оленя", 5000, -1},				//295
	{"Шкура медведя", 5000, -1},			//296
	{"Шкура заяца", 5000, -1},				//297
	{"Шкура кабана", 5000, -1},				//298
	{"Животный жир", 5000, -1},				//299
	{"Кейс `Охотничий`", 0, -1},			//300
	{"Игровая консоль", 5000, -1},			//301
	{"Виниловая пластинка", 5000, -1},		//302
	{"Запчасти проигрывателя", 5000, -1},	//303
	{"Сломанный сабвуфер", 5000, -1},		//304
	{"Запчасти сабвуфера", 5000, -1},		//305
	{"Сломанный металлоискатель", 5000, -1},//306
	{"Запчасти металлоискателя", 5000, -1},	//307
	{"Полотно для лопаты", 5000, -1},		//308
	{"Черенок для лопаты", 5000, -1},		//309
	{"Сломанный аппарата диагн-ки", 5000, -1},//310
	{"Запчасти аппарата диагн-ки", 5000, -1},//311
	{"Корпус наручных часов", 5000, -1},	//312
	{"Ремешок наручных часов", 5000, -1},	//313
	{"Механизм наручных часов", 5000, -1},	//314
	{"Стекло наручных часов", 5000, -1},	//315
	{"Мешочек для драгоценностей", 5000, -1},//316
	{"Кроссовки", 5000, -1},				//317
	{"Футболка", 5000, -1},					//318
	{"Джинсы", 5000, -1},					//319
	{"Золотые серьги", 5000, -1},			//320
	{"Бриллиант", 5000, -1},				//321
	{"Проигрыватель", 5000, -1},			//322
	{"Бронепластина", 5000, -1},			//323
	{"Скейтборд", 5000, -1},				//324
	{"Рыболовная леска", 5000, -1},			//325
	{"Наживка", 5000, -1},					//326
	{"Осетровая икра", 5000, -1},			//327
	{"Кейс `Египетская сила`", 0, -1},	//328
	{"Золотой череп", 5000, -1},			//329
	{"Древняя табличка", 5000, -1},			//330
	{"Канистра воды", 5000, -1},			//331
	{"Рецепт для пошива", 5000, -1},		//332
	{"Известь", 5000, -1},					//333
	{"Гербицид", 5000, -1},					//334
	{"удобрение", 5000, -1},				//335
	{"Семена", 5000, -1},					//336
	{"Урожай", 5000, -1},					//337
	{"Эликсир бесшумности", 5000, -1},		//338
	{"Эликсир регенерации", 5000, -1},		//339
	{"Эликсир устойчивости", 5000, -1},		//340
	{"Эликсир удачи", 5000, -1},			//341
	{"Планшет", 5000, -1},					//342
	{"Растение (клевер)", 5000, -1},		//343
	{"Кейс `Велесова Ночь - 2`", 0, -1},	//344
	{"Шкура белого медведя", 5000, -1},		//345
	{"Растение мох", 5000, -1},				//346
	{"Ёлочные игрушки", 0, -1},			//347
	{"Кейс `Рождественский экспресс`", 0, -1},//348
	{"Обручальное кольцо", 5000, -1},		//349
	{"Кейс `Путь воина`", 0, -1},		//350
	{"Сигареты", 5000, -1},					//351
	{"Глушилка", 5000, -1},					//352
	{"Заточка", 5000, -1},					//353
	{"Чертеж тюнинга", 0, -1},			//354
	{"Кейс `Пиратский`", 0, -1},			//355
	{"Кейс `Проклятие`", 0, -1},			//356
	{"Киберкредиты", 0, -1},			//357
	{"Чертеж Gaz Spooky Baz", 0, -1},			//358
	{"Ледяные механизмы", 0, -1},			//359
	{"Кейс Зимняя сказка", 0, -1},			//360
	{"Домкрат", 0, -1},			//361
	{"Патроны 9х19", 0, -1},			//362
	{"Патроны", 0, -1},			//363
	{"Патроны", 0, -1},			//364
	{"Патроны 12х70", 0, -1},			//365
	{"Патроны 5.45х39", 0, -1},			//366
	{"Патроны 5.56х45", 0, -1},			//367
	{"Патроны 7.62х39", 0, -1},			//368
	{"Болгарка", 0, -1},			//369
	{"Чертеж", 0, -1},			//370
	{"Бомба", 0, -1}			//371
};

new gRandom[2] = {80,81};

new const g_business_clothing_quantity[2] = {172, 60};
    
enum e_g_business_clothing {
	g_cost,
	g_model
};
new const g_business_clothing_skins[2][172][e_g_business_clothing] =
{
    {
	 	{3000,14},
		{3000,20},
		{3000,21},
		{3000,22},
		{3000,24},
		{3000,25},
		{3000,52},
		{3000,15327},
		{3000,15353},
		{3000,15354},
		{3000,15355},
		{3000,78},
		{3000,95},
		{3000,96},
		{3000,200},
		{5000,49},
		{5000,62},
		{5000,135},
		{5000,137},
		{5000,212},
		{5000,230},
		{5000,239},
		{7500,7},
		{7500,160},
		{7500,213},
		{8000,103},
		{10000,102},
		{10000,2},
		{10000,26},
		{10000,132},
		{10000,184},
		{10000,209},
		{10000,229},
		{10000,235},
		{10000,236},
		{12000,32},
		{15000,144},
		{15000,133},
		{15000,100},
		{18000,97},
		{18000,159},
		{18000,242},
		{18000,248},
		{20000,107},
		{20000,155},
		{20000,203},
		{20000,289},
		{22000,247},
		{25000,37},
		{25000,45},
		{25000,177},
		{25000,262},
		{27000,299},
		{30000,15},
		{30000,104},
		{30000,101},
		{30000,204},
		{32000,291},
		{35000,240},
		{50000,210},
		{50000,34},
		{50000,99},
		{50000,119},
		{50000,146},
		{50000,154},
		{50000,217},
		{53000,18},
		{55000,181},
		{60000,44},
		{60000,60},
		{60000,73},
		{60000,10},
		{80000,117},
		{100000,23},
		{100000,295},
		{105000,54},
		{110000,173},
		{120000,185},
		{135000,108},
		{135000,109},
		{135000,110},
		{135000,118},
		{135000,189},
		{135000,254},
		{135000,272},
		{150000,3},
		{250000,59},
		{250000,241},
		{300000,180},
		{300000,15420},
		{350000,33},
		{350000,261},
		{350000,296},
		{400000,290},
		{400000,15392},
		{450000,15314},
		{500000,221},
		{500000,46},
		{500000,68},
		{500000,98},
		{500000,186},
		{500000,249},
		{500000,294},
		{500000,83},
		{500000,15391},
		{500000,15433},
		{550000,17},
		{560000,15304},
		{650000,120},
		{650000,15306},
		{650000,15315},
		{750000,15393},
		{780000,15305},
		{800000,15301},
		{850000,15390},
		{880000,15313},
		{900000,223},
		{930000,15302},
		{980000,15308},
		{1000000,15527},
		{1300000,82},
		{1300000,84},
		{1300000,15300},
		{1300000,15394},
		{1400000,29},
		{1400000,15312},
		{1500000,293},
		{1500000,15310},
		{1500000,15395},
		{1500000,15457},
		{2000000,15303},
		{2300000,15311},
		{2400000,15426},
		{2500000,15309},
		{2650000,15307},
		{3000000,228},
		{3000000,15526},
		{3300000,15409},
		{3700000,15410},
		{4000000,15408},
		{4000000,15542},
		{4000000,134},
		{4000000,15456},
		{4600000,15411},
		{5000000,15361},
		{5000000,15521},
		{5000000,192},
		{5000000,15561},
		{5600000,15448},
		{5800000,15449},
		{5800000,15425},
		{5900000,15424},
		{6000000,234},
		{6000000,297},
		{6700000,15435},
		{6800000,15437},
		{7000000,15518},
		{8000000,15540},
		{8000000,15553},
		{8000000,15418},
		{8000000,15431},
		{10000000,15406},
		{10000000,15363},
		{10000000,15532},
		{12000000,15430},
		{12000000,15537},
		{13000000,15452},
		{14000000,15429},
		{14000000,15432},
		{15000000,15360},
		{17000000,15548},
		{20000000,207}
    },
    {
		{3000,38},
		{3000,39},
		{3000,53},
		{3000,88},
		{3000,89},
		{3000,15345},
		{3000,15352},
		{10000,56},
		{10000,75},
		{15000,205},
		{30000,211},
		{38000,140},
		{45000,193},
		{50000,13},
		{65000,263},
		{70000,92},
		{80000,150},
		{80000,251},
		{120000,216},
		{150000,257},
		{150000,87},
		{160000,15317},
		{200000,169},
		{250000,138},
		{250000,237},
		{250000,150},
		{250000,9},
		{250000,226},
		{300000,225},
		{300000,145},
		{300000,256},
		{400000,91},
		{450000,152},
		{460000,129},
		{488599,231},
		{500000,246},
		{500000,12},
		{530000,195},
		{600000,15412},
		{650000,55},
		{650000,233},
		{666666,130},
		{700000,77},
		{700000,214},
		{700000,41},
		{700000,215},
		{800000,197},
		{800000,232},
		{800000,196},
		{1000000,199},
		{1000000,85},
		{1300000,15319},
		{1300000,31},
		{1500000,15413},
		{1700000,15364},
		{2000000,238},
		{2200000,15318},
		{2500000,172},
		{3000000,201},
		{5000000,93},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0},
		{0,0}
    }
};
new p_business_clothing_page[MAX_PLAYERS];

enum E_CARSH_CAR_STRUCT
{
	OC_SQL_ID,
	OC_RENT_OWNER,
	OC_NUMBER[8],
	OC_REGION[10],
	OC_PRICE,
	OC_NUMBERTYPE,
	OC_MODEL_ID,
	Float: OC_IZNOS,
	OC_MASLO,
	OC_VINIL,
	OC_COLOR_1,
	OC_COLOR_2,
	Float: OC_POS_X,
	Float: OC_POS_Y,
	Float: OC_POS_Z,
	Float: OC_ANGLE,
	bool: OC_ALARM,
	OC_KEY_IN,
	OC_CREATE,
	OC_SELECTS[155],
	OC_COLORS[155],
	OC_PROCENTS[155],
};
//----------Аренда авто---------------------------
enum E_RENT_CAR_STRUCT
{
	R_SQL_ID,
	R_RENT_OWNER,
	R_RENT_BIZ,
	R_NUMBER[8],
	R_REGION[10],
	R_PRICE,
	R_NUMBERTYPE,
	R_MODEL_ID,
	Float: R_IZNOS,
	Float: R_MASLO,
	R_VINIL,
	R_COLOR_1,
	R_COLOR_2,
	Float: R_POS_X,
	Float: R_POS_Y,
	Float: R_POS_Z,
	Float: R_ANGLE,
	R_CREATE,
	R_MESTO,
	Float: R_KOLESO_1,
	Float: R_KOLESO_2,
	Float: R_KOLESO_3,
	Float: R_KOLESO_4,
};
static const Float:Rent_Mesto[3][8][4] =
{
	{
		{451.01690,1732.13200,11.6040,260.6403},
		{450.31090,1729.04170,11.6123,261.2278},
		{449.87970,1726.28490,11.6097,260.3292},
		{449.34000,1723.34280,11.6073,261.6923},
		{464.85040,1730.89530,11.6094,95.86540},
		{465.18250,1727.99300,11.6068,94.78510},
		{464.79330,1725.07650,11.6071,94.89310},
		{473.10710,1729.65100,11.6079,244.6246} 
    },
	{
		{2150.8503,-1798.9508,18.8143,90.4659},
		{2150.7339,-1794.9868,18.8174,90.6848},
		{2150.9285,-1791.1378,18.8200,89.9588},
		{2150.8308,-1787.3170,18.8231,90.2102},
		{2150.7593,-1783.2294,18.8257,88.9612},
		{2158.4326,-1783.2289,18.8248,270.6740},
		{2158.0864,-1787.0470,18.8235,271.7794},
		{2157.9102,-1791.0515,18.8221,270.4478}
	},
	{
		{1730.7089,2481.00070,15.0299,214.2615},
		{1733.2258,2482.36300,15.4657,215.3279},
		{1735.7397,2483.84840,15.2401,214.8532},
		{1738.0343,2485.75440,15.2200,215.0737},
		{1740.3864,2487.60860,15.6744,214.4059},
		{1742.9143,2489.07200,15.9752,214.9236},
		{1745.0552,2490.85860,15.2088,215.5316},
		{1745.2952,2472.14330,15.5433,15.35350}
	}
};

new timecarsharingprice[MAX_PLAYERS];
new pricecarsharing[MAX_PLAYERS];
new timecarsh[MAX_PLAYERS];
new timecarshs[MAX_PLAYERS];

#define DRIFT_MINKAT 10.0
#define DRIFT_MAXKAT 90.0
#define DRIFT_SPEED 10.0

new dtimer, atimer;
new stiliok;
new scores[MAX_PLAYERS], scplay[MAX_PLAYERS], chets[MAX_PLAYERS];
new PlayerDriftCancellation[200];
new DriftPointsNow[200];
new Float:ppos[MAX_PLAYERS][3];
enum Float:Pos{ Float:sX,Float:sY,Float:sZ };
new Float:SavedPos[MAX_PLAYERS][Pos];
new metro_train[MAX_PLAYERS] = -1,metro_user,metro_status,metro_zarplata[MAX_PLAYERS],metro_taimer[MAX_PLAYERS][2];
new FirstPerson[MAX_PLAYERS], bool:switch_fp[MAX_PLAYERS];
new garage_area[MAX_GARAGE];

new _player_skin[MAX_PLAYERS];
new bool:_player_skin_sex[MAX_PLAYERS];

new bool:admin_logged[MAX_PLAYERS];
new vibor_biz_atm[MAX_PLAYERS] = 0; // 1 - Снять, 2 - Пополнить
new vibor_kiosk_atm[MAX_PLAYERS] = 0; // 1 - Снять, 2 - Пополнить

new vetr1, vetr2, vetr4, vetr5, vetr6, vetr7, vetrlift;

new door_mz[4];

new Test_server;
new training[MAX_PLAYERS];

new snoybord[MAX_PLAYERS] = -1;
new snoybord_cp;
stock Float:D_PlayerVehicle(playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,PX,PY,PZ);
		GetVehiclePos(vehicleid, X,Y,Z);
		new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
		return Distance;
	}
	return 0.0;
}

#include "systems/sql_callbacks.inc"

new RPPoint[MAX_PLAYERS];

//===================аренда================
enum RInfo
{
    Rcarid,
    Rprice,
    ROwned
};
new RentCar[MAX_RENT_VEH][RInfo];
new IsRentableVehicle[MAX_VEHICLES];

new Obj_tune[MAX_PLAYERS];
new sab[MAX_VEHICLES];

new ceno[MAX_VEHICLES];
new vodila[MAX_VEHICLES] = -1;
new OwnedName[MAX_PLAYER_NAME];

new tmphour, tmpminute, tmpsecond;

new RouletteStarted[MAX_PLAYERS];

enum tInfo
{
    tVirtualWorld,
	tInterior,
	tGunArea[4],// 0 - gungs_arena, 1 - KillsGun, 2 - KillsAll, 3 - NextGun
	tDMArea[3], // 0 - dm_arena, 1 - KillsPlayer, 2 - DeathsPlayer
	bool:tBlockWars
}
new TI[MAX_PLAYERS][tInfo];
new remen[MAX_PLAYERS];

enum noclipenum
{
	camera_mode,
	fly_object,
	mode_mode,
	l_rold,
	u_dold,
	last_move,
	Float:acce_lmul,
}
new noclipdata[MAX_PLAYERS][noclipenum];

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
		else if(ud > 0) direction = MOVE_BACK_LEFT;
		else            direction = MOVE_LEFT;
	}
	else if(lr > 0)
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
		else if(ud > 0) direction = MOVE_BACK_RIGHT;
		else			direction = MOVE_RIGHT;
	}
	else if(ud < 0) 	direction = MOVE_FORWARD;
	else if(ud > 0) 	direction = MOVE_BACK;

	return direction;
}
#define MOVE_SPEED            300.0 // режим полёта

#define ACCEL_RATE            0.03

#define CAMERA_MODE_NONE      0
#define CAMERA_MODE_FLY       1
#define IsPlayerVMuted(%0)       GetPlayerData(%0, P_VMUTE)       // есть ли мут
#define GetPlayerVipoff(%0)       GetPlayerData(%0, P_VIPOFF)       // есть ли мут

        // фракция выговор       // есть ли мут

#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы для банкоматов
#define ENTER_PASSWORD_ATTEMPS 	(5)  // кол-во попыток на ввод пароля
#define REFER_BONUS_MONEY	(555_555) // бонус выдача денег реферу
#define MAX_AFK_TIME 			(30) // максимальное время афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(15)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов для телефонной книги
#define MAX_AUTHORIZATION_TIME	(300) // время на авторизацию (в секундах)
#define MAX_BUSINESS			(200)// максимальное кол-во предприятий
#define MAX_BUSINESS_GPS		(40) // максимальное кол-во предприятий в GPS
#define MAX_HOUSES				(1000)// максимальное кол-во домов
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(2)  // максимальное кол-во этажей отеля
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 5) // максимальное кол-во номеров в отеле// максимальное кол-во личных ТС
#define MAX_GANG_REPOSITORIES	(3)  // максимальное кол-во складов для банд
#define MAX_GZ					(100)// максимальное кол-во ганг-зон
#define MAX_WEAPON_TINTS		(13) // максимальное кол-во раскрасок оружия
#define MAX_ADVERTS				(100)// максимальное кол-во объявлений
#define MAX_GREEN_ZONES			(24)	 // максимальное кол-во зеленых зон
#define MAX_CARSHARING          (250) // максимальное кол-во каршеринга
#define MAX_RENTCAR          	(50)
#define MAX_ZAXVAT				(1000)// максимальное кол-во домов

#define MIN_PLAYERS_FOR_CAPTURE (5)	 // минимальное кол-во игроков для захвата территории
#define BIZ_HEALTH_SERVICE_PRICE (3500)	// стоимость использование аптечки в бизнесе
#define ADVERT_SEND_PRICE		(2500) // стоимость отправки объявления
#define MAP_ICON_STREAM_DISTANCE (200.0) // прорисовка иконок на карте (радиус)
//Автоаксессуары

//------------Сигналка------------
new soundveh[MAX_VEHICLES];
new beepplayer[MAX_VEHICLES][MAX_PLAYERS+1];
new kryak[MAX_VEHICLES][MAX_PLAYERS+1];
//------------Стробоскопы------------
new stroboskopes[MAX_VEHICLES];
// ------------------------------------------
#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)
// ------------------------------------------
#define SELECT_PANEL_TYPE_NONE			0
#define SELECT_PANEL_TYPE_CLOTHING		1
#define SELECT_PANEL_TYPE_REG_SKIN      9
#define SELECT_PANEL_TYPE_CAR_MARKET    6
// ------------------------------------------
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false
// ------------------------------------------
#define ADMIN_TYPE_NONE 	0
#define YADMIN_TYPE_NONE 	0
// ------------------------------------------
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6
// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3
// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2
// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// гостиница
// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз
// ------------------------------------------
#define GetOSTInfo(%0,%1)   g_ostanovka[%0][%1]
// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3

#define GetCarshCarData(%0,%1) 		g_carsh_car[%0][%1]
#define SetCarshCarData(%0,%1,%2)		g_carsh_car[%0][%1] = %2
#define AddCarshCarData(%0,%1,%2,%3)	g_carsh_car[%0][%1] %2= %3

#define GetRentCarData(%0,%1) 		g_rent_car[%0][%1]
#define SetRentCarData(%0,%1,%2)		g_rent_car[%0][%1] = %2
#define AddRentCarData(%0,%1,%2,%3)	g_rent_car[%0][%1] %2= %3

#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)
#define IsCarshCarOwned(%0)			(GetCarshCarData(%0, OC_OWNER_ID) > 0)
// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4

#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // занят ли номер отеля
// ------------------------------------------
#define GetOrderData(%0,%1)			g_order[%0][%1]
#define SetOrderData(%0,%1,%2)		g_order[%0][%1] = %2
#define AddOrderData(%0,%1,%2,%3)	g_order[%0][%1] %2= %3

#define GetFuelOrderData(%0,%1)			g_fuelorder[%0][%1]
#define SetFuelOrderData(%0,%1,%2)		g_fuelorder[%0][%1] = %2
#define AddFuelOrderData(%0,%1,%2,%3)	g_fuelorder[%0][%1] %2= %3

// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values

#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define SetPlayerInGarage(%0,%1)				SetPlayerData(%0, P_IN_GARAGE, %1)		// установить гараж в котором находится
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3

// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3

#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1

#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1

#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1
// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2

#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values

#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3

// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2

#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values

#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1

#define	GetPlayerYAdminEx(%0)	GetPlayerData(%0, P_YADMIN) 			// уровень ютуб админки

// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3

#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2
// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]
// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]
// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]
// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]
// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]
#define SetATMInfo(%0,%1,%2)	g_atm[%0][%1] = %2

// ------------------------------------------
#define GetPlayerContSpawn(%0)  GetPlayerData(%0, P_CONTS)
#define SetPlayerContSpawn(%0)  SetPlayerData(%0, P_CONTS)
//-------------------------------------------
#define GetPlayerDrivingExamInfo(%0,%1) 	g_player_driving_exam[%0][%1]
#define SetPlayerDrivingExamInfo(%0,%1,%2) 	g_player_driving_exam[%0][%1] = %2
#define ClearPlayerDrivingExamInfo(%0) 		g_player_driving_exam[%0] = g_driving_exam_default_values
// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2
// ------------------------------------------
#define GetTeleportListData(%0,%1)		g_teleport_list[%0][%1]
// ------------------------------------------
#define GetGangZoneData(%0,%1)			g_gang_zone[%0][%1]
#define SetGangZoneData(%0,%1,%2)		g_gang_zone[%0][%1] = %2
// ------------------------------------------
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]
// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2
// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2
// ------------------------------------------
#define GetPlayerData(%0,%1) 	g_player[%0][%1]
#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3
#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока		// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// имя игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL)+1)*4) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerWatch(%0)		GetPlayerData(%0, P_WATCH)			// номер телефона игрока
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("Женский") : ("Мужской") // название пола
#define GetPlayerSexNam(%0)	GetPlayerData(%0, P_SEX) ? ("Жен.") : ("Муж.") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата
#define	IsPlayerAdminLevel(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define	GetPlayerMedcarta(%0)	GetPlayerData(%0, P_MEDCARTA)			// военный билет
#define	GetPlayerKDSet(%0)		GetPlayerData(%0, P_KDSET) 			// уровень админки
#define	GetPlayerMinEx(%0)		GetPlayerData(%0, P_MIND) 			// мин доступ
#define	GetPlayerVoennikEx(%0)	GetPlayerData(%0, P_VOEN)
#define	GetPlayerBrakEx(%0)	GetPlayerData(%0, P_WIFE_NAME) 			//
#define QueryPlayerBalance(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// время афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находится
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находится
#define GetPlayerInGarage(%0)	GetPlayerData(%0, P_IN_GARAGE) 		// в какой гараж вошел\находится
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организация в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровья
#define GetPlayerPremium(%0)	GetPlayerData(%0, P_PREMIUM)		// премиум-аккаунт

#define GetPlayerAdmRep(%0)     GetPlayerData(%0, P_ADMREP)
#define GetPlayerAdmDm(%0)     GetPlayerData(%0, P_ADMDM)
#define GetPlayerAdmBan(%0)     GetPlayerData(%0, P_ADMBAN)
#define GetPlayerAdmMute(%0)     GetPlayerData(%0, P_ADMMUTE)
#define GetPlayerAdmKick(%0)     GetPlayerData(%0, P_ADMKICK)

#define GetPlayerRepair(%0)		GetPlayerData(%0, P_REPAIR)		// премиум-аккаунт

#define GetPlayerPremiumTime(%0)	GetPlayerData(%0, P_PREMIUM_TIME) // время действия премиум-аккаунта

#define GetPlayerSpawnSetting(%0) 		GetPlayerData(%0, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(%0, P_SPAWN, %1)  // установка места спавна

#define QueryPlayerDonationBalance(%0) 		GetPlayerData(%0, P_DONATE_CURRENT) 	// текущий баланс донат-очков
#define QueryTotalDonatedAmount(%0) 		GetPlayerData(%0, P_DONATE_TOTAL) 	// всего пополнений баланса

#define	GetPlayerGiftEx(%0)	GetPlayerData(%0, P_LOGOTIP) 			// фиг знает что
#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временная работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата

#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного ТС
#define GetPlayerRentMop(%0)			GetPlayerData(%0, P_RENT_MOPED)		// ид арендованного ТС
#define GetPlayerAllowedCar(%0)			GetPlayerData(%0, P_ALLOWED_CAR)	// ид доверенного ТС

#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов для транспорта
#define GetPlayerBizSlots(%0)			GetPlayerData(%0, P_BIZ_SLOTS)		// количество слотов для транспорта
#define GetPlayerHouseSlots(%0)			GetPlayerData(%0, P_HOUSE_SLOTS)		// количество слотов для транспорта
#define GetPlayerGarageSlots(%0)			GetPlayerData(%0, P_GARAGE_SLOTS)		// количество слотов для транспорта
#define GetPlayerKioskSlots(%0)			GetPlayerData(%0, P_KIOSK_SLOTS)		// количество слотов для транспорта
#define GetPlayerGardenSlots(%0)			GetPlayerData(%0, P_GARDEN_SLOTS)		// количество слотов для транспорта

#define GetPlayerClientName(%0)	GetPlayerData(%0, P_MOBILE) ? ("REDAGE ONLINE (MOBILE)") : ("REDAGE ONLINE (PC)") // Client
#define GetPlayerClient(%0)		GetPlayerData(%0, P_MOBILE)	// Client

#define GetPlayerSnowInsible(%0)		GetPlayerData(%0, P_SNOW_INSIBLE)	// Snow
#define GetPlayerSnow(%0)		GetPlayerData(%0, P_SNOW)	// Snow

#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата

#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находится
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находится
#define SetPlayerTeamEx(%0,%1)					SetPlayerData(%0, P_TEAM, %1)			// организация в которой состоит игрок

#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временная работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)

#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут
#define IsPlayerRMuted(%0)      GetPlayerData(%0, P_RMUTE)      // есть ли блокировка репорта
#define IsPlayerFMuted(%0)       GetPlayerData(%0, P_FMUTE)       // ???? ?? ???
// ------------------------------------------
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2

#define GetGarageData(%0,%1) 			g_garage[%0][%1]
#define SetGarageData(%0,%1,%2) 		g_garage[%0][%1] = %2
#define AddGarageData(%0,%1,%2,%3) 		g_garage[%0][%1] %2= %3

#define IsGarageOwned(%0)				(GetGarageData(%0, G_OWNER_ID) > 0)

#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3

#define GetKioskData(%0,%1)			g_kiosk[%0][%1]
#define SetKioskData(%0,%1,%2)		g_kiosk[%0][%1] = %2
#define AddKioskData(%0,%1,%2,%3)	g_kiosk[%0][%1] %2= %3
#define IsKioskOwned(%0)				(GetKioskData(%0, K_OWNER_ID) > 0)

#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом
// ------------------------------------------
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4

#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2

#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)

#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2

#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3

#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)

#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3
// ------------------------------------------
#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0-1][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0-1][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0, O_NAME)

#define GetWeaponName(%0)				weapon_names[%0]

#define GetWeaponTint(%0)				weapon_tints[%0]
#define GetWeaponTintData(%0,%1)		g_weapon_tint[%0][%1]

#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2
// ------------------------------------------
#define GetAdvertData(%0,%1)			g_advert[%0][%1]
#define SetAdvertData(%0,%1,%2)			g_advert[%0][%1] = %2

forward ConnectedPlayers();
forward NoRoof(playerid);
forward anim2(playerid);

new report_message[MAX_PLAYERS][200];

new mptp;

new g_azs_alt[MAX_BUSINESS];

new g_carsh_car[MAX_CARSHARING][E_CARSH_CAR_STRUCT];

new g_rent_car[MAX_RENTCAR][E_RENT_CAR_STRUCT];

new Float: mpPos[3],
	mpWorld[2],
	number_mp_player,
	mp_status;

// ------------------------------------------
stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}
// ------------------------------------------
stock Float: GetVehicleSpeed(vehicleid)
{
	new Float: speed = -1;

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed = x / floatsin(-angle, degrees);

		speed *= 100.0;
	}

	return speed;
}
//Анти ДМ зоны
#define MAX_ADZONE  (16)
enum antidminfo
{
    zName[130],
	zStatus,
	Float:zX,
	Float:zY,
	Float:zZ
};

////////////-----------
#define MAX_CREATE_OBJECTS 200
enum obj_INFO
{
	objID,
	objName[30],
	objModel,
	Float:objPosX,
	Float:objPosY,
	Float:objPosZ,
	Float:objRotX,
	Float:objRotY,
	Float:objRotZ
}
new
	ObjInfo[MAX_CREATE_OBJECTS][obj_INFO],
	TOTALOBJECTS,
	EditObjectPlayer[MAX_PLAYERS],
	ObjectNamePlayer[MAX_PLAYERS][30];

//===========================================
new stagest[MAX_PLAYERS];
new stagestats[MAX_PLAYERS];
new EditStage1Player[MAX_VEHICLES];
new EditStage1_1Player[MAX_VEHICLES];
new EditStage2Player[MAX_VEHICLES];
new EditStage3Player[MAX_VEHICLES];
new Stage1[MAX_VEHICLES];
new Stage1_1[MAX_VEHICLES];
new Stage2[MAX_VEHICLES];
new Stage3[MAX_VEHICLES];

//===========================================
new AntiDm[MAX_ADZONE][antidminfo] =
{
    {"Автошкола", 1, 2280.9009,1399.0365,12.2522},
	{"Радио Арзамас", 1, -398.1861,945.5391,12.1484},
	{"Больница", 1, -286.9034, 576.8859, 12.8447},
	{"Банк Арзамас", 1, 262.7270,1709.3180,13.0819},
	{"Банк Южный", 1, 2376.7405,-2139.2598,22.0776},
	{"Шахта", 1, -570.2114,-1456.7656,41.0009},
	{"Армия", 1, 1695.4014,1316.6548,12.6094},
	{"Церковь", 1, -2478.2612,2518.5479,46.6686},
	{"МВД", 1, 2563.5522,-2420.1042,22.8922},
	{"МВД", 1, -352.0312,356.7699,13.0400},
	{"Правительство", 1, -2467.5537, 1541.8041, 53.0278},
	{"Русская мафия", 1, -133.3660,254.7621,12.3572},
	{"Японская мафия", 1, 409.0703,1677.5908,12.0400},
	{"Итальянская мафия", 1, -40.7463, 1361.4651, 12.8750},
	{"Военкомат", 1, 1919.4358,2304.0698,15.5697},
	{"Спавн Новичков", 1, -753.8085,870.4588,12.0300}
};
new DMStatus[MAX_PLAYERS];
// ------------------------------------------
enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER[21],	// рефер
	P_SEX,			// пол игрока
	P_PASSWORD[85], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_MONEY[21],		// деньги игрока
	P_VOEN,      // военный билет
	P_BANK[21],			// деньги в банке
	P_ADMIN,		// уровень админки
	P_BUYADMIN,
	P_YADMIN,
	P_DISEASE[2],    //
	P_DDISEASE,
	P_KDSET,
	P_MIND,         // мин доступ
	P_DRIVING_LIC,	// лицензия на управление авто
	P_WEAPON_LIC,	// лицензия на оружие
	P_REG_TIME,		// время регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_WATCH,		// Apple Watch
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшения
	P_WIFE,			// жена
	P_TEAM,			// организация
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг)
	P_HOUSE_TYPE,	// тип жилья (дом/гостиница/в гостях)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_ID_SPAWN,		// дом
	P_HOUSE_SLOTS,		// дом
	P_BUSINESS,		// бизнес
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	// -------------------------
	P_LAST_LOGIN_TIME,	// время последнего входа\выхода
	// -------------------------
	P_GAME_FOR_HOUR,	// время игры за час
	P_GAME_FOR_DAY,		// время игры за день
	P_GAME_FOR_DAY_PREV,// время игры за вчерашний день
	// -------------------------
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// время афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	// -------------------------
	P_TEMP_JOB,				// временная работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	// -------------------------
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// Зарплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончания работы
	P_FACTORY_USE_DESK,		// Какой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_POMOI_ROUTE_STEP,		// шаг маршрута
	P_LOAD_ROUTE_STEP,		// шаг маршрута
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N руб
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N руб
	bool: P_IN_JOB,			// на работе ли
	// -------------------------
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	//--------------------------
	Text3D: ADMIN_LABEL,	// бейджик admin'a
	Text3D: GAADMIN_LABEL,
	// -------------------------
	P_AUTH_TIME,		// время на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_IN_ENTRANCE,		// в каком подъезде
	P_IN_ENTRANCE_FLOOR,// на каком этаже в подъезде
	P_LAST_PICKUP,		// ид пикапа на которым стоял последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MASK,				// маска
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	// -------------------------
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// имя игрока
	P_WIFE_NAME[21],	// имя жены
	// -------------------------
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистрация)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	// -------------------------
	P_WARN,             // варны
	P_WARN_TIME,        // время варнов
	P_MUTE,             // время мута
	P_RMUTE,
	P_AUNRMUTE,
	P_ARMUTE,
	// -------------------------
	P_POWER,			// сила
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл тайзер
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл АКС-74У
	P_SKILL_AK47,	    // скилл AKM
	P_SKILL_M4,         // скилл HK416
	P_SKILL_SNIPER_RIFLE,	// скилл AWM
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	// -------------------------
 	P_SPAWN,            // место спавна
 	// -------------------------
	P_DONATE_CURRENT,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	// -------------------------
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	// -------------------------
	bool: P_WEAPON_RELOADING,	// перезаряжает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезарядок для каждого оружия
	bool: P_CUFFED,		// наручники на игроке
	// -------------------------
	P_BUY_CAR,			// покупает ли авто
	P_CARSH_CAR,		// каршеринг авто
	P_RENT_CAR,			// арендованная машина
	P_ALLOWED_CAR,		// доверенная машина
	P_CAR_SLOTS,		// количество слотов для авто
	// -------------------------
	P_JAIL,				// время заключения
	P_ARREST,           // время заключения в КПЗ
	// -------------------------
	P_HEAL,
	//----------------
	P_WEAPON_TINT[MAX_WEAPON_TINTS], // раскраски оружия
	// -------------------------
	P_ORDER,			// выполняет ли заказ
	// -------------------------
	P_PREMIUM,			// уровень премиум аккаунта
	P_PREMIUM_TIME,		// время действия премиум аккаунта
	Text3D: P_FAM_LABEL,	// бейджик фамы
	P_FORTUNE_WHEEL,
	P_END_CAR_TIMER, //таймер выхода из авто
	P_ADMIN_PASSWORD[16],
	P_VMUTE,
	P_STYLE_1,
	P_STYLE_2,
	P_STYLE_3,
	P_STYLE_4,
	P_STYLE_5,
    P_PATRON[13],
    P_WEAPON[13],
	P_GARAGE_SLOTS,
    P_BIZ_SLOTS,		// количество слотов для авто
    P_KIOSK_SLOTS,		// количество слотов для авто
	P_GARDEN_SLOTS,
    P_AWARN,
 	P_FAMILY,
	P_FAMILY_RANK,
	P_FMUTE,
	P_FWARN,
    P_IN_GARAGE,
	P_RENT_MOPED,
	P_SCORE,
	P_VIPPREFIX[64],
	P_MYPREFIX[64],
	P_MYPREFIX_COLOR[64],
	P_EAT,
	P_EAT_STATUS,
	P_EAT_STATUS_SRED,
	P_EAT_STATUS_BIG,
	P_MEDCARTA,
	Float: P_AFTER_X,		
	Float: P_AFTER_Y,		
	Float: P_AFTER_Z,
	P_DANCE_0,
	P_DANCE_1,
	P_DANCE_2,
	P_DANCE_3,
	P_DANCE_4,
	P_DANCE_5,
	P_DANCE_6,
	P_DANCE_7,
	P_DANCE_8,
	P_DANCE_9,
	P_DANCE_10,
	P_DANCE_11,
	P_DANCE_12,
	P_DANCE_13,
	P_DANCE_14,
	P_DANCE_15,
	P_DANCE_16,
	P_DANCE_17,
	P_DANCE_18,
	P_DANCE_19,
	P_DANCE_20,
	P_DANCE_21,
	P_DANCE_22,
	P_DANCE_23,
	P_DANCE_24,
	P_DANCE_25,
	P_DANCE_26,
	P_DANCE_27,
	P_DANCE_28,
	P_DANCE_29,
	P_DANCE_30,
	P_DANCE_31,
	P_DANCE_32,
	P_DANCE_33,
	P_CARSH_TIME,
	P_PAYDAY,
	P_KILL_CAPT,
	P_DOSTIJ1,
	P_DOSTIJ2,
	P_DOSTIJ3,
	P_DOSTIJ4,
	P_DOSTIJ5,
	P_DOSTIJ6,
	P_DOSTIJ7,
	P_DOSTIJ8,
	P_DOSTIJ9,
	P_DOSTIJ10,
	P_DOSTIJ11,
	P_DOSTIJ12,
	P_DOSTIJ13,
	P_DOSTIJ14,
	P_DOSTIJ15,
	P_DOSTIJ16,
	P_DOSTIJ17,
	P_DOSTIJ18,
	P_DOSTIJ19,
	P_DOSTIJ20,
	P_DOSTIJ21,
	P_DOSTIJ22,
	P_DOSTIJ23,
	P_DOSTIJ24,
	P_DOSTIJ25,
	P_NAKOLKA,
	P_MESHOK,
	P_MESHOKK,
	P_OGLOX,
	P_ADMREP,
	P_ADMDM,
	P_ADMBAN,
	P_ISKATEL,
	P_ADMMUTE,
	P_MEDCARD,
	P_TURMA,
	P_MEDCARD_STATUS,
	P_ADMKICK,
	P_BLACK_MARKET_WIN,
	P_BLACK_MARKET_BET,
	P_LAST_EXIT,
	P_WARDS_PRIZE,
	P_HARDWARE_ID[250],
	P_HARDWARE_ID_TEMP[250],
	P_HARDWARE_BAN,
	P_DRAG_SCORE,
	P_TK_JOB,
	P_TK_JOB_TYPE,
	P_FORTUNE_KD,
	P_BP_PREMIUM,
	P_BP_LEVEL,
	P_BP_PRIZE_1,
	P_BP_PRIZE_2,
	P_BP_EXP,
	P_BP_TIME_TASKS,
	P_IN_TRADE_ROOM,
	P_AUCTION_SLOTS,
	P_EASTER,
	P_CMD_giveskin, 
	P_CMD_contspawn,
	P_CMD_dumpspawn,
	P_CMD_afly,
	P_CMD_getv,
	P_CMD_fixcar,
	P_LOG,
	P_TOTAL_ELEKTRIK,
    P_QUEST_1_STATS,
	P_QUEST_2_STATS,
	P_QUEST_2_VALUE,
	P_QUEST_3_STATS,
	P_QUEST_4_STATS,
	P_QUEST_4_VALUE,
	P_QUEST_5_STATS,
	P_QUEST_6_STATS,
	P_QUEST_7_STATS,
	P_QUEST_8_STATS,
	P_QUEST_9_STATS,
	Float: P_EXIT_X,		// Позиция выхода с игры
	Float: P_EXIT_Y,		// Позиция выхода с игры
	Float: P_EXIT_Z,		// Позиция выхода с игры
	P_VIPOFF,
	P_MOBILE,
	P_SNOW, 
	P_SNOW_INSIBLE,
	P_PODAROK,
	P_DOOR_STATUS,
	bool: P_ESCORTE,
	P_FUELORDER,			// выполняет ли заказ,
	P_ACHIV_1,
	P_ACHIV_1_COMPLETED,
	P_ACHIV_2,
	P_ACHIV_3,
	P_ACHIV_4,
	P_ACHIV_5,
	P_ACHIV_6,
	P_ACHIV_7,
	P_ACHIV_8,
	P_ACHIV_9,
	P_ACHIV_10,
	P_ACHIV_11,
	P_ACHIV_12,
	P_ACHIV_13,
	P_ACHIV_14,
	P_ACHIV_15,
	P_ACHIV_16,
	P_ACHIV_17,
	P_ACHIV_18,
	P_ACHIV_19,
	P_ACHIV_20,
	P_ACHIV_21,
	P_ACHIV_22,
	P_ACHIV_23,
	P_ACHIV_24,
	P_ACHIV_25,
	P_ACHIV_26,
	P_ACHIV_27,
	P_ACHIV_28,
	P_ACHIV_29,
	P_ACHIV_30,
	P_ACHIV_31,
	P_ACHIV_32,
	P_ACHIV_33,
	P_ACHIV_34,
	P_ACHIV_35,
	P_ACHIV_36,
	P_ACHIV_37,
	P_ACHIV_38,
	P_ACHIV_39,
	P_ACHIV_40,
	P_ACHIV_41,
	P_ACHIV_42,
	P_ACHIV_43,
	P_ACHIV_44,
	P_ACHIV_2_COMPLETED,
	P_ACHIV_3_COMPLETED,
	P_ACHIV_4_COMPLETED,
	P_ACHIV_5_COMPLETED,
	P_ACHIV_6_COMPLETED,
	P_ACHIV_7_COMPLETED,
	P_ACHIV_8_COMPLETED,
	P_ACHIV_9_COMPLETED,
	P_ACHIV_10_COMPLETED,
	P_ACHIV_11_COMPLETED,
    P_ACHIV_12_COMPLETED,
	P_ACHIV_13_COMPLETED,
	P_ACHIV_14_COMPLETED,
	P_ACHIV_15_COMPLETED,
	P_ACHIV_16_COMPLETED,
	P_ACHIV_17_COMPLETED,
	P_ACHIV_18_COMPLETED,
	P_ACHIV_19_COMPLETED,
	P_ACHIV_20_COMPLETED,
	P_ACHIV_21_COMPLETED,
	P_ACHIV_22_COMPLETED,
	P_ACHIV_23_COMPLETED,
	P_ACHIV_24_COMPLETED,
	P_ACHIV_25_COMPLETED,
	P_ACHIV_26_COMPLETED,
	P_ACHIV_27_COMPLETED,
	P_ACHIV_28_COMPLETED,
	P_ACHIV_29_COMPLETED,
	P_ACHIV_30_COMPLETED,
	P_ACHIV_31_COMPLETED,
	P_ACHIV_32_COMPLETED,
	P_ACHIV_33_COMPLETED,
	P_ACHIV_34_COMPLETED,
	P_ACHIV_35_COMPLETED,
	P_ACHIV_36_COMPLETED,
	P_ACHIV_37_COMPLETED,
	P_ACHIV_38_COMPLETED,
	P_ACHIV_39_COMPLETED,
	P_ACHIV_40_COMPLETED,
	P_ACHIV_41_COMPLETED,
	P_ACHIV_42_COMPLETED,
	P_ACHIV_43_COMPLETED,
	P_ACHIV_44_COMPLETED,
	P_YT_PROMO,
	P_DAILY_CLAIM,
	P_DAILY_CLAIM_7,
	P_DAILY_CLAIM_14,
	P_DAILY_CLAIM_21,
	P_DAILY_CLAIM_28,
	P_DAILY_CASE_7_ID,
	P_DAILY_CASE_14_ID,
	P_DAILY_CASE_21_ID,
	P_DAILY_CASE_28_ID,
	P_DAILY_CLAIM_COMPLETE,
	P_VINOSLIVOST, //Выносливость
	P_AUTH_TOKEN[17], //Goggle Autheficator токен
	P_2FA_ENABLED,
	P_BP_GOLDS,
	P_UID_FSB,
	P_REG_DATA_FSB,
	P_EXPIRE_DATA_FSB,
	P_SAFE_MODE,
	P_DRIVING_LIC_PROF,	// лицензия проф
};
new woshtimer[MAX_PLAYERS];
new wosh_status[MAX_PLAYERS];

new byr_timer[MAX_PLAYERS];
new byr_status[MAX_PLAYERS];
new zagruz_timer[MAX_PLAYERS];
new zagruz_status[MAX_PLAYERS];
// ------------------------------------------
enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}

new ranomnomber[MAX_PLAYERS][15];
new ranomnomberreg[MAX_PLAYERS][15];

enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ea a aaca
	OC_OWNER_ID,		// ea aeaaaeuoa
	OC_OWNER_NAME[21],	// eiy aeaaaeuoa
	OC_NUMBER[8],
	OC_REGION[10],	
	OC_NUMBERTYPE,
	OC_MODEL_ID,
	OC_MASLO,
	OC_MASLO_FILTER,
	OC_FILTER,
	OC_COLOR_1,
	OC_COLOR_2,	
	OC_C1,
	Float: OC_POS_X,
	Float: OC_POS_Y,
	Float: OC_POS_Z,
	Float: OC_ANGLE,
	bool: OC_ALARM,	
	OC_KEY_IN,
	OC_DISKI,
	OC_GIDRA,
	OC_NITRO,
	OC_CREATE,
	OC_RENT,
	OC_RANG,
	OC_RENTP,			// время создания
	Float: OC_KOLESO_1,
	Float: OC_KOLESO_2,
	Float: OC_KOLESO_3,
	Float: OC_KOLESO_4,
	OC_ST_LOAD,
    OC_TONERINSTALL,
	OC_CUT_SPRINGS,
	OC_PNEWMA,
	OC_SAB,
	OC_VINIL,
	OC_VINILTYPE,
	OC_GLASS,
	OC_PROCENT,
	OC_STEKLO_0,
	OC_STEKLO_1,
	OC_STEKLO_2,
	OC_STEKLO_3,
	OC_WASH,
	Float: OC_FUEL,
	OC_STAGE1,
	OC_STAGE2,
	OC_STAGE1_1,
	OC_STAGE,
	OC_STAGE3,
	OC_OBVES[100],
	Float: OC_ST1X,
	Float: OC_ST1Y,
	Float: OC_ST1Z,
	Float: OC_ST1RX,
	Float: OC_ST1RY,
	Float: OC_ST1RZ,
	Float: OC_ST2X,
	Float: OC_ST2Y,
	Float: OC_ST2Z,
	Float: OC_ST2RX,
	Float: OC_ST2RY,
	Float: OC_ST2RZ,
	Float: OC_ST3X,
	Float: OC_ST3Y,
	Float: OC_ST3Z,
	Float: OC_ST3RX,
	Float: OC_ST3RY,
	Float: OC_ST3RZ,
	Float: OC_ST11X,
	Float: OC_ST11Y,
	Float: OC_ST11Z,
	Float: OC_ST11RX,
	Float: OC_ST11RY,
	Float: OC_ST11RZ,
	OC_STATUSTS,
	OC_VEHID,
	OC_FAM_CAR,
	OC_FAM_CAR_RANK,
	OC_MESTOID,
	OC_BY_ID,
	Float: OC_BY_POS_X,
	Float: OC_BY_POS_Y,
	Float: OC_BY_POS_Z,
	Float: OC_BY_ANGLE,
	Float: OC_SAB_X,
	Float: OC_SAB_Y,
	Float: OC_SAB_Z,
	Float: OC_SAB_RX,
	Float: OC_SAB_RY,
	Float: OC_SAB_RZ,
	OC_NO_KEY_DOSTUP,
	OC_TSELECT[155],
	OC_TCOLOR[155],
	OC_TPROCENT[155],
	Float: OC_PNEWMA_1,
	Float: OC_PNEWMA_2,
	Float: OC_ENGINE_ACCELERATION,
	Float: OC_MAX_VELOCITY,
	OC_MUSIC_NAME[148],
	OC_MUSIC_STATUS,
	OC_MUSIC_VOLUME,
	Float: OC_MUSIC_X,
	Float: OC_MUSIC_Y,
	Float: OC_MUSIC_Z,
	OC_MUSIC_TIME,
	OC_NUMBER_STATUS,
	OC_INTER,
	OC_WORLD,
	OC_STAGE1_OBJ,
	OC_STAGE1_1_OBJ, 	
	OC_STAGE2_OBJ, 		
	OC_STAGE3_OBJ
};

// ----------------
enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};

enum E_OST_STRUCT
{
	Float: OST_POS_X,
	Float: OST_POS_Y,
	Float: OST_POS_Z,
	Float: OST_ROT_Z
};
enum E_FER_STRUCT
{
	Float: FER_POS_X,
	Float: FER_POS_Y,
	Float: FER_POS_Z,
	Float: FER_POS_A
};

// ------------------------------------------
enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_MIAMI,            // МАЙАМИ
	H_CITY,				// ид города
	H_ZONE,				// ид района
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_ENTRACE,			// ид подьезда
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позиция пикапа входа
	Float: H_POS_Y,		// позиция пикапа входа
	Float: H_POS_Z,		// позиция пикапа входа
	Float: H_EXIT_POS_X,// позиция после выхода из дома
	Float: H_EXIT_POS_Y,// позиция после выхода из дома
	Float: H_EXIT_POS_Z,// позиция после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позиция транспорта
	Float: H_CAR_POS_Y,	// позиция транспорта
	Float: H_CAR_POS_Z,	// позиция транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позиция шкафа
	Float: H_STORE_Y,	// позиция шкафа
	Float: H_STORE_Z,	// позиция шкафа
	// -------------------------
	H_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	// -------------------------
	H_EVICTION		// продажа из-за задолженности
	// -------------------------
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[40],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	Float: HT_SKLAD_POS_X,		// позиции склада банды
	Float: HT_SKLAD_POS_Y,		// позиции склада банды
	Float: HT_SKLAD_POS_Z,		// позиции склада банды
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS					// кол-во комнат
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселился
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить ТС к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS			// список арендаторов
}

enum // управление домом
{
	GARAGE_OPERATION_PARAMS, 		// изменение параметров дома
	GARAGE_OPERATION_LOCK,			// открыть / закрыть
	GARAGE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	GARAGE_OPERATION_IMPROVEMENTS,	// улучшение
	GARAGE_OPERATION_CAR_DELIVERY	// доставить ТС к дому
}

// ------------------------------------------
enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[30],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_CITY,				// ид города
	B_ZONE,				// ид района
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE[21],			// бюджет бизнеса
	B_ARENDA_PRICE,
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позиция бизнеса
	Float: B_POS_Y,		// позиция бизнеса
	Float: B_POS_Z,		// позиция бизнеса
	Float: B_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	Float: G_CAR_POS_X,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Y,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Z,// позиция после выхода из бизнеса
	Float: G_CAR_ANGLE,// угол поворота
	// -------------------------
	B_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: B_LABEL,		// 3д текст
	B_ORDER_ID,				// слот заказа
	B_HEALTH_PICKUP,		// ид пикапа аптечки
	// -------------------------
	B_EVICTION,
	B_GANG,
	B_GANG_NAME[50],
	B_ELECTRICITY,
	B_IZNOS,
	B_TIME_REPAIR_1,
	B_TIME_REPAIR_2,
	B_TYPEWETRIKI,
	B_WORK,
	B_WORK_2,
	B_VETR_WORK
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 		= 1, 	   	// Магазин 24/7
	BUSINESS_TYPE_CLUB 				= 2, 	   	// Клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ 		= 3, 	   	// Управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME 		= 4,	   	// Риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP 	= 5,
	BUSINESS_TYPE_HOTEL 			= 6,       	// гостиница
	BUSINESS_TYPE_CAR_MARKET		= 7,      	// Автосалон
	BUSINESS_TYPE_CASINO 			= 8,       	// Казино
	BUSINESS_TYPE_CELL_SALON 		= 9,      	// Сотовый салон
	BUSINESS_TYPE_CAR_TUNING 		= 10,     	// станция тех. обслуживания
	BUSINESS_TYPE_BUY_GUN 			= 11,      	// Магазин оружия
	BUSINESS_TYPE_BANK 				= 12,      	// Банк
	BUSINESS_TYPE_COMP_CLUB 		= 13,      	// Компьютерный клуб
	BUSINESS_TYPE_SPORT 			= 14,      	// Спортзал
	BUSINESS_TYPE_DETEL	 			= 15,      	// Детейлинг
	BUSINESS_TYPE_ARENDA			= 16,      	// Аренда авто
	BUSINESS_TYPE_STO				= 17,      	// СТО
	BUSINESS_TYPE_FERMA				= 18,      	// Ферма
	BUSINESS_TYPE_DET 				= 19,      	// Детейлинг
	BUSINESS_TYPE_BY 				= 20,      	// Авторынок
	BUSINESS_TYPE_XZ 				= 21,      	// Фиг его знает
	BUSINESS_TYPE_METRO				= 22,      	// Метро новое
	BUSINESS_TYPE_SHIN      		= 23,      	// Шиномонтаж
	BUSINESS_TYPE_SHOP_GARDEN 		= 24,		// Садовод
	BUSINESS_TYPE_PARIK      		= 25,     	// Парикхмахерская
	BUSINESS_TYPE_AVTOZAP 			= 26,       // Автозапчасти
	BUSINESS_TYPE_TIR 				= 27,       // Тир
	BUSINESS_TYPE_DETEYLING 		= 28,      	// Тонировка
	BUSINESS_TYPE_NOTARIUS 			= 29,       // Нотариус
	BUSINESS_TYPE_WOSH 				= 30,       // Стиралка одежды
	BUSINESS_TYPE_ZAKUS 			= 31,       // Закусочная
	BUSINESS_TYPE_APTEKA 			= 32,       // Аптека
	BUSINESS_TYPE_KONDITER 			= 33,     	// Кондитерская
	BUSINESS_TYPE_BY_NIZ 			= 34,
	BUSINESS_TYPE_BY_SRED 			= 35,
	BUSINESS_TYPE_VETRIKI 			= 36,
	BUSINESS_TYPE_FUEL_STATION 		= 37,
	BUSINESS_TYPE_CAR_MARKET_NIZ 	= 38,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_AVIA	= 39,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_VODA 	= 40,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_MOTO 	= 41,		// Автосалон
	BUSINESS_TYPE_CAR_MARKET_SRED 	= 42,     	// Автосалон
	BUSINESS_TYPE_CAR_WASH 			= 43,      // автомойка
	BUSINESS_TYPE_TRUCK_TK 			= 44,      // Траспортная компания
	BUSINESS_TYPE_SHOP_FISH 		= 45,      // Рыболовный магазин
	BUSINESS_TYPE_TAXI		        = 46,      // Таксопарк
};
enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROD_ORDER_CANCEL,// отменить заказ
	BIZ_OPERATION_PROFIT_STATS,		// финансовая статистика
	BIZ_OPERATION_IMPROVEMENTS,		// Улучшения
	BIZ_OPERATION_PRICE_ELECTR,
};

enum E_BUSINESS_INTERIOR_STRUCT
{
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	// -------------------
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	// -------------------
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	// -------------------
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	// -------------------
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
};
new House_CP[MAX_HOUSES];
new Garage_CP[MAX_GARAGE];
enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

enum E_GARAGE_STRUCT
{
	G_SQL_ID,			// ид в базе данных
	G_OWNER_ID,			// ид аккаунта владельца
	G_CITY,				// ид города
	G_MIAMI,           // металл
	G_ZONE,				// ид района
	G_IMPROVEMENTS,		// уровень улучшений
	G_RENT_DATE,		// аренда на n времени
	G_PRICE,			// стоимость бизнеса
	G_RENT_PRICE,		// плата за аренду в день
	G_LOCK_STATUS,		// статус (открыта/закрыта)
	G_TYPE,			// тип
	G_ENTER_PICKUP,			// пикап входа
	Float: G_POS_X,		// позиция бизнеса
	Float: G_POS_Y,		// позиция бизнеса
	Float: G_POS_Z,		// позиция бизнеса
	Float: G_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: G_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: G_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: G_EXIT_ANGLE,// угол поворота
	// -------------------------
	Float: G_CAR_POS_X,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Y,// позиция после выхода из бизнеса
	Float: G_CAR_POS_Z,// позиция после выхода из бизнеса
	Float: G_CAR_ANGLE,// угол поворота
	// -------------------------
	G_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: G_LABEL,		// 3д текст
	// -------------------------
	G_REPAIRS,          // рем. комплекты
	G_DRUGS,            // наркотики
	G_AMMO,             // патроны
	G_METALL,           // металл
	// -------------------------
	G_EVICTION,
	Text3D: G_WORKBENCH_LABEL,
	G_PLATE_OBJECT,
	G_PLATE_NUMBER_SLOT_0,
    G_PLATE_NUMBER_SLOT_1,
    G_PLATE_NUMBER_SLOT_2,
    G_PLATE_NUMBER_SLOT_3,
    G_PLATE_NUMBER_SLOT_4,
    G_PLATE_NUMBER_SLOT_5,
    G_PLATE_NUMBER_SLOT_6,
    G_PLATE_NUMBER_SLOT_7,
    G_PLATE_NUMBER_SLOT_8,
    G_PLATE_NUMBER_SLOT_9,
    G_PLATE_NUMBER_SLOT_10,
    G_PLATE_NUMBER_SLOT_11,
    G_PLATE_NUMBER_SLOT_12,
	G_PLATE_NUMBER_SLOT_13,
    G_PLATE_NUMBER_SLOT_14,
	G_PLATE_NUMBER_SLOT_15,
	G_PLATE_NUMBER_SLOT_16,
	G_PLATE_NUMBER_SLOT_17,
	G_PLATE_NUMBER_SLOT_18,
	G_PLATE_NUMBER_SLOT_19,
};
// ------------------------------------------
enum E_WEATHER_STRUCT
{
	W_NAME[16],
	W_ID,
	W_DEGREES
};
// ------------------------------------------
enum E_ORDER_STRUCT
{
	O_SQL_ID, 		// ид заказа
	O_TYPE,			// тип (азс,биз)
	O_COMPANY_ID,	// ид предприятия
	O_AMOUNT,		// кол-во
	O_PRICE,		// цена за 1 (продукт/л топлива/...)
	O_TIME,			// время оформления
	O_USED 		// выполняется ли
};

enum E_FUELORDER_STRUCT
{
	F_SQL_ID, 		// ид заказа
	F_TYPE,			// тип (азс,биз)
	F_COMPANY_ID,	// ид предприятия
	F_AMOUNT,		// кол-во
	F_PRICE,		// цена за 1 (продукт/л топлива/...)
	F_TIME,			// время оформления
	F_USED 		// выполняется ли
};

enum
{
	ORDER_TYPE_BUSINESS, 		// бизнес
	ORDER_TYPE_AZS 		// АЗС
};

// ------------------------------------------
// 			Личные настройки

enum E_PLAYER_SETTINGS_STRUCT
{
	S_CHAT_TYPE,	// тип чата (Отключен,Стандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
	S_NICK_IN_CHAT,	// отображение ников в чате
	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_VEH_CONTROL	// управление транспортом (клавиши и команды/команды)
};

enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

// ------------------------------------------
enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

// ------------------------------------------
enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};

enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

// ------------------------------------------
enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

// ------------------------------------------
enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

// ------------------------------------------
enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

// ------------------------------------------
enum E_MAP_ICONS_STRUCT
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

// ------------------------------------------
enum E_TELEPORT_STRUCT
{
	T_NAME[64],
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечился или нет в больнице
	T_ACTION_TYPE_LEAVE_PPS, // проверить сидит ли в тюрьме
	T_ACTION_TYPE_BANDA_WEAPON,
	T_ACTION_TYPE_LEAVE_FSIN,
	T_ACTION_TYPE_ENTER_FSB
};


// ------------------------------------------
enum E_DRIVING_TUTORIAL_STRUCT
{
	DT_TITLE[32],
};

enum E_PLAYER_DRIVING_EXAM_STRUCT
{
	DE_POINTS, // Балы
	DE_EXAM_STEP, // теория
	DE_ROUTE_STEP // практика
};

// ------------------------------------------
enum E_DRIVING_EXAM_STRUCT
{
	DE_TITLE[64],
	DE_LIST_ITEMS[256],
	DE_CORRECT_ANSWER
};

// ------------------------------------------
enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};
// ------------------------------------------
enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE[21],
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT
{
	BT_ID,
	BT_UID,
	BT_NAME[20 + 1]
};

// ------------------------------------------
enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исходящий вызов
	PC_OUTCOMING_PLAYER,	// входящий вызов
	PC_TIME,				// время звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

// ------------------------------------------
enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};

enum
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить имя
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};
// ------------------------------------------
enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};

// ------------------------------------------
enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID,
	MC_PICKUP_ID,
	Text3D: MC_LABEL,
	MC_ORE_COUNT,
	bool: MC_IN_MOVE
};

// ------------------------------------------
enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

// ------------------------------------------
enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};

enum // типы складов
{
	REPOSITORY_TYPE_MINER, 			// шахта
	REPOSITORY_TYPE_FACTORY, 		// завод
	REPOSITORY_TYPE_OIL_FACTORY, 	// нефтезавод
	REPOSITORY_TYPE_ARMY,			// воинская часть
	REPOSITORY_TYPE_SAWMILL,		// лесопилка
	REPOSITORY_TYPE_FERMER,         // ферма
	REPOSITORY_TYPE_FERMER_2,         // ферма мельница
};

enum
{
	// шахта
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке

	// завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты

	// нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе

	// воинская часть
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части

	// лесопилка
	REPOSITORY_ACTION_SAWMILL_WOOD = 0,	// лесопилка дерево

	// ферма
	REPOSITORY_ACTION_FERMER = 0,           // ферма сено
	REPOSITORY_ACTION_FERMER_2 = 0,           // ферма мельница
};
new g_repository[7][3][E_REPOSITORY_STRUCT]; // склады
// ------------------------------------------
enum E_GANG_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_GANG,
	GZ_ZONE,
	GZ_AREA
}

new g_gang_zone[MAX_GZ][E_GANG_ZONES_STRUCT]; // гангзоны
new g_gang_zones_loaded; // количество загруженных гангзон

// ------------------------------------------
enum
{
	GANG_ARZ = 35,		// ОПГ Центральное
	GANG_BAT = 35,		// ОПГ Западное
	GANG_LYT = 35,		// ОПГ Северное
}

// ------------------------------------------
new gang_zone_colors[4] =
{
	0xFFFFFF90,	// Свободная зона
	0x00990090, // Центральная Мафия
	0x6666FF90, // Западная Мафия
	0xFFCD0090  // Северная Мафия
};

new nakolka_name[][32] =
{
	{"Нет"},
	{"Мужик"},
	{"Козёл"},
	{"Пацан"},
	{"Бык"},
	{"Барыга"},
	{"Вор"},
	{"Пахан"},
	{"Блатной"},
	{"Вор в законе"}
};

//------------------------------------------
new weapon_tints[6] =
{
	0xFF4B5320, // Камуфляж
	0xFF9EAF43, // Зеленый
	0xFFFFAE1A, // Оранжевый
	0xFF0073E6, // Синий (полицейский)
	0xFFFF1493, // Розовый
	0xFFFFD700 	// Золотой
};

enum
{
	WEAPON_TINT_CAMO = 0,
	WEAPON_TINT_GREEN = 1,
	WEAPON_TINT_ORANGE,
	WEAPON_TINT_POLICE,
	WEAPON_TINT_PINK,
	WEAPON_TINT_GOLD
}

enum E_WEAPON_TINT_STRUCT
{
	WT_OBJECT,
	Float: WT_X,
	Float: WT_Y,
	Float: WT_Z,
	Float: WT_RX,
	Float: WT_RY,
	Float: WT_RZ,
	Float: WT_SCALE_X,
	Float: WT_SCALE_Y,
	Float: WT_SCALE_Z
}

new g_weapon_tint[MAX_WEAPON_TINTS][E_WEAPON_TINT_STRUCT] =
{
	{346, 	-0.004999, 	-0.003999, 	-0.006000, 	0.000000, 	0.000000, 	-1.800000, 	1.007000,	1.337999, 	1.069000},
	{347, 	-0.003999, 	-0.001999, 	-0.003999, 	0.000000, 	0.299999, 	-0.999999, 	1.000000,	1.188000, 	1.063000},
	{348, 	-0.006999, 	-0.004000, 	0.002000, 	-1.600000, 	-0.200000, 	0.400000, 	1.019999, 	1.146999, 	1.027000},
	{349, 	0.000000, 	-0.008999, 	-0.004000, 	0.000000, 	1.099999, 	1.499999, 	1.000000, 	1.222000, 	1.088000},
	{351, 	0.003000, 	-0.014000, 	-0.003000, 	0.000000, 	0.000000, 	2.199999, 	1.000000, 	1.371000, 	1.023000},
	{352, 	-0.002000, 	-0.008000, 	-0.001999, 	-0.300000, 	0.000000, 	1.199999, 	1.019999, 	1.245000, 	1.043000},
	{353, 	0.000000, 	-0.009000, 	-0.009000, 	0.000000, 	0.099999, 	2.100000, 	1.000000, 	1.290001, 	1.053000},
	{355, 	0.000000, 	-0.011000, 	0.000000, 	0.000000, 	0.000000, 	2.100000, 	1.009000, 	1.424000, 	1.013000},
	{356, 	-0.002000, 	-0.005999, 	0.001000, 	0.000000, 	0.899999, 	1.699999, 	0.997999, 	1.318999, 	1.088001},
	{372, 	-0.003000, 	-0.009000, 	-0.001999, 	0.000000, 	0.400000, 	0.800000, 	1.015000, 	1.232000, 	1.055000},
	{357, 	0.000000, 	-0.015000, 	-0.001999, 	0.000000, 	1.200000, 	2.199999, 	1.000000, 	1.286001, 	1.096001},
	{359, 	0.001999, 	-0.007000, 	-0.009000, 	0.000000, 	-0.100000, 	0.000000, 	0.989999, 	1.213001, 	1.084001},
	{360, 	0.001000, 	-0.004999, 	-0.008000, 	0.000000, 	0.000000, 	0.000000, 	1.000000, 	1.140000, 	1.055000}
};

// ------------------------------------------
enum E_GREEN_ZONES_STRUCT
{
    Float: GZ_MIN_X,
    Float: GZ_MIN_Y,
    Float: GZ_MAX_X,
    Float: GZ_MAX_Y,
	Float:GZ_ACTOR[4],
	GZ_NAME[32],
    GZ_AREA,
	GZ_ACTOR_ID,
    Text3D:GZ_TEXT_ID
}
new g_green_zones[24][E_GREEN_ZONES_STRUCT] =
{
    {551.7003,1846.3165,704.3073,1646.1545,{578.2440,1723.3358,12.1756,181.9056}, "Больница Арзамас"},
    {408.6671,1611.0054,501.8497,1514.4403,{436.3647,1562.2180,12.2021,183.0116}, "Новый Спавн Арз"},
    {-2439.6182,2822.7542,-2499.7090,2861.3582,{-2464.9138,2850.1689,37.7199,8.8457}, "Спавн Эдово"},
    {-2706.4543,241.2068,-2647.0610,43.9125,{-2677.8374,184.4783,12.2208,5.2775}, "Спавн Лыткарино"},
    {-2120.2087,2752.9897,-1698.1597,3005.0923,{-2108.1538,2758.8706,5.9972,7.4242}, "Порт"},
    {-2124.2585,-259.9935,-2267.3943,-351.1943,{-2211.7898,-284.1801,23.5022,95.2307}, "Казино Лыткарино"},
    {1015.3820,424.2216,732.3823,698.3463,{837.4645,570.9501,15.8932,79.5404}, "Спавн Арзамас"},
    {732.3823,698.3463,879.2080,793.4481,{0.0,0.0,0.0,0.0}, "Автобусы Арзамас"},
    {-525.0851,3258.4309,-322.2323,3478.4412,{-504.1178,3357.0920,29.7678,184.8215}, "Шахта"},
    {2162.1733,2388.5747,2242.3176,2281.8894,{0.0,0.0,0.0,0.0}, "БУ Низкого"},
    {1919.3080,2788.5122,1823.2552,2850.6716,{0.0,0.0,0.0,0.0}, "Автосалон Высокий"},
    {416.8062,718.9493, 379.4702,858.6207,{0.0,0.0,0.0,0.0}, "Автосалон Средний"},
    {1946.1272,1914.1825,1876.0299,1960.6541,{0.0,0.0,0.0,0.0}, "Автошкола"},
    {1904.3466,-1833.1650,1954.8192,-2012.2712,{1928.3876,-1966.8367,31.7385,157.2713}, "Казино Южный"},
    {2350.4697,-2306.5549,2406.9956,-2355.8052,{0.0,0.0,0.0,0.0}, "Спавн Южный"},
    {2776.0161,-2404.5928,2670.3665,-2499.3706,{0.0,0.0,0.0,0.0}, "БУ Высокий"},
    {413.0094,443.9093, 644.8279,545.2263,{0.0,0.0,0.0,0.0}, "Банк Арзамас"},
    {-273.7167,273.4264,-76.3648,482.4506,{0.0,0.0,0.0,0.0}, "Стадион"},
    {2191.5535,1473.7668, 2279.6724,1368.4681,{0.0,0.0,0.0,0.0}, "Игра Дверей"},
    {-2633.4036,-1500.8442, -2860.6121,-1187.6040,{-2733.0918,-1284.9432,10.2625,316.3994}, "Свалка"},
    {2428.4375,-764.5795, 2631.2297,-574.5925,{0.0,0.0,0.0,0.0}, "Ашан"},
    {-167.5524,658.7496,-284.1878,878.9001,{0.0,0.0,0.0,0.0}, "Парк Арзамас"},
    {48.8999,994.2867, -85.0770,860.5194,{0.0,0.0,0.0,0.0}, "Магазин Оружия"},
    {1736.5280,2418.4602, 1830.0422,2585.6372,{0.0,0.0,0.0,0.0}, "Пром.База"}
};

// ------------------------------------------
enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[64],
	BR_COLOR,
	BR_IN_JOB
};

enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

// ------------------------------------------
enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

// ------------------------------------------
enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}

new player_press_pedal[MAX_PLAYERS];
#include "systems/dialog_enum.inc"
// ------------------------------------------
enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_RERFECT_DRIVER,
	JOB_TRUCKER,		// дальнобойщик
	JOB_FIREMAN
};

// ------------------------------------------
enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// Телепорт (входы/выходы)
	PICKUP_ACTION_TYPE_SKLAD,
	PICKUP_ACTION_TYPE_DRIVING_TUTO, 	// теория в автошколе
	PICKUP_ACTION_TYPE_KIOSK,
	PICKUP_ACTION_TYPE_ATM,
	PICKUP_ACTION_TYPE_FREE_HEAL,
	PICKUP_ACTION_TYPE_NEFT,
	PICKUP_ACTION_TYPE_INFOMVD,
	PICKUP_ACTION_TYPE_RESPMVD,
	PICKUP_ACTION_TYPE_RESPHOSPITAL,
	PICKUP_ACTION_TYPE_STOYNKA,				// банкомат
	PICKUP_ACTION_TYPE_TRAILER,
	PICKUP_ACTION_TYPE_SELLSAB,
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временная работа
	PICKUP_ACTION_TYPE_INFO_PICKUP, 	// инфо пикап
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_APTEKA,      // аптека
	PICKUP_ACTION_TYPE_BIZ_KONDITER,    // кондитерская
	PICKUP_ACTION_TYPE_BIZ_EXIT,
	PICKUP_ACTION_TYPE_INKAS_ARM,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_BIZ_AVTOZAP,
	PICKUP_ACTION_TYPE_BIZ_GARDEN,      // покупка в Садоводе
	PICKUP_ACTION_TYPE_CELL_SALON,		// покупка в сотовом салоне
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_SRED,	// покупка авто
	PICKUP_DM,	// dm зона
	PICKUP_ACTION_TYPE_KIOSK_ENTER,
	PICKUP_ACTION_TYPE_BIZ_CAR_NIZ,
	PICKUP_ACTION_INFO_B,
	PICKUP_ACTION_BLACK_MARKET,
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,
	PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ,
	PICKUP_ACTION_TYPE_BIZ_CAR_HOME,	// телепорт к выходу из авторынка
	PICKUP_ACTION_TYPE_MINER_CARRI,		// пикап у вагонетки
	PICKUP_ACTION_TYPE_GANG_REPOSIT,	// склады для банд
	PICKUP_ACTION_TYPE_LUMBERJACK_P,	// положить дрова на склад лесопилки
	PICKUP_ACTION_TYPE_ARMORY,			// оружейный склад
	PICKUP_ACTION_TYPE_BIZ_CAR_TUN,		// тюнинг транспорта
	PICKUP_ACTION_TYPE_BIZ_GUN,
	PICKUP_ACTION_TYPE_BIZ_TIR,
	PICKUP_ACTION_TYPE_AMMO_BUY,			// магазин оружия
	PICKUP_ACTION_TYPE_SELL_CAR,
	PICKUP_ACTION_TYPE_FREE_VELIK,
	PICKUP_ACTION_TYPE_CONT_INFO,
	PICKUP_ACTION_TYPE_SELLSIM,
	PICKUP_ACTION_TYPE_INFO_BOLKA,
	PICKUP_ACTION_TYPE_FERMER_P,
	PICKUP_ACTION_TYPE_DUTY,
	PICKUP_ACTION_TYPE_BIZ_PC_CLUB,		// компьютерный клуб
	PICKUP_ACTION_TYPE_BIZ_PC_GAME,
	PICKUP_ACTION_TYPE_BUY_DRUGS,
	PICKUP_ACTION_TYPE_TEAM_RAZDEV,
	PICKUP_ACTION_TYPE_FREE_EAT,
	PICKUP_ACTION_TYPE_GOVS_EAT,
	PICKUP_ACTION_TYPE_SHIN,
	PICKUP_ACTION_TYPE_GARAGE,
	PICKUP_ACTION_TYPE_GARAGE_SKLAD,
	PICKUP_ACTION_TYPE_GARAGE_EXIT,
	PICKUP_ACTION_TYPE_MVD,
	PICKUP_ACTION_TYPE_PARKING_ENT,
	PICKUP_ACTION_TYPE_PARKING_EXT,
	PICKUP_ACTION_TYPE_BANDRUSSIA,
	PICKUP_ACTION_TYPE_TOPBANDITALY,
	PICKUP_ACTION_TYPE_TOPBANDJAPAN,
	//PICKUP_ACTION_TYPE_AK,
	PICKUP_ACTION_TYPE_KONTRABANDA,
	PICKUP_ACTION_TYPE_KONTRABANDA1,
	PICKUP_ACTION_TYPE_AK,
	PICKUP_ACTION_TYPE_AK1,
	PICKUP_ACTION_TYPE_AK2,
	PICKUP_ACTION_TYPE_MUSOR,
	PICKUP_ACTION_TYPE_AK3,
	PICKUP_ACTION_TYPE_AKTPSKLAD,
	PICKUP_ACTION_TYPE_BARBER,
	PICKUP_ACTION_TYPE_INVITE_METRO,
	PICKUP_ACTION_TYPE_WEARSPORT,
	PICKUP_ACTION_TYPE_PAINT_BALL,
	PICKUP_ACTION_TYPE_POPOLNENIE,
	PICKUP_ACTION_TYPE_SVALKA,
	PICKUP_ACTION_TYPE_INFAOSVALKE,
	PICKUP_ACTION_TYPE_VIXOD_RUSSIA,
	PICKUP_ACTION_TYPE_VIXOD_ITALIA,
	PICKUP_ACTION_TYPE_VIXOD_JAPAN,
	PICKUP_ACTION_TYPE_FIX_CAR,
	PICKUP_ACTION_TYPE_PUSTOI,
	PICKUP_ACTION_TYPE_LIFTJAPAN,
	PICKUP_ACTION_TYPE_LIFTITALY,
	PICKUP_ACTION_TYPE_LIFTRUSSIA,
	PICKUP_ACTION_TYPE_RAZDEVALKAM,
	PICKUP_ACTION_TYPE_SHIPM,
	//PICKUP_ACTION_TYPE_AUCTION
	PICKUP_ACTION_TYPE_TK_MENU,
	PICKUP_ACTION_TYPE_TRADE_ROOM,
	PICKUP_ACTION_TYPE_CONTRABAND,
	PICKUP_ACTION_TYPE_1,
	PICKUP_ACTION_TYPE_2,
	PICKUP_ACTION_TYPE_3,
	PICKUP_ACTION_TYPE_4,
	PICKUP_ACTION_TYPE_6,
	PICKUP_ACTION_TYPE_7,
	PICKUP_ACTION_TYPE_8,
	PICKUP_ACTION_TYPE_9,
	PICKUP_ACTION_TYPE_10,
	PICKUP_ACTION_TYPE_MANSION,
	PICKUP_ACTION_TYPE_BUS_JOB
};
enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // Учебный транспорт (для сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_RENT_MOPED,
	VEHICLE_ACTION_TYPE_OWNABLE_TR,
	VEHICLE_ACTION_TYPE_TRUCKS_CAR,     // TK
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// Водитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// Таксист
	VEHICLE_ACTION_TYPE_RERFECT,
	VEHICLE_ACTION_TYPE_TESLA_CAR,      // TESLA Y DEDA      // фсин машины
	VEHICLE_ACTION_TYPE_MECHANIC,		// Автомеханик
	VEHICLE_ACTION_TYPE_TRUCKER_1,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_TRUCKER_2,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_TRUCKER_3,		// Дальнобойщик
	VEHICLE_ACTION_TYPE_RENT_CAR,		// Транспорт для аренды
	VEHICLE_ACTION_TYPE_BLACKMARKET,
	VEHICLE_ACTION_TYPE_INKAS_CAR,
	VEHICLE_ACTION_TYPE_MCHS_CAR,		// Автомобили МЧС
	VEHICLE_ACTION_TYPE_ARZ_CAR,		// Автомобили Арзамасской ОПГ
	VEHICLE_ACTION_TYPE_ELECTRICIAN,
	VEHICLE_ACTION_TYPE_BAT_CAR,		// Автомобили Батыревской ОПГ
	VEHICLE_ACTION_TYPE_LYT_CAR,		// Автомобили Лыткаринской ОПГ
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// Транспорт, созданный администратором
	VEHICLE_ACTION_TYPE_FERMA_CAR,
	VEHICLE_ACTION_TYPE_CARSH_CAR,
	VEHICLE_ACTION_TYPE_FIRE_CAR,
	VEHICLE_ACTION_TYPE_KONTRA,
	VEHICLE_ACTION_TYPE_DONATE,
	VEHICLE_ACTION_TYPE_KONTRA1,
	VEHICLE_ACTION_TYPE_KONTRA2,
	VEHICLE_ACTION_TYPE_AUTOSALON,
	VEHICLE_ACTION_TYPE_FAMILY_CAR,
	CP_WBANK,
    CP_ACTION_RACE_WBANK,
	VEHICLE_ACTION_TYPE_SVALKA_CAR,
	VEHICLE_ACTION_TYPE_PRIZE,
	VEHICLE_ACTION_TYPE_SKATEBOARD,
	VEHICLE_ACTION_TYPE_ACTIVE_ACS,
	VEHICLE_ACTION_TYPE_TAXI,		// Автомобили Таксопарка
	VEHICLE_ACTION_TYPE_PEL_BASE,		// Автомобили База Пэла
	VEHICLE_ACTION_TYPE_ORG_CARS,
	VEHICLE_ACTION_TYPE_RAFFLE_SHOP
};

enum // типы cp
{
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (класть руду)
	// -------
    CP_ACTION_TYPE_LUMBERJACK_TAKE,		// лесоруб (брать дрова)
	// -------
	CP_ACTION_TYPE_FERMER_TAKE,         // фермер (брать сено)
	CP_ACTION_TYPE_FERMER_PUT,         // фермер (ложить сено)
    CP_ACTION_TYPE_PUT_TRAIN,
    CP_ACTION_TYPE_PUT_FERMA,
    CP_ACTION_TYPE_FERMER_TAKE_SBOR,
    CP_ACTION_TYPE_FERMER_PUT_SBOR,
    CP_ACTION_TYPE_LOADER_JOB_TAKE,
    CP_ACTION_TYPE_LOADER_JOB_PUT,
	CP_ACTION_TYPE_FERMER_POLE,
};

enum // типы race_cp
{
	RCP_ACTION_TYPE_DRIVING_EXAM = 1, // сдача на права (практика)
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
	RCP_ACTION_TYPE_ORDER,		// служба доставки
	RCP_ACTION_TYPE_ORDER_INVITE,
	RCP_ACTION_TYPE_FERMA,
	RCP_ACTION_TYPE_YGON,
	RCP_ACTION_TYPE_METRO_TRAIN_1,
	RCP_ACTION_TYPE_METRO_TRAIN_2,
	RCP_ACTION_TYPE_METRO_TRAIN_3,
	RCP_ACTION_TYPE_METRO_TRAIN_4,
	RCP_ACTION_TYPE_METRO_TRAIN_5,
	RCP_ACTION_TYPE_METRO_TRAIN_6,
	RCP_ACTION_TYPE_METRO_TRAIN_7,
	RCP_ACTION_TYPE_METRO_TRAIN_8,
	RCP_ACTION_TYPE_METRO_TRAIN_9,
	RCP_ACTION_TYPE_METRO_TRAIN_10,
	RCP_ACTION_TYPE_METRO_TRAIN_11,
	RCP_ACTION_TYPE_METRO_TRAIN_12,
	RCP_ACTION_TYPE_METRO_TRAIN_13,
	RCP_ACTION_TYPE_METRO_TRAIN_14,
	RCP_ACTION_TYPE_METRO_TRAIN_15,
	RCP_ACTION_TYPE_METRO_TRAIN_16,
	RCP_ACTION_TYPE_METRO_TRAIN_17,
	RCP_ACTION_TYPE_METRO_TRAIN_18,
	RCP_ACTION_TYPE_METRO_TRAIN_19,
	RCP_ACTION_TYPE_METRO_TRAIN_20,
	RCP_ACTION_TYPE_METRO_TRAIN_21,
	RCP_ACTION_TYPE_METRO_TRAIN_22,
	RCP_ACTION_TYPE_METRO_TRAIN_23,
	RCP_ACTION_TYPE_ELECT,
	RCP_ACTION_TYPE_FERMA_1,
	RCP_ACTION_TYPE_FERMA_2,
	RCP_ACTION_TYPE_FERMA_3,
	RCP_ACTION_TYPE_FERMA_4,
	RCP_ACTION_TYPE_FERMA_5,
	RCP_ACTION_TYPE_FERMA_6,
	RCP_ACTION_TYPE_FERMA_7,
	RCP_ACTION_TYPE_FERMA_8,
	RCP_ACTION_TYPE_FERMA_9,
	RCP_ACTION_TYPE_FERMA_10,
	RCP_ACTION_TYPE_FERMA_11,
	RCP_ACTION_TYPE_FERMA_12,
	RCP_ACTION_TYPE_FERMA_13,
	RCP_ACTION_TYPE_FERMA_14,
	RCP_ACTION_TYPE_FERMA_15,
	RCP_ACTION_TYPE_FERMA_16,
	RCP_ACTION_TYPE_FERMA_17,
	RCP_ACTION_TYPE_FERMA_18,
	RCP_ACTION_TYPE_FERMA_19,
	RCP_ACTION_TYPE_FERMA_20,
	RCP_ACTION_TYPE_POLICE,
	RCP_ACTION_TYPE_ORDER2,
	RCP_ACTION_TYPE_ORDER2_INVITE
};

// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};

// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,	// продукт на заводе
	OBJECT_TYPE_CARRIAGE,		// вагонетка в шахте
	OBJECT_TYPE_WOOD,			// дерево на лесопилке
	OBJECT_TYPE_TRAIN,			// поезд
};

// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// входящее предложение от игрока
	O_INCOMING_TYPE, 	// входящее предложение
	O_INCOMING_VALUE[3] // значение входящего предложения
};

enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_WEDDING,         // женитьба
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа АЗС
	OFFER_TYPE_FILL_CAR,		// заправка авто (механик)
	OFFER_TYPE_REPAIR_CAR,		// починка авто (механик)
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предприятие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселиться в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный ТС
	OFFER_TYPE_SELL_GARAGE,
	OFFER_TYPE_SELL_KIOSK,
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владения оружием
	OFFER_TYPE_SHOWMC,          // показать мед. карту
	OFFER_TYPE_GIVE_CAR_KEY,	// дать ключи от личного транспорта
	OFFER_TYPE_CASINO_DICE,		// бросить кости в казино
	OFFER_TYPE_GETHERE,			// телепорт к себе админа выше рангом
	OFFER_TYPE_GOTO,
	OFFER_TYPE_GIVE_MIC,		// доступ в радиоэфир
	OFFER_TYPE_GIVE_LIC,		// продажа лицензий
	OFFER_TYPE_JAIL_FREE,		// выпустить из тюрьмы (для адвокатов)
	OFFER_TYPE_FINVITE,
 	OFFER_TYPE_SELLSIM,
    OFFER_TYPE_SELL_SKIN,
    OFFER_TYPE_KISS,
	OFFER_TYPE_GIVE_ITEM,
    OFFER_TYPE_FIGHT,
    OFFER_TYPE_SHIN,
    OFFER_TYPE_SHOWPASS,
    OFFER_TYPE_SHOWADMSTATS,
    OFFER_TYPE_SHOWLIC,
    OFFER_TYPE_SELL_GARDEN,
	OFFER_TYPE_SELL_NEFTENASOS,
    OFTER_TYPE_SELL_SKIN,
    OFFER_TYPE_TEST_DRIVE,
	OFFER_TYPE_EXCHANGE,
	OFFER_TYPE_TRADE,
	OFFER_TYPE_ARENDA_GARDEN,
	OFFER_TYPE_SHOWDOC
};

new
	Float: cars_pos_after_purchase[10][11][4] =
{
	{ // --- Мото-Вело рынок
		{-2250.6274,267.2955,24.0154,280.1208},
		{-2249.8101,270.5635,24.0196,262.6171},
		{-2249.0894,274.4236,24.0102,264.4334},
		{-2248.8113,277.8660,24.0164,265.6590},
		{-2248.0889,281.9852,24.0170,260.9164},
		{-2247.8179,284.9124,24.0181,254.3391},
		{-2247.4216,289.0184,24.0189,262.9468},
		{-2246.4475,292.7983,24.0246,218.4400},
		{-2243.1907,292.2455,24.0193,171.3951},
		{-2240.1814,290.0771,24.0167,134.1157},
		{-2237.5935,286.2572,24.0152,111.6432}
	},
	{ // --- Премиум класс
		{1882.5557,2832.2222,12.0596,89.8854},
		{1882.2219,2829.2625,12.0615,90.1194}, 
		{1882.1965,2826.2576,12.0596,90.8629},
		{1882.2971,2823.3337,12.0596,89.9820}, 
		{1882.3599,2820.4861,12.0596,90.2570},
		{1882.3717,2817.5117,12.0671,89.8157}, 
		{1882.3297,2814.5015,12.0671,90.7694}, 
		{1882.3187,2811.6084,12.0654,90.7239},
		{1882.1091,2808.6445,12.0596,89.9823},
		{1903.2375,2832.2148,12.0596,269.5676},
		{1903.2390,2829.2559,12.0615,269.8238}
	},
	{ // --- Эконом класс
		{2604.5193,-648.4668,11.9913,179.8412},
		{2601.8059,-663.1404,12.0031,0.2108},
		{2597.5320,-663.3077,11.9873,0.7883},
		{2592.5464,-663.5684,11.9870,0.6542},
		{2578.1572,-664.1323,11.9882,1.7210},
		{2571.7283,-663.9835,11.9881,0.4557},
		{2566.3403,-664.2360,11.9882,1.4785},
		{2564.4941,-629.1988,11.9872,180.2587},
		{2568.9873,-629.4592,11.9887,180.5780},
		{2574.8706,-629.3328,11.9892,180.2887},
		{2585.4563,-640.1770,11.9886,91.1589}
	},
	{ // --- Cредний класс
		{427.5580,777.4064,11.8428,67.9712},
		{426.5786,774.8287,11.8432,70.3927},
		{425.4217,772.1042,11.8436,70.8532},
		{406.5061,776.5790,11.6978,159.5490},
		{424.4465,769.2787,11.8431,70.4339},
		{423.4771,766.4811,11.8433,69.5840},
		{422.5185,763.7278,11.8422,71.0284},
		{427.5580,777.4064,11.8428,67.9712},
		{426.5786,774.8287,11.8432,70.3927},
		{425.4217,772.1042,11.8436,70.8532},
		{406.5061,776.5790,11.6978,159.5490}
	},
	{ // --- Авиа салон
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378},
		{-11.4711,903.6136,12.1691,239.7835},
		{-65.0162,939.1511,12.1710,358.0699},
		{-57.7549,973.1318,12.1519,286.3471},
		{-29.5055,966.0959,11.4341,289.0198},
		{-1.7095,953.9136,12.1709,282.3760},
		{11.9462,950.2479,12.1877,265.6378}
	},
	{ // --- яхт клуб
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860},
		{199.1406,-194.3742,0.4724,2.2400},
		{196.6700,-224.4580,0.5092,180.6496},
		{217.7300,-223.3614,0.5615,177.8204},
		{234.3404,-222.5822,0.5772,174.9891},
		{251.8486,-221.6436,0.5055,178.2675},
		{255.3093,-190.3754,0.5415,2.8780},
		{232.4722,-193.6352,0.6988,1.8729},
		{218.2477,-191.6468,0.6195,4.7860}
	},
	{ // --- салон грузовиков
		{1037.6537,-1907.1952,34.4461,227.5526},
		{1033.6270,-1911.6687,34.4458,227.5249},
		{1030.0300,-1915.7257,34.4447,229.4517},
		{1043.7511,-1912.9106,34.4458,228.3046},
		{1039.9377,-1917.4933,34.4526,227.6205},
		{1036.1338,-1921.2515,34.4531,228.9321},
		{1037.6537,-1907.1952,34.4461,227.5526},
		{1033.6270,-1911.6687,34.4458,227.5249},
		{1030.0300,-1915.7257,34.4447,229.4517},
		{1043.7511,-1912.9106,34.4458,228.3046},
		{1039.9377,-1917.4933,34.4526,227.6205}
	},
	{ // --- салон домов на колесах
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879},
		{-2398.1365,192.3909,21.4967,260.1879}
	},
	{ // --- салон вертолетов
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937},
		{-65.7624,932.6229,12.0789,168.3937}
	},
	{ // --- салон катеров
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443},
		{249.6208,-196.8738,-0.1889,359.7443}
	}
};

stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}
stock SetPlayerPosACS(playerid, Float:x, Float:y, Float:z, Float:angle, world, interior, setUP = false)
{
    if(playerid != INVALID_PLAYER_ID)
	{
        if(!setUP)
		{
            if(TI[playerid][tVirtualWorld] != world)
			{
                TI[playerid][tVirtualWorld] = world;
                SetPlayerVirtualWorld(playerid, world);
            }
            if(TI[playerid][tInterior] != interior)
			{
                TI[playerid][tInterior] = interior;
                SetPlayerInterior(playerid, interior);
                //
                if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
                else SetPlayerTime(playerid,11, 00);
            }
        }
        else
		{
            SetPlayerVirtualWorld(playerid, world);
            SetPlayerInterior(playerid, interior);
            //
            if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
            else SetPlayerTime(playerid,11, 00);
        }
        //
        SetPlayerPos(playerid, x, y, z);
        SetPlayerFacingAngle(playerid, angle);
    }
}
stock SetPlayerPosAC(playerid, Float:x, Float:y, Float:z, world, interior, setUP = false)
{
    if(playerid != INVALID_PLAYER_ID)
	{
        if(!setUP)
		{
            if(TI[playerid][tVirtualWorld] != world)
			{
                TI[playerid][tVirtualWorld] = world;
                SetPlayerVirtualWorld(playerid, world);
            }
            if(TI[playerid][tInterior] != interior)
			{
                TI[playerid][tInterior] = interior;
                SetPlayerInterior(playerid, interior);
                //
                if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
                else SetPlayerTime(playerid,11, 00);
            }
        }
        else
		{
            SetPlayerVirtualWorld(playerid, world);
            SetPlayerInterior(playerid, interior);
            //
            if(!interior) SetPlayerTime(playerid,tmphour, tmpminute);
            else SetPlayerTime(playerid,11, 00);
        }
        //
        SetPlayerPos(playerid, x, y, z);
    }
}

// ------------------------------------------
enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

// ------------------------------------------
enum E_TEMP_JOB_STRUCT // временные работы
{
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (ящик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский)
};

new Float: vehicle_temp_position[MAX_PLAYERS][4]; // позиция автомобиля при въезде в тюнинг

// ------------------------------------------
enum E_ADVERT_STRUCT
{
	A_CREATOR,
	bool: A_EDIT,
	A_TEXT[50]
}

new g_advert[MAX_ADVERTS][E_ADVERT_STRUCT]; // объявления

new g_advert_created; // кол-во отправленных объявлений

// ------------------------------------------
enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	TEMP_JOB_MINER,
	TEMP_JOB_FACTORY_TRUCKER,
	TEMP_JOB_FACTORY,
	TEMP_JOB_LUMBERJACK,
	TEMP_JOB_ELECTRICIAN,
	TEMP_JOB_FERMER,
	TEMP_JOB_LOADER
};

enum //
{
	TEMP_JOB_STATE_NONE,
	// --------
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	TEMP_JOB_STATE_LOADER_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADER_UNLOAD, 	// класть груз
	// --------
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
	// --------
	TEMP_JOB_STATE_LUMBERJACK_CHOP,	 // рубить дрова
	TEMP_JOB_STATE_LUMBERJACK_PUT,	 // нести на склад
	TEMP_JOB_STATE_LUMBERJACK_DROP,	 // уронил дрова
	// --------
	TEMP_JOB_STATE_FERMER_CHOP,      // брать сено
	TEMP_JOB_STATE_FERMER_PUT,       // нести сено
	TEMP_JOB_STATE_FERMER_DROP,      // уронить сено
	TEMP_JOB_STATE_FERMER_SBOR,
	TEMP_JOB_STATE_FERMER_PUT_SBOR
};

enum
{
	A_OBJECT_SLOT_SPINE = 0, 		// Торс
	A_OBJECT_SLOT_HEAD, 			// Голова
	A_OBJECT_SLOT_ARM, 				// Плечи
	A_OBJECT_SLOT_HAND, 			// Руки
	A_OBJECT_SLOT_THIGH, 			// Бедра
	A_OBJECT_SLOT_FOOT, 			// Ноги
	A_OBJECT_SLOT_CALF, 			// Голень
	A_OBJECT_SLOT_FOREARM, 			// Предплечье
	A_OBJECT_SLOT_CLAVICLE,			// Ключица
	A_OBJECT_SLOT_NECK, 			// Шея
	//A_OBJECT_SLOT_JAW				// Челюсть
};

enum
{
	A_OBJECT_BONE_SPINE = 1, 		// Торс
	A_OBJECT_BONE_HEAD, 			// Голова
	A_OBJECT_BONE_LEFT_ARM, 		// Левое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// Правое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Левая рука
	A_OBJECT_BONE_RIGHT_HAND, 		// Правая рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Левое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// Правое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Левая нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// Правая нога
	A_OBJECT_BONE_RIGHT_CALF, 		// Правая голень
	A_OBJECT_BONE_LEFT_CALF, 		// Левая голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Левое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// Правое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Левая ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// Правая ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Шея
	A_OBJECT_BONE_JAW				// Челюсть
};

// ------------------------------------------
enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_CHECK_BAN_IP,
	LOGIN_STATE_LOAD_ACC	 	// Загрузка аккаунта
};

// ------------------------------------------
new g_player_auth_inputs[MAX_PLAYERS] = 0;
new g_player_account_state[MAX_PLAYERS] = 0;

new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];

new g_player_default_values[E_PLAYER_STRUCT] =
{
    0,        		 		// id
    0,        		 		// рефер
    0,        		 		// пол игрока
    "None",        	 		// пароль игрока
    "None",    		 		// емайл игрока
    false,     				// подтвержден ли емайл
    0,        		 		// скин игрока
    0,        		 		// деньги игрока
    0,      		 		// военный билет
    0,       		 		// деньги в банке
    ADMIN_TYPE_NONE, 		// уровень админки
	0,
    YADMIN_TYPE_NONE,		// уровень YouTube
    0,
    0,
    0,
    0,
    0,    					// лицензия на управление авто
    0,    					// лицензия на оружие
    0,        				// время регистрации
    "255.255.255.255", 	 	// ип при регистрации
    "255.255.255.255",   	// ип при последнем входе
	1,						// уровень игрока
	0,						// очки опыта игрока
	0,						// уровень розыска
	0,						// номер телефона
	0,						// Apple Watch
	0,						// на счету телефона
	0,						// цвет телефона
	0,						// законопослушность
	0, 						// улучшения
	0,						// жена
	0,						// организация
	0,						// скин организации
	0,						// подразделение
	0,						// зарплата
	0,						// работа / должность(ранг)
	HOUSE_TYPE_NONE, 		// тип жилья (дом/гостиница/в гостях)
	-1,						// комната в доме
	-1,						// дом
	-1,						// ид дома в котором спавнишься
	-1,						// слотов на дом
	-1,						// бизнес
	"None", 				// реальный телефон игрока
	"None", 				// пин код
	REQUEST_TYPE_OFF,		// запрос телефона при авторизации
	REQUEST_TYPE_OFF, 		// запрос пин кода при авторизации
	// -------------------------
	0,						// время последнего входа\выхода
	// -------------------------
	0,						// время игры за час
	0,						// время игры за день
	0,						// время игры за вчерашний день
	// -------------------------
	0xFFFFFF11,				// цвет игрока
	-1,						// выбраный скин
	0,						// тип чата
	0,						// время афк
	INVALID_VEHICLE_ID, 	// ид последнего авто в котором сидел
	INVALID_DIALOG_ID,		// ид последнего диалога
	USE_ANIM_TYPE_NONE,		// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS, // кол-во попыток на авторизацию
	INVALID_PLAYER_ID,		// нацелен на игрока
	100.0,					// хп игрока
	// -------------------------
	TEMP_JOB_NONE,			// временная работа
	TEMP_JOB_STATE_NONE,	// действие что надо делать
	false,					// проверка анимки
	// ---------------------------------
	"",						// название службы
	0,						// тариф
	0,						// Зарплата
	0,						// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,		// рабочий транспорт
	-1,						// таймер окончания работы
	-1,						// Какой стол использует на заводе
	0, 						// маршрут автобуса
	0,						// шаг маршрута
	0,						// шаг маршрута
	0,						// шаг маршрута
	0,						// заправлено на N
	0,						// отремонтировано на N руб
	false,					// на работе ли
	// -------------------------
	false,					// статус авторизации
	false,					// использует ли анимку (/anim)
	false,					// заблокировать вызов OnPlayerLeaveDynamicArea
	false,					// прогружены ли анимки при спавне
	false,					// прогружен ли анимлист
	false,					// есть ли у игрока закуска
	Text3D: -1,				// бейджик советника
	false,					// отключение чата организации
	//--------------------------
	Text3D: -1,
	Text3D: -1,
	// -------------------------
	-1, 					// время на авторизаци
	-1, 					// в какой бизнес вошел
	-1, 					// в какой дом вошел
	-1,						// в каком подъезде
	-1,						// на каком этаже в подъезде
	-1,						// ид пикапа на которым стоял последний раз
	-1,						// в каком номере в отеле
	0,						// на каком этаже в отеле
	0,						// маска
	0,						// кол-во использование напитка
	REALTOR_TYPE_NONE,		// риелторка
	// -------------------------
	"255.255.255.255", 		// ип игрока
	"", 					// имя игрока
	"", 					// имя жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, 	// статус аккаунта (авторизаци/регистрация)
	0, 						// шаг (регистрации/авторизации)
	// -------------------------
	0,             			// варны
	0,        				// время варнов
	0,             			// время мута
	0,                  	// время блокировки репорта
	0,                  	// кол-во снятия мутов
	0,                  	// кол-во снятия блокировок репорта
	// -------------------------
	0, 						// сила
	0,     					// скилл кольт
	0,   					// скилл пистолет с глушителем
	0,     					// скилл дигл
	0,    					// скилл дробовик
	0,        				// скилл мп5
	0,	    				// скилл ак47
	0,         				// скилл м4
	0,						// скилл снайперская винтовка
	0,    					// скилл обрез
	0,  					// скилл тактический дробовик
 	0,  					// скилл микро-узи
	//--------------------------
	0,                   	// место спавна
	//--------------------------
	0,						// текущий баланс донат-очков
	0,						// всего пополнений донат-очков
	//--------------------------
	false,					// лежит ли в больнице
	-1,						// номер койки
	//--------------------------
	false,					// перезаряжает ли оружие
	0,						// количество перезарядок
	false,					// есть ли наручники
	// -------------------------
	INVALID_VEHICLE_ID,	 	// покупает ли авто
	INVALID_VEHICLE_ID,		// каршеринг авто
	INVALID_VEHICLE_ID,		// арендованное авто
	INVALID_VEHICLE_ID,		// доверенное авто
	2,						// количество слотов для авто
	// -------------------------
	0,						// время заключения
	0,                  	// время заключения в КПЗ
	0,						// здоровье
	0,						// раскраски оружия
	false,     				// выполняет ли заказ
	// -------------------------
	0,						// уровень премиум аккаунта
	0,						// время действия премиум аккаунта
	Text3D: -1,        		// бейджик фамы
	0,						// рулетка
	0, 						//таймер выхода из авто
	"None"        	 		// пароль админки
};

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};
// ------------------------------------------
new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;

stock GetPlayerOwnableCarLast(playerid)
{
    new vehicleid = INVALID_VEHICLE_ID;
	if(GetPVarInt(playerid, "lli") != INVALID_VEHICLE_ID)
	{
		new idxd = GetVehicleData(GetPVarInt(playerid, "lli"), V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) vehicleid = GetPVarInt(playerid, "lli");
		else return vehicleid;
	}
	return vehicleid;
}

stock GetPlayerOwnableCarLoad(playerid)
{
    new vehicleid = INVALID_VEHICLE_ID;
	if(GetPVarInt(playerid, "lli") != INVALID_VEHICLE_ID)
	{
		new idxd = GetVehicleData(GetPVarInt(playerid, "lli"), V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) vehicleid = GetPVarInt(playerid, "lli");
		else return vehicleid;
	}
	return vehicleid;
}
// ------------------------------------------
new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;

new g_hotel_lift_CP[2];

new const
	Float: g_hotel_room_exit_pos[3][3] =
{
	{1275.9808, -772.4982, 1202.7220},
	{1275.9808, -764.2992, 1202.7220},
	{1275.9808, -756.2681, 1202.7220}
};

new const // позиции авто (парковка отеля / подогнать тс к отелю)
	g_hotel_car_park_pos[1][33][E_HOTEL_CAR_PARK_STRUCT] =
{
	{
		{-133.1494,	983.9849,	12.1618,	180.4495,	INVALID_VEHICLE_ID},
		{-137.5265,	983.8444,	12.1608,	179.9925,	INVALID_VEHICLE_ID},
		{-139.5423,	975.4324,	12.1614,	269.4506,	INVALID_VEHICLE_ID},
		{-139.2751,	971.6942,	12.1608,	267.8990,	INVALID_VEHICLE_ID},
		{-139.3615,	967.6329,	12.1618,	268.9070,	INVALID_VEHICLE_ID},
		{-139.2914,	963.4075,	12.1611,	270.4609,	INVALID_VEHICLE_ID},
		{-139.2221,	958.7978,	12.1608,	269.5585,	INVALID_VEHICLE_ID},
		{-116.4657,	971.6745,	12.1570,	89.46280,	INVALID_VEHICLE_ID},
		{-116.5386,	967.9235,	12.1557,	90.18910,	INVALID_VEHICLE_ID},
		{-116.5738,	963.9881,	12.1531,	90.00600,	INVALID_VEHICLE_ID},
		{-116.5876,	960.3621,	12.1551,	92.67610,	INVALID_VEHICLE_ID},
		{-116.2813,	950.5233,	12.1536,	90.45550,	INVALID_VEHICLE_ID},
		{-102.8195,	971.5937,	12.1614,	270.0878,	INVALID_VEHICLE_ID},
		{-102.6861,	968.0194,	12.1620,	269.5782,	INVALID_VEHICLE_ID},
		{-102.7776,	964.1411,	12.1621,	270.2165,	INVALID_VEHICLE_ID},
		{-102.9098,	960.6828,	12.1615,	270.6911,	INVALID_VEHICLE_ID},
		{-102.8726,	950.8474,	12.1610,	270.0904,	INVALID_VEHICLE_ID},
		{-116.2799,	950.5248,	12.1551,	90.53890,	INVALID_VEHICLE_ID},
		{-102.5865,	946.5525,	12.1611,	268.3489,	INVALID_VEHICLE_ID},
		{-94.7682,	983.9437,	12.1606,	178.0583,	INVALID_VEHICLE_ID},
		{-89.6837,	983.7529,	12.1627,	180.2712,	INVALID_VEHICLE_ID},
		{-88.7005,	975.4258,	12.1573,	91.58140,	INVALID_VEHICLE_ID},
		{-88.7543,	971.4301,	12.1574,	90.29010,	INVALID_VEHICLE_ID},
		{-88.7361,	968.0562,	12.1570,	90.12850,	INVALID_VEHICLE_ID},
		{-88.7494,	964.4591,	12.1579,	91.67410,	INVALID_VEHICLE_ID},
		{-88.6165,	960.7374,	12.1577,	90.89440,	INVALID_VEHICLE_ID},
		{-88.6389,	957.0118,	12.1556,	91.18100,	INVALID_VEHICLE_ID},
		{-88.5814,	953.0699,	12.1540,	90.86370,	INVALID_VEHICLE_ID},
		{-88.6637,	949.1523,	12.1536,	91.07860,	INVALID_VEHICLE_ID},
		{-88.6821,	945.1238,	12.1542,	91.11890,	INVALID_VEHICLE_ID},
		{-88.8479,	941.1545,	12.1542,	90.08610,	INVALID_VEHICLE_ID},
		{-88.8513,	937.4927,	12.1536,	90.22390,	INVALID_VEHICLE_ID},
		{-88.8047,	933.3365,	12.1541,	90.21220,	INVALID_VEHICLE_ID}
	}
};

// ------------------------------------------
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;

new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];

#include "systems/garbage.inc"
#include "systems/police/police_tablet.inc"
#include "systems/cars/magnitola.inc"
#include "systems/irpc_packet.inc"
#include "systems/page.inc"
//#include "systems/player/voice.inc"

#include "systems/dayving.inc"

new g_house_type[7][E_HOUSE_TYPE_STRUCT] =
{
	{
        "Деревенский дом", // название / тип
        2346.3789, -2459.9546, 1199.3516, 269.3445, // после входа
        2350.8967,-2463.9119,1199.3516, // аптечка
        2344.0784,-2457.1663,1199.3516, // шкаф
        2348.8140,-2456.3562,1199.3516, // Склад
        2, // интерьер
        1 // комнат
	},
	{
        "Эконом класс", // название / тип
        -2506.7422,-2802.6072,1049.8594, 359.3930, // после входа
        -2504.9829,-2798.5256,1049.8594, // аптечка
        -2502.9700,-2796.0068,1049.8594, // шкаф
        -2497.1707,-2795.8423,1049.8594, // Склад
        5, // интерьер
        3 // комнат
	},
	{
        "Низкий класс", // название / тип
        2344.7966, -2460.0222, 999.3516, 273.5191, // после входа
        2349.2537, -2465.4900, 999.3589, // аптечка
        2352.4089,-2463.5820,999.3516, // шкаф
        2349.2571,-2454.8821,999.3516, // Склад
        2, // интерьер
        3 // комнат
	},
	{
       "Средний класс", // название / тип
        435.5241, 1316.0438, 1615.5300, 358.1994, // после входа
        427.6841, 1318.7737, 1615.5300, // аптечка
        438.5707, 1322.1454, 1615.5300, // шкаф
        433.4722, 1332.2903, 1615.5300, // Склад
        3, // интерьер
        4 // комнат
	},
	{
        "VIP класс", // название / тип
        1604.4670, -411.6531, 1051.0000, 0.0, // после входа
        1608.6101, -406.6184, 1051.0000, // аптечка
        1613.3689, -405.9612, 1053.8750, // шкаф
        1609.9025, -404.2465, 1047.6719, // Склад
        10, // интерьер
        5 // комнат
	},
	{
        "Премиум класс+", // название / тип
        -1707.0907, 2752.7971, 1001.0391, 180.5050, // после входа
        -1694.7156, 2745.8916, 1001.0469, // аптечка
        -1700.0923, 2762.8831, 1005.1719, // шкаф
        -1701.3679, 2762.3721, 1005.1719, // Склад
        4, // интерьер
        2 // комнат
	},
	{
        "Элитный класс", // название / тип
        -2546.2422, -1248.9615, 1001.0000, 268.9145, // после входа
        -2522.9053, -1262.8729, 1000.9922, // аптечка
        -2553.7090, -1226.9863, 997.4988, // шкаф
        -2533.3398, -1228.5935, 997.5078, // Склад
        4, // интерьер
        5 // комнат
	}
};

new const g_house_improvements[8][E_IMPROVEMENTS_STRUCT] =
{
	{"Кровать", 14_500, 0},
	{"Совместное проживание", 60_000, 0},
	{"Оформление субсидии", 100_000, 0},
	{"Шкаф для вещей", 100_000, 0},
	{"Холодильник", 50_000, 0},
	{"Стиральная машина", 120_000, 0},
	{"Домашняя аптечка", 135_000, 0},
	{"Гардероб", 500_000, 0}
};

// ------------------------------------------
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;
//new g_kiosk[MAX_KIOSKS][E_KIOSK_STRUCT];


new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Дополнительные продукты", 			2_000_000,	0},
	{"Медицинское обслуживание", 			2_500_000,	0},
	{"Пониженное налогообложение",			3_000_000,	0},
	{"Звуковые эффекты при входе",			3_500_000,	0},
	{"Дополн. склад для продуктов",			4_000_000,	0},
	{"Рекламная кампания",					4_500_000,	0}
};

new const
	g_vetr_improvements[2][E_IMPROVEMENTS_STRUCT] =
{
	{"Резервные аккумуляторы", 			4_000_000,	0},
	{"Дополнительные аккумуляторы", 			2_000_000,	0}
};

new g_garage[MAX_GARAGE][E_GARAGE_STRUCT];
new g_garage_loaded;

enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// гостиница
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
	BUSINESS_INTERIOR_CASINO = 7,		// казино
	BUSINESS_INTERIOR_CELL_SALON = 8,	// сотовый салон
	BUSINESS_INTERIOR_CAR_TUNING = 9,	// тюнинг транспорта
	BUSINESS_INTERIOR_BUY_GUN = 10,	// амунанция
	BUSINESS_INTERIOR_BANK = 11,         // банк
	BUSINESS_INTERIOR_COMP_CLUB = 12,
	BUSINESS_INTERIOR_SPORT = 13,
	BUSINESS_INTERIOR_DETEL = 14,
	BUSINESS_INTERIOR_ARENDA = 15,
	BUSINESS_INTERIOR_STO = 16,
	BUSINESS_INTERIOR_FERMA = 17,
	BUSINESS_INTERIOR_DET = 18,
	BUSINESS_INTERIOR_BY_NIZ = 19,
	BUSINESS_INTERIOR_BY_MED = 20,
	BUSINESS_INTERIOR_BY_HIG = 21,
	BUSINESS_INTERIOR_XZ = 22,
	BUSINESS_INTERIOR_SHOP_GARDEN = 23,	// магазин Садовод
	BUSINESS_INTERIOR_PARIK = 24,
	BUSINESS_INTERIOR_AVTOZAP = 25,
	BUSINESS_INTERIOR_TIR = 26,
	BUSINESS_INTERIOR_NOTARIUS = 27,
	BUSINESS_INTERIOR_WOSH = 28,	 // Прачечная
	BUSINESS_INTERIOR_ZAKUS = 29,	 // закусочная
	BUSINESS_INTERIOR_APTEKA = 30,   // Аптека
	BUSINESS_INTERIOR_KONDITER = 31,// Кондитерская
	BUSINESS_INTERIOR_VETRIKI = 32,
	BUSINESS_INTERIOR_CAR_MARKET_SR = 33,
};

new const
	g_business_interiors[34][E_BUSINESS_INTERIOR_STRUCT] =
{
	{ // магазин 24/7
		-508.5311, 1511.7339, 1001.0025, 		// позиции пикапа (выход)
		-508.4246, 1508.6708, 1001.0025, 180.0,// позиции входа
		5, 									// интерьер
		-500.3986, 1511.0310, 1001.0025, 		// позиции аптечки
		-502.3037, 1504.5017, 1001.0025, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // клуб (алхамбра)
		-2242.0076,1008.5794,1059.6974, // позиции пикапа (выход)
		-2240.1707,1008.6591,1059.6974,271.6833, // позиции входа
		5, // интерьер
		-2237.7664,1010.8090,1059.4712, // позиции аптечки
		-2232.6899,992.1184,1059.4712, // позиции покупки
		-2232.6899,992.1184,1061.4712, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // управление статистики
		-364.2391, 2740.8413, 2502.1704,	// позиции пикапа (выход)
		-368.1136, 2740.9727, 2502.1951, 90.0,	// позиции входа
		0,									// интерьер
		-366.2918, 2736.5081, 2502.1704,	// позиции аптечки
		-371.4008, 2739.6472, 2502.1704,	// позиции покупки
		-370.0462, 2738.7839, 2503.8501,	// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // риелторское агенство
		162.4737, 742.7685, 25.8272,		// позиции пикапа (выход)
		163.3701, 745.0021, 25.8272, 339.92,// позиции входа
		0,									// интерьер
		161.4340, 748.0493, 25.8272,		// позиции аптечки
		160.5056, 744.9833, 25.8272,		// позиции покупки
		154.5396, 748.7235, 26.9926,		// позиции 3д текста
		-1
	},
 { // магазин одежды
		2004.7367,1905.6750,1001.0000,		// позиции пикапа (выход)
		2003.1340,1905.1023,1001.0000,87.5794,// позиции входа
		4,									// интерьер
		1996.2866,1906.5070,1001.0000,		// позиции аптечки
		2003.4229,1901.8441,1001.0000,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // гостиница
		725.0262, 592.7350, 1002.9598,		// позиции пикапа (выход)
		725.0227, 594.9494,1002.9598, 360.0,// позиции входа
		1,									// интерьер
		718.5051, 593.9505, 1002.9598,		// позиции аптечки
		724.8739, 602.2747, 1002.9598,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // авторынок
		1582.5762,2809.1921,1014.6044,		// позиции пикапа (выход)
		1586.3915,2809.8518,1014.6044,268.8661, // позиции входа
		5,									// интерьер
		2307.5610,1753.6313,1001.0000,		// позиции аптечки
		1584.9692, 2802.4504, 1014.6044,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // казино
		216.0834, -337.6153, 1011.0956,		// позиции пикапа (выход)
		215.8622, -334.5533, 1011.0956, 0.0, // позиции входа
		5,									// интерьер
		218.8801, -301.1998, 1011.4786,		// позиции аптечки
		215.7990, -302.8007, 1011.4786,		// позиции покупки
		215.8162, -301.5210, 1012.7519, 	// позиции 3д текста
		-1
	},
	{ // сотовый салон
		-2693.9612, -0.0503, 1061.0000, 		// позиции пикапа (выход)
		-2696.3584, -0.0477, 1061.0000, 90.0, // позиции входа
		6, 									// интерьер
		-2707.7949, 4.2581, 1060.9922, 		// позиции аптечки
		-2708.6167, -0.1650, 1060.9922, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // тюнинг салон
		874.2732, 1329.8386, 1008.2256, 	// позиции пикапа (выход)
		873.0318, 1329.8650, 1008.2256, 0.0, // позиции входа
		7, 									// интерьер
		871.2307, 1328.5104, 1008.2359, 	// позиции аптечки
		868.7779, 1329.4622, 1008.2256, 	// позиции покупки
		868.7568, 1328.4609, 1008.9873,		// позиции 3д текста
		-1
	},
	{ // магазин оружия
		-2900.0266,1704.7983,1001.0000, 	// позиции пикапа (выход)
		-2900.0496,1702.7653,1001.0000,179.8120, // позиции входа
		4, 									// интерьер
		-2902.4924,1696.2982,1001.0000, 	// позиции аптечки
		-2898.9446,1698.5298,1001.0000, 	// позиции покупки
		295.7845,-38.4868,1001.5178,		// позиции 3д текста
		-1
	},
	{ // банк
		306.2370,299.3502,1001.0000,		// позиции пикапа (выход)
		303.7817,299.4347,1001.0000,88.0242,// позиции входа
		5,									// интерьер
		420.4626,562.2424,-36.6100,		// позиции аптечки
		0.0, 0.0, 0.0,		// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // компьютерный клуб
		647.6818, -12.0481, 1001.4328, 	// позиции пикапа (выход)
		649.4155, -11.8298, 1001.4328, 270.1732, // позиции входа
		10, 									// интерьер
		651.9509, -4.0348, 1001.4328, 	// позиции аптечки
		648.6971, -8.1276, 1001.4328, 	// позиции покупки
		648.6971, -8.1276, 1001.4328,		// позиции 3д текста
		-1
	},
    { // Спортзал
		207.2971,824.8159,1001.0000, 	// позиции пикапа (выход)
		207.3224,826.5656,1001.0038,359.4357, // позиции входа
		10, 									// интерьер
		216.0959,846.3589,1000.9922,	// позиции аптечки
		0.0, 0.0, 0.0,	 	// позиции покупки
		0.0, 0.0, 0.0,			// позиции 3д текста
		-1
	},
	{ // детейл старый
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // аренда авто
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		426.8594, 1780.2661, 12.2000, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // СТО new
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // ферма
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // новый детейлинг
		0.0, 0.0, 1000.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		1, 									// интерьер
		0.0, 0.0, 0.0, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу низ
		2285.8457,1802.5986,1000.9609, 	// позиции пикапа (выход)
		2290.1001,1803.0746,1000.9609, 270.0, // позиции входа
		4, 									// интерьер
		2307.5640,1753.4691,1001.0000, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу сред
		1587.1837,1836.6561,996.5703, 	// позиции пикапа (выход)
		1587.1583,1830.3068,996.5703,178.9150, // позиции входа
		4, 									// интерьер
		1575.3284,1777.5909,996.5703, 	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // бу элит
		-1587.7252,995.5857,1001.1563, 	// позиции пикапа (выход)
		-1587.7893,998.9899,1001.1563, 0.0, // позиции входа
		4, 									// интерьер
		-1593.1305,1000.3550,1001.1563,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // стройка
		0.0, 0.0, 0.0, 	// позиции пикапа (выход)
		0.0, 0.0, 0.0, 0.0, // позиции входа
		4, 									// интерьер
		0.0,0.0,1110.0,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Садовод
		-1039.2823,681.1646,1001.1094, 	// позиции пикапа (выход)
		-1039.3754,682.9312,1001.0000,359.3967, // позиции входа
		4, 									// интерьер
		-1031.7572,689.3234,1001.0000,	// позиции аптечки
		-1038.4333,687.4626,1001.0000, 	// позиции покупки
		-1038.3456,687.4626,1001.0000,		// позиции 3д текста
		-1
	},
	{ // барбер
		1242.5327,-2769.0706,1001.0000, 	// позиции пикапа (выход)
		1240.8276,-2771.5818,1001.0000,179.8441, // позиции входа
		4, 									// интерьер
		1241.7601,-2775.8748,1001.0000,	// позиции аптечки
		1238.5682,-2774.2454,1001.0000, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // car
		1564.5455,-2400.1931,1001.0000, 	// позиции пикапа (выход)
		1561.9990,-2399.9319,1001.0000,87.8791, // позиции входа
		4, 									// интерьер
		1561.9594,-2397.4900,1001.0000,	// позиции аптечки
		1555.7836,-2400.7815,1001.0000, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Тир
		-2728.0151,2922.9229,998.4399, 	// позиции пикапа (выход)
		-2729.8091,2922.9109,998.4442,90.0000, // позиции входа
		4, 									// интерьер
		-2729.2009,2926.7432,998.4540,	// позиции аптечки
		-2729.8062,2918.2976,998.4515, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // Нотариус
		494.0048,449.0796,1001.0000, 	// позиции пикапа (выход)
		495.7159,449.0718,1000.9922,272.4079, // позиции входа
		5, 									// интерьер
		500.6070,458.0250,1000.9922,	// позиции аптечки
		0.0, 0.0, 0.0, 	// позиции покупки
		0.0, 0.0, 0.0,		// позиции 3д текста
		-1
	},
	{ // прачка
		1701.1926,-2204.5754,1001.0000, // позиции пикапа (выход)
		1701.1406,-2201.5579,1001.0000,0.0000,// позиции входа
		4,                                  //интерьер
		1704.1678,-2195.7603,1001.0000, // позиции аптечки
		0.0,0.0,0.0, // позиции покупки
		0.0, 0.0, 0.0, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // закусочная
		-1846.7068,1268.6561,1115.8447, // позиции пикапа (выход)
		-1849.1172,1268.5806,1115.8447,91.2593,// позиции входа
		4,                                  //интерьер
		-1854.3073,1260.4597,1115.8447, // позиции аптечки
		-1852.5448,1276.9109,1115.8447, // позиции покупки
		-1852.5448,1276.9109,1115.8447, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // аптека
		-2278.1162,-1492.9065,1001.0078, // позиции пикапа (выход)
		-2278.2141,-1491.0653,1001.0000,0.0000,// позиции входа
		4,                                  //интерьер
		-2282.5586,-1485.3353,1001.0000, // позиции аптечки
		-2279.0376,-1485.3148,1001.0000, // позиции покупки
		-2279.0376,-1485.3148,1001.0000, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // Кондитерская
		303.9078,1804.6189,1031.0000, // позиции пикапа (выход)
		302.0430,1803.7839,1031.0000,127.4625,// позиции входа
		5,                                  //интерьер
		296.6795,1801.6278,1031.0000, // позиции аптечки
		300.7572,1801.3663,1031.0000, // позиции покупки
		0.0, 0.0, 0.0, // позиции 3д текста
		-1 // чекпоинт\пикап
	},
	{ // ветрики
		-1633.4471, 947.4637, 111.8946, 		// позиции пикапа (выход)
		-1633.3441, 948.8265, 111.8946,5.7483,// позиции входа
		5, 									// интерьер
		0.0, 0.0, 0.0, 		// позиции аптечки
		-1633.4410, 947.4982, 147.8165, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // авторынок
		-1997.5229,-1318.3676,1031.0000,		// позиции пикапа (выход)
		-1997.3765,-1312.5791,1031.0000,358.9136, // позиции входа
		4,									// интерьер
		2307.5610,1753.6313,1001.0000,		// позиции аптечки
		456.0765,849.1674,-24.0743,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	}
};
// Управление статистики
new Text3D: g_business_realtor_label;

new g_business_realtor_list[1024];
new g_business_realtor_list_idx[MAX_BUSINESS];
new biz_area[MAX_BUSINESS];
new home_area[MAX_HOUSES];

// Риелторское агенство
new Text3D: g_house_realtor_label;
new g_house_realtor_list[1024];
// --------------------
new const
	g_business_sound[5] =
{
	17001,
	4203,
	21000,
	1135,
	1137
};
new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count;
new bool: g_business_gps_init;
// ------------------------------------------
new g_order[MAX_BUSINESS][E_ORDER_STRUCT]; // заказы
new g_fuelorder[MAX_BUSINESS][E_FUELORDER_STRUCT]; // заказы

new Float: g_med_bed_pos[48][3] = // позиции коек
{
    {429.4151,1700.6271,1001.0000},
    {429.4159,1695.6923,1001.0000},
    {427.3761,1695.8121,1001.0000},
    {427.3762,1700.6821,1001.0000},
    {426.0193,1709.4882,1001.0000},
    {426.0197,1714.2802,1001.0000},
    {428.0590,1714.2037,1001.0000},
    {428.0582,1709.2855,1001.0000},
    {431.2978,1709.4608,1001.0000},
    {431.2968,1714.3481,1001.0000},
    {433.3360,1714.1412,1001.0000},
    {433.3370,1709.3767,1001.0000},
    {432.7151,1700.7372,1001.0000},
    {432.6817,1695.9470,1001.0000},
    {434.7198,1695.8833,1001.0000},
    {434.7205,1700.4869,1001.0000},
    {437.9762,1700.6932,1001.0000},
    {437.9769,1695.7604,1001.0000},
    {440.0154,1695.6848,1001.0000},
    {440.0147,1700.6006,1001.0000},
    {438.6310,1709.3723,1001.0000},
    {438.6302,1714.2032,1001.0000},
    {436.5920,1714.3275,1001.0000},
    {436.5909,1709.4709,1001.0000},
    {438.6306,1741.8832,1301.0000},
    {438.6298,1736.9958,1301.0000},
    {436.5911,1741.8870,1301.0000},
    {436.5920,1737.0715,1301.0000},
    {437.9771,1728.2765,1301.0000},
    {437.9763,1723.3691,1301.0000},
    {440.0159,1723.4207,1301.0000},
    {440.0145,1728.2250,1301.0000},
    {433.3357,1737.0079,1301.0000},
    {433.3362,1741.7407,1301.0000},
    {431.2980,1741.9055,1301.0000},
    {431.2977,1737.0216,1301.0000},
    {432.6817,1728.3059,1301.0000},
    {432.6810,1723.3979,1301.0000},
    {434.7207,1723.3076,1301.0000},
    {434.7201,1728.2218,1301.0000},
    {428.0589,1737.0033,1301.0000},
    {428.0577,1741.8090,1301.0000},
    {426.0194,1741.8926,1301.0000},
    {426.0197,1736.9832,1301.0000},
    {427.3767,1728.1998,1301.0000},
    {427.3759,1723.3671,1301.0000},
    {429.4158,1723.4255,1301.0000},
    {429.4148,1728.2372,1301.0000}
};

new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // занята ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // текст койки

// ------------------------------------------

// ------------------------------------------
enum
{
	ARMORY_TYPE_ARMOR = 0,
	ARMORY_TYPE_DPS,
	ARMORY_TYPE_SECURITY,
	ARMORY_TYPE_POLICE,
	ARMORY_TYPE_MCHS,
	ARMORY_TYPE_FSIN,
}

enum E_ARMORY_STRUCT
{
	A_DESCRIPTION[21],
	A_TYPE,
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	A_VIRTUAL
}

new g_armory[4][E_ARMORY_STRUCT] =
{
	{"Воинская часть", ARMORY_TYPE_ARMOR, 214.7092,1502.0146,-27.6771, 7},
	{"Охрана правительства", ARMORY_TYPE_SECURITY, -2524.2407,1481.2822,1080.4944, -1},
	{"Полицейской службы", ARMORY_TYPE_POLICE, 214.7963,1501.9946,-27.6771, 6},
	//{"МВД", ARMORY_TYPE_POLICE, 214.7963,1501.9946,-27.6771},
	//{"МЧС", ARMORY_TYPE_POLICE, 204.1425, -447.3391, 1006.4179},
	{"ФСИН", ARMORY_TYPE_FSIN, -1676.8534,-2843.1982,1004.8162, -1}
};


// ------------------------------------------
#if defined RAND_WEATHER
new const
	g_weather[4][E_WEATHER_STRUCT] =
{
	{"ясная погода", 18, 	22},
	{"туман", 		 9, 	15},
	{"ясная погода", 3, 	21},
	{"ясная погода", 1, 	23}
};
#endif

// ------------------------------------------
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
	SETTING_TYPE_ON
};

// ------------------------------------------
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new
	g_gps_default_values[E_PLAYER_GPS_STRUCT] =
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

// ------------------------------------------
new help_info[14][E_HELP_INFO_STRUCT] =
{
	{
		"О проекте",
		""SERVER_NAME" - один из начинающих проектов\n"\
		"многопользовательской GTA Criminal Russia Multiplayer. В настоящее\n"\
		"время у нас работает сервер, а увлекательные особенности игрового\n"\
		"процесса привлекают все больше и больше новых игроков.\n\n"\
		"Мы постарались объединить лучшие элементы ролевой игры SA-MP с\n"\
		"новыми идеями и возможностями. Вы сможете выбрать любимую\n"\
		"работу, или даже открыть свой собственный бизнес, зарабатывая\n"\
		"неплохие деньги. Может Вам захочется вступить в одну из организаций\n"\
		"и начать карьерный рост. Или же можно просто приятно провести\n"\
		"время, приняв участие в гонках, или сыграв с друзьями в морской бой.\n\n"\
		"Мы уверены, что "SERVER_NAME" поможет Вам приятно провести пару\n"\
		"свободных часов за онлайн-игрой!"
	},
	{
		"Безопасность",
		"Ваш аккаунт - это ваша собственность. Никому не давайте свой пароль,\n"\
		"иначе Вы рискуете утратить все свои достижения. Не скачивайте\n"\
		"дополнительные программы - моды, читы, трейнеры. Все они\n"\
		"создаются злоумышленниками только с одной целью - заполучить\n"\
		"доступ к Вашему аккаунту.\n\n"\
		"Игроки "SERVER_NAME" могут использовать расширенные настройки\n"\
		"безопасности,  которые практически исключает возможность взлома.\n"\
		"Подробнее: команда {66CCFF}/menu > Настройки безопасности."
	},
	{
		"Основы игры",
		"Играя на сервере, Вы получаете очки опыта. При накоплении их\n"\
		"определенного количества происходит переход на следующий уровень.\n"\
		"С каждым новым уровнем открываются новые возможности и\n"\
		"становятся доступны более интересные функции.\n\n"\
		"Для просмотра статистики воспользуйтесь командой /menu. В игровом\n"\
		"процессе постоянно нужно будет пользоваться подобными командами.\n"\
		"Они вводятся в игровой чат (F6) через косую черту, например /anim\n"\
		"/help и т. п. Введите /menu, далее выберите пункт Список команд. Там\n"\
		"расположен полный перечень команд, а также кнопка Описание команд\n"\
		"для пояснения каждой из них."
	},
	{
		"RolePlay",
		"RolePlay - это такой вид игры, в котором у каждого есть своя роль. Будь\n"\
		"то таксист, водитель автобуса или шахтер, полицейский или мафиози,\n"\
		"член банды или военный. Каждый игрок определяет, кем он хочет быть.\n\n"\
		"RolePlay (RP) режим подразумевает знание некоторых правил и\n"\
		"понятий, несоблюдение которых влечет за собой наказания. С этой\n"\
		"информацией можно ознакомиться на нашем форуме, там же можно\n"\
		"задать все интересующие Вас вопросы по игровому процессу."
	},
	{
		"Первые шаги",
		"Первым делом необходимо заработать деньги. В государстве есть\n"\
		"предприятия, куда Вы сможете устроиться на первое время. Это шахта,\n"\
		"завод и городской склад. Работая там, Вы не только получите прибыль,\n"\
		"но и поддержите экономическую цепочку государства. А еще Вы\n"\
		"найдете новых друзей и получите немало удовольствия.\n\n"\
		"Все эти места можно найти, используя команду /gps. Добраться до\n"\
		"нужного объекта Вам поможет автобусный  транспорт. Прямо с ЖД\n"\
		"вокзала ходит автобус до шахты, а  до склада может подбросить любой\n"\
		"городской маршрут. Чтобы узнать подробнее о автобусных схемах,\n"\
		"введите команду /bushelp.\n\n"\
		"После того, как Вы заработаете деньги, отправляйтесь в автошколу и\n"\
		"сдавайте экзамен на права. Они позволят купить или арендовать\n"\
		"автомобиль, устроиться на более высокооплачиваемую и интересную\n"\
		"работу. Сдача на права стоит 600 рублей, перед поездкой в автошколу\n"\
		"убедитесь, что имеете такую сумму."
	},
	{
		"Общение",
		"Во время игры вам постоянно придется взаимодействовать с людьми. Существует 2\n"\
		"вида чатов:\n\n"\
		"\t1. IC (In Character) - общение внутри игры и только для внутренних игровых\n"\
		"\tситуаций. Чат вызывается клавишей F6.\n"\
		"\t2. OOC (Out Of Character) - все, что касается реального, не игрового мира.\n"\
		"\tНажмите F6, далее введите команду /n и свое сообщение. Оно выделится в\n"\
		"\tдвойные скобки.\n\n"\
		"Помимо этого, существуют много других способов общения. Вы можете звонить по\n"\
		"телефону или отправлять SMS сообщения. Вступив в организацию, появится\n"\
		"возможность связываться с сотрудниками по рации, а также масса других\n"\
		"интересных функций.\n\n"\
		"Информацию о командах общения можете узнать в соответствующем разделе меню:\n"\
		"{66CCFF}/menu > Список команд"
	},
	{
		"Транспорт",
		"Транспортная система - одна из важнейших в стране. С ее помощью возможна\n"\
		"стабильная работа большинства предприятий и организаций.\n\n"\
		"Основной вид транспорта - это автобус. Маршруты проложены по всему\n"\
		"государству и связывают все населенные пункты и предприятия.\n"\
		"Такси - наиболее удобный вид транспорта. Вы сможете добраться до любого места,\n"\
		"однако такая поездка будет стоить значительно дороже, чем на автобусе.\n"\
		"Поезд - быстрый и недорогой вид транспорта. Вы за несколько минут сможете\n"\
		"добраться до любой станции, но составы курсируют не так часто.\n\n"\
		"Государственной транспортной компании всегда требуются новые работники. О\n"\
		"вакансиях и требованиях можно узнать в ближайшей мэрии (/gps)."
	},
	{
		"Государственная система",
		"Вся игровая жизнь проходит под контролем правительства -\n"\
		"основной организации в государстве. В ее состав входят мэрии трех\n"\
		"городов и администрация Президента. Раз в месяц проходят\n"\
		"выборы, где каждый имеет право голоса. А перед этим проводится не\n"\
		"менее интересная избирательная кампания, где кандидаты на пост\n"\
		"Президента устраивают дебаты, концерты и митинги, завоевывая\n"\
		"своих новых избирателей…\n\n"\
		"Государственную систему и ее значение не опишешь несколькими\n"\
		"предложениями. Политическая жизнь необычайно насыщенная, и Вы\n"\
		"сами убедитесь в этом с первых дней жизни у нас!"
	},
	{
		"Жилье",
		"По всему государству расположены жилые дома, которые можно купить.\n"\
		"Каждый дом имеет свою стоимость, которую определяют множество\n"\
		"факторов. Можно купить вагончик за небольшие деньги, или отдать\n"\
		"миллионы за роскошный особняк в элитном районе.\n\n"\
		"Если у Вас есть дом, то вы сможете приобрести машину, или купить\n"\
		"дополнительные улучшения, такие как шкаф для хранения вещей или\n"\
		"автоматические двери. И это только некоторые возможности жилья.\n\n"\
		"В зависимости от престижности дома, с Вас будет взиматься ежедневная\n"\
		"квартплата. Если долгое время на счету будет сохраняться отрицательный\n"\
		"баланс, есть вероятность, что работники мэрии выселят Вас."
	},
	{
		"Бизнес и АЗС",
		"Вы можете открыть собственный бизнес, и зарабатывать неплохие\n"\
		"деньги. Это может быть небольшая пекарня, магазин одежды или\n"\
		"развлекательный центр, столовая, парикмахерская, либо обычная\n"\
		"продуктовая лавка. Или вы захотите стать совладельцем крупной сети\n"\
		"супермаркетов, ресторанов или театров. В нашей стране существует\n"\
		"огромное количество разнообразных предприятий.\n\n"\
		"Имея бизнес, перед Вами откроются большие возможности для\n"\
		"привлечения новых клиентов, что будет постоянно повышать Ваши\n"\
		"доходы. Вы сможете регулировать цены, улучшать различные\n"\
		"характеристики своего предприятия, одновременно проводя борьбу с\n"\
		"конкурентами.\n\n"\
		"АЗС (автозаправочные станции) - особый тип бизнеса, доходы от\n"\
		"которого значительно выше, чем от обычных предприятий. Для\n"\
		"нормальной работы АЗС нужно постоянно заключать контракты со\n"\
		"службой доставки топлива. Бизнесмен может владеть обычным\n"\
		"предприятием и АЗС одновременно."
	},
	{
		"Банки, хранение средств",
		"Каждый игрок получает свой счет в банке. На него перечисляется\n"\
		"зарплата и прочие доходы. Этот счет называется основным, и доступен в\n"\
		"любом банкомате.\n\n"\
		"Помимо этого, Вы можете воспользоваться услугами профессиональных\n"\
		"банков, найти которые поможет GPS. Там можно открыть до 8\n"\
		"дополнительных счетов. Каждый из них имеет свой номер, который\n"\
		"выдается банком при создании счета. Зная его, любой игрок может\n"\
		"перечислить вам деньги, даже если вы оффлайн. Например, можно\n"\
		"создать счет с названием Благотворительность, написать об открытии\n"\
		"благотворительной организации через СМИ, сообщить номер счета, и\n"\
		"любой сможет перечислить на него деньги в отделении банка или через\n"\
		"банкомат.\n\n"\
		"Дополнительные счета можно настраивать, устанавливать защиту\n"\
		"PIN-кодом, изменять названия а также просматривать подробную\n"\
		"историю операций."
	},
	{
		"Организации",
		"В нашей стране работает большое количество организаций. Они могут\n"\
		"быть как официальными (правительство, МВД, мин. Обороны, мин.\n"\
		"Здравоохранения, ТВ и радио), так и неофициальными (банды и мафии).\n\n"\
		"При достижении определенного уровня, Вы можете вступить в любую из\n"\
		"организаций. Руководство некоторых может выдвигать и дополнительные\n"\
		"требования для вступления. Например, если Вы хотите попасть в банду,\n"\
		"то Вам придется продемонстрировать свое умение владеть оружием. А\n"\
		"если Вы видите себя в роли редактора объявлений, то нужно красиво и\n"\
		"грамотно писать. О дополнительных требованиях сообщит руководство\n"\
		"организации во время набора сотрудников.\n\n"\
		"После вступления, Вам будет доступно продвижение по карьерной\n"\
		"лестнице, постепенно откроются новые возможности. С каждым повышением\n"\
		"будет увеличиваться Ваша зарплата и статус в обществе. Вы найдете\n"\
		"новых друзей, а со временем сможете занять одну из руководящих\n"\
		"должностей. Жизнь в организации необычайно интересная и разнообразная!"
	},
	{
		"Работы",
		"В мэрии вашего города работает отдел занятости, где Вы можете\n"\
		"устроиться на любую работу. Следует обратить внимание, что некоторые\n"\
		"работы доступны при достижении определенного уровня. Вы не можете\n"\
		"одновременно быть оформленным на работу в мэрии и состоять в\n"\
		"организации.\n\n"\
		"Помимо основных работ существуют и дополнительные. К ним относятся\n"\
		"работы на шахте, заводе и складе. Такие работы можно совмещать с\n"\
		"основными и зарабатывать больше денег. Используйте команду /gps для\n"\
		"того, чтобы найти места расположения различных работ. На месте вы\n"\
		"получите подробные инструкции, как и что следует делать."
	},
	{
		"Развлечения",
		"Если у вас появилось свободное время и желание, то рекомендуем вам\n"\
		"посетить одно из развлекательных мероприятий. Каждые 3 часа\n"\
		"проводятся гонки, поучаствовать в которых может любой желающий.\n"\
		"Сейчас команда разработчиков проекта готовит и другие, не менее\n"\
		"интересные развлечения!\n\n"\
		"Помимо событий по расписанию, администраторы сервера очень часто\n"\
		"проводят разного рода мероприятия, участвовать в которых не только\n"\
		"интересно, но и выгодно - победители получают ценные подарки.\n\n"\
		"О проведении того или иного развлекательного мероприятия вы узнаете\n"\
		"заранее из информационных сообщений в общем чате."
	}
};
new help_info_items[35 * (sizeof help_info) + 1];
new help_info_CP;

// ------------------------------------------
new info_pickup[9][E_INFO_PICKUP_STRUCT] =
{
	// -------------------------------
	{
		"Шахта",
		"Тут Вы можете устроиться на работу шахтером.\n"\
		"Для этого найдите служебное помещение на заднем дворе шахты,\n"\
		"там Вам выдадут спецодежду и необходимый инструмент, а также\n"\
		"расскажут что делать дальше.\n\n"\
		"Шахта специализируется на добыче железной руды, из которой\n"\
		"потом в кузнице получают металл. Он широко применяется на\n"\
		"других предприятиях, поэтому регулярная добыча руды очень важна\n"\
		"для экономики государства.",
		"О шахте",
		0x66CCFFFF,
		-505.1525,3299.0835,29.8350
	},
	{
		"О подземной добыче",
		"Ученые выяснили что руда, которая находится в подземных залежах\n"\
		"намного качественнее той,  которую добывают на поверхности.\n"\
		"Именно поэтому было принято решение построить шахтовый\n"\
		"подъемник для подземной добычи.\n\n"\
		"В связи со сложностью подземных работ шахтерам полагается\n"\
		"премия за каждую партию руды, которая была добыта под землей.",
		"Подземная\nдобыча",
		0xFFCD00FF,
		-487.6452,3340.3916,31.0381
	},
	{
		"О применении металла",
		"Полученный на шахте металл достаточно широко применяется\n"\
		"различными организациями, однако основной потребитель - это\n"\
		"завод по производству продуктов. Более подробно о назначении\n"\
		"этого предприятия можно узнать, приехав туда (/gps).\n\n"\
		"Для нормальной работы заводу постоянно требуется металл,\n"\
		"транспортировкой которого занимается его служба доставки. На\n"\
		"этом складе развозчики закупают металл для предприятия.",
		"Развозчики\nметалла",
		0xFFCD00FF,
		-468.1451,3304.2419,29.8350
	},
	// -------------------------------
	{
		"Завод по производству продуктов",
		"Здесь находится одно из важнейших предприятий в государстве - завод\n"\
		"по производству продуктов. От его регулярной работы зависит\n"\
		"деятельность всего частного бизнеса.\n\n"\
		"В данный момент можно устроиться на одну из двух специальностей -\n"\
		"работник производственного цеха или службы доставки. На месте Вы\n"\
		"найдете более подробную информацию о каждой из них.",
		"О заводе\nпо производству\nпродуктов",
		0xFFCD00FF,
		-1055.7217, 2142.2402, 38.0322
	},
	{
		"Завод - Склад исходных материалов",
		"На заводе хранятся материалы, которые используются работниками цеха\n"\
		"для изготовления продуктов, а также готовые продукты. Исходные\n"\
		"материалы доставляются на завод его службой доставки. Чтобы\n"\
		"устроиться туда на работу, пройдите в раздевалку рядом, далее\n"\
		"на территории завода подойдите и выберите транспорт в зависимости\n"\
		"от того, что именно Вы хотите привезти на завод.\n\n"\
		"Материалы покупаются за свой личный счёт, а Ваша выручка - это\n"\
		"разница, которая выходит при продаже материалов заводу.",
		"Работа в\nслужбе доставки",
		0xFFCD00FF,
		-1095.9282,2165.1895,38.0644
	},
	{
		"Завод - Производственный цех",
		"Чтобы начать рабочий день пройдите к любой раздевалке. Там же\n"\
		"можно закончить его и получить выручку. Далее пройдите к\n"\
		"раздаточному столу (отмечены желтыми маркерами), возьмите\n"\
		"металл, после чего отправляйтесь на любое свободное место в центре\n"\
		"цеха. Топливо, необходимое для изготовления продукта, автоматически\n"\
		"подается к каждому столу, и Вам не нужно брать его дополнительно.\n\n"\
		"Чем больше Вы работаете в цеху, тем выше ваши навыки производства,\n"\
		"и тем меньше шанс создать бракованный продукт. Навык будет\n"\
		"увеличиваться по мере создания новых продуктов.",
		"Работа в\nпроизводственном цеху",
		0xFFCD00FF,
		-2874.4709,-1191.1111,1000.9978
	},
	// -------------------------------
	{
		"Нефтезавод",
		"На нефтезаводе можно приобрести топливо для завода по производству\n"\
		"продуктов или для развоза его по заправочным станциям. Работают 2\n"\
		"линии, выбрать нужную Вам помогут указатели.\n\n"\
		"Запасы хранилища нефтезавода постоянно пополняются по мере\n"\
		"добычи и очистки нефти.",
		"Нефтезавод",
		0xFFCD00FF,
		1023.0947, 637.6918, 12.0272
	},
	// -------------------------------
 {
		"Работа лесоруба",
		"На этой работе Вы можете подзаработать денег, но для этого нужна\n"\
		"хорошая физическая подготовка и выносливость. Вы можете выбрать\n"\
		"одну из интересующих вас работ и переодеться в раздевалке рядом:\n\n"\
		"{FFA500}1. {FFFFFF}Лесоруб - сглаживайте деревья, разрезайте их на брёвна.\n"\
		"Не все деревья можно пилить, ориентируйтесь на наличие подсказки у дерева.\n"\
		"{FFA500}2. {FFFFFF}Водитель - возьмите грузовик на парковке и помогайте с\n"\
		"загрузкой брёвен, после чего отвозите добытое на склад.\n"\
		"{FFA500}3. {FFFFFF}Рамщик - отправляйтесь на склад, взяв бревно отнесите его\n"\
		"к станку. Вы получите подробные инструкции как начнёте работу.\n\n"\
		"За длительное AFK или вред рабочим вы можете быть уволены и занесены в черный список.",
		"{99FF99}Информация\nо работе",
		0xff9933FF,
  		424.6098,-2441.2205,34.9269
	},
	{
		"{FFFFFF}Информация",
		"{FFFFFF}В прачечной вы можете постирать свою одежду и тем самым\n"\
		"уменьшить её износ. Чтобы положить одежду в стиральную машину, подойдите\n"\
		"к ней и зайдите в инвентарь и нажмите использовать на одежде которую хотите постирать\n\n"\
		"Стоимость стирки: {FF7F00}12.500.000 {FFFFFF}руб (стиральный порошок входит в стоимость)",
		"",
		0xFFFFFFFF,
		1699.0579, -2202.5972, 1001.0000
	}
};

new
	Float: g_jail_positions[12][6] =
{
	{-1694.3374,-2808.8877,1001.4077,359.4735},
	{-1697.9401,-2808.4561,1001.4077,356.7813},
	{-1701.4163,-2808.7119,1001.4077,357.5358},
	{-1701.3567,-2795.0901,1001.4077,177.5528},
	{-1697.9073,-2794.8018,1001.4003,177.0934},
	{-1694.4131,-2794.9656,1001.4077,178.5373},
	{-1722.8665,-2786.1335,1001.4177,268.2820},
	{-1723.0691,-2782.5339,1001.4077,267.4282},
	{-1723.1207,-2779.0955,1001.4077,268.1827},
	{-1709.5270,-2779.1328,1001.4077,88.4651},
	{-1709.8962,-2782.5264,1001.4077,87.1516},
	{-1709.5809,-2786.0640,1001.4077,86.7572}
}; 

new
	Float: g_jail_positions_nakolka[12][6] =
{
	{-1737.0514,-2811.0767,1001.4055,357.8635},
	{-1746.6243,-2810.5083,1001.4055,358.7174},
	{-1746.4481,-2792.0833,1001.4055,179.0293},
	{-1736.9686,-2793.1040,1001.4055,179.2593},
	{-1737.0239,-2811.5427,1004.8155,357.5035},
	{-1746.5383,-2810.0227,1004.8155,358.5700},
	{-1746.5236,-2792.9063,1004.8155,178.0282},
	{-1736.9326,-2792.3103,1004.8155,177.8635},
	{-1617.7943,-2792.9414,1001.4055,176.6496},
	{-1608.5408,-2792.0334,1001.4055,178.0936},
	{-1608.1530,-2811.0408,1001.4055,358.6356},
	{-1618.0073,-2811.3076,1001.4055,357.9463}
};

new
	Float: g_arrest_positions[3][6] =
{
	{2488.1252,1378.7014,1000.0214, 359.0599},
	{2493.1448,1378.7792,1000.0214, 359.0599},
	{2498.8225,1378.9453,1000.0214, 359.6866}
};

// ------------------------------------------
new anim_list[74][E_ANIM_LIST_STRUCT] =
{
	{"Танец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"Танец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"Махать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"Походка пьяного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{"Кувыркаться",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"Попрощаться",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"Читать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"Укрыться",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"Подложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},
	{"Надеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},
	{"Вытянуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},
	{"Сложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},
	{"Съел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},
	{"Перекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},
	{"Шлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},
	{"Предложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},
	{"Эффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},
	{"Мужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Женское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Присесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},
	{"Восточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},
	{"Выпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},
	{"Расслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},
	{"Поза вратаря",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},
	{"Элемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},
	{"Позвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},
	{"Руки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},
	{"Спать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},
	{"Спать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},
	{"Смотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},
	{"Облокотиться на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},
	{"Толкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},
	{"Раздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},
	{"Лечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},
	{"Сесть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},
	{"Сидеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},
	{"Взять что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},
	{"Сесть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},
	{"Отказаться от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},
	{"Поцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},
	{"Размахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},
	{"Искуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},
	{"Пощечины для лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},
	{"Подглядывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},
	{"Движения тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},
	{"Сесть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},
	{"Сесть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},
	{"Смотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},
	{"Указать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},
	{"Быть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},
	{"Призывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},
	{"Сходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},
	{"Гангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},
	{"Голосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},
	{"Удар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},
	{"Стучаться в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},
	{"Устроить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},
	{"Пританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},
	{"Плохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},
	{"Приветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},
	{"Приветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};
new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new
	g_anim_libs[38][13] =
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

// ------------------------------------------
new map_icons[34][E_MAP_ICONS_STRUCT] =
{
	{429.7691,-2444.4690,34.9269, 	38},   // Лесоруб
	{1934.0605,1938.6450,16.0539, 	36},   // автошкола
	{611.7523,1733.6365,12.1678, 	22},  // больница Арзамаса
	{183.0684,1446.6622,27.0717, 	30},   // ГИБДД
	{1777.9568, -2269.8176,  10.8263, 	30},  // УМВД
 	{-2464.7283, 1544.4351,  53.0278, 	19},  // Правительство
	{-1085.168, 2182.3547, 	38.0679, 	51},  // завод
	{1850.9291,2819.2183,38.3959, 55},     // Автосалон Высокий
	{397.2827,805.9502,22.7497, 55},       // Автосалон Средний
	{2599.4080,-620.5815,20.1871, 55}, 	   // Автосалон Низкий
	{1661.78, 738.389, 16.0372,    53},    // частная ферма
	{1919.4358,2304.0698,15.5697,	46},   // военкомат
	{1836.5201,2527.4819,22.0910,	30},   // Пожарка
	{764.6557,661.2494,13.7813,	 63},      // Метрополитен Спавн
	{191.4641,790.6199,12.1738,	 63},      // Метрополитен Центральный
	{299.3504,1720.5477,12.1484, 63},      // Метрополитен Больничная
	{35.1645,322.9391,11.4756,	 63},      // Метрополитен Арзамас-Сити
	{92.0683,1414.3101,21.8453,  63},      // Метрополитен Союзная (ГИБДД где)
	{-366.8674,450.9858,41.1753,  63},     // Здание новое ЖД (Где СТО)
	{2761.0110,-2062.8362,24.1562, 5},     // Аэропорт
	{1995.1902,1012.2449,15.1376, 9},      //Рыбалка
	{-486.2817,3337.2917,31.0381, 11},
	{845.3048,580.8884,15.8932, 55},       // Аренда скутеров
	{1659.8859,2210.5828,14.2180, 55},     // Аренда скутеров
	{-2683.1345,182.3660,12.2663, 55},     // Аренда скутеров
	{190.7534,1464.0500,12.0100, 55},     // Аренда скутеров
	{2393.2083,-2655.3909,21.9886, 55},   // Аренда скутеров
	{402.7792,1528.3496,12.1425, 55},     // Аренда скутеров
	{2355.5598,1969.6334,15.5313, 18},     // Пейнтбол
	{2409.0798,-2140.5208,22.7276, 48},     // Школа танцев
	{1874.3699,1652.3842,16.4301, 5},     
	{-2243.63,263.239,24.5337, 55},        // Мото-Вело
	{258.6693,703.7491,11.9887, 44},
	{2344.9880,-2610.1987,21.7958, 44}

};

new g_teleport[102][E_TELEPORT_STRUCT] =
{
    {"{3399FF}Здание\nТеле-радио компании", 2175.3284, -1964.6138, 19.9816, 0, -2654.5029,2695.0859,996.9453,90.9146, 1, 69}, // вход в ТРК
	{"", -2650.6201,2695.1250,996.9453, 69, 2180.8669,-1963.9637,19.9816,268.5096, 0, 0}, // выход из ТРК
	//=====================================================================================================
	{"Стадион", -236.8071,408.3662,14.2830, 0, -140.5103, 395.4778, 1001.0000, 95.5560, 1, 0}, // вход в Стадион
	{"", -137.6778,395.2314,1001.0000, 0, -239.3561,408.3936,14.2461,75.9723, 0, 0}, // выход из Стадиона
	//=====================================================================================================
	{"Вход в больницу", 642.0527,1767.5646,29.6967, 0, 441.1416,1705.1367,1001.0000,90.0, 3, 5},
	{"Выход на крышу", 443.2307,1705.0769,1001.0000, 5, 419.1524,1746.1851,21.0380, 170.0000, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	//=====================================================================================================
	{"Больница", 613.8102,1735.4990,12.7278, 0, 417.2722,1696.8584,1001.0000, 0.0, 3, 5},
	{"", 417.3105,1694.5424,1001.0000, 5, 611.6102,1733.7014,12.1678,132.0934, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	//=====================================================================================================
 	{"Больница", 2403.8708,-2656.5151,22.2756, 0, 417.2722,1696.8584,1001.0000, 0.0, 3, 6},
	{"", 417.2587,1694.5411,1001.0000, 6, 2403.9500,-2659.4148,21.9886,181.3546, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	//=====================================================================================================
    {"Казарма\n{33CC00}'Армейская'", 1068.9208,3309.3569,11.4749, 0, 317.9288,2933.6672,999.4766,0.0, 1, 22}, // вход в казарму
	{"", 317.7869,2930.5464,999.4766, 22, 1070.4175,3307.8350,11.3314,225.6060, 0, 0}, // выход из казармы
	//=====================================================================================================
	{"Казарма\n{33CC00}'Армейская'", 1078.9834,3356.1306,11.4749, 0, 317.9288,2933.6672,999.4766,0.0, 1, 22}, // вход в казарму
	{"", 317.7869,2930.5464,999.4766, 22, 1080.6641,3356.0713,11.3265,269.7237, 0, 0}, // выход из казармы
	//=====================================================================================================
    {"Столовая\n{33CC00}'Армейская'", 1163.2202,3356.5254,11.5150, 0, 393.3072,2867.7070,999.4688,267.5214, 1, 20}, // Вход в столовую МО
	{"", 390.9559,2867.7114,999.4844, 20, 1160.6671,3356.5796,11.2484,88.9861, 0, 0}, // Выход со столовой МО
	//=====================================================================================================
	{"Оружейная", 1203.9512,3396.0383,11.5400, 0, 215.3441,1489.6472,-27.6699,1.0320, 0, 7}, // вход МО
	{"", 215.2733,1487.1434,-27.6699, 7, 1203.9504,3393.8477,11.4257,178.3915, 0, 0}, // выход МО
	//=====================================================================================================
	{"Мед-пункт\n{33CC00}'Армейский'", 1162.6652,3317.6992,11.8543, 0, 428.7844,2935.0559,999.5078,88.9666, 1, 23}, // вход в мед-пункт МО
	{"", 431.6185,2935.0408,999.5078, 23, 1159.7637,3317.7446,11.2484,90.8898, 0, 0}, // Выход с мед-пунка МО
	//=====================================================================================================
	{"Здание\nПолицейской службы", 258.6266,1384.2072,12.1993, 0, 2480.3062,1387.5244,1000.0529,1.5600, 4, 6}, // вход МВД
	{"", 2480.2617,1385.6453,1000.0530, 6, 260.2263,1386.2427,12.1993,325.2878, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД

	{"Служебный вход\nПолицейской службы", 220.4349,1374.0316,12.8589, 0, 2506.4370,1394.8589,1000.0214,359.2494, 4, 6}, // вход МВД
	{"", 2506.7078,1392.5337,1000.0214, 6, 219.8833,1372.1230,12.1993,171.4554, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД

    {"Оружейный склад\nПолицейской службы", 184.0167,1341.4846,12.3980, 0, 215.3441,1489.6472,-27.6699,1.0320, 0, 6}, // вход МВД
	{"", 215.2733,1487.1434,-27.6699, 6, 184.4844,1343.5339,12.1915,351.4419, 0, 0, T_ACTION_TYPE_LEAVE_PPS}, // выход МВД
	 //=====================================================================================================
 	{"МЧС", -2591.7327,2114.9451,53.8285, 0, 209.6588,-468.0640,1006.4200,2.2671, 1, 7}, // вход МЧС
	{"", 209.5155,-469.9189,1006.4200, 7, -2591.6836,2113.6514,53.4516,178.9025, 0, 0}, // выход МЧС
	//
	{"Административный блок", -1788.5481,-2763.7361,12.1247, 0, -1687.6331, -2837.8596, 1001.4022, 266.9716, 4, 7}, // Вход ФСИН
	{"Выход\nУлица",-1690.0061,-2837.7659,1001.4022, 7, -1789.3870, -2760.8411, 11.0930, 14.9357, 0, 0}, // Выход ФСИН
	//
	{"Вход\nТолько для сотрудников", -1824.7513,-2775.0188,12.1247, 0, -1677.5161,-2838.0759,1001.4022,357.2597, 4, 7, T_ACTION_TYPE_LEAVE_FSIN}, // Вход ФСИН Парковка
	{"Выход\nПарковка",-1677.4888,-2839.4146,1001.4022, 7, -1825.6429,-2772.1182,11.1011,14.8705, 0, 0, T_ACTION_TYPE_LEAVE_FSIN}, // Выход ФСИН Парковка
	//=====================================================================================================
	//ФСБ
	{"Служебный вход", 2356.2073,-1769.8744,23.6749, 0, 2330.4055,-1712.5172,1001.0200,178.5783, 5, 8, T_ACTION_TYPE_ENTER_FSB}, // Вход ФСБ для сотрудников
	{"Здание ФСБ", 2333.9907,-1828.7905,23.7472, 0, 2330.4055,-1712.5172,1001.0200,178.5783, 5, 8}, // Вход ФСБ для всех
	{"", 2362.3906,-1730.9143,40.5516, 0, 2310.7178,-1772.8092,1006.7834,271.3455, 5, 8, T_ACTION_TYPE_ENTER_FSB}, // Вход ФСБ для сотрудников с крышы
	{"", 2308.9780,-1772.8556,1006.7834, 8, 2362.5461,-1728.5402,40.5577,359.2480, 0, 0, T_ACTION_TYPE_ENTER_FSB}, // Вход ФСБ для сотрудников на крышу
	{"", 2330.4519,-1710.1464,1001.0200, 8, -1825.6429,-2772.1182,11.1011,14.8705, 0, 0}, // Выход ФСБ
	//=====================================================================================================
	{"{FFD700}Изготовление оружия\n{AFAFAF}Русская мафия", 647.5056,2188.7515,1000.9975, 4, -1597.8700,-638.6998,1016.4700,358.6840, 4, 4}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 4, -2650.7688,2188.7917,1000.9975,89.8294, 4, 4}, // выход из мастерскую

	{"{FFD700}Изготовление оружия\n{AFAFAF}Японская мафия", 647.5056,2188.7515,1000.9975, 5, -1597.8700,-638.6998,1016.4700,358.6840, 4, 5}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 5, -2650.7688,2188.7917,1000.9975,89.8294, 4, 5}, // выход из мастерскую

	{"{FFD700}Изготовление оружия\n{AFAFAF}Итальянская мафия", 647.5056,2188.7515,1000.9975, 6, -1597.8700,-638.6998,1016.4700,358.6840, 4, 6}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 6, -2650.7688,2188.7917,1000.9975,89.8294, 4, 6}, // выход из мастерскую
	//=====================================================================================================
	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 4, 1093.9169,2231.8499,2.0000,358.1637, 4, 4}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 4, -2650.7688,2188.7917,1000.9975,89.8294, 4, 4}, // выход из лабараторной

	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 5, 1093.9169,2231.8499,2.0000,358.1637, 4, 5}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 5, -2650.7688,2188.7917,1000.9975,89.8294, 4, 5}, // выход из лабараторной

	{"Вход в лабараторную", 647.5056,2188.7515,1000.9975, 6, 1093.9169,2231.8499,2.0000,358.1637, 4, 6}, // вход в лабараторную
	{"", 1094.0562,2230.1128,2.0000, 6, -2650.7688,2188.7917,1000.9975,89.8294, 4, 6}, // выход из лабараторной
	//=====================================================================================================
	{"Школа танцев", 2409.0798,-2140.5208,22.7276, 0, 12.4959,997.4105,1201.0000,89.3819, 0, 0},
	{"Выход", 15.0843,997.8723,1201.0000, 0, 2409.0591,-2142.7949,21.9577,179.6227, 0, 0},
	//=====================================================================================================
 	{"Правительство\nобласти", -2449.1563,1605.3594,53.1889, 0, -2500.8599,1468.4968,1080.5190, 0.8444, 5, 21}, // Правительство вход
	{"", -2500.8672,1464.9657,1080.5190, 21, -2448.0356,1603.2677,53.1889,198.7375, 0, 0}, // выход из Правительства
	//=====================================================================================================
	{"", 1949.5592,20.5202,8.1148, 0, -2698.1772,2189.5381,1000.9784,0.0025, 4, 4}, // Особняк мафии №1 вход
	{"", -2698.2114,2185.9929,1000.9784, 4, 1949.6074,17.7571,8.1148,178.9778, 0, 0}, // Особняк мафии №1 выход
	//=====================================================================================================
	{"", 4052.6401,3812.6880,9.1047, 0, -2698.1772,2189.5381,1000.9784,0.0025, 4, 5}, // Особняк мафии №3 вход
	{"", -2698.2114,2185.9929,1000.9784, 5, 4047.0325,3805.5828,6.6265,98.8449, 0, 0}, // Особняк мафии №3 выход
	//=====================================================================================================
	{"", -3239.3215,830.2149,7.8700, 0, -2698.1772,2189.5381,1000.9784,0.0025, 4, 6}, // Особняк мафии №2 вход
	{"", -2698.2114,2185.9929,1000.9784, 6, -3234.0288,830.0892,6.6309,268.4641, 0, 0}, // Особняк мафии №2 выход
	//=====================================================================================================
	{"", 2320.2622,1539.7009,11.3457, 0, -2698.1772,2189.5381,1000.9784,0.0025, 4, 7}, // База пэла вход
	{"", -2698.2114,2185.9929,1000.9784, 7, 2319.0132,1539.7275,11.3457,92.0373, 0, 0}, // База пэла  выход
	//=====================================================================================================
	{"Здание\nВоенкомата", 1919.4358,2304.0698,15.5697, 0, 1999.8728,2293.6167,1004.1991,0.7286, 4, 3}, // военкомат вход
	{"", 1999.8643,2289.6365,1004.1919, 3, 1917.9813,2303.2090,15.5697, 120.4762, 0, 0}, // военкомат выход
    //=====================================================================================================
	{"Автошкола", 1928.9601,1930.5726,15.7747, 0, 2004.6975,-1994.6841,1001.2400,225.9155, 4, 3}, // Автошкола вход
	{"", 2002.6439,-1992.5829,1001.2400, 3, 1933.2070,1930.3019,15.6825,268.0475, 0, 0}, // Автошкола выход
	//=====================================================================================================
	{"Завод\nПроизводственный цех", -1060.9822,2208.5635,38.0987, 0, -2876.2761,-1184.9685,1001.0525,91.2042, 5, 3},
	{"", -2873.0332,-1185.0710,1000.9978, 3, -1060.7467,2206.3586,38.0990,179.8317, 0, 0},
	//=====================================================================================================
	{"Здание\nМЧС", -2588.1392,2129.9092,53.4093, 0, 209.7607,-467.6448,1006.4200,3.2035, 0, 0},
	{"", 209.5111,-469.8284,1006.4200, 0, -2588.1472,2131.9321,53.3988,359.3073, 0, 0},
	//=====================================================================================================
	{"{ffffff}Станция метро:\n{ffd000}Центральная\n\n{2ff82f}Вход", 191.5362,790.5955,12.1729, 0, 122.8478,812.2729,-28.3549,94.0732, 0, 0}, //
	{"{ffffff}Станция метро:\n{ffd000}Центральная\n\n{e67e22}Выход", 125.2534,812.1542,-28.0948, 0, 191.1494,794.0597,12.1494,336.5722, 0, 0}, //
    //=====================================================================================================
	{"{ffffff}Станция метро:\n{ffd000}Арзамас-Сити\n\n{2ff82f}Вход", 35.1512,323.1042,11.4756, 0, 20.7732,329.8734,-29.5295,83.4434, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Арзамас-Сити\n\n{e67e22}Выход", 24.9715,329.7268,-28.4569, 0, 37.6065,322.5181,11.3984,272.6750, 0, 0},
	//=====================================================================================================
	{"{ffffff}Станция метро:\n{ffd000}Вокзальная\n\n{2ff82f}Вход", 764.6354,661.2277,13.7813, 0, 759.6891,687.0150,-30.6505,352.5524, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Вокзальная\n\n{e67e22}Выход", 759.4855,679.6655,-28.2264, 0, 766.7106,659.7678,13.7813,222.2045, 0, 0},
	//=====================================================================================================
	{"{ffffff}Станция метро:\n{ffd000}Союзная\n\n{2ff82f}Вход", 86.6173,1414.8229,12.0000, 0, 84.9772,1442.0500,-30.4558,88.1200, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Союзная\n\n{e67e22}Выход", 91.6638,1441.8792,-28.3050, 0, 89.2862,1414.6790,12.0000,251.0315, 0, 0},
	//=====================================================================================================
	{"{ffffff}Станция метро:\n{ffd000}Больничная\n\n{2ff82f}Вход", 299.3550,1720.5997,12.1484, 0, 304.0856,1777.4458,-30.6494,1.6625, 0, 0},
	{"{ffffff}Станция метро:\n{ffd000}Больничная\n\n{e67e22}Выход", 304.0158,1770.4369,-28.4717, 0, 301.6966,1720.6052,12.1484,263.9016, 0, 0},
    //=====================================================================================================
 	{"Центр занятости", 319.8218,509.7292,12.7935, 0, -2701.7625,1482.5397,1007.4878,88.6115, 4, 4}, // вход
	{"", -2696.6296,1482.0575,1007.4878, 4, 318.0984,510.4846,12.6060,71.6740, 0, 0}, // выход
	//=====================================================================================================
	{"Шахта", -486.2817,3337.2917,31.0381, 0, -476.1868,2876.5601,1192.7656,270.0000, 5, 5},
    {"", -478.4785,2876.6069,1192.7656, 5, -489.2321,3337.1628,31.0381,89.3090, 0, 0},
	//=====================================================================================================
	{"Автосалон Грузовиков", 1050.2203,-1898.3051,34.2169, 0, 1047.1001,-1895.7366,34.3527,52.0475, 0, 0},
	{"", 1049.0859,-1897.3494,34.3762, 0, 1051.8107,-1899.4839,34.2169,228.5082, 0, 0},
	//=====================================================================================================
	{"-Аукцион-", 2261.0996,-2106.7168,21.9688, 0, -144.3936,2423.4260,1001.1406,268.5103, 4, 4}, // вход в аук
	{"", -148.2778,2447.5713,1000.6406, 4, 2258.7661,-2106.8005,21.9688,85.9992, 0, 0}, // выход из аука
	//=====================================================================================================
    {"", 2111.8669,-2509.8372,12.5427, 0, 2097.0986,-2498.5806,-88.9766,89.6931, 0, 0}, // вход в избу 5.6
    {"", 2099.4446,-2498.5349,-88.7188, 0, 2110.1970,-2508.3384,12.3085,46.2054, 0, 0}, // выход из избы 5.6
	//=====================================================================================================
	//{"гос. Банк", 419.0212,572.0651,13.0119, 0, 420.4951,567.2783,-36.6100,74.7216, 5, 5},
	{"", 422.5158,566.7045,-36.6100, 5, 413.9947,574.0319,12.0102,69.0172, 0, 0},
	//=====================================================================================================
	{"", 3239.6987,-27.5807,5.5626, 0, 994.6002,2788.6887,1001.0078,0.4047, 9, 9}, // вход в избу 6.0
    {"", 994.0612,2784.8093,1001.0078, 9, 3238.5596,-30.2463,5.3847,166.1153, 0, 0}, // выход из избы 6.0
	//=====================================================================================================
	{"", 1000.1050,2814.3411,1001.0156, 9, -148.0164,371.9189,1000.9922,240.4661, 9, 9}, // вход в избу 6.0
    {"", -150.6926,373.3741,1000.9922, 9, 999.7380,2811.7041,1001.0156,142.2534, 9, 9}, // выход из избы 6.0
	//=====================================================================================================
	{"", -1771.7177,2893.8884,5.9906, 0, -1769.9291,2895.1975,6.0870,272.2030, 0, 4}, // вход в черный рынок
	{"",-1770.8884,2893.8682,6.0870, 4, -1774.8552,2893.3042,5.9906,99.9111, 0, 0}, // выход черного рынока
	//=====================================================================================================
    {"Изготовление оружия\nЦентральный особняк", 2667.6768,-2271.8538,21.9276, 0, -1597.8700,-638.6998,1016.4700,358.6840, 4, 7, T_ACTION_TYPE_BANDA_WEAPON}, // вход в мастер
	{"", -1598.0111,-640.8182,1016.4700, 7, 2668.0151,-2269.9727,21.9232,347.4272, 0, 0}, // выход из мастерскую
	//=====================================================================================================
    {"Вход в вокзал", 2567.1873,-2050.0432,21.9640, 0, 2518.8596,-1905.3931,1033.8566,5.2029, 5, 7}, // вход в вокзал
	{"", 2519.2036,-1907.9236,1033.8621, 7, 2569.7092,-2050.2690,21.9640,270.8455, 0, 0}, // выход из вокзала
	//=====================================================================================================
    {"Вход в вокзал", 2567.1865,-2047.5963,21.9640, 0, 2536.5750,-1905.3597,1033.8564,357.4071, 5, 7}, // вход в вокзал
	{"", 2536.7729,-1907.9711,1033.8622, 7, 2569.4790,-2047.6406,21.9640,264.9365, 0, 0} // выход из вокзала
};
new g_teleport_object[MAX_PLAYERS][2];

// ------------------------------------------
enum E_MY_TP_STRUCT
{
	Float: Tplist_X,
	Float: Tplist_Y,
	Float: Tplist_Z
}
new g_player_my_tplist[MAX_PLAYERS][100][E_MY_TP_STRUCT];

enum
	E_TELEPORT_LIST
{
	TL_NAME[27],
	Float: TL_POS_X,
	Float: TL_POS_Y,
	Float: TL_POS_Z
};

new
	g_teleport_list[][E_TELEPORT_LIST] =
{
	{"Автосалон Средний", 390.7151,785.4606,12.2179}	
};
//-----------------------------------------------------------------------------
new driving_tutorial[4][E_DRIVING_TUTORIAL_STRUCT] =
{
	{
		"Управление системами автомобиля"
	},
	{
		"Панель индикаторов"
	},
	{
		"Заправка и ремонт"
	},
	{
		"Правила дорожного движения"
	}
};

new const
	g_ostanovka[14][E_OST_STRUCT] =
{
	{-527.1439, 960.4191, 11.0000, 180.0},
	{-355.3593, 624.9027, 10.9943, -8.0},
	{188.9087, 822.6100, 10.9987, -20.0},
	{-39.1347, 909.0502, 11.1431, -20.0},
	{421.5296, 1951.3121, 6.8208, 70.0},
	{-457.9447, 1231.0685, 17.4199, -5.0},
	{1880.4998, 2088.6189, 14.8307, 90.0},
	{2101.3455, 2947.5771, 11.1331, 180.0},
	{2013.0243, 1317.7867, 25.5246, 180.0},
	{2893.5012, 490.9197, 23.4728, 93.0},
	{2436.8955, -781.6520, 11.5396, 0.0},
	{954.3122, -733.2476, 39.8515, 17.0},
	{-506.4674, -1667.4541, 39.9777, 148.0},
	{-2363.1611, 2494.8374, 42.0439, 207.0}
};

new const
Float: driving_exam_route[77][3] = // маршрут практики
{
	{1898.5598,1918.9840,15.4905},
	{1886.3184,1927.0966,15.4903},
	{1898.3917,1935.0730,15.4907},
	{1887.3914,1937.4657,15.4897},
	{1887.9203,1949.6998,15.4895},
	{1909.3236,1953.4197,15.4904},
	{1959.2162,1945.4856,15.4625},
	{1965.6996,1978.9661,15.7513},
	{1963.6229,2041.4626,15.6804},
	{1938.8622,2058.6516,15.6773},
	{1894.9943,2058.0930,15.6857},
	{1891.7437,2121.0635,15.7341},
	{1891.9122,2192.9746,15.7338},
	{1885.6937,2312.1846,15.7663},
	{1802.2356,2441.2229,15.7611},
	{1750.3679,2531.7793,15.3240},
	{1873.1094,2623.8042,15.0411},
	{1980.8745,2763.1465,14.9784},
	{2066.7512,2883.3210,13.2793},
	{2074.9900,2947.1431,11.7620},
	{2075.4851,2965.7344,12.0223},
	{2013.1682,2967.8560,12.3056},
	{1822.7424,2968.9456,11.8083},
	{1591.5328,2967.7417,11.8080},
	{1409.8813,2960.8257,11.8079},
	{1295.6263,2833.8010,11.8080},
	{1229.7363,2796.7063,11.8081},
	{1037.9351,2694.4360,11.8081},
	{833.8209,2573.5513,11.8082},
	{680.3741,2480.6550,11.8081},
	{601.7606,2350.4045,11.8080},
	{513.7977,2186.9292,11.8082},
	{443.7500,2027.4771,6.2930},
	{406.0844,1891.9944,9.3556},
	{334.1120,1702.3391,11.8080},
	{326.2262,1686.4012,11.8079},
	{234.8703,1697.4258,11.8081},
	{198.9716,1679.0748,11.8081},
	{172.3436,1581.9420,11.8080},
	{134.2204,1390.6903,11.8081},
	{103.4465,1244.6226,11.8081},
	{66.5831,1067.2344,11.8080},
	{42.6037,962.5150,11.8081},
	{14.5490,893.2438,11.8082},
	{18.8741,866.4875,11.8090},
	{127.0913,826.2717,11.8090},
	{216.3416,793.4670,11.8095},
	{265.8949,907.5126,11.8079},
	{284.2312,1061.6588,11.8080},
	{302.8244,1232.2004,12.6745},
	{321.8102,1449.1158,11.8069},
	{336.3597,1596.5707,11.8080},
	{345.3173,1687.9773,11.8066},
	{403.4441,1850.3616,11.3166},
	{455.1211,2024.1783,6.2193},
	{517.2899,2164.1167,11.8082},
	{654.8254,2421.0344,11.8081},
	{784.0052,2529.5635,11.8081},
	{991.7953,2650.7468,11.8113},
	{1145.1897,2740.4915,11.7445},
	{1321.6262,2842.6973,11.8081},
	{1401.3735,2941.0493,11.8082},
	{1667.2080,2952.5989,11.8081},
	{1868.2246,2953.4216,11.8081},
	{2065.4087,2952.9646,12.0925},
	{2063.0171,2889.6372,13.0564},
	{1965.2642,2749.5693,14.9851},
	{1816.9210,2579.8030,15.0422},
	{1746.1936,2522.7212,15.7727},
	{1846.5283,2365.3723,15.7596},
	{1888.0072,2240.0630,15.7587},
	{1886.7981,2067.1609,15.6853},
	{1910.9883,2053.6558,15.6812},
	{1961.8889,2030.0483,15.6810},
	{1962.4260,1953.3192,15.5952},
	{1931.2904,1949.5625,15.4906},
	{1911.7349,1951.2959,15.4970}
};

new driving_exam[12][E_DRIVING_EXAM_STRUCT] =
{
	{
		"Что означает слово двигатель на панели индикаторов?",
		"Включенные фары\n"\
		"Выключенные фары\n"\
		"Вкл/выкл двигатель\n"\
		"Открытый багажник\n"\
		"Закрытый багажник\n"\
		"Включенная сигнализация\n"\
		"Открытый капот",
		3
	},
	{
		"Какой клавишей вкл. и откл. фары?",
		"Левый Ctrl\n"\
		"Левый Alt\n"\
		"Правый Ctrl\n"\
		"Num 2\n"\
		"Num 4",
		2
	},
	{
		"Ограничение скорости движения по городу:",
		"50 км/ч\n"\
		"60 км/ч\n"\
		"70 км/ч\n"\
		"80 км/ч\n"\
		"90 км/ч",
		1
	},
	{
		"Чтобы заправиться на заправочной станции надо:",
		"Вызвать механика\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ни один из вариантов не подходит",
		5
	},
	{
		"Как включить или выключить двигатель?",
		"Ввести команду {0099CC}/buyfuel\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Ввести команду {0099CC}/start\n"\
		"Нажать {0099CC}Num 2\n"\
		"Все ответы неверны",
		2
	},
	{
		"Что означает Значок капельки: 45 на панели индикаторов?",
		"Текущая скорость {0099CC}45 км/ч\n"\
		"Уровень повреждений авто {0099CC}45 единиц\n"\
		"Цвет транспорта {0099CC}45\n"\
		"В бензобаке осталось {0099CC}45 литров\n"\
		"Нет правильного ответа",
		4
	},
	{
		"Что можно сделать, чтобы сократить расход бензина?",
		"Выйти из машины\n"\
		"Выключить двигатель\n"\
		"Отключить фары / сигнализацию\n"\
		"Включить ограничитеть скорости\n"\
		"Закрыть машину\n"\
		"Отремонтировать транспорт",
		2
	},
	{
		"Как открыть или закрыть домашнюю машину?",
		"Нажать {0099CC}Num 8\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Ввести команду {0099CC}/buyfuel\n"\
		"Все ответы неверны",
		3
	},
	{
		"При полном бензобаке время работы двигателя?",
		"20 минут\n"\
		"30 минут\n"\
		"40 минут\n"\
		"50 минут\n"\
		"1 час\n"\
		"более 1 часа",
		4
	},
	{
		"Как включить или выключить ограничитель скорости?",
		"Клавишей {0099CC}Num 2\n"\
		"Клавишей {0099CC}Num 4\n"\
		"Клавишей {0099CC}H\n"\
		"Клавишей {0099CC}левый Ctrl\n"\
		"Нет правильных ответов",
		2
	},
	{
		"Что означает значок ключика на панели индикатора?",
		"Уровень бензина.\n"\
		"Был открыт капот или багажник\n"\
		"Была включена сигнализация\n"\
		"Низкий уровень бензина в баке\n"\
		"Уровень здоровья авто.\n"\
		"Включены фары",
		5
	},
	{
		"При виде автомобиля с включенной сиреной вы:",
		"Продолжите движение с нормальной скоростью\n"\
		"Продолжите движение снизив скорость\n"\
		"Увеличите скорость\n"\
		"Попытаетесь скрыться\n"\
		"Среди предложенных вариантов нет правильного",
		5
	}
};
new driving_exam_CP; // чекпоинт сдачи на права

new g_player_driving_exam[MAX_PLAYERS][E_PLAYER_DRIVING_EXAM_STRUCT];
new g_driving_exam_default_values[E_PLAYER_DRIVING_EXAM_STRUCT] = {-1, ...};

// ------------------------------------------
new const g_atm[14][E_ATM_STRUCT] =
{
	{-510.197000, 1506.330000, 1000.57, 90.00000},
    {2261.110000, -2104.73000, 21.5887, -90.0000},
    {-1037.23960, 681.1439000, 1001.00, 359.5648},
    {-2468.87012, 2843.419920, 37.2900, -90.0000},
    {-2576.60010, 2875.949950, 37.2800, 0.000000},
    {432.6860000, 1564.970000, 11.7590, -4.00000},
    {1818.469970, 2072.659910, 15.4600, 90.00000},
    {1818.469970, 2071.159910, 15.4600, 90.00000},
    {1914.940000, -1930.67000, 31.3932, -30.7000},
    {1704.420000, -2204.11000, 1000.63, -89.3000}, //Прачечная
    {-1593.46000, 1009.390000, 1000.78, 89.90000},
    {222.6590000, -327.687000, 1010.60, -87.2001},
	{2288.630000, 1808.180000, 1000.56, 0.000000},
	{-1634.47000, -2507.73000, 7.39400, 34.90000}
};
new const atm_item_sum[7] = {1000000, 2000000, 5000000, 10000000, 20000000, 50000000, 100000000};

// ------------------------------------------
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];

// ------------------------------------------
new g_player_listitem[MAX_PLAYERS][32];
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
// ------------------------------------------
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// входящее предложение от игрока
	OFFER_TYPE_NONE, 	// входящее предложение
	{-1, -1} 			// значение входящего предложения
};

// ------------------------------------------
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

#include "systems/number_board.inc"

#include "systems/cef_data.inc"

// ------------------------------------------
new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];

new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};

new bool: g_admin_ears;

// ------------------------------------------
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};
new g_bus_routes[1][E_BUS_ROUTE_STRUCT] =
{
	{"Кольцевой",			0, 0}
};

new g_bus_route[sizeof g_bus_routes][263][E_BUS_ROUTE_STEP_STRUCT] =
{
	{ // Кольцевой
        {830.1843,562.0052,16.1622, true}, // остановка
        {828.6838,630.1339,16.1661, false}, // едем
        {711.6019,618.0303,12.4986, false}, // едем
        {571.2339,670.2149,12.5004, false}, // едем
        {325.8449,764.6742,12.4983, true}, // остановка
        {225.1596,804.8960,12.4982, false}, // едем
        {271.5100,959.4850,12.8349, false}, // едем
        {302.3549,1242.9213,13.8659, false}, // едем
        {330.3806,1498.5269,12.4978, false}, // едем
        {411.1455,1511.0399,12.4983, false}, // едем
        {425.5621,1532.5619,12.4740, false}, // едем
        {444.7967,1530.6851,12.5060, false}, // едем
        {482.6425,1537.5704,12.5020, false}, // едем
        {435.5977,1559.4666,12.5063, true}, // остановка
        {418.7032,1568.2861,12.5073, false}, // едем
        {409.1147,1624.1606,12.5011, false}, // едем
        {342.4375,1634.5463,12.4981, false}, // едем
        {311.5457,1465.8228,12.4998, false}, // едем
        {287.2889,1203.5553,12.5210, false}, // едем
        {259.2737,953.6154,12.8046, false}, // едем
        {237.3129,869.0498,12.5470, true}, // остановка
        {221.1623,819.9712,12.4981, false}, // едем
        {121.7572,559.6077,12.4985, false}, // едем
        {89.7665,554.3395,12.4981, false}, // едем
        {-137.0940,586.6841,12.4995, false}, // едем
        {-263.2154,603.1124,12.4991, true}, // остановка
        {-315.3696,615.5457,12.5966, false}, // едем
        {-369.1797,661.4669,12.6137, false}, // едем
        {-373.1620,797.5996,12.6325, false}, // едем
        {-377.5679,959.6217,12.5155, false}, // едем
        {-399.3264,974.8116,12.4950, false}, // едем
        {-538.3997,977.1989,12.6652, false}, // едем
        {-607.5602,1010.9293,13.3757, false}, // едем
        {-742.1636,1156.1814,13.5471, false}, // едем
        {-923.6900,1364.9152,13.6644, false}, // едем
        {-1194.3568,1672.3557,42.1241, false}, // едем
        {-1223.6812,1724.6101,43.4770, false}, // едем
        {-1255.3186,1830.6055,43.4905, false}, // едем
        {-1241.5956,1849.4558,43.4900, false}, // едем
        {-1176.7512,1890.8792,44.8725, false}, // едем
        {-1039.8839,1962.6417,46.3518, false}, // едем
        {-943.5060,1951.2599,46.3464, true}, // остановка
        {-884.9957,1948.7620,46.3505, false}, // едем
        {-732.0125,1943.6083,46.3444, false}, // едем
        {-738.1102,1861.1327,46.3515, false}, // едем
        {-867.1569,1861.7148,46.3479, false}, // едем
        {-873.6938,1945.9392,46.3499, false}, // едем
        {-949.6159,1957.7815,46.3517, false}, // едем
        {-1079.3997,1941.4746,46.3477, false}, // едем
        {-1212.5354,1867.8416,43.8647, false}, // едем
        {-1263.1903,1865.5150,43.4874, false}, // едем
        {-1285.6473,1928.4979,43.4877, false}, // едем
        {-1442.2731,2416.7092,43.4906, false}, // едем
        {-1499.6385,2475.0237,43.4871, false}, // едем
        {-1604.9333,2530.2856,43.9759, false}, // едем
        {-1737.0670,2544.1968,47.0607, false}, // едем
        {-1865.7476,2543.7522,48.5294, false}, // едем
        {-2081.4761,2551.5928,44.1664, false}, // едем
        {-2365.6890,2523.2095,43.4958, false}, // едем
        {-2374.3728,2688.5759,38.7303, false}, // едем
        {-2373.4661,2837.3840,37.9292, false}, // едем
        {-2383.4194,2928.7146,37.9282, false}, // едем
        {-2502.6697,2930.2161,37.9367, false}, // едем
        {-2546.6472,2927.7085,37.9298, false}, // едем
        {-2551.3247,2905.9128,37.9307, false}, // едем
        {-2541.6670,2838.2439,37.9340, false}, // едем
        {-2510.3530,2833.4434,37.9281, false}, // едем
        {-2502.3328,2811.4836,37.9336, false}, // едем
        {-2472.3442,2810.7327,37.9361, true}, // остановка
        {-2472.3442,2810.7327,37.9361, false}, // едем
        {-2378.1719,2809.5112,37.9225, false}, // едем
        {-2379.2292,2669.4055,38.6912, false}, // едем
        {-2384.3552,2512.4338,43.4990, false}, // едем
        {-2550.8113,2432.4263,45.9304, false}, // едем
        {-2621.1719,2320.5437,53.4688, false}, // едем
        {-2629.4927,2193.4321,53.4922, false}, // едем
        {-2639.1899,1997.3600,53.5161, false}, // едем
        {-2612.7717,1903.1533,53.5122, false}, // едем
        {-2466.8140,1804.5486,53.5158, false}, // едем
        {-2377.1128,1720.4962,53.5146, true}, // остановка
        {-2377.1128,1720.4962,53.5146, false}, // едем
        {-2295.4377,1589.3259,48.5711, false}, // едем
        {-2252.8337,1504.7974,42.3142, false}, // едем
        {-2271.2935,1387.4557,34.0445, false}, // едем
        {-2450.6753,1286.1028,23.7081, false}, // едем
        {-2551.8025,1222.1581,12.9423, false}, // едем
        {-2562.2842,1174.2423,11.8460, false}, // едем
        {-2573.9587,1140.3473,11.7940, true}, // остановка
        {-2573.9587,1140.3473,11.7940, false}, // едем
        {-2628.2712,970.8035,11.1375, false}, // едем
        {-2649.7893,782.2139,11.2955, false}, // едем
        {-2598.9910,649.6534,11.3768, false}, // едем
        {-2565.8604,537.3958,12.6192, false}, // едем
        {-2593.3730,421.6794,8.2933, false}, // едем
        {-2661.2300,274.9908,12.4696, true}, // остановка
        {-2657.6252,245.2148,12.6538, false}, // едем
        {-2515.4260,230.5141,14.4384, false}, // едем
        {-2393.3245,232.8597,18.1817, false}, // едем
        {-2288.4446,221.9653,24.2417, false}, // едем
        {-2210.6152,196.4760,25.0403, true}, // остановка
        {-2178.1619,190.3391,25.0542, false}, // едем
        {-2115.0496,34.7745,27.4864, false}, // едем
        {-2077.7390,-67.2235,26.7906, false}, // едем
        {-2095.4084,-127.0250,26.5419, true}, // остановка
        {-2095.4536,-127.1910,26.5398, false}, // едем
        {-2115.1555,-236.9588,26.3859, false}, // едем
        {-2152.9453,-388.6881,25.5487, false}, // едем
        {-2248.9111,-360.5563,22.6052, true}, // остановка
        {-2250.3250,-359.3836,22.5400, false}, // едем
        {-2287.3538,-284.6135,21.0878, false}, // едем
        {-2387.6362,-153.2890,16.5357, false}, // едем
        {-2534.3330,-99.6643,14.2012, false}, // едем
        {-2646.8428,-83.2548,12.0212, false}, // едем
        {-2670.3735,-235.1661,15.8714, false}, // едем
        {-2618.5273,-521.7477,29.8468, false}, // едем
        {-2605.5583,-767.6392,30.2134, false}, // едем
        {-2605.3750,-1049.7034,30.3156, false}, // едем
        {-2608.1787,-1218.3521,11.4046, false}, // едем
        {-2633.3108,-1290.0190,10.0918, false}, // едем
        {-2662.8865,-1356.6101,9.3462, true}, // остановка
        {-2662.8865,-1356.6101,9.3462, false}, // едем
        {-2640.8076,-1461.8464,8.4149, false}, // едем
        {-2511.2627,-1554.4641,8.4497, false}, // едем
        {-2310.8630,-1811.4775,8.4645, false}, // едем
        {-2048.0825,-2115.3735,8.4429, false}, // едем
        {-1805.7651,-2352.4775,8.4544, false}, // едем
        {-1663.4579,-2570.0085,13.6066, true}, // остановка
        {-1663.4579,-2570.0085,13.6066, false}, // едем
        {-1476.6080,-2660.7803,4.5850, false}, // едем
        {-1256.5164,-2731.6760,18.1026, false}, // едем
        {-1001.6001,-2744.5171,32.1525, false}, // едем
        {-788.8875,-2678.4260,32.2859, false}, // едем
        {-596.6293,-2574.8799,30.5879, false}, // едем
        {-519.7291,-2577.3208,30.6046, false}, // едем
        {-407.2245,-2641.9102,30.5994, false}, // едем
        {-149.3859,-2636.6841,37.2591, false}, // едем
        {123.2890,-2575.6826,37.4894, false}, // едем
        {288.7567,-2569.4241,36.3043, true}, // остановка
        {289.0991,-2569.6465,36.2855, false}, // едем
        {334.0066,-2632.0374,33.5611, false}, // едем
        {381.6531,-2683.6050,34.3265, false}, // едем
        {468.7939,-2676.6282,36.3115, false}, // едем
        {592.9813,-2672.8413,37.7771, false}, // едем
        {751.5662,-2686.7163,38.9168, false}, // едем
        {856.9183,-2649.9250,40.1790, false}, // едем
        {925.0898,-2590.2537,39.1438, false}, // едем
        {1231.3593,-2588.0298,39.2149, false}, // едем
        {1492.0508,-2588.7407,36.4341, false}, // едем
        {1599.1003,-2612.7139,30.2175, false}, // едем
        {1865.9821,-2694.0906,12.9877, false}, // едем
        {2020.5393,-2697.3059,10.9209, false}, // едем
        {2301.9915,-2692.1260,22.5406, false}, // едем
        {2384.8738,-2693.1509,22.9386, true}, // остановка
        {2384.8738,-2693.1509,22.9386, false}, // едем
        {2448.6875,-2687.3374,23.2116, false}, // едем
        {2472.1440,-2615.1013,22.5763, false}, // едем
        {2472.0601,-2426.1919,22.2652, false}, // едем
        {2472.1140,-2407.8228,22.2651, false}, // едем
        {2472.4060,-2308.5857,22.2752, false}, // едем
        {2472.3494,-2171.3655,22.3062, false}, // едем
        {2477.8279,-2129.2642,22.3137, true}, // остановка
        {2477.8279,-2129.2642,22.3137, false}, // едем
        {2472.3086,-2088.7578,22.3110, false}, // едем
        {2471.6953,-1999.3833,22.3111, false}, // едем
        {2467.4363,-1891.3739,22.3107, false}, // едем
        {2416.3105,-1871.7671,22.3111, false}, // едем
        {2302.7998,-1867.4326,22.3108, false}, // едем
        {2291.2029,-1847.8265,22.3132, false}, // едем
        {2291.1892,-1753.1357,22.3109, false}, // едем
        {2304.0815,-1595.5842,23.7665, false}, // едем
        {2343.0876,-1539.5696,24.0934, false}, // едем
        {2430.6750,-1528.7767,24.2982, false}, // едем
        {2520.6602,-1539.2125,23.4411, false}, // едем
        {2552.5017,-1573.6218,23.0529, false}, // едем
        {2576.8594,-1613.6758,23.0533, false}, // едем
        {2618.4585,-1619.6013,23.0550, false}, // едем
        {2651.5906,-1559.4999,23.7123, false}, // едем
        {2681.1155,-1531.0062,24.3767, false}, // едем
		{2740.0293,-1473.8970,24.0900, false}, // едем
        {2753.6233,-1382.5455,24.0564, false}, // едем
        {2754.1960,-1165.9512,26.4610, false}, // едем
        {2761.1155,-936.6815,23.8801, false}, // едем
        {2781.0820,-839.5933,23.2438, false}, // едем
        {2765.4004,-701.6637,24.2120, false}, // едем
        {2758.9063,-515.8035,25.3365, false}, // едем
        {2799.3330,-388.7120,28.5977, false}, // едем
        {2907.4529,-174.0577,21.6143, true}, // остановка
        {2907.4529,-174.0577,21.6143, false}, // едем
        {2909.7605,-83.9453,19.8167, false}, // едем
        {2914.6042,187.6098,15.5616, false}, // едем
        {2913.0610,403.8142,19.6411, false}, // едем
        {2899.3997,671.5091,34.1424, false}, // едем
        {2762.6731,916.6336,28.7793, false}, // едем
        {2696.6436,1130.6251,20.2881, false}, // едем
        {2594.5767,1304.1747,19.2247, false}, // едем
        {2556.3813,1410.3190,12.9097, false}, // едем
        {2591.0173,1531.3464,14.2182, false}, // едем
        {2695.4011,1624.2294,17.5174, true}, // остановка
        {2695.4011,1624.2294,17.5174, false}, // едем
        {2734.6997,1715.1982,16.4473, false}, // едем
        {2755.8345,1932.0592,17.2639, false}, // едем
        {2765.5574,2135.2004,18.4525, false}, // едем
        {2744.4028,2424.0225,17.3505, false}, // едем
        {2715.5388,2705.9568,28.3091, false}, // едем
        {2729.8713,2832.4639,28.2410, false}, // едем
        {2742.7981,2911.8230,27.4232, false}, // едем
        {2727.9788,3065.4277,28.0714, false}, // едем
        {2758.2981,3138.8096,22.6095, false}, // едем
        {2869.4863,3238.9036,24.8152, false}, // едем
        {3080.9771,3400.8496,20.9501, false}, // едем
        {3424.2214,3625.8616,12.2826, false}, // едем
        {3541.6155,3841.0154,8.5003, false}, // едем
        {3612.4165,3961.2200,8.4932, false}, // едем
		{3648.9165,3990.1890,8.4255, false}, // едем
        {3777.9182,3985.0864,8.4617, false}, // едем
        {3794.1577,3887.2021,8.4316, true}, // остановка
        {3794.1577,3887.2021,8.4316, false}, // едем
        {3833.1694,3810.3284,8.4291, false}, // едем
        {3980.1189,3818.9548,8.4327, false}, // едем
        {4016.1973,3905.8733,8.4279, false}, // едем
        {3981.7568,4063.3794,8.4231, false}, // едем
        {3961.0684,4225.3613,8.4281, false}, // едем
        {3941.3132,4336.1470,8.4240, false}, // едем
        {3826.4521,4297.2773,8.4281, false}, // едем
        {3636.6199,4166.6675,8.4363, false}, // едем
        {3614.9116,4020.8726,8.4541, false}, // едем
        {3584.2734,3997.8101,8.4789, false}, // едем
        {3561.8689,3936.1729,8.4708, false}, // едем
        {3430.5532,3656.3120,11.3022, false}, // едем
        {3157.9136,3425.0706,17.2729, false}, // едем
        {3049.0586,3400.9333,21.7283, false}, // едем
        {2900.9290,3282.7825,24.8680, false}, // едем
        {2707.2915,3069.2153,27.8918, false}, // едем
        {2677.1382,2977.2773,27.4581, false}, // едем
        {2630.0596,2949.2612,22.2616, false}, // едем
        {2488.4905,2955.4878,17.1774, false}, // едем
        {2251.3916,2960.8320,14.9544, false}, // едем
        {1926.3682,2973.3379,12.5234, true}, // остановка
        {1926.3682,2973.3379,12.5234, false}, // едем
        {1691.2698,2967.1719,12.4996, false}, // едем
        {1397.2853,2954.1538,12.4976, false}, // едем
        {1222.5022,2793.7773,12.4973, false}, // едем
        {1022.9880,2684.3760,12.4973, false}, // едем
        {806.1550,2558.7964,12.4973, false}, // едем
        {619.4474,2383.1528,12.4951, false}, // едем
        {442.9261,2001.3705,7.2977, false}, // едем
        {344.3009,1730.4592,12.4973, false}, // едем
        {320.8531,1687.6833,12.5038, false}, // едем
        {298.6161,1691.2623,12.4971, true}, // остановка
        {298.6161,1691.2623,12.4971, false}, // едем
        {198.9028,1674.7164,12.4980, false}, // едем
        {148.4204,1457.1774,12.5021, false}, // едем
        {84.0852,1145.7450,12.4977, false}, // едем
        {29.3300,928.5944,12.4996, true}, // остановка
        {30.0265,868.4750,12.4978, false}, // едем
        {162.1666,815.1668,12.4871, false}, // едем
        {198.6780,801.0674,12.4986, false}, // едем
        {400.8421,722.9785,12.4972, true}, // остановка
        {401.4996,722.7247,12.4961, false}, // едем
        {556.2656,662.9399,12.4984, false}, // едем
        {710.3727,606.5345,12.4986, false}, // едем
        {744.7357,550.6293,12.9632, false}, // едем
        {0.0, 0.0, 0.0, false} // с начала
	}
};
// ------------------------------------------
new g_temp_jobs[7][E_TEMP_JOB_STRUCT] =
{
	{-474.9881,2873.9221,1192.7656, 	10000,	 	{16, 15582}},  	// шахтер
	{-1093.0382,2166.2014,38.0644, 	    15000,	 	{16, 198}}, 	// завод (служба доставки)
	{-2950.0012,-1186.8716,1000.9978, 	10000,  	{259, 15541}},  // завод
	{429.7691,-2444.4690,34.9269, 		50000,  	{202, 15580}},	// лесоруб
	{1801.4276,2507.0327,16.3863,	250000,       {15531, 15541}}, // elektrik
	{1614.2493, 654.5156, 16.0372, 25000,    {158, 198}},    // Ферма
	{2667.6648, -2358.2588, 21.9760, 35000,    {27, 198}}    // Грузчик
};
// ---------------------------------------
new const
	Float: miner_job_load_pos[13][3] = // позиции загрузки (шахтер)
{
    {-773.7363, 1202.9187, 3011.3450},
    {-770.5228, 1193.9725, 3011.3579},
    {-758.0850, 1183.2987, 3011.3269},
    {-744.2402, 1191.8135, 3011.3516},
    {-757.5181, 1198.3695, 3011.3398},
    {-747.2653, 1216.1454, 3011.3459},
    {-753.3427, 1218.5532, 3011.3315},
    {-747.3553, 1240.3322, 3011.3530},
    {-739.8178, 1245.4788, 3011.3420},
    {-748.3314, 1251.8119, 3011.3545},
    {-765.3642, 1226.7811, 3011.3264},
    {-769.1305, 1213.0474, 3011.3181},
    {-778.7079, 1216.6088, 3011.3789}
};
new miner_job_load_cp[sizeof miner_job_load_pos] = {-1, ...};
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] =
{
    {-846.4298, 1211.0444, 3011.6699, -1012.9698, 1211.0444, 3011.6699, false, 0, -1}
};
new miner_job_area; // зона шахты (шахтер)

// ---------------------------------------
new Text3D: factory_store_label[2];

new factory_job_area;
new factory_put_zone;
new
    Float: factory_take_metall_pos[4][3] =
{
    {-2925.4326,-1171.3757,1000.9978},
    {-2934.4175,-1171.2388,1000.9978},
    {-2936.0869,-1204.9742,1000.9978},
    {-2926.8286,-1204.9141,1000.9978}
};
new factory_desk[18][E_FACTORY_DESK_STRUCT];
new
     Float: factory_desks[18][3] =
{
    {-2883.4763,-1188.6482,1000.9978},
    {-2890.3918,-1188.6483,1000.9978},
    {-2897.3613,-1188.6471,1001.0041},
    {-2904.3240,-1188.6459,1000.9978},
    {-2910.6943,-1188.6481,1000.9978},
    {-2917.5061,-1188.6458,1000.9978},
    {-2923.5498,-1188.6460,1000.9978},
    {-2930.1785,-1188.6456,1000.9978},
    {-2937.8408,-1188.6481,1000.9978},
    {-2937.8738,-1193.5781,1001.0525},
    {-2930.8865,-1193.5785,1001.0525},
    {-2923.9111,-1193.5784,1001.0525},
    {-2917.0010,-1193.5803,1001.0525},
    {-2910.7185,-1193.5814,1001.0525},
    {-2903.8745,-1193.5807,1001.0525},
    {-2897.8335,-1193.5790,1001.0525},
    {-2891.2339,-1193.5784,1001.0525},
    {-2883.4976,-1193.5789,1001.0525}
};
// ---------------------------------------
new const
	Float: lumberjack_job_chop_cp[14][2] =
{
	{376.4885,-2433.8342},
	{392.9308,-2447.9985},
	{383.0653,-2408.5261},
	{354.9216,-2440.9980},
	{357.1012,-2455.7456},
	{377.1790,-2468.5510},
	{366.8929,-2481.3188},
	{341.1831,-2466.4055},
	{357.8873,-2392.9934},
	{360.9946,-2391.6401},
	{381.0758,-2378.0637},
	{381.6475,-2368.4766},
	{367.8658,-2360.3906},
	{378.7424,-2354.0344}
};

new const
	Float: fermer_job_chop_cp[1][3] =
{
	{1549.9681,637.3264,15.9206}

};

new const
	Float: fermer_job_chop_cp_sbor[12][3] =
{
	{1528.3864,637.9394,15.9206},
	{1531.0256,662.2735,15.9206},
	{1513.4709,675.3279,15.9282},
	{1492.7433,672.4688,15.9282},
	{1494.6787,649.1901,15.9206},
	{1510.7041,633.5508,15.9206},
	{1516.3757,616.1295,15.9206},
	{1503.6472,594.9106,15.9206},
	{1483.6641,585.4595,15.9206},
	{1470.0861,590.9178,15.9206},
	{1450.6865,615.4616,15.9206},
	{1440.0599,636.3666,15.9206}

};

new const
	Float: pole_ferma[20][3] =
{
	{1553.6000,686.9417,15.9206},
	{1534.5343,671.3055,15.9206},
	{1518.8040,669.5296,15.9206},
	{1515.0876,650.2131,15.9206},
	{1530.7856,637.1255,15.9206},
	{1536.0201,622.8182,15.9282},
	{1526.4717,602.5839,15.9206},
	{1540.1870,597.8218,15.9206},
	{1548.5973,579.9523,15.9206},
	{1527.3737,568.5114,15.9206},
	{1507.3088,568.3526,15.9206},
	{1491.0593,613.1070,15.9206},
	{1471.9258,638.4400,15.9206},
	{1466.0587,665.5417,15.9206},
	{1445.0511,688.5347,15.9206},
	{1442.5146,710.2256,15.9206},
	{1453.9915,729.2384,15.9206},
	{1473.6563,738.4333,15.9206},
	{1491.8201,736.5173,15.9206},
	{1499.0935,727.1919,15.9206}

};

// ------------------------------------------
new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_pay_day_time; 		// время последнего пейдея
new g_last_m_timer_time;		// время последнего 1-мин таймера

// ------------------------------------------
new const
	numeric_name[8][11] =
{
	"первого",
	"второго",
	"третьего",
	"четвертого",
	"пятого",
	"шестого",
	"седьмого",
	"восьмого"
};

new const
	month_name[12][8 + 1] =
{
	"января",
	"февраля",
	"марта",
	"апреля",
	"мая",
	"июня",
	"июля",
	"августа",
	"сентября",
	"октября",
	"ноября",
	"декабря"
};

new const
	day_name[7][12] =
{
	"Понедельник",
	"Вторник",
	"Среда",
	"Четверг",
	"Пятница",
	"Суббота",
	"Воскресенье"
};

new join_to_job_CP; // прием на работу
new garage_elit_CP;

new army_ammo_CP; // взятие патронов со склада воинской части
new yz_bil_CP;
new mia_bil_CP;

new samolet_CP;

new chat_message[5][128 + 1];

new const
	Float: spawn_pos_data[10][4] = // позиции спавнов
{
	{450.9677,1562.2775,12.1943,177.4893},	// Арзамас-Старый возле Больницыф
	{1649.4924,2189.7305,14.3863,0.0132},	// Батырево-Вокзал
	{857.7073,591.9888,15.8697,85.6262},  // Арзамас Новый
	{841.0414,592.4253,15.8857,89.7252},	// Арзамас Новый на улице
	{-2666.0386,142.1852,12.3876,268.8190},	// Лыткарино
	{-2465.2610,2840.8096,38.4074,90.0000},	// Эдово
	{-2469.5178,2830.0220,37.7199,90.0000},	// Эдово ещё
	{-2457.7319,2841.0525,38.4074,270.9400},	// Эдово ещё
	{2570.8154,-2048.9363,21.9640,265.3423},	// Вокзал Южный
	{-406.4243,-1605.5381,40.5339,250.4255}	// Бусаево
};

#include "systems/draw.inc"

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");

 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	string_dialog[0] = EOS;
	format
	(
	    string_dialog,
	    sizeof(string_dialog),
	    "Сила\t\t%d%s\t%s\n\
		Выносливость\t\t%d%s\t%s\n\
		\n\
		Тайзер\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Remington 870\t%d%s\t%s\n\
	    АКС-74У\t\t%d%s\t%s\n\
	    АКМ\t\t%d%s\t%s\n\
	    HK416\t\t%d%s\t%s\n\
	    AWM\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
		GetPlayerData(playerid, P_VINOSLIVOST), "%",
	    GetSkillBar(GetPlayerData(playerid, P_VINOSLIVOST)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE))
	);
	IntfDialogCallRemote(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Навыки владения оружием", string_dialog, "Закрыть", "");

	return 1;
}

stock GetPlayerSkillAmount(playerid, skill_index)
{
	new amount;

	switch(skill_index)
	{
		case 0: amount = GetPlayerData(playerid, P_POWER);
		case 1: amount = GetPlayerData(playerid, P_SKILL_COLT);
		case 2: amount = GetPlayerData(playerid, P_SKILL_SDPISTOL);
		case 3: amount = GetPlayerData(playerid, P_SKILL_DEAGLE);
		case 4: amount = GetPlayerData(playerid, P_SKILL_SHOTGUN);
		case 5: amount = GetPlayerData(playerid, P_SKILL_MP5);
		case 6: amount = GetPlayerData(playerid, P_SKILL_AK47);
		case 7: amount = GetPlayerData(playerid, P_SKILL_M4);
		case 8: amount = GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE);
		case 9: amount = GetPlayerData(playerid, P_SKILL_SAWNOFF);
		case 10: amount = GetPlayerData(playerid, P_SKILL_COMBAT_SG);
		case 11: amount = GetPlayerData(playerid, P_SKILL_MICRO_UZI);
	}

	return amount;
}

stock SetPlayerSkillAmount(playerid, skill_index, amount)
{
	switch(skill_index)
	{
		case 0: SetPlayerData(playerid, P_POWER, amount);
		case 1: SetPlayerData(playerid, P_SKILL_COLT, amount);
		case 2: SetPlayerData(playerid, P_SKILL_SDPISTOL, amount);
		case 3: SetPlayerData(playerid, P_SKILL_DEAGLE, amount);
		case 4: SetPlayerData(playerid, P_SKILL_SHOTGUN, amount);
		case 5: SetPlayerData(playerid, P_SKILL_MP5, amount);
		case 6: SetPlayerData(playerid, P_SKILL_AK47, amount);
		case 7: SetPlayerData(playerid, P_SKILL_M4, amount);
		case 8: SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, amount);
		case 9: SetPlayerData(playerid, P_SKILL_SAWNOFF, amount);
		case 10: SetPlayerData(playerid, P_SKILL_COMBAT_SG, amount);
		case 11: SetPlayerData(playerid, P_SKILL_MICRO_UZI, amount);
	}

	return 1;
}

stock ShowTaxiList(playerid)
{
	new list_text[34 * (sizeof g_teleport_list)];
	new dest[36];

	for(new i; i < sizeof g_teleport_list; i ++)
	{
		format(dest, sizeof dest, "%d. %s\n",i, GetTeleportListData(i, TL_NAME));
		strcat(list_text, dest);
	}

	IntfDialogCallRemote(playerid, DIALOG_TELEPORT_LIST, DIALOG_STYLE_LIST, "Выберите место поездки", list_text, "Выбрать", "Закрыть");
	return 1;
}

public: TrafficLightUpdate()
{
    for(new i; i < sizeof TrafficLight; i++)
	{
		DestroyDynamicObject(TrafficLight[i][TR_ObjectID]);

        if(TrafficLight[i][TR_ColorStatus] >= 0 && TrafficLight[i][TR_ColorStatus] != 2) TrafficLight[i][TR_ColorStatus]++;
        else if(TrafficLight[i][TR_ColorStatus] == 2) TrafficLight[i][TR_ColorStatus] = 0;

        TrafficLight[i][TR_ObjectID] = CreateDynamicObject(traffics_objects[TrafficLight[i][TR_ColorStatus]], TrafficLight[i][TR_POS_X], TrafficLight[i][TR_POS_Y], TrafficLight[i][TR_POS_Z], TrafficLight[i][TR_POS_RX], TrafficLight[i][TR_POS_RY], TrafficLight[i][TR_POS_RZ]);
    }
}

stock CreateTicket(playerid, amount, issuer[], description[])
{
	new query[190];

	mysql_format(mysql, query, sizeof query, "INSERT INTO tickets (uid, amount, issuer, description, time) VALUES (%d, %d, '%s', '%s', %d)",
	GetPlayerAccountID(playerid), amount, issuer, description, gettime());
	mysql_query(mysql, query, false);

	return 1;
}
stock PayTicket(playerid, ticketid)
{
	new query[90],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d LIMIT 1", ticketid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	new uid = cache_get_field_content_int(0, "uid"),
		amount = cache_get_field_content_int(0, "amount"),
		status = cache_get_field_content_int(0, "status"),
		desc[64];

	cache_get_field_content(0, "description", desc);

	cache_delete(result);

	if(!rows)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф не найден");

	if(uid != GetPlayerAccountID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф выписан не Вам");

	if(status)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф уже оплачен");

	if(!VerifyIntString(QueryPlayerBalance(playerid), amount))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств.");

	ModifyCashBalance(playerid, -amount, "Оплата штрафа", true, true);

	OnBattlePass_Perfomance(playerid, 23, 1);

	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE id=%d", ticketid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы оплатили штраф №%d (%s)", ticketid, desc);
	SendClientMessage(playerid, 0x66CC33FF, query);

	return 1;
}

stock SendAdvert(playerid, message[])
{
	new ad_id = g_advert_created;

	SetAdvertData(ad_id, A_CREATOR, 	playerid);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, message);

	g_advert_created ++;

	return 1;
}

stock DeleteAdvert(ad_id)
{
	if(!(0 <= ad_id <= g_advert_created - 1)) return 0;

	SetAdvertData(ad_id, A_CREATOR, 	INVALID_PLAYER_ID);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, "");

	if(ad_id == g_advert_created - 1 && ad_id != 0)
		g_advert_created --;

	return 1;
}

stock GetAdvertIndexInQueue(ad_id)
{
	new index;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		index ++;

		if(idx != ad_id) continue;
	}

	return index;
}

stock SendLog(playerid = INVALID_PLAYER_ID, type, desc[])
{
	new fmt_log[512];

	mysql_format(mysql, fmt_log, sizeof fmt_log, "INSERT INTO action_log (acc_id, uip, type, description, time) VALUES (%d, '%s', %d, '%s', %d)",
	GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), type, desc, gettime());

	mysql_query(mysql, fmt_log, false);

	return 1;
}

stock GetTruckIndex(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 609)
		return 0;

	else if(GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 584)
		return 1;

	else
		return -1;
}

stock StartSpectate(playerid, for_player)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
		//ShowSpeedometrTD(playerid);
	}
	else PlayerSpectatePlayer(playerid, for_player);

	//ShowMenuForPlayer(admin_spec_menu, playerid);

	return 1;
}
stock StopSpectate(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);

	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(IsPlayerAdminLevel(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;

		if(disconnect)
		{
			StopSpectate(i);
			GameText(i, "~r~~h~игрок отключился", 4000, 1);
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			//ShowSpeedometrTD(playerid);
		}
		else
		{
			//HideSpeedometrTD(playerid);
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

// ---------------------------------------------------------------

new const
	weapon_names[47][30] =
{
	"Пусто",
	"Кастет",
	"Клюшка для гольфа",
	"Дубинка",
	"Нож",
	"Бита",
	"Лопата",
	"Кий",
	"Катана",
	"Бензопила",
	"Фиолетовый дилдо",
	"Дилдо",
	"Вибратор",
	"Серебряный вибратор",
	"Цветы",
	"Топор",
	"Граната",
	"Дымовая граната",
	"Коктейль молотова",
	"Пусто",
	"Пусто",
	"Пусто",
	"Glock 19",
	"Тайзер",
	"Desert Eagle",
	"Remington 870",
	"Обрез",
	"Сайга-12",
	"ОЦ-14 Гроза",
	"АКС-74У",
	"AKM",
	"HK416",
	"TEC-9",
	"MSR",
	"AWM",
	"РПГ",
	"Самонаводящаяся установка",
	"Огнемет",
	"Миниган",
	"C4",
	"Кнопка детонатора",
	"Баллончик",
	"Огнетушитель",
	"Фотоаппарат",
	"Очки ночного видения",
	"Очки с тепловизором",
	"Парашют"
};

// ---------------------------------------------------------------
enum
{
	LOG_TYPE_ADMIN_MUTE = 1,
	LOG_TYPE_ADMIN_ANSWER,
	LOG_TYPE_ADMIN_JAIL,
	LOG_TYPE_ADMIN_KICK,
	LOG_TYPE_ADMIN_WARN,
	LOG_TYPE_ADMIN_BAN,
	LOG_TYPE_ADMIN_SETADMIN,
	LOG_TYPE_ADMIN_SETLEADER,
	LOG_TYPE_ADMIN_MSG,
	LOG_TYPE_SUPERADMIN_ACTION
}

// ---------------------------------------------------------------
new g_xbonus;
// ---------------------------------------------------------------
// иды фрак
enum
{
	TEAM_NONE = 0,
	TEAM_GOVERNMENT, // Правительство
	TEAM_ARMY, // Воинская часть
	TEAM_HOSPITAL, // Городская больница
	TEAM_TRK, // ТРК «Ритм»
	TEAM_MVD, // МВД
    TEAM_FSIN, // ФСИН
	TEAM_FSB //ФСБ
};

new const team_names[8][28] =
{
	"Нет",
	"Правительство",
	"Мин.Обороны",
	"Министерство Здравохранения",
	"ГТРК Ритм",
	"МВД",
	"ФСИН",
	"ФСБ"
};

#include "systems/police/police_pg.inc"
#include "systems/detailyng.inc"

#include "systems/weapon_shop.inc"

#include "systems/weapon_assembly.inc"

#include "systems/settings.inc"

new const team_colors[8] = // цвета
{
	0xFFFFFF11, // Гражданин / безработный
	0xCCFF00FF, // Правительство
	0x996633FF, // Воинская часть
	0xFF6666FF, // Больница
	0xFF6600FF, // ГТРК «Ритм»
	0x0000FFFF, // МВД
	0x009999FF, // ФСИН
	0x7A8584FF // ФСБ
};

enum E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[10],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW
};
new g_organization[7][E_ORG_DATA] =
{
 	{"Правительство", {164, 165, 57, 208, 147, 227, 187, 187, 187, 187}, 141, {-2519.4226,1480.6204,1080.4944,90.0}, {0.0, 0.0, 0.0}, 5, 21},
	{"Мин.Обороны", {253, 30, 179, 162, 287, 287, 287, 287, 61,  255}, 218, 	{343.9309,2935.2080,999.4844,89.2135}, 	    {248.9328,2867.2319,7.4449}, 	1, 22},
	{"Министерство Здравохранения", {15384, 15381, 15387, 276, 15386, 15385, 15383, 276, 15388,   15382},	91, 	{418.9713,1710.7025,1001.0000,273.5817}, 		{0.0, 0.0, 0.0}, 3, 5},
	{"ГТРК Ритм", {170, 188, 188, 171, 189, 217, 217, 217, 59,   57},	172, 	{-2699.1589,2718.5935,999.5078,0.0}, 	{0.0, 0.0, 0.0}, 					1, 69},
    {"МВД", {15341, 15342, 15343, 15323, 15325, 15332, 15335, 15340, 15351, 15330},	148, 	{-1625.3553,-1784.3309,1000.7010,175.757}, 		{0.0, 0.0, 0.0}, 					4, 5},
	{"ФСИН", {15404, 15401, 15403, 15400, 15405, 15402, 86, 168, 168, 168}, 15398, {-1791.3435,-2829.7483,19.2475,152.3280}, 	{0.0, 0.0, 0.0}, 					0, 0},
	{"ФСБ", {17082, 17082, 17084, 17084, 17083, 17083, 17034, 17036, 17036, 17035}, 17037, {2324.0730,-1762.8365,1006.7834,269.9708}, 	{0.0, 0.0, 0.0}, 					5, 5}
};


new const rank_names[7][10][50] =
{
	// Правительство области
	{"Водитель", "Охранник", "Начальник Охраны", "Секретарь", "Советник", "Лицензер", "Адвокат", "Депутат", "Вице-губернатор", "Губернатор"},

	// Воинская часть
	{"Рядовой", "Ефрейтор", "Сержант", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"},

	// Больница
	{"Интерн", "Фельдшер", "Участковый Врач", "Терапевт", "Проктолог", "Нарколог", "Хирург", "Заведующий отделением", "Зам.Глав.Врача", "Глав.Врач"},

	// ТРК
	{"Практикант", "Фотограф", "Журналист", "Корреспондент", "Ведущий", "Редактор", "Маркетолог", "Менеджер", "Продюсер", "Директор"},

	// МВД
	{"Рядовой", "Сержант", "Старший сержант", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"},

	// ФСИН
	{"Охраник", "Постовой", "Нач.охраны", "Конвоир", "Надзиратель", "Специалист", "Гл. по Безопасности", "Инспектор", "Зам.Нач.тюрьмы", "Начальник тюрьмы"},

	// ФСБ
	{"Старший Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал", "", "", "", ""}
};

new const rank_wages[7][10] =
{
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}, // Правительство области
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}, // Воинская часть
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}, // Больница
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}, // ТРК
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}, // МВД
    {10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000},  // ФСИН
	{10000000, 12000000, 15000000, 18000000, 20000000, 22000000, 25000000, 27000000, 31000000, 45000000}  // ФСБ
};

public: Float:PointToPoint(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2)
{
	return floatsqroot(floatpower(floatabs(floatsub(x2,x)),2)+floatpower(floatabs(floatsub(y2,y)),2)+floatpower(floatabs(floatsub(z2,z)),2));
}

new g_carwash_player_id[MAX_PLAYERS];

new g_carwash_status[6];

new g_carwash_object[6][4];

enum G_CARWASH_POS_STRUCT
{
    G_CARWASH_ID,
    Float:G_CARWASH_X,
    Float:G_CARWASH_Y,
    Float:G_CARWASH_Z,
    Float:G_CARWASH_ANGEL
}

new g_carwash_object_pos[6][9][G_CARWASH_POS_STRUCT] =
{
    {   // Мойка Анашан
        {-1,1883.0500,-851.7705,14.8528,0.0},
        {18720, 1887.02, -850.685, 14.7136, 0.0},
        {18720, 1885.92, -849.134, 14.782, 0.0},
        {18720, 1880.82, -854.273, 14.782, 0.0},
        {18720, 1879.8, -852.505, 14.782, 0.0},
        {16231, 1883.21, -851.716, 16.312, 29.6},
        {16232, 1883.46, -851.541, 16.172, 29.3},
        {16233, 1882.73, -850.272, 16.142, 0.0},
        {16233, 1884.28, -853.019, 16.122, 0.0}
    },
    {   // Мойка Кольцевая
        {-1,516.7447, 449.4849, 12.1262,0.0},
        {18720, 513.448, 451.628, 12.039, 0.0},
        {18720, 512.754, 449.616, 12.0666, 0.0},
        {18720, 518.931, 449.519, 12.0666, 0.0},
        {18720, 518.211, 447.724, 12.0666, 0.0},
        {16231, 515.783, 449.892, 13.6366, -20.2},
        {16232, 515.877, 449.859, 13.3866, -20.8},
        {16233, 516.493, 451.464, 13.3766, 0.0},
        {16233, 515.245, 448.199, 13.3366, 0.0}
    },
    {   // Мойка Армейская
        {-1,715.2836, 2577.0464, 12.2778,0.0},
        {18720, 717.127, 2579.32, 12.2582, 0.0},
        {18720, 718.063, 2577.37, 12.2182, 0.0},
        {18720, 711.712, 2576.33, 12.2182, 0.0},
        {18720, 712.786, 2574.38, 12.2182, 0.0},
        {16231, 714.594, 2576.82, 13.5982, 29.7},
        {16232, 714.628, 2576.77, 13.4682, 31.6},
        {16233, 713.804, 2578.1, 13.5382, 0.0},
        {16233, 715.462, 2575.42, 13.5482, 0.0}
    },
    {   // Мойка Барвиха
        {-1,3998.1440,4332.0781,8.0176,0.0},
        {18720, 3996.43, 4335.38, 7.95801, 0.0},
        {18720, 3998.41, 4335.52, 7.95801, 0.0},
        {18720, 3999.95, 4328.67, 7.95801, 0.0},
        {18720, 3998.11, 4328.42, 7.95801, 0.0},
        {16231, 3998.13, 4332.49, 9.42802, -75.2},
        {16232, 3998.15, 4332.42, 9.41802, -76.6},
        {16233, 3999.65, 4332.78, 9.38802, 0.0},
        {16233, 3996.64, 4332.04, 9.38802, 0.0}
    },
    {   // Мойка У кремля
        {-1,-2567.7612, 1978.6449, 53.1044,0.0},
        {18720, -2564.94, 1975.47, 53.0449, 0.0},
        {18720, -2566.68, 1974.57, 53.0449, 0.0},
        {18720, -2568.2, 1981.27, 53.0449, 0.0},
        {18720, -2570.12, 1980.07, 53.0449, 0.0},
        {16231, -2567.62, 1978.33, 54.5193, -60.2},
        {16232, -2567.57, 1978.24, 54.4649, -62.6},
        {16233, -2566.12, 1978.98, 54.4349, 0.0},
        {16233, -2569.01, 1977.48, 54.4349, 0.0}
    },
    {   // Мойка Лыткарино
        {-1,-2600.3577,-34.3183,12.3184,0.0},
        {18720, -2601.33, -38.3194, 12.2588, 0.0},
        {18720, -2599.01, -38.5679, 12.2588, 0.0},
        {18720, -2599.47, -31.4229, 12.2588, 0.0},
        {18720, -2601.3, -31.5295, 12.2588, 0.0},
        {16231, -2600.28, -34.672, 13.7688, -90.9},
        {16232, -2600.29, -34.8114, 13.7288, 90.5001},
        {16233, -2598.7, -34.7995, 13.7288, 0.0},
        {16233, -2601.88, -34.8158, 13.7288, 0.0}
    }
};

stock CreateCarWashObject()
{
    for(new i; i < sizeof g_carwash_object_pos; i++)
    {
        CreateDynamic3DTextLabel("{FF9900}Автомойка\n{FFFFFF}Приведите в порядок свой транспорт", 0xFFFFFFFF, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z] + 1.5, 15.0);
        CreateDynamicObject(g_carwash_object_pos[i][5][G_CARWASH_ID], g_carwash_object_pos[i][5][G_CARWASH_X],g_carwash_object_pos[i][5][G_CARWASH_Y],g_carwash_object_pos[i][5][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][5][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][6][G_CARWASH_ID], g_carwash_object_pos[i][6][G_CARWASH_X],g_carwash_object_pos[i][6][G_CARWASH_Y],g_carwash_object_pos[i][6][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][6][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][7][G_CARWASH_ID], g_carwash_object_pos[i][7][G_CARWASH_X],g_carwash_object_pos[i][7][G_CARWASH_Y],g_carwash_object_pos[i][7][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][7][G_CARWASH_ANGEL]);
        CreateDynamicObject(g_carwash_object_pos[i][8][G_CARWASH_ID], g_carwash_object_pos[i][8][G_CARWASH_X],g_carwash_object_pos[i][8][G_CARWASH_Y],g_carwash_object_pos[i][8][G_CARWASH_Z], 0.0, 0.0, g_carwash_object_pos[i][8][G_CARWASH_ANGEL]);
    }
}

public: StopCarWash(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;

    SCM(playerid, 0x6BB61BFF, "[Автомойка]: Ваш транспорт вымыт!");

    new vehicleid = GetPlayerVehicleID(playerid);

    g_carwash_status[g_carwash_player_id[playerid]] = 0;

    SetVehicleData(vehicleid, V_GRYAZ, 0.0);

    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][0]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][1]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][2]);
    DestroyObject(g_carwash_object[g_carwash_player_id[playerid]][3]);
    return 1;
}
//new Float:cheat_threshold = 8.0; // Пороговое значение для обнаружения подозрительной активности
//new Float:player_previous_speed[MAX_PLAYERS];


new ACPlayerSleeping[MAX_PLAYERS char];
new ACPlayerCheckTP[MAX_PLAYERS char];
new Float:PlayerPosX[MAX_PLAYERS];
new Float:PlayerPosY[MAX_PLAYERS];
new Float:PlayerPosZ[MAX_PLAYERS];
new PlayerVehicleID[MAX_PLAYERS];

enum
{
    AC_TP_ONFOOT = 0,
    AC_TP_INCAR
}

public OnGameModeInit()
{
	print("------------------------------------------");
    print("                 REDAGE ONLINE AC                 ");
    print("------------------------------------------");

	#if defined ca_OnGameModeInit
		return ca_OnGameModeInit();
	#else
	    return 1;
	#endif
}

#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#if defined ca_OnGameModeInit
	forward ca_OnGameModeInit();
#endif

#define	OnGameModeInit ca_OnGameModeInit

//-----------------------------------[Перехват]

public OnPlayerSpawn(playerid)
{
   // if(!playerSpawnTimer[playerid]) playerSpawnTimer[playerid] = SetTimerEx("ac_SpawnTimer", (playerSleep{playerid} * 1000), 0, "i", playerid);
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};

    #if defined ca_OnPlayerSpawn
		return ca_OnPlayerSpawn(playerid);
	#else
	    return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
    #undef OnPlayerSpawn
#else
    #define _ALS_OnPlayerSpawn
#endif
#if defined ca_OnPlayerSpawn
	forward ca_OnPlayerSpawn(playerid);
#endif
#define	OnPlayerSpawn ca_OnPlayerSpawn

stock ca_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};
	return SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}

#if defined _ALS_SetSpawnInfo
    #undef SetSpawnInfo
#else
    #define _ALS_SetSpawnInfo
#endif
#define	SetSpawnInfo ca_SetSpawnInfo

stock ca_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid};

	PlayerPosX[playerid] = x;
	PlayerPosY[playerid] = y;
	PlayerPosZ[playerid] = z;
	return SetPlayerPos(playerid, x, y, z);
}

#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define	SetPlayerPos ca_SetPlayerPos


stock ca_PutPlayerInVehicle(playerid, vehid, seatid)
{
    ACPlayerCheckTP{playerid} = ACPlayerSleeping{playerid}; 
    return PutPlayerInVehicle(playerid, vehid, seatid);
}
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define	PutPlayerInVehicle ca_PutPlayerInVehicle

//---------------------------------------------------------------[Перехват end]

IPacket:207(playerid, BitStream:bs) // ## OnFootData
{
    new onFootData[PR_OnFootSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadOnFootSync(bs, onFootData);

    if(ACPlayerCheckTP{playerid}) 
    {
        ACPlayerCheckTP{playerid}--;
        if(ACPlayerCheckTP{playerid} <= 1)
        {
            PlayerPosX[playerid] = onFootData[PR_position][0];
            PlayerPosY[playerid] = onFootData[PR_position][1];
            PlayerPosZ[playerid] = onFootData[PR_position][2];
        }  
    }
    else
    {
        new Float:dis = GetDistanceBetweenPoints(PlayerPosX[playerid], PlayerPosY[playerid], PlayerPosZ[playerid], onFootData[PR_position][0], onFootData[PR_position][1], onFootData[PR_position][2]);
        if(dis >= 50.0)
        {
            if(GetPVarInt(playerid, "Login") == 1)
            {
                AC_CheckDetected(playerid, AC_TP_ONFOOT, dis);
            }
        }
    }

    PlayerPosX[playerid] = onFootData[PR_position][0];
    PlayerPosY[playerid] = onFootData[PR_position][1];
    PlayerPosZ[playerid] = onFootData[PR_position][2];

	return 1;
}

IPacket:200(playerid, BitStream:bs) // ## inCarSync
{
    new inCarData[PR_InCarSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadInCarSync(bs, inCarData);

    if(ACPlayerCheckTP{playerid}) 
    {
        ACPlayerCheckTP{playerid}--;
        if(ACPlayerCheckTP{playerid} <= 1)
        {
            PlayerPosX[playerid] = inCarData[PR_position][0];
            PlayerPosY[playerid] = inCarData[PR_position][1];
            PlayerPosZ[playerid] = inCarData[PR_position][2];
        }  
    }
    else
    {
        new Float:dis = GetDistanceBetweenPoints(PlayerPosX[playerid], PlayerPosY[playerid], PlayerPosZ[playerid], inCarData[PR_position][0], inCarData[PR_position][1], inCarData[PR_position][2]);
        if(dis >= 25.0)
        {
            if(GetPVarInt(playerid, "Login") == 1)
            {            
                AC_CheckDetected(playerid, AC_TP_INCAR, dis);
            }
        }


        PlayerPosX[playerid] = inCarData[PR_position][0];
        PlayerPosY[playerid] = inCarData[PR_position][1];
        PlayerPosZ[playerid] = inCarData[PR_position][2];

        
        PlayerVehicleID[playerid] = inCarData[PR_vehicleId];
    }

	return 1;
}

public: AC_CheckDetected(playerid, cheat_id, Float:distance)
{
    if(IsPlayerAdminLevel(playerid) == 0 && GetPlayerYAdminEx(playerid) == 0 && GetPlayerInBiz(playerid) == -1)
    {
        switch(cheat_id)
        {
            case AC_TP_ONFOOT:
            {
                new fmt_text[148];
                format(fmt_text, sizeof fmt_text, "[A] Игрок %s [%d] подозревается в использовании читов (code: %d | Телепорт | %.2f)", GetPlayerNameEx(playerid), playerid, cheat_id, distance);
                SendMessageToAdmins(fmt_text, 0xff0000FF);
            }
            case AC_TP_INCAR:
            {
                new fmt_text[148];
                format(fmt_text, sizeof fmt_text, "[A] Игрок %s [%d] подозревается в использовании читов (code: %d | Телепорт (в транспорте) | %.2f)", GetPlayerNameEx(playerid), playerid, cheat_id, distance);
                SendMessageToAdmins(fmt_text, 0xff0000FF);
            }
        }
    }
}

#include "systems/cars/org_cars.inc"

new platkadorogi[2];

new stationary_radars[8];

new Float: g_stationary_radars[8][3] = {

    {699.131200,181.648400,12.1928},
    {796.927100,72.6810000,13.6342},
    {902.244300,2600.59960,12.0595},
    {1041.50330,2693.76170,12.0595},
    {2739.21240,-1441.5228,23.7545},
    {2651.99610,-1554.9886,23.4025},
    {-2592.8132,-765.98210,29.8664},
    {-2602.6799,-605.00740,29.8838}
};

new lastProfitTick;

public OnGameModeInit()
{
    for(new i; i < sizeof TrafficLight; i++)
    {
        TrafficLight[i][TR_ColorStatus] = RandomEx(0, 3);
        TrafficLight[i][TR_AreaID] = CreateDynamicSphere(TrafficLight[i][TR_POS_X], TrafficLight[i][TR_POS_Y], TrafficLight[i][TR_POS_Z], 5.0);
    }
	for(new i; i < MAX_GARBAGE_PLACE; i++)
	{
		if(e_Garbage[i][eGarbageState] == true) continue;
		e_Garbage[i][eGarbageState] = true;
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
    {
        inventory_plate_id[i] = -1;
    }

    lastProfitTick = GetTickCount();
    SetTimer("CheckVetrProfit", 60000, true);

    area_koryakino = CreateDynamicRectangle(211.28, -2040.31, 592.19, -1841.53, -1, -1, -1);
	area_uzniy = CreateDynamicRectangle(2101.13, -2776.25, 2802.47, -2750.46, -1, -1, -1);

	SetTimer("CheckCaptureEvents", 60000, true);

    SetTimer("TrafficLightUpdate", 30000, true);

	SetTimer("CheckPlayerPing", 1000, true);

	SetTimer("CheckGardenRent", 60000, true);

    SetTimer("CheckReset", 60000, true);

	//DuckHunting_Init(-275.7906,2329.8926,-0.5500);

	Create3DTextLabel("Охранная система\n{FFFFFF}(Подойдите для взаимодействия)", 0x66CC00FF, 4048.1741,3834.2500,9.1017, 12.0000, 0, 0);
	Create3DTextLabel("Охранная система\n{FFFFFF}(Подойдите для взаимодействия)", 0x66CC00FF, 1949.5688,35.8776,8.1148, 12.0000, 0, 0);
	Create3DTextLabel("Охранная система\n{FFFFFF}(Подойдите для взаимодействия)", 0x66CC00FF, -3251.9282,851.0476,7.8388, 12.0000, 0, 0);
	Create3DTextLabel("Охранная система\n{FFFFFF}(Подойдите для взаимодействия)", 0x66CC00FF, 2330.5688,1540.4658,14.0565, 12.0000, 0, 0);

    CentralMansion = CreateDynamic3DTextLabel("{FF8000}Особняк мафии №1\n{ffffff}Контролирует: {a9acaf}Нет", 0xFFFFFFFF, 1949.5592, 20.5202, 8.1148 + 1.0, 6.0);
	WestMansion = CreateDynamic3DTextLabel("{FF8000}Особняк мафии №2\n{ffffff}Контролирует: {a9acaf}Нет", 0xFFFFFFFF, -3239.3215,830.2149,7.8700 + 1.0, 6.0);
	NorthMansion = CreateDynamic3DTextLabel("{FF8000}Особняк мафии №3\n{ffffff}Контролирует: {a9acaf}Нет", 0xFFFFFFFF, 4052.6401,3812.6880,9.1047 + 1.0, 6.0);
	PelaBase = CreateDynamic3DTextLabel("{FF8000}Особняк мафии №4\n{ffffff}Контролирует: {a9acaf}Нет", 0xFFFFFFFF, 2320.2622, 1539.7009, 11.3457 + 1.0, 6.0);
    
	new family_actor;
	family_actor = CreateActor(258, -2503.8015,1479.2994,1080.4944,140.9059);
	SetActorVirtualWorld(family_actor, 21);
	CreateDynamic3DTextLabel("{ffff00}Создание семьи", 0xFFFFFFFF, -2503.8015,1479.2994,1081.4944, 6.0);

	new autoscool_actor;
	autoscool_actor = CreateActor(208, -2508.9167,1478.8176,1080.4944,222.5378);
	SetActorVirtualWorld(autoscool_actor, 21);
	CreateDynamic3DTextLabel("{FFFFFF}Лицензер", 0xFFFFFFFF, -2508.9167,1478.8176,1080.4944 + 0.8, 6.0);
	
	new zavod_actor;
	zavod_actor = CreateActor(29, -1607.4069,-634.2133,1016.4700,267.6912);
	SetActorVirtualWorld(zavod_actor, 7);
	ApplyActorAnimation(zavod_actor, "OTB", "betslp_loop", 4.1, 1, 0, 0, 0, 0);
	CreateDynamic3DTextLabel("{FF8000}Сборка оружия\n{FF0000}Занято", 0xFFFFFFFF, -1606.5664,-634.3039,1017.2022, 6.0);

	new zavod_actor2;
	zavod_actor2 = CreateActor(135, -1607.2897,-640.0005,1016.4700,268.0520);
	SetActorVirtualWorld(zavod_actor2, 7);
	ApplyActorAnimation(zavod_actor2, "OTB", "betslp_loop", 4.1, 1, 0, 0, 0, 0);
	CreateDynamic3DTextLabel("{FF8000}Сборка оружия\n{FF0000}Занято", 0xFFFFFFFF, -1606.5258,-639.9662,1017.2022, 6.0);

	new zavod_actor3;
	zavod_actor3 = CreateActor(46, -1594.8289,-636.9092,1016.4700,265.6896);
	SetActorVirtualWorld(zavod_actor3, 7);
	ApplyActorAnimation(zavod_actor3, "OTB", "betslp_loop", 4.1, 1, 0, 0, 0, 0);
	CreateDynamic3DTextLabel("{FF8000}Сборка оружия\n{FF0000}Занято", 0xFFFFFFFF, -1594.3491,-636.9114,1017.2022, 6.0);
	
	CreateActor(22, -392.9032,2530.1426,5.3501,78.1337);
	CreateDynamic3DTextLabel("{FF8000}Заведующий озером", 0xFFFFFFFF, -392.4796,2530.0090,6.6935 + 0.1, 6.0);

	CreateDynamic3DTextLabel("{66CC00}- Для клиентов -\n{FFFFFF}Заказ компонентов", 0xFFFFFFFF, -2513.3682,-605.9790,1001.0547 + 0.5, 6.0);//СТО

	CreateDynamic3DTextLabel("Склад брёвен\nКоличество {FFFFFF}50000 шт\n\n{ABCDEF}Переносите брёвна за рамщика в цех или\nдоставляйте их с грузовика за водителя", 0xFFFFFFFFABCDEFFF, 477.8635, -2439.0234, 34.7629, 15.0);
    CreateDynamic3DTextLabel("Место для укладки брёвен\n\n{ABCDEF}Всего в очереди {FFFFFF}0 человек(а) \n\n{ABCDEF}Положите сюда бревно для обработки", 0xFFFFFFFFABCDEFFF, 470.9107, -2371.8191, 34.7783, 20.0);
    CreateDynamic3DTextLabel("Склад досок\nПоложите доску для хранения", 0xFFFFFFFFABCDEFFF, 505.4850, -2376.8389, 34.7783, 20.0);
	CreateDynamic3DTextLabel("Распиленные брёвна\nКоличество: {FFFFFF}4 шт\n{ABCDEF}Отнесите обработанное дерево на склад", 0xFFFFFFFFABCDEFFF, 488.3204, -2383.3347, 34.0563, 15.0);

	new casino_actor[2];
	casino_actor[0] = CreateActor(141, 222.2848,-324.3180,1011.3044,119.9847);
	casino_actor[1] = CreateActor(141, 222.2848,-324.3180,1011.3044,119.9847);
	CreateDynamic3DTextLabel("{ffb833}Кассир\n{ffffff}Подойдите для обмена фишек", 0xFFFFFFFF, 222.2848,-324.3180,1011.3044 + 0.1, 6.0);
	SetActorVirtualWorld(casino_actor[0], 273);
	SetActorVirtualWorld(casino_actor[1], 274);

    dtimer = SetTimer("Drift", 5_0, true);
	atimer = SetTimer("AngleUpdate", 5_0, true);

	CreateDynamicObject(11099, -2626.14, 2183.69, 994.787,   0.00000, 0.00000,0.00000);//dver v turme
    //---------------------------------
    CreatePickup(1239, 23, -2692.3545,2196.3997,1000.9784, 4, PICKUP_ACTION_TYPE_BANDRUSSIA);
	CreateDynamic3DTextLabel("{FF8800}Список банд", 0xFFFFFFFF, -2692.3545,2196.3997,1001.2000 + 0.1, 7.0);

	CreatePickup(1239, 23, -2692.3545,2196.3997,1000.9784, 6, PICKUP_ACTION_TYPE_TOPBANDITALY);
	CreateDynamic3DTextLabel("{FF8800}Список банд", 0xFFFFFFFF, -2692.3545,2196.3997,1001.2000 + 0.1, 7.0);

	CreatePickup(1239, 23, -2692.3545,2196.3997,1000.9784, 5, PICKUP_ACTION_TYPE_TOPBANDJAPAN);
	CreateDynamic3DTextLabel("{FF8800}Список банд", 0xFFFFFFFF, -2692.3545,2196.3997,1001.2000 + 0.1, 7.0);

    CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №4\n{ffffff}Нажмите л.Alt", -1, 1088.8300,2236.7720,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №3\n{ffffff}Нажмите л.Alt", -1, 1090.5043,2236.7720,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №2\n{ffffff}Нажмите л.Alt", -1, 1088.8397,2231.1621,2.0000, 4.0);
	CreateDynamic3DTextLabel("{FFFF00}Варка наркотиков №1\n{ffffff}Нажмите л.Alt", -1, 1091.9602,2231.1621,2.0000, 4.0);

	CreateDynamic3DTextLabel("{1F75FE}-Аукцион-\n {FFFFFF}Используйте: {FFA500}/auction", 0xCC6600FF, -137.6529,2426.3170,1001.2500, 6.5);
    CreateDynamic3DTextLabel("{ff9500}Загрузка продуктов\n{FFFFFF}активно", 0xff9500FF, -1044.0237,2203.1462,38.1194, 15.0);
    
	CreateDynamic3DTextLabel("{FF8800}Spring\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для установки спила\nпружин транспортного средства", 0xFFFFFFFF, 2441.6309,-2003.4666,21.9701 + 1.0, 10.0);
	CreatePickup(19132, 23, 2441.6309,-2003.4666,21.9701,-1,-1);
	CreatePickup(19131, 23, 1820.9341,2259.5928,15.2729, -1, PICKUP_ACTION_TYPE_INKAS_ARM);
	CreateDynamic3DTextLabel("{FFA500}Гараж авторынка\n{FFA500}Посигнальте {FFFFFF}(по умолчанию H) {FFA500}для заезда", 0xFFFFFFFF, -1887.7517,1891.0359,175.9297 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{FFA500}Гараж авторынка\n{FFA500}Посигнальте {FFFFFF}(по умолчанию H) {FFA500}для заезда", 0xFFFFFFFF, 2728.8601,-2442.2361,21.8921 + 0.5, 13.0);

    CreatePickup(1239, 23, 415.0379,1706.7762,1001.0000, -1, PICKUP_ACTION_TYPE_INFO_BOLKA);

	CreatePickup(1239, 23, -1770.0388,2891.1355,6.0870,-1,PICKUP_ACTION_BLACK_MARKET);

	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 740.6722,2593.2686,12.1875 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 524.7357,1216.0225,4.9021 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 524.3786,407.8583,12.0000 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2603.8452,-11.4564,12.1909 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 2222.0361,-1700.8455,22.0557 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 1884.8348,-2943.7678,3.8352 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 1912.0714,-848.0580,15.7839 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2557.9216,1946.0831,52.9992 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 3970.4331,4347.5366,7.9306 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, -2042.2933,-1984.5055,8.5077 + 0.5, 13.0);
	CreateDynamic3DTextLabel("{ffa500}Зарядная станция\n{FFFFFF}Цена за 1 кВт: {ffa500}100 руб.", 0xFFFFFFFF, 2553.3914,-2399.2551,21.8503 + 0.5, 13.0);

    CreateDynamic3DTextLabel("{FF8800}Магазин антиквариата\nПродажа:\nИнвентарь -> продать", 0xFFFFFFFF, 2349.9390,-2138.3171,22.5854 + 1.0, 10.0);
    CreatePickup(1276, 23, 2349.9390,-2138.3171,22.5854,-1,-1);

    CreatePickup(19134, 23, 2847.3521,-2568.2800,4.3099, -1, PICKUP_ACTION_TYPE_SHIPM);
	CreateDynamic3DTextLabel("Покупка билетов\nв Майами", 0xCC6600EE, 2847.3521,-2568.2800,4.3099 + 0.8, 5.0);
	CreatePickup(19134, 23, -5355.2949,-4724.6738,3.0708, -1, PICKUP_ACTION_TYPE_SHIPM);
	CreateDynamic3DTextLabel("Покупка билетов\nв Россию", 0xCC6600EE, -5355.2949,-4724.6738,3.0708 + 0.8, 5.0);
	
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 4, PICKUP_ACTION_TYPE_VIXOD_RUSSIA);
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 5, PICKUP_ACTION_TYPE_VIXOD_JAPAN);
	CreatePickup(19134, 23, -2627.7700,2182.0825,995.7933, 6, PICKUP_ACTION_TYPE_VIXOD_ITALIA);
	CreateDynamic3DTextLabel("{659BEC}Выйти из подвала", 0xff0000AA, -2627.7700,2182.0825,995.7933, 4.0);

	platkadorogi[0] = CreateDynamicSphere(-711.0291,143.4278,27.9746, 12.0);
	platkadorogi[1] = CreateDynamicSphere(-975.0696,15.4151,40.0374, 12.0);

	for(new i; i < sizeof g_stationary_radars; i++)
	{
		stationary_radars[i] = CreateDynamicSphere(g_stationary_radars[i][0], g_stationary_radars[i][1], g_stationary_radars[i][2], 8.0);
	}

	DayvingInit();

	CreateDynamicObject(14341, 1090.25, 2240.63, 1,   0.00000, 0.00000,0.00000); //osnova
	CreateDynamicObject(14344, 1090.34, 2233.98, 1.01,   0.00000, 0.00000,0.00000); //instr1
	CreateDynamicObject(14345, 1090.23, 2233.89, 0.97,   0.00000, 0.00000,0.00000); //instr1
	
	CreateDynamicObject(10879, 223.11900, -302.76999, 1010.64001,   0.00000, 0.00000, 0.00000);
	
	CreateDynamic3DTextLabel("{56ff00}ИНФОРМАЦИЯ:\n\nПройдите прямо по спортзалу к двери, что-бы изучить стили боя.\n\nПройдите в мужскую раздевалку,чтобы переодеться.\n\nЧто-бы вернуть одежду, воспользуйтесь инвентарем.\n\nОколо ринга можно устроить спарринг - /fight\n\nЧто-бы выбрать стиль боя - /fstyle", -1, 207.2932,829.6254,1001.0000 + 0.2, 10.0);

	CreateDynamic3DTextLabel("{56ff00}РИНГ:\n\nПройдите ко входу на ринг, что-бы позвать игрока на спарринг.\n\n", -1, 209.2534,839.0758,1001.0000 + 0.2, 10.0);

	CreateDynamic3DTextLabel("{56ff00}РИНГ:\n\nИспользуйте /fight\n\n", -1, 216.3115,836.7546,1000.9922 + 0.2, 10.0);
	
	CreateDynamic3DTextLabel("{ff0000}Покупка стилей боя", -1, 207.5137,846.7839,1001.3391, 4.0);
	CreatePickup(1275, 23, 198.1611,827.6237,1000.9922,-1, PICKUP_ACTION_TYPE_WEARSPORT);
	
	CreatePickup(19134, 23, -2372.1113,206.6911,22.2022, -1, PICKUP_ACTION_TYPE_BIZ_CAR_HOME);
	CreateDynamic3DTextLabel("Покупка\nдома на колёсах", 0xCC6600EE, -2372.1113,206.6911,22.2022 + 0.8, 5.0);
	CreatePickup(19134, 23, 1035.7145,-1883.5454,34.3527, -1, PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 1035.7145,-1883.5454,34.3527 + 0.8, 5.0);

    CreatePickup(19134, 23, 781.0964,750.7424,12.9072, -1, PICKUP_ACTION_TYPE_BUS_JOB);
	CreateDynamic3DTextLabel("Аренда автобусов", 0xCC6600EE, 781.0964,750.7424,12.9072 + 0.8, 5.0);

	//CreateDynamic3DTextLabel("Работа\nмашиниста метро", 0x6495EDFF, -359.7038,450.0506,12.6005 + 0.7, 4.0);
    //CreatePickup(1275, 23, -359.7038,450.0506,12.6005, -1, PICKUP_ACTION_TYPE_INVITE_METRO);

	fortune_wheel_object = CreateDynamicObject(10885, 214.907, -276.686, 1012.76, 0.000000, 0.000000, 0.000000);

    CreateDynamicObject(14786, 215.256, 1501.05 ,-26.1068, 0.00000, 0.00000,0.00000);

	CreatePickup(19134, 23, 2200.6851,303.9615,1028.9463, -1, PICKUP_ACTION_TYPE_BIZ_CAR_NIZ);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 2200.6851,303.9615,1028.9463 + 0.8, 5.0);
	
	CreatePickup(19134, 23, -1996.0449,-1309.0819,1031.0000, -1, PICKUP_ACTION_TYPE_BIZ_CAR_SRED);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, -1996.0449,-1309.0819,1031.0000 + 0.8, 5.0);

	CreatePickup(19134, 23, 1584.9692, 2802.4504, 1014.6044, -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK);
	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, 1584.9692, 2802.4504, 1014.6044 + 0.8, 5.0);

	snoybord_cp = CreateDynamicCP(-967.2872,309.3848,198.6781, 1.9, _, _, _, 60.0);
	CreateDynamic3DTextLabel("{e67e22}Квестовый персонаж\n{ffffff}Священник", 0xff9500FF, -2482.0273,2517.2549,47.3222, 4.0);
	CreateActor(68, -2482.0273,2517.2549,46.4222,179.4082);
	
	CreatePickup(19132, 23, -2513.4690,-605.9792,1001.0547,-1,-1);//STO
	//---------------------------------------------------------------------------------
	CreatePickup(1239, 23, -2722.5725,-1338.7432,9.8895,-1, PICKUP_ACTION_TYPE_SVALKA);

   	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, -45.9415,925.9677,12.0000 + 0.5, 4.0);
	CreatePickup(1239, 23, -45.9415,925.9677,12.0000,-1, PICKUP_ACTION_TYPE_POPOLNENIE);

	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 397.9555,794.8917,12.2102 + 0.5, 4.0);
	CreatePickup(1239, 23, 397.9555,794.8917,12.2102,-1, PICKUP_ACTION_TYPE_POPOLNENIE);

	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 2645.5503,-3433.2161,3.2069 + 0.5, 4.0);
	CreatePickup(1239, 23, 2645.5503,-3433.2161,3.2069,-1, PICKUP_ACTION_TYPE_POPOLNENIE);

	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 1860.8231,2827.2839,12.0000 + 0.5, 4.0);
	CreatePickup(1239, 23, 1860.8231,2827.2839,12.0000,-1, PICKUP_ACTION_TYPE_POPOLNENIE);

	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, 2601.3022,-626.2897,12.0825 + 0.5, 4.0);
	CreatePickup(1239, 23, 2601.3022,-626.2897,12.0825,-1, PICKUP_ACTION_TYPE_POPOLNENIE);

	CreateDynamic3DTextLabel("{FFFF00}Информация о пополнениях", -1, -2242.4141,260.7904,24.5337 + 0.5, 4.0);
	CreatePickup(1239, 23, -2242.4141,260.7904,24.5337,-1, PICKUP_ACTION_TYPE_POPOLNENIE);
    //-------------------------------------------------------------------------------------------
	CreateDynamic3DTextLabel("{FFFF00}Информация об организации\n{ffffff}Мин. внутренних дел", -1, 2475.2551,1399.7451,1000.0526 + 0.5, 4.0);
	CreatePickup(1239, 23, 2475.2551,1399.7451,1000.0526, -1, PICKUP_ACTION_TYPE_INFOMVD);
	//CreatePickup(1239, 23, -2753.8857,-1271.2043,9.8674,-1, PICKUP_ACTION_TYPE_INFAOSVALKE);
	//CreateDynamic3DTextLabel("{d9c72b}Заказ самолета с контрабандой", 0xFFFFFFFF, -2691.8120,2198.2664,1000.9784 + 0.1, 7.0);
	CreateDynamic3DTextLabel("{75c1ff}Заказ на угон транспорта", 0xFFFFFFFF, -2674.4509,2189.0325,1000.9988 + 0.1, 7.0);
 	//--------------------------------------------------------------------------------------------

    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 208.0857,-303.2612,1012.0385 + 0.1, 7.0); // 1
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 208.0874,-296.7935,1012.0684 + 0.1, 7.0); // 2
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 223.0917,-296.7134,1012.0284 + 0.1, 7.0); //3
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 223.3176,-302.4733,1012.0385 + 0.1, 7.0);// 4
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 191.4132,-292.8013,1012.8684 + 0.1, 7.0); // 5
    CreateDynamic3DTextLabel("{d9c72b}Игра в рулетку\n{FFFFFF}Максимальная ставка: 1.000 фишек", 0xFFFFFFFF, 201.3294,-331.8434,1012.0385 + 0.1, 7.0); // 6
	
	CreatePickup(1276, 23, 2349.8948,-2138.3157,22.5854, -1);
	CreateDynamic3DTextLabel("{DADA0B}Магазин Антиквариата\n{"#cW"}Используйте инвентарь, чтобы выгодно продавать\nполученные предметы из контейнера или со свалки\nЦены на некоторые вещи меняются ежечасно", 0xFFFF00FF, 2349.8948,-2138.3157,22.5854 + 0.3, 10.0);
    //-------------------Ворота Эксклюзив дома-----
	vetr1 = CreateDynamicObject(15830, 928.1540, 81.2516, 60.5637, 0.000000, 0.000000, 0.000000);
	vetr2 = CreateDynamicObject(15830, 884.04, 127.763, 60.5318, 0.000000, 0.000000, 0.000000);//2
	vetr4 = CreateDynamicObject(15830, -2059.39, 2638.64, 101.31, 0.000000, 0.000000, 0.000000);
	vetr5 = CreateDynamicObject(15830, -1994.93, 2673.58, 97.0886, 0.000000, 0.000000, 0.000000);
	vetr6 = CreateDynamicObject(15830, 2582.85, 1227.96, 64.172, 0.000000, 0.000000, 0.000000);
	vetr7 = CreateDynamicObject(15830, 2553.67, 1272.7, 61.8685, 0.000000, 0.000000, 0.000000);

	vetrlift = CreateDynamicObject(15843, -1633.41, 950.819, 110.884, 0, 0, 0);

    CreateDynamicObject(15842, -1633.39, 950.788, 110.91, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 928.124, 84.5934, 11.1415, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 884.051, 131.084, 11.1437, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, -2059.43, 2641.82, 51.9141, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, -1994.93, 2676.84, 47.6958, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 2582.81, 1231.14, 14.8207, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(15829, 2553.67, 1275.99, 12.5051, 0.000000, 0.000000, 0.000000);
	//========================[ Остановки ]========================//
    CreateDynamicObject(4640, 834.332, 560.531, 15.0666, 0.000000, 0.000000, -113.6);
	CreateDynamicObject(4640, -2247.8, -357.1, 21.4995, 0.000000, 0.000000, -34.3);
	CreateDynamicObject(4640, -2666.03, -1356.03, 7.77057, 0.000000, 0.000000, 77.9);
	CreateDynamicObject(4640, -1665.28, -2573.5, 11.851, 0.000000, 0.000000, 143.0);
	CreateDynamicObject(4640, 287.33, -2572.09, 34.8587, 0.000000, 0.000000, 149.8);
	CreateDynamicObject(4640, 2384.35, -2696.4, 21.473, 0.000000, 0.000000, 179.5);
	CreateDynamicObject(4640, 2481.39, -2129.04, 21.068, 0.000000, 0.000000, -89.8);
	CreateDynamicObject(4640, 2910.4, -174.52, 20.1287, 0.000000, 0.000000, -101.5);
	CreateDynamicObject(4640, 2698.47, 1622.58, 15.8517, 0.000000, 0.000000, -122.2);
	CreateDynamicObject(4640, 3791.19, 3886.34, 7.18598, 0.000000, 0.000000, 101.0);
	CreateDynamicObject(4640, 1926.1, 2976.07, 11.3078, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(4640, 325.89, 768.406, 11.1027, 0.000000, 0.000000, -20.0);
	CreateDynamicObject(4640, 298.301, 1695.05, 11.1915, 0.000000, 0.000000, -3.9);
	CreateDynamicObject(4640, 399.394, 717.754, 11.2716, 0.000000, 0.000000, 160.5);
	CreateDynamicObject(4640, 234.989, 869.851, 11.1314, 0.000000, 0.000000, 67.6);
	CreateDynamicObject(4640, -262.947, 607.413, 11.2535, 0.000000, 0.000000, -4.3);
	CreateDynamicObject(4640, -943.879, 1947.64, 44.7608, 0.000000, 0.000000, 169.8);
	CreateDynamicObject(4640, -2380.34, 1718.56, 52.099, 0.000000, 0.000000, 121.4);
	CreateDynamicObject(4640, -2577.47, 1141.51, 9.95836, 0.000000, 0.000000, 71.2999);
	CreateDynamicObject(4640, -2665.28, 275.561, 10.754, 0.000000, 0.000000, 86.1);
	CreateDynamicObject(4640, -2099.53, -126.191, 25.3863, 0.000000, 0.000000, 76.6);

	//========================[Аренда скутеров кисоки]========================//
	CreateDynamicObject(18507, 843.60, 647.32, 16.41, 0.00, 0.00, 0.00);
	CreateDynamicObject(18507, -337.05, 325.86, 13.63, 0.00, 0.00, 73.22);
	CreateDynamicObject(18507, -2487.09, 2859.28, 38.16, 0.00, 0.00, 0.00);
	CreateDynamicObject(18507, -2518.57, 1172.98, 9.29, 0.00, 0.00, -19.84);
	CreateDynamicObject(18507, -2710.87, -1342.21, 10.38, 0.00, 0.00, -108.42);
	CreateDynamicObject(18507, -2159.86, -1932.10, 9.75, 0.00, 0.00, 126.97);
	CreateDynamicObject(18507, 2486.32, -2023.91, 22.49, 0.00, 0.00, -0.77);
	//========================[ 6.8 (ФСИН) - Ворота ]========================//
	vorota_fsin = CreateDynamicObject(17176, -1786.51, -2634.84, 10.308, 0, 0, 170.4);
	vorota_fsin1 = CreateDynamicObject(17176, -1770.28, -2658.41, 11.2058, 0, 0, -100.7);
	vorota_fsin2 = CreateDynamicObject(17135, -1775.28, -2666.39, 10.106, 0, 0, 167.7);
	vorota_fsin3 = CreateDynamicObject(17133, -1675.19, -2837.32, 1000.46, 0, 0, 0);
	vorota_fsin4 = CreateDynamicObject(17136, -1787.72, -2663.1, 12.1935, 0, 0, -17);
	vorota_fsin5 = CreateDynamicObject(17136, -1798.95, -2659.85, 12.2065, 0, 0, 165.7);
	vorota_fsin6 = CreateDynamicObject(17136, -1802.32, -2713.78, 12.5695, 0, 0, 21.1);
	vorota_fsin7 = CreateDynamicObject(17137, -1813.25, -2717.56, 12.5779, 0, 0, -162.3);
	vorota_fsin8 = CreateDynamicObject(17133, -1675.32, -2827.38, 1003.88, 0, 0, 0);
	vorota_fsin9 = CreateDynamicObject(17133, -1677.99, -2840.77, 1003.89, 0, 0, 88.8999);
	vorota_fsin10 = CreateDynamicObject(17173, -1798.91, -2690.01, 10.4696, 0, 0, 159.1);
	vorota_fsin11 = CreateDynamicObject(17173, -1807.41, -2686.63, 10.4787,0,0,-20.6);
	vorota_fsin12 = CreateDynamicObject(17176, -1755.51, -2726.58, 12.0444, 0, 0, 105.1);
	vorota_fsin13 = CreateDynamicObject(17136, -1768.27, -2732.72, 12.3795, 0, 0, -72.3);
	vorota_fsin14 = CreateDynamicObject(17137, -1771.63, -2721.66, 12.395, 0, 0, 106.8);

	//========================[ 6.8 (ФСИН) - Двери ]========================//
	door_fsin = CreateDynamicObject(17134, -1695.03, -2806.47, 1000.4, 0, 0, 0);
	door_fsin1 = CreateDynamicObject(17134, -1698.54, -2806.48, 1000.41, 0, 0, 0);
	door_fsin2 = CreateDynamicObject(17134, -1702.04, -2806.51, 1000.4, 0, 0, 0);
	door_fsin3 = CreateDynamicObject(17134, -1698.55, -2797.23, 1000.41, 0, 0,0);
	door_fsin4 = CreateDynamicObject(17134, -1702.05, -2797.21, 1000.4, 0, 0, 0);
	door_fsin5 = CreateDynamicObject(17134, -1695.06, -2797.18, 1000.4, 0, 0, 0);
	door_fsin6 = CreateDynamicObject(17134, -1737.66, -2797.22, 1000.42, 0, 0, 0);
	door_fsin7 = CreateDynamicObject(17134, -1747.08, -2797.22, 1000.41, 0, 0, 0);
	door_fsin8 = CreateDynamicObject(17134, -1747.08, -2806.48, 1000.4, 0, 0, 0);
	door_fsin9 = CreateDynamicObject(17134, -1737.66, -2806.47, 1000.4, 0, 0,0);
	door_fsin10 = CreateDynamicObject(17134, -1737.66, -2797.23, 1003.8, 0, 0, 0);
	door_fsin11 = CreateDynamicObject(17134, -1747.08, -2797.21, 1003.82, 0, 0, 0);
	door_fsin12 = CreateDynamicObject(17134, -1747.07, -2806.48, 1003.81, 0, 0, 0);
	door_fsin13 = CreateDynamicObject(17134, -1737.65, -2806.45, 1003.81, 0, 0, 0);

	door_mz[0] = CreateDynamicObject(10434, 422.904815,1707.659667,1000.000244, 0.00,0.00,0.00);
    door_mz[1] = CreateDynamicObject(10434, 422.900177,1735.241333,1299.986328, 0.00,0.00,0.00);
    door_mz[2] = CreateDynamicObject(10434, 417.507476,1735.245117,1299.988647, 0.00,0.00,0.00);
    door_mz[3] = CreateDynamicObject(10434, 424.124816,1729.922485,1299.998291, 0.00,0.00,0.00);

	CreateDynamic3DTextLabel("{FFCC00}F", -1, 441.4,1703.6257,1001.0000 + 0.3, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 441.4,1731.1715,1301.0000 + 0.3, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 421.750396,1707.535034,1001.377685 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 421.615844,1735.112670,1301.399414 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 416.215911,1735.112670,1301.399414 + 0.1, 5.0);
    CreateDynamic3DTextLabel("{FFCC00}F", -1, 422.926086,1730.010375,1301.399414 + 0.1, 5.0);

    CreateDynamicObject(10433, 441.869171,1704.578369,999.992675, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.869171,1705.462036,999.995239, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.123229,1725.398071,1300.005615, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.123229,1724.510375,1300.008911, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.138488,1696.926025,1000.012207, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 414.138488,1697.814697,1000.013549, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.860290,1733.056884,1300.020385, 0.000000,0.000000,0.000000);
    CreateDynamicObject(10433, 441.864410,1732.166015,1300.012207, 0.000000,0.000000,0.000000);

	CreatePickup(1239, 23, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);
	CreateDynamic3DTextLabel("Церковь\n\nИспользуйте {FF5533}/wedding чтобы пожениться\nИспользуйте {FF5533}/divorce чтобы развестись", -1, -1293.4110, 717.4692, 2002.0000 + 0.2, 10.0);
	
	CreateDynamic3DTextLabel("Покупка наркотиков", -1, 1754.4694,-973.4464,6.3359 + 0.2, 10.0);
	CreatePickup(1239, 23, 1754.4694,-973.4464,6.3359, -1, PICKUP_ACTION_TYPE_BUY_DRUGS);
	
	CreatePickup(1275, 23, -2516.8591,1465.3381,1080.5034, -1, PICKUP_ACTION_TYPE_1);//Раздевалка правительство
	CreatePickup(1275, 23, 331.6048,2941.3892,999.4766, -1, PICKUP_ACTION_TYPE_2);//Раздевалка воинская часть
	CreatePickup(1275, 23, 421.3798,1694.9285,1001.0000, -1, PICKUP_ACTION_TYPE_3);//Раздевалка больница
    CreatePickup(1275, 23, -2649.8096,2710.4299,996.9453, -1, PICKUP_ACTION_TYPE_4);//Раздевалка трк
    CreatePickup(1275, 23, 2498.5388,1408.0125,1000.0214, -1, PICKUP_ACTION_TYPE_6);//Раздевалка мвд
	CreatePickup(1275, 23, -1680.8423,-2826.0405,1004.8162, -1, PICKUP_ACTION_TYPE_7);//Раздевалка фсин

	CreatePickup(1275, 23, -2723.1133,2186.9517,1000.9988, -1, PICKUP_ACTION_TYPE_MANSION);//Раздевалка Особняки
	
	CreatePickup(1239,23,612.5666,1725.0234,12.1678,-1,PICKUP_ACTION_INFO_B);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 582.3073,1728.0310,12.1678 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,582.3073,1728.0310,12.1678,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 844.6972,644.8854,15.8857 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,844.6972,644.8854,15.8857,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, -2666.4521,122.5477,12.3833 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,-2666.4521,122.5477,12.3833,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 1659.8859,2210.5828,14.2180 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,1659.8859,2210.5828,14.2180,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 445.3655,1562.1160,12.1943 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,445.3655,1562.1160,12.1943,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, -399.8717,-1601.5997,40.3842 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,-399.8717,-1601.5997,40.3842,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, 2578.8403,-2040.4681,21.9640 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,2578.8403,-2040.4681,21.9640,-1,PICKUP_ACTION_TYPE_FREE_VELIK);

	CreateDynamic3DTextLabel("{FFFF00}Аренда скутеров\n{FFFFFF}Доступно до {FFFF00}4 {FFFFFF}уровня", 0xFFCD00FF, -2485.8835,2856.8308,37.6340 + 0.5, 10.0); // аренда велосипеда
	CreatePickup(1274,23,-2485.8835,2856.8308,37.6340,-1,PICKUP_ACTION_TYPE_FREE_VELIK);
    //------------------------------------
	CreateActor(111, 1945.3853,-46.1837,6.4177,182.7155); // нпс русская мафия
	CreateDynamic3DTextLabel("{808080}Русская мафия\n{ffffff}Создание банды", 0xff9500FF, 1945.3853,-46.1837,7.4177, 4.0);

	CreateActor(124, -3180.8489,825.0446,6.4200,269.2828); // нпс итальянская мафия
	CreateDynamic3DTextLabel("{808080}Итальянская мафия\n{ffffff}Создание банды", 0xff9500FF, -3180.8489,825.0446,7.4200, 4.0);

	CreateActor(121, 4008.3857,3860.5872,8.0616,65.5433); // нпс японская мафия
	CreateDynamic3DTextLabel("{808080}Японская мафия\n{ffffff}Создание банды", 0xff9500FF, 4008.3857,3860.5872,9.0616, 4.0);

	CreateDynamic3DTextLabel("{79afe8}Каптерка\n{ffffff}Получение инструмента", 0xff9500FF, -4668.6104,5825.6763,12.2814, 15.0);
	
	CreateDynamic3DTextLabel("{"#cGold"}Продажа урожая с огорода\nПродажа шкуры животного", 0xFFFF00FF, 3771.1826,3877.6079,7.9300 + 0.6, 10.0);
	CreatePickup(19134, 23, 3771.1826,3877.6079,7.9300, -1);

	CreateDynamic3DTextLabel("{"#cGold"}Пункт приема металлолома", 0xFFFF00FF, 161.7724,406.4196,11.0679 + 0.6, 10.0);
	CreatePickup(19134, 23, 161.7724,406.4196,11.0679, -1);
	
	CreateDynamic3DTextLabel("", 0xFFFF00FF, 2482.7786,1402.9192,1000.0448 + 0.6, 10.0);

	CreatePickup(19134, 23, 2482.7786,1402.9192,1000.0448, -1, PICKUP_ACTION_TYPE_MVD);

	for(new o; o < MAX_ORG_PARKING; o++)
	{
        CreatePickup(19134, 23, org_park_canvasdev[o][ORG_PARK_POS_ENTER][0], org_park_canvasdev[o][ORG_PARK_POS_ENTER][1], org_park_canvasdev[o][ORG_PARK_POS_ENTER][2], -1, PICKUP_ACTION_TYPE_PARKING_ENT);
		CreatePickup(19134, 23, org_park_canvasdev[o][ORG_PARK_POS_EXIT][0], org_park_canvasdev[o][ORG_PARK_POS_EXIT][1], org_park_canvasdev[o][ORG_PARK_POS_EXIT][2], org_park_canvasdev[o][ORG_PARK_EXIT_WR], PICKUP_ACTION_TYPE_PARKING_EXT);
	}

	CreateDynamic3DTextLabel("{FF8800}Завод\n{FFFFFF}Сдача продуктов на склад", 0xFFFF00FF, -2908.6921,-1179.9351,1001.0041 + 1.0, 7.0);

	CreatePickup(1239, 23, 22.3557,348.3549,11.3672, -1, PICKUP_DM);
    CreateDynamic3DTextLabel("- Открыть ворота -\nПодойдите к воротам, затем нажмите L'ALT", 0xFFFF00FF, 537.0917,2861.4580,7.3047 + 1.0, 4.0);

    Mansion1 = CreateDynamicObject(14585, -2660.35, 2189.84, 1001.67, 0.00, 0.00, 0.00, 4);
	Mansion2 = CreateDynamicObject(14585, -2660.35, 2189.84, 1001.67, 0.00, 0.00, 0.00, 6);
	Mansion3 = CreateDynamicObject(14585, -2660.35, 2189.84, 1001.67, 0.00, 0.00, 0.00, 5);
	Mansion4 = CreateDynamicObject(14585, -2660.35, 2189.84, 1001.67, 0.00, 0.00, 0.00, 7);

    //---------------
    CreatePickup(1240, 23, 412.2124,1730.2292,1301.0000, -1, PICKUP_ACTION_TYPE_FREE_HEAL); //А
	//----------------
    CreatePickup(10024, 23, -487.6182,3331.5359,31.0381, -1, PICKUP_ACTION_TYPE_FREE_EAT); // Шахта

    CreatePickup(10024, 23, 436.0983,1564.1613,12.2021, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр

    CreatePickup(10024, 23, 848.2681,596.7606,15.8857, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр

    CreatePickup(10024, 23, -2668.0198,151.9874,12.3158, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр

    CreatePickup(10024, 23, -2470.9436,2833.9607,37.7199, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр

    CreatePickup(10024, 23, 424.6284,-2443.4893,34.9269, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Арзамас-Центр

    CreatePickup(10024, 23, 1655.0183,2189.3977,14.3863, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Батырево

    CreatePickup(10024, 23, 1615.4211,658.8278,16.0372, -1, PICKUP_ACTION_TYPE_FREE_EAT); //Ферма
    
	//rere
	CreatePickup(10024, 23, -1631.2959,-1801.9590,1000.7010, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //МВД
	CreatePickup(10024, 23, 400.0672,2870.5886,999.4688, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //Армия
	CreatePickup(10024, 23, 2507.4829,1407.6005,1000.0214, -1, PICKUP_ACTION_TYPE_GOVS_EAT); //МВД
	//-----------rere
    CreatePickup(2969, 23, -324.7684,342.5574,13.1133, -1, PICKUP_ACTION_TYPE_FIX_CAR); //Арзамас-Центр

	CreateDynamic3DTextLabel("{33AA33}- Место для обмена -\n{FFFFFF}Используйте {FFD700}/exchange", -1, 503.3536,452.3311,1000.9922 + 0.2, 10.0);
    
    CreateDynamic3DTextLabel("{FF8800}Air Suspension\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для установки пневматической\nподвески транспортного средства", 0xFFFFFFFF, -397.3741,1009.9180,12.1382 + 1.0, 10.0);
    CreatePickup(19132, 23, -397.3741,1009.9180,12.1382,-1,-1);
    
    CreateDynamic3DTextLabel("{FF8800}Super Car\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для тюнинга мощности\n транспортного средства", 0xFFFFFFFF, 258.8138,703.6974,11.9849 + 1.0, 10.0);
    CreatePickup(19132, 23, 258.8138,703.6974,11.9849,-1,-1); //stage

    CreateDynamic3DTextLabel("{FF8800}Super Car\n{FFFFFF}Посигнальте, чтобы въехать\nв гараж для тюнинга мощности\n транспортного средства", 0xFFFFFFFF, 2346.1768,-2609.9480,21.7944 + 1.0, 10.0);
    CreatePickup(19132, 23, 2346.1768,-2609.9480,21.7944,-1,-1); //stage
	
    CreatePickup(1239, 23, 2707.5276,-3.6185,1060.9922, -1, PICKUP_ACTION_TYPE_SELLSIM);

	TextAssemblyInt();

    Iter_Init(ElectricanPlayerBiz);
    
	new hour;
	gettime(hour);

	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	
	SendRconCommand("ackslimit 20000");
	SendRconCommand("messageholelimit 20000");
	
	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);
	
    
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000); // Default: 500

	Streamer_ToggleErrorCallback(true);
	Streamer_SetTickRate(40); // Default: 50

	CreateActor(28, 2885.0613,1410.4027,2.6106,269.6373); //Рыбалка

	stiliok = CreateDynamicCP(207.4784,846.7992,1001.0000, 1.0, -1, -1, _, 10.0);
	
	//==========================================================================

	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2200.3008,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2199.3118,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2198.2979,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2197.3831,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1698.0618,-2196.3933,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1699.8516,-2195.9128,1002.1298, 5.0);
	CreateDynamic3DTextLabel("Стиральная машина\n{FFFFFF}В идеальном состоянии", 0xFF7F00FF, 1700.8456,-2195.9128,1002.1298, 5.0);

	CreateDynamic3DTextLabel("{1f75fe}- Утилизация -\n {ffffff}наземного транспорта", -1, -2723.9658,-1341.3722,9.8674 + 0.2, 10.0);
	CreatePickup(19133, 23, -2723.9658,-1341.3722,9.8674,-1, PICKUP_ACTION_TYPE_SELL_CAR);

	CreatePickup(19133, 23, -293.7733,1064.8992,12.2606,-1, PICKUP_ACTION_TYPE_STOYNKA);//Арзамас
	CreatePickup(19133, 23, 2538.9851,-2346.3403,22.1609,-1, PICKUP_ACTION_TYPE_STOYNKA);//Южный

	CreateDynamic3DTextLabel("Прием на работу", 0xFFFF00FF, -2713.8264,1481.6355,1007.4878 + 1.8, 10.0);
	join_to_job_CP = CreateDynamicCP(-2713.8264,1481.6355,1007.4878, 1.5, -1, -1, _, 7.0);
	CreateDynamic3DTextLabel("Гаражный бар", 0xFFFF00FF, -1658.7354,-426.1173,1004.7665 + 1.0, 10.0);
	garage_elit_CP = CreateDynamicCP(-1658.7354,-426.1173,1004.7665, 1.5, -1, -1, _, 7.0);
	CreateDynamic3DTextLabel("{FFFFFF}Чтобы выйти из гаража, пропишите: {FF6347}/exit", 0xFFFFFFFF, -1652.2990,-466.8827,1001.0000 + 0.2, 4.0);

	CreateActor(7, 2188.9487,1371.6503,11.4361,176.6982);
	CreateDynamic3DTextLabel("{FF8800}Скупщик нелегальных растений", 0x66CC00FF, 2188.9487,1371.6503,11.4361 + 1.2, 2.0); // Армия вышка 2
	//
	army_ammo_CP = CreateDynamicCP(1243.6392,3223.6709,12.2840, 1.5, -1, -1, _, 7.0);

	FixContainers();

	CreateDynamic3DTextLabel("{FF8800}Получение номеров", 0x3399FFFF, 2492.6079, 1394.9854, 1000.0214, 10.0);
	CreatePickup(1239, 23, 2492.6079, 1394.9854, 1000.0214, -1, -1);
	//==========================================================================

	g_last_pay_day_time =
	g_last_m_timer_time = gettime();
	CreateMineObjects();
	CreateVehicles();
	CreateAltHint();
	CreateCasinoBlackJack();
	CreateCasinoTables();
	//CreateDonatecars();
	CreateMedBeds();
	CreateArmories();
	CreateGreenZones();
	CreateFishingZones();
	HelpInfoInit();
	AnimListInit();
	BanksInit();
	TempJobsInit();
	MapIconsInit();
	InfoPickupsInit();
	TeleportPickupsInit();
	DrivingSchoolInit();
	CreateStoGarage();
	CreateDetelingGarage();
	AtmsInit();
	CarsInitAuth();
	CreateQuestEaster();
	LoadDragRacing();
	CreateCarWashObject();
	LoadVorotaDef();
	LoadObject();
	#if defined RAND_WEATHER
	SetRandomWeather();
	#endif

	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif

	new bind[64], port = GetServerVarAsInt("port");
	GetServerVarAsString("bind", bind, sizeof(bind));

	ServerConfig(bind, port);

	mysql_set_charset("cp1251"); 
	switch(mysql_errno())
	{
		case 0: print("Подключение к базе данных удалось");
	    case 1044: return print("Подключение к базе данных не удалось [Указано несуществующее имя пользователя]");
	    case 1045: return print("Подключение к базе данных не удалось [Указан неправильный пароль]");
	    case 1049: return print("Подключение к базе данных не удалось [Указана несуществующая база данных]");
	    case 2003: return print("Подключение к базе данных не удалось [Хостинг с базой данных недоступен]");
	    case 2005: return print("Подключение к базе данных не удалось [Указан неправильный адрес хостинга]");
	    default: return printf("Подключение к базе данных не удалось [Неизвестная ошибка. Код ошибки: %d]", mysql_errno());
	}
	
    UpdateCharity();
    RepositoriesLoad();

	LoadServerConfig();

    LoadHouses();
   	LoadObjects();
    LoadHousesRenters();
    LoadBillBoard();
    LoadBusinesses();
	LoadKiosks();
    LoadGarages();
    LoadGardens();
	LoadNeft();
	LoadVorota();
    CreateCarsharingCar();
    LoadRentCar();
    LoadOrders();
    LoadFamily();
    LoadGangZones();
	LoadAuction();
	LoadItems();
	UpdateRating_DrageRacing();
	LoadFuelOrders();
	LoadDecoration();

	SetTimer("OnSecondTimer", 1000, true);
	SetTimer_("OnSpeedTimerUp", 100, 0, -1);

	CallLocalFunction("HospitalTreatment", "");

	return 1;
}
#define MAX_PLAYER_ITEMS 20000

#define GetPlayerItem(%0,%1) 		g_player_item[%0][%1]
#define SetPlayerItem(%0,%1,%2)		g_player_item[%0][%1] = %2
#define AddPlayerItem(%0,%1,%2,%3)	g_player_item[%0][%1] %2= %3

enum E_PLAYER_ITEM_STRUCT
{
	PI_SQL_ID,
	PI_OWNER_ID,
	PI_RETURN_ITEMS,
	PI_TYPE,
	PI_SLOTS,
	PI_ITEM,
	PI_COUNT,

	PI_NUMBER[32],
	PI_REGION[32],

	PI_TYPENUMBER,
	PI_AKS_ID,
	PI_TYPEACS,
	PI_STATUS,
	PI_INDX,

	Float: PI_FOFFSET_X,
	Float: PI_FOFFSET_Y,
	Float: PI_FOFFSET_Z,
	Float: PI_FROT_X,
	Float: PI_FROT_Y,
	Float: PI_FROT_Z,
	Float: PI_FSCALE_X,
	Float: PI_FSCALE_Y,
	Float: PI_FSCALE_Z,

	PI_SKIN_ID,
	PI_SKIN_IZNOS,
	PI_SHELF,
	PI_SKLAD,
	PI_CAR_ID,
	PI_TYPE_ITEM,
	PI_WEAPON,
	PI_PATRON,
	PI_TRADE_TYPE,
	PI_TRADE_COUNT,
	PI_TRADE_SLOT,
	PI_PLATE,
	PI_SKIN_ACTIVE
};
new g_player_item[MAX_PLAYER_ITEMS][E_PLAYER_ITEM_STRUCT];

new g_player_mine_cp[MAX_PLAYERS];
new g_player_mine_status[MAX_PLAYERS];
new g_player_mine_object[MAX_PLAYERS] = INVALID_OBJECT_ID;
new g_player_mine_sphere[MAX_PLAYERS];
new g_player_mine_rack[MAX_PLAYERS];
new g_player_mine_ore[MAX_PLAYERS] = -1;

//<======================================================Система руды======================================================>

new Float: g_mine_vagon[5][4] =
{
    {-432.828, 2855.09, 1068.89, -56.6},
    {-420.774, 2907.64, 1068.91, -8.09999},
    {-524.798, 2877.41, 1068.91, 0.0},
    {-474.408, 2853.55, 1068.91, -61.6999},
    {-537.184, 2850.8, 1068.9, 64.5999}
};

#define MAX_MINE_ORE 30
#define MINE_COLOR "f49810"

new g_mine_rack_sphere[6];

new Float: g_mine_rack[6][3] =
{
    {-435.0599,2907.0371,1069.7866},
    {-435.9701,2863.0090,1069.7866},
    {-476.4646,2860.1262,1069.8044},
    {-503.3899,2870.7407,1069.7856},
    {-534.6988,2857.7498,1069.7856},
    {-529.7535,2879.3503,1069.8036}
};

enum E_MINE_ORE_POS_STRUCT
{
    Float:MOP_UP[6],
    Float:MOP_DOWN[3],
    Float:MOP_CART[4]
}

new g_mine_ore_pos[MAX_MINE_ORE][E_MINE_ORE_POS_STRUCT] =
{
    //{{руда сверху}, {руда снизу}, {телега}}
    {{-532.517, 2850.62, 1070.02, -89.7000, -63.2001, 0.0000}, {-532.978, 2851.01, 1069.27}, {-532.952, 2852.64, 1069.33, 0.00}},
    {{-543.812, 2839.11, 1069.73, -20.7000, 88.40000, -12.60}, {-542.840, 2838.98, 1068.78}, {-542.607, 2837.62, 1068.78, 16.3}},
    {{-474.453, 2842.18, 1069.76, 0.000000, 87.79990, 0.0000}, {-473.583, 2842.29, 1068.89}, {-472.759, 2840.91, 1068.89, 15.0}},
    {{-476.840, 2850.00, 1069.83, -88.6000, 69.20000, 0.0000}, {-476.042, 2850.22, 1068.82}, {-475.020, 2849.18, 1068.99, 0.00}},
    {{-482.802, 2858.90, 1069.82, -90.5000, -99.6000, -152.1}, {-481.774, 2859.63, 1068.78}, {-481.068, 2858.53, 1068.81, 10.7}},
    {{-478.889, 2865.50, 1069.83, 89.00000, -38.8000, 0.0000}, {-479.565, 2864.89, 1068.77}, {-480.756, 2864.34, 1068.85, 15.6}},
    {{-469.460, 2850.78, 1069.80, 5.100000, -86.6000, 15.400}, {-470.047, 2850.31, 1068.89}, {-470.897, 2851.37, 1069.29, 7.40}},
    {{-520.011, 2873.31, 1069.59, -82.5000, 0.000000, 0.0000}, {-519.897, 2874.03, 1068.84}, {-518.783, 2874.26, 1069.00, 11.1}},
    {{-533.313, 2880.85, 1069.71, 81.80000, 0.000000, 0.0000}, {-533.344, 2880.12, 1068.89}, {-534.636, 2879.34, 1068.94, 14.6}},
    {{-542.955, 2873.38, 1069.59, -84.6000, 0.000000, 0.0000}, {-542.804, 2874.43, 1068.89}, {-541.791, 2874.74, 1068.94, 10.5}},
    {{-533.718, 2873.44, 1069.77, -87.3001, 90.00000, 84.700}, {-533.826, 2874.56, 1068.93}, {-533.006, 2874.28, 1068.99, 0.00}},
    {{-541.386, 2848.29, 1069.74, 5.400000, 89.50000, -28.80}, {-540.490, 2847.88, 1068.78}, {-540.889, 2846.51, 1068.81, 14.5}},
    {{-509.534, 2881.08, 1069.80, 88.30000, 0.000000, 0.0000}, {-509.543, 2880.24, 1068.80}, {-510.472, 2879.54, 1068.86, 15.4}},
    {{-427.861, 2853.44, 1069.80, 1.600000, -109.600, 30.800}, {-428.695, 2853.09, 1069.00}, {-429.138, 2854.17, 1068.90, 0.00}},
    {{-435.697, 2853.69, 1069.88, -94.7001, 48.60000, 0.0000}, {-435.168, 2853.93, 1068.79}, {-434.148, 2853.11, 1068.84, 14.8}},
    {{-444.451, 2863.60, 1069.73, 91.70000, 139.3000, 0.0000}, {-443.860, 2864.23, 1068.78}, {-442.889, 2863.74, 1068.80, 13.0}},
    {{-443.523, 2871.17, 1069.92, 97.39900, -35.2000, -0.600}, {-443.943, 2870.49, 1068.97}, {-445.224, 2870.87, 1069.05, 0.00}},
    {{-440.704, 2860.44, 1069.72, -86.1000, 0.000000, -43.90}, {-440.172, 2860.87, 1068.76}, {-439.237, 2860.07, 1068.83, 13.1}},
    {{-420.022, 2904.17, 1069.74, -86.1000, 16.90000, 0.0000}, {-419.847, 2904.93, 1068.77}, {-419.016, 2905.18, 1068.83, 13.5}},
    {{-424.047, 2911.69, 1069.77, 88.40000, 0.000000, 0.0000}, {-424.192, 2911.01, 1068.77}, {-425.530, 2910.15, 1068.83, 12.4}},
    {{-438.548, 2906.38, 1069.82, 0.000000, 89.39990, -52.20}, {-438.057, 2905.68, 1068.78}, {-439.084, 2904.31, 1068.83, 13.1}},
    {{-447.809, 2887.38, 1069.83, -87.8000, -87.3000, -28.20}, {-448.551, 2888.06, 1068.76}, {-447.741, 2888.85, 1068.83, 13.2}},
    {{-535.564, 2843.56, 1069.78, -0.90000, -88.4900, -15.50}, {-536.211, 2843.76, 1068.77}, {-537.091, 2842.35, 1068.79, 12.5}},
    {{-434.019, 2900.82, 1069.77, 0.000000, -88.7000, -60.10}, {-434.768, 2901.72, 1068.77}, {-433.697, 2902.44, 1068.83, 13.9}},
    {{-527.947, 2865.62, 1069.89, 89.40000, 24.40000, 0.0000}, {-527.549, 2864.85, 1068.78}, {-528.166, 2863.33, 1068.82, 14.0}},
    {{-516.072, 2862.67, 1069.79, -90.8000, -24.1000, 0.0000}, {-516.396, 2863.79, 1068.78}, {-515.306, 2864.19, 1068.82, 13.8}},
    {{-508.150, 2871.45, 1069.71, 89.39990, 8.600000, 0.0000}, {-508.193, 2870.56, 1068.80}, {-509.470, 2870.06, 1068.82, 12.4}},
    {{-498.229, 2865.33, 1069.83, -91.9000, -4.90000, 0.0000}, {-498.250, 2866.06, 1068.77}, {-497.473, 2866.88, 1068.81, 15.0}},
    {{-508.014, 2864.30, 1069.71, -86.9000, -7.90000, 0.0000}, {-508.101, 2865.10, 1068.77}, {-506.869, 2865.74, 1068.79, 14.1}},
    {{-520.551, 2860.86, 1069.70, -86.0999, -5.60000, 14.900}, {-520.971, 2861.77, 1068.77}, {-520.109, 2862.45, 1068.78, 17.6}}
};

enum E_MINE_ORE_STRUCT
{
    MO_OWNER_ID,
    MO_STATUS,
    MO_TYPE,
    MO_OBJECT,
    Text3D:MO_LABEL,
    MO_SPHERE
}
new g_mine_ore[MAX_MINE_ORE][E_MINE_ORE_STRUCT];

stock CreateMineOre()
{
    for(new i; i < sizeof g_mine_ore; i++)
    {
        if(g_mine_ore[i][MO_STATUS] != 0) continue;

        g_mine_ore[i][MO_STATUS] = 1;
        g_mine_ore[i][MO_OWNER_ID] = -1;
        g_mine_ore[i][MO_TYPE] = RandomEx(1, 5);

        g_mine_ore[i][MO_LABEL] = CreateDynamic3DTextLabel("{"MINE_COLOR"}Руда", -1, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], 15.0);
        
        if(g_mine_ore[i][MO_TYPE] == 1)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17106, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);

        else if(g_mine_ore[i][MO_TYPE] == 2)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17165, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);

        else if(g_mine_ore[i][MO_TYPE] == 3)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17164, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);
    
        else if(g_mine_ore[i][MO_TYPE] == 4)
            g_mine_ore[i][MO_OBJECT] = CreateDynamicObject(17166, g_mine_ore_pos[i][MOP_UP][0], g_mine_ore_pos[i][MOP_UP][1], g_mine_ore_pos[i][MOP_UP][2], g_mine_ore_pos[i][MOP_UP][3], g_mine_ore_pos[i][MOP_UP][4], g_mine_ore_pos[i][MOP_UP][5]);

		g_mine_ore[i][MO_SPHERE] = CreateDynamicSphere(g_mine_ore_pos[i][MOP_DOWN][0], g_mine_ore_pos[i][MOP_DOWN][1], g_mine_ore_pos[i][MOP_DOWN][2],2.5,-1,-1);
    }
}
//>========================================================================================================================<

//<======================================================Лифт в шахте======================================================>
enum E_MINE_ELEVATOR_STRUCT
{
    MS_TIME_STATUS,

    MS_OBJECT_LIFT,
    MS_OBJECT_LIFT_STATUS,

    MS_OBJECT_GATES_1,
    MS_OBJECT_GATES_2,
    MS_OBJECT_GATES_3,

    MS_OBJECT_LIFT_AREA_1,
    MS_OBJECT_LIFT_AREA_2,
}
new g_mine_elevator[E_MINE_ELEVATOR_STRUCT];
stock CreateMineObjects()
{
    for(new i; i < sizeof g_mine_rack; i++)
    {
        g_mine_rack_sphere[i] = CreateDynamicSphere(g_mine_rack[i][0], g_mine_rack[i][1], g_mine_rack[i][2],2.5,-1,-1);
    }
    for(new i; i < sizeof g_mine_vagon; i++)
    {
        CreateDynamicObject(17105, g_mine_vagon[i][0], g_mine_vagon[i][1], g_mine_vagon[i][2], 0.0, 0.0, g_mine_vagon[i][3]);
    }

    g_mine_elevator[MS_OBJECT_GATES_1] = CreateDynamicObject(17113, -469.959, 2876.62, 1191.89, 0.0, 0.0, 0.0);
    g_mine_elevator[MS_OBJECT_GATES_2] = CreateDynamicObject(17113, -461.738, 2876.57, 1068.99, 0.0, 0.0, 0.299999);
    g_mine_elevator[MS_OBJECT_GATES_3] = CreateDynamicObject(17113, -470.035, 2876.62, 1068.86, 0.0, 0.0, 0.0);

    g_mine_elevator[MS_OBJECT_LIFT] = CreateDynamicObject(17112, -465.842, 2876.61, 1192.96, 0.0, 0.0, 0.0);

    OnMineTimer();
}

stock OnMineTimer()
{
	new playerid;
    if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 0) // когда лифт закрывается сверху
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 1;
        g_mine_elevator[MS_TIME_STATUS] = 7;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_1], -469.959, 2876.62, 1191.89, 0.5, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;

            SCM(i, 0xa3bed9FF, "Лифт скоро начнёт движение. Покиньте его, если не хотите ехать.");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 1) // когда лифт поехал вниз
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 2;
        g_mine_elevator[MS_TIME_STATUS] = 20;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_LIFT], -465.842, 2876.61, 1070.09, 4.0, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;

            if(GetPlayerTempJob(i) != TEMP_JOB_MINER)
			{
                SetPlayerPosEx(i, -470.2869,2876.5969,1192.7656,88.1593, 5, 5);
            }
            else 
            {
                SCM(i, 0xa3bed9FF, "Лифт начал движение. Не переходите в меню паузы до выхода из лифта.");
                
                TogglePlayerControllable(i,false);
            }
        }
    }   
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 2) //
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 3;
        g_mine_elevator[MS_TIME_STATUS] = 10;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -470.035, 2876.62, 1068.86, 0.5, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;
            
            SetPlayerPosEx(i, -471.4067,2876.7444,1069.7960,88.1593, 5, 5);
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 3) // когда лифт открывается снизу
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 4;
        g_mine_elevator[MS_TIME_STATUS] = 20;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.748, 2873.39, 1068.95, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -470.036, 2879.84, 1068.87, 0.5, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;

            SCM(i, -1, "Теперь возьмите инструменты со стойки (одна из стоек отмечена красной иконкой на мини-карте).");
            
            TogglePlayerControllable(i,true);

            if(g_player_mine_cp[i] == 2)
            {
                new random_rack = random(5);
                g_player_mine_rack[i] = random_rack;
                SetPlayerCheckpoint(i, g_mine_rack[random_rack][0],g_mine_rack[random_rack][1],g_mine_rack[random_rack][2], 1.0);
            }
			SetPVarInt(playerid, "lift_down", 0);
			CEF_CREATE(playerid, 1, 2, "window.destroySound(10311, 30)");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 4) // когда лифт закрывается снизу
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 5;
        g_mine_elevator[MS_TIME_STATUS] = 7;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43, 1070.51, 0.5, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;

            SCM(i, 0xa3bed9FF, "Лифт скоро начнёт движение. Покиньте его, если не хотите ехать.");
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 5) // когда лифт едет вверх
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 6;
        g_mine_elevator[MS_TIME_STATUS] = 3;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_LIFT], -465.842, 2876.61, 1192.96, 4.0, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1070.09)) continue;

            SCM(i, 0xa3bed9FF, "Лифт начал движение. Не переходите в меню паузы до выхода из лифта.");
                
            TogglePlayerControllable(i,false);
        }
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 6) 
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 7;
        g_mine_elevator[MS_TIME_STATUS] = 27;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_2], -461.784, 2877.42 + 4, 1070.47, 0.5, 0.0, 0.0, 0.0);
        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_3], -469.966, 2877.43 + 4, 1070.51, 0.5, 0.0, 0.0, 0.0);
    }
    else if(g_mine_elevator[MS_OBJECT_LIFT_STATUS] == 7) // когда лифт открывается сверху
    {
        g_mine_elevator[MS_OBJECT_LIFT_STATUS] = 0;
        g_mine_elevator[MS_TIME_STATUS] = 30;

        MoveDynamicObject(g_mine_elevator[MS_OBJECT_GATES_1], -469.987, 2879.9, 1191.84, 0.5, 0.0, 0.0, 0.0);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;
            
            if(!IsPlayerInRangeOfPoint(i, 4.5, -465.842, 2876.61, 1192.96)) continue;
            
            TogglePlayerControllable(i,true);

            SetPVarInt(playerid, "lift_up", 0);
			CEF_CREATE(playerid, 1, 2, "window.destroySound(10311, 30)");
        }
    }

    CreateMineOre();
}
//>========================================================================================================================<
//-------------------------------------------------------Новая система-------------------------------------------------------
#define MAX_CONTAINERS 7
#define MAX_CONTAINERS_ITEMS 9

new alt_containers_bet[MAX_CONTAINERS];
new alt_containers_open[MAX_CONTAINERS];
new alt_containers_items[MAX_CONTAINERS];

new containers_bet[MAX_PLAYERS];

new containers_id[MAX_PLAYERS];

new containers_item_id[MAX_PLAYERS];

new containers_block_time[MAX_PLAYERS];

enum S_CONTAINERS_ITEMS_STRUCT
{
	S_CT_I_STATUS,
	S_CT_I_TYPE,
	S_CT_I_ID,
	S_CT_I_IDNX
};
new s_containers_items[MAX_CONTAINERS][MAX_CONTAINERS_ITEMS][S_CONTAINERS_ITEMS_STRUCT];

enum S_CONTAINERS_STRUCT
{
	S_CT_TYPE,
	S_CT_ITEM_TYPE,
	S_CT_PRICE,
	S_CT_WIN_ID,
	S_CT_STATUS,
	S_CT_TIME,
	S_CT_OBJ,
	S_CT_ITEM_OBJ,
	S_CT_DOOR_1,
	S_CT_DOOR_2,
	S_CT_CLOSE_OBJ,
	S_CT_CAR_OBJ,
	Text3D: S_CT_LABEL_1,
	Text3D: S_CT_LABEL_2
};
new s_containers[MAX_CONTAINERS][S_CONTAINERS_STRUCT];

enum S_CONTAINERS_TYPE_STRUCT
{
	SCT_NAME[38],
	SCT_OBJ_ID,
	SCT_OBJ_DOOR_1_ID,
	SCT_OBJ_DOOR_2_ID,
};

const MAX_CONT = 7;

enum eContPosStruct
{
    Float: CONT_POS[4],
	Float: CONT_POS_LOCK[4]
}

static const eContPos[MAX_CONT][eContPosStruct] =
{
   {{-1958.89,2932.05,6.39267,-89.4},{-1964.58,2932.01,7.93752, -80.0}},
   {{-1942.44,2932.09,6.39267,-89.4},{-1948.1,2932.01,7.93752, -80.0}},
   {{-1925.19,2932.05,6.39267,-89.4},{-1930.93,2932.01,7.93752, -80.0}},
   {{-1908.15,2932.03,6.39267,-89.4},{-1913.88,2932.01,7.93752, -80.0}},

   {{-1898.45,2926.53,6.39267,-89.4},{-1904.15,2926.49,7.93752, -80.0}},
   {{-1915.99,2926.53,6.39267,-89.4},{-1921.76,2926.49,7.93752, -80.0}},
   {{-1931.92,2926.53,6.39267,-89.4},{-1937.67,2926.49,7.93752, -80.0}}
};

new s_containers_type[5][S_CONTAINERS_TYPE_STRUCT] =
{
	{"{FF5533}Российская Федерация", 10476, 10459, 10460},
	{"{4F80BF}Европейский Союз", 10464, 10461, 10462},
	{"{4F80BF}Соединенные Штаты Америки", 10465, 10472, 10473},
	{"{6B8E23}Объединённые Арабские Эмираты", 10466, 10474, 10475},
	{"{FF5533}Китайская Народная Республика", 10728, 10726, 10727}
};

new Float:s_containers_pos_obj[7][5][4] =
{
	//{{[контейнер]},	{[левая дверь]}, {[правая дверь]},	{[позиция текста (там где начинаются торги)]}, {[замок]}}

	{{-1958.89,2932.05,6.39267,-89.4}, {-1964.47,2933.31,7.04267,0.0}, {-1964.47,2930.77,7.04267,0.0}, {-1965.1040,2931.9771,7.9027,0.0}, {-1964.58,2932.01,7.93752,-80.0}},
	{{-1942.44,2932.09,6.39267,-89.4}, {-1948.01,2933.31,7.04267,0.0}, {-1948.01,2930.77,7.04267,0.0}, {-1948.9059,2932.0854,7.9027,0.0}, {-1948.10,2932.01,7.93752,-80.0}},
	{{-1925.19,2932.05,6.39267,-89.4}, {-1930.77,2933.31,7.04267,0.0}, {-1930.77,2930.77,7.04267,0.0}, {-1931.3438,2932.0632,7.9027,0.0}, {-1930.93,2932.01,7.93752,-80.0}},
	{{-1908.15,2932.03,6.39267,-89.4}, {-1913.71,2933.31,7.04267,0.0}, {-1913.71,2930.77,7.04267,0.0}, {-1914.4340,2932.1421,7.9027,0.0}, {-1913.88,2932.01,7.93752,-80.0}},
	{{-1898.45,2926.53,6.39267,-89.4}, {-1904.02,2927.78,7.04267,0.0}, {-1904.02,2925.26,7.04267,0.0}, {-1904.9874,2926.5583,7.9027,0.0}, {-1904.15,2926.49,7.93752,-80.0}},
	{{-1915.99,2926.53,6.39267,-89.4}, {-1921.56,2927.78,7.04267,0.0}, {-1921.56,2925.26,7.04267,0.0}, {-1922.7148,2926.5979,7.9027,0.0}, {-1921.76,2926.49,7.93752,-80.0}},
	{{-1931.92,2926.53,6.39267,-89.4}, {-1937.51,2927.78,7.04267,0.0}, {-1937.51,2925.26,7.04267,0.0}, {-1938.4766,2926.5254,7.9027,0.0}, {-1937.67,2926.49,7.93752,-80.0}}
};

new s_containers_type_obj[8] = {10469, 10468, 10467, 10470, 10471, 10467, 0, 10470};
new s_containers_type_name[8][24] = {"Антиквариат", "Техника", "Мебель", "Недорогая одежда", "Одежда", "Спец. Товары", "Транспорт", "Аксессуары"};

new s_containers_type_price[5][8] =
{
    // Российская Федерация
    {150000, 70000, 150000, 80000, 280000, 15000, 300000, 70000}, 
    // Европейский Союз
    {150000, 70000, 150000, 80000, 280000, 15000,  5500000, 70000}, 
    // Соединенные Штаты Америки
    {150000, 70000, 150000, 80000, 280000, 15000, 5500000, 70000}, 
    // Объединённые Арабские Эмираты
    {150000, 70000, 150000, 80000, 280000, 15000, 19000000, 70000}, 
    // Китайская Народная Республика
    {150000, 70000, 150000, 80000, 280000, 15000, 1900000, 70000}
};
new s_containers_acs[5][20][2] =
{
    // Российская Федерация
    {
        {13973,2}, 
        {14003,8},
        {18908,1},
        {18924,3},
        {18944,4},
        {19009,0},
        {18935,4},
        {13983,4},
        {13980,4},
        {13990,2},
        {14599,4},
        {18895,2},
        {18904,2},
        {18901,2},
        {18914,2},
        {18906,2},
        {14072,2},
        {13975,4},
        {15882,4},
        {15788,9}
    }, 
    // Европейский Союз
    {
        {14520,2},
        {14521,2},
        {14522,2},
        {13983,4},
        {13980,4},
        {13990,2},
        {14599,4},
        {13985,2},
        {14056,2},
        {14460,4},
        {14461,2},
        {18941,4},
        {18947,4},
        {18951,4},
        {18972,4},
        {13991,2},
        {13978,4},
        {13958,2},
        {15886,4},
        {15884,4}
    },
    // Соединенные Штаты Америки
    {
        {13988,2},
        {14004,8},
        {16744,4},
        {14067,2},
        {18912,2},
        {18909,3},
        {13983,4},
        {13980,4},
        {13990,2},
        {13995,0},
        {19010,0},
        {19012,0},
        {19013,0},
        {18925,4},
        {13982,4},
        {14063,2},
        {14053,2},
        {14006,8},
        {14052,2},
        {15890,11}
    },
    // Объединённые Арабские Эмираты
    {
        {14614,7},
        {18946,3},
        {14001,6},
        {18898,2},
        {18899,2},
        {19007,0},
        {18902,2},
        {13976,4},
        {18921,3},
        {18913,2},
        {18903,2},
        {14059,2},
        {13970,2},
        {13987,2},
        {15849,4},
        {15848,4},
        {16224,4},
        {14195,8},
        {14048,2},
        {14054,2}
    },
    // Китайская Народная Республика
    {
        {13983,4},
        {13980,4},
        {13990,2},
        {14057,2},
        {14456,2},
        {14465,2},
        {14062,2},
        {14796,11},
        {15789,2},
        {15881,4},
        {13991,2},
        {13969,1},
        {13966,5},
        {13965,5},
        {14066,2},
        {18933,4},
        {18949,4},
        {18950,4},
        {15810,4},
        {14002,6}
    }
};

new s_containers_technique[20] = {107,108,109,110,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,123};

new s_containers_antiques[21] = {48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,85};

new s_containers_special_goods[16] = {103,104,105,106,111,112,113,114,116,117,118,119,120,121,122,332};

new s_containers_furniture[8] = {68,69,70,71,72,73,77,79};
new s_containers_skins[5][50][2] =
{
    //{[ид скина],[цена скина]},
    // Российская Федерация
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{156,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{299,29000},
		{101,30000},
		{155,30000},
		{140,38000},
		{262,45000},
		{99,50000},
		{18,53000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{108,135000},
		{192,600000},
		{109,135000},
		{119,50000},
		{272,270000},
		{15305,1560000},
		{297,6000000},
		{15363,10000000},
		{162,6000000},
		{181,55000},
		{294,100000},
		{15361,5000000},
		{15433,700000},
		{15364,1700000},
		{15320,5000000},
		{15361,7000000},
		{15423,8000000},
		{15452,17000000}
    }, 
    // Европейский Союз
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{160,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{235,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{193,45000},
		{155,30000},
		{146,50000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{23,100000},
		{108,135000},
		{295,150000},
		{169,200000},
		{231,488599},
		{120,650000},
		{129,460000},
		{225,600000},
		{233,1300000},
		{232,1600000},
		{15300,1300000},
		{207,20000000},
		{234,6000000},
		{15393,1300000},
		{206,4000000},
		{15300,1600000},
		{172,2500000},
		{15309,2500000},
		{15312,2500000},
		{270,5000000}
    },
    // Соединенные Штаты Америки
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{159,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{150,80000},
		{119,90000},
		{108,135000},
		{169,200000},
		{15317,200000},
		{138,250000},
		{55,650000},
		{41,700000},
		{258,20000000},
		{238,2000000},
		{115,4000000},
		{207,20000000},
		{257,700000},
		{176,4000000},
		{223,900000},
		{182,4000000},
		{116,4000000},
		{167,6000000},
		{228,3000000},
		{194,5000000},
		{297,8000000},
		{15540,8000000},
		{15431,8000000},
		{15363,15000000},
		{207,20000000}
    },
    // Объединённые Арабские Эмираты
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{26,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{150,60000},
		{46,500000},
		{15391,600000},
		{15390,850000},
		{31,1300000},
		{134,4000000},
		{130,666666},
		{15430,12000000},
		{15456,4000000},
		{215,700000},
		{15360,15000000},
		{15526,3000000},
		{172,2500000},
		{15518,7000000},
		{15407,10000000},
		{15426,2400000},
		{35,5000000},
		{36,5000000},
		{41,700000},
		{19,5000000},
		{5,5000000},
		{15414,5000000},
		{15416,5000000},
		{15418,8000000},
		{15425,8800000},
		{15406,10000000}
    },
    // Китайская Народная Республика
    {
        {14,3000},
		{20,3000},
		{21,3000},
		{22,3000},
		{95,3000},
		{78,3000},
		{24,3000},
		{52,3000},
		{49,5000},
		{7,7500},
		{184,10000},
		{75,10000},
		{2,10000},
		{56,10000},
		{32,12000},
		{132,15000},
		{133,15000},
		{97,18000},
		{242,18000},
		{45,25000},
		{101,30000},
		{155,30000},
		{99,50000},
		{60,60000},
		{73,60000},
		{92,70000},
		{117,80000},
		{119,90000},
		{185,120000},
		{189,135000},
		{3,250000},
		{59,250000},
		{33,350000},
		{186,500000},
		{296,550000},
		{145,300000},
		{146,100000},
		{152,450000},
		{15540,8000000},
		{245,7000000},
		{15542,4000000},
		{249,1000000},
		{140,38000},
		{15562,10000000},
		{150,160000},
		{261,550000},
		{55,700000},
		{77,700000},
		{15394,1700000},
		{29,1700000}
    }
};

new s_containers_cars[5][63] =
{
    // Российская Федерация
    {15151,15150,15145,15124,15078,15074,799,600,576,567,566,565,561,555,549,547,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,546,542,536,527,496,492,478,526,404,527,496,492,478,526,404,526,404,15694,17411},
    // Европейский Союз
    {475,15118,15149,15152,15077,15086,612,585,614,909,15066,15067,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15092,15167,15087,508,516,534,540,15176,15161,466,466,15071,15087,508},
    // Соединенные Штаты Америки
    {15189,495,15156,15148,15073,15071,793,503,15087,15081,15158,15089,15148,15147,558,466,15071,15076,15092,15167,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15071,793,15073,15071,17414},
    // Объединённые Арабские Эмираты
    {15190,15229,15223,15104,15160,15156,15636,15179,15177,15176,15175,15182,15238,402,400,405,409,410,415,429,480,506,533,541,543,579,573,602,605,797,798,907,965,15071,15085,15105,15076,15107,15108,15120,15146,15166,15147,15150,15158,965,15071,15085,15105,15076,15107,15108,15120,15146,15166,15147,15150,15158,15671,15672,15674,17406},
    // Китайская Народная Республика
    {15189,495,15156,15148,15073,15071,793,503,15087,15081,15158,15089,15148,15147,558,466,15071,15076,15092,15167,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15189,495,15156,15148,15165,15140,15073,15071,793,15071,793,15073,15071}
};

enum E_CONTAINER_VEHICLE_SPAWN_STRUC
{
	Float: CS_POS_X,
	Float: CS_POS_Y,
	Float: CS_POS_Z,
	Float: CS_POS_A
}

new container_spawn_vehicle_buy[7][E_CONTAINER_VEHICLE_SPAWN_STRUC] =
{
	{-1959.5929,2936.3940,6.1911,90.0},
	{-1943.7290,2936.5735,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1925.9305,2936.7769,6.1911,90.0},
	{-1898.5448,2922.7205,6.1912,90.0},
	{-1916.5865,2922.8850,6.1911,90.0},
	{-1932.8942,2921.6682,6.1911,90.0}
};

stock FixContainers()
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		s_containers[i][S_CT_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
		s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(19007, 0.000, 0.000, 0.000, 0.00, 0.00, 24.5);
	}
}
stock DellContainers(container_id)
{
	new i = container_id;

	if(IsValidDynamicObject(s_containers[i][S_CT_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_OBJ]);
	if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1]);
	if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2]);
	if(IsValidDynamicObject(s_containers[i][S_CT_ITEM_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_ITEM_OBJ]);
	if(IsValidDynamicObject(s_containers[i][S_CT_DOOR_1])) DestroyDynamicObject(s_containers[i][S_CT_DOOR_1]);
	if(IsValidDynamicObject(s_containers[i][S_CT_DOOR_2])) DestroyDynamicObject(s_containers[i][S_CT_DOOR_2]);
	if(IsValidDynamicObject(s_containers[i][S_CT_CLOSE_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_CLOSE_OBJ]);
	if(s_containers[i][S_CT_CAR_OBJ] != INVALID_VEHICLE_ID) DestroyVehicle(s_containers[i][S_CT_CAR_OBJ]);

	s_containers[i][S_CT_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_ITEM_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_DOOR_1] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_DOOR_2] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_CLOSE_OBJ] = INVALID_OBJECT_ID;
	s_containers[i][S_CT_LABEL_1] = Text3D: INVALID_3DTEXT_ID;
	s_containers[i][S_CT_LABEL_2] = Text3D: INVALID_3DTEXT_ID;
	s_containers[i][S_CT_CAR_OBJ] = INVALID_VEHICLE_ID;
	s_containers[i][S_CT_STATUS] = 0;

	DestroyDynamicArea(alt_containers_bet[i]);
	alt_containers_bet[i] = 0;
	DestroyDynamicArea(alt_containers_open[i]);
	alt_containers_open[i] = 0;
	DestroyDynamicArea(alt_containers_items[i]);
	alt_containers_items[i] = 0; 

	return true;
}

stock AddContainers(containers_type)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(s_containers[i][S_CT_STATUS] != 0) continue;

		DellContainers(i);

		new type_containers = RandomEx(0,5);
		new items_containers;
		if(containers_type == 8) 
		{
			items_containers = random(10);
			if(items_containers > 7) items_containers = 7;
		}
		else items_containers = containers_type;
		//new items_containers = 6;

		s_containers[i][S_CT_TYPE] = type_containers;
		s_containers[i][S_CT_ITEM_TYPE] = items_containers;
		s_containers[i][S_CT_PRICE] = s_containers_type_price[type_containers][items_containers];
		s_containers[i][S_CT_WIN_ID] = -1;
		s_containers[i][S_CT_STATUS] = 1;
		s_containers[i][S_CT_TIME] = 60;

		s_containers[i][S_CT_OBJ] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_ID], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);

		if(s_containers[i][S_CT_ITEM_TYPE] != 6) s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(s_containers_type_obj[items_containers], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);

		s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_1_ID], s_containers_pos_obj[i][1][0], s_containers_pos_obj[i][1][1], s_containers_pos_obj[i][1][2], 0.00, 0.00, s_containers_pos_obj[i][1][3]);

		s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_2_ID], s_containers_pos_obj[i][2][0], s_containers_pos_obj[i][2][1], s_containers_pos_obj[i][2][2], 0.00, 0.00, s_containers_pos_obj[i][2][3]);

		s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(10477, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 0.00, 0.00, s_containers_pos_obj[i][4][3]);

		alt_containers_bet[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);

		new fmt_text[364];
		format(fmt_text, sizeof fmt_text, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
		s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] +3.5, 15.0);

		format(fmt_text, sizeof fmt_text, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб", formatInt(s_containers[i][S_CT_PRICE]));
		s_containers[i][S_CT_LABEL_2] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 15.0);

	}
	SendClientMessageToAll(0xFFA500FF, "[Информация] В порт доставлена новая партия контейнеров.");

	return true;
}

stock Containers()
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(s_containers[i][S_CT_TIME] == 0) continue;

        s_containers[i][S_CT_TIME]--;

		if(s_containers[i][S_CT_WIN_ID] == -1)
		{
			new query[364];
			format(query, sizeof query, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",
			s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_1], 0xFFFFFFFF, query);

			format(query, sizeof query, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб",formatInt(s_containers[i][S_CT_PRICE]));
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);

			if(s_containers[i][S_CT_TIME] == 0)
			{
				DellContainers(i);

				new type_containers = RandomEx(0,5);
				new items_containers = random(10);
				if(items_containers > 7) items_containers = 7;

				s_containers[i][S_CT_TYPE] = type_containers;
				s_containers[i][S_CT_ITEM_TYPE] = items_containers;
				s_containers[i][S_CT_PRICE] = s_containers_type_price[type_containers][items_containers];
				s_containers[i][S_CT_WIN_ID] = -1;
				s_containers[i][S_CT_STATUS] = 1;
				s_containers[i][S_CT_TIME] = 60;

				alt_containers_bet[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);

				s_containers[i][S_CT_OBJ] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_ID], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);

				if(s_containers[i][S_CT_ITEM_TYPE] != 6) s_containers[i][S_CT_ITEM_OBJ] = CreateDynamicObject(s_containers_type_obj[items_containers], s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2], 0.00, 0.00, s_containers_pos_obj[i][0][3]);

				s_containers[i][S_CT_DOOR_1] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_1_ID], s_containers_pos_obj[i][1][0], s_containers_pos_obj[i][1][1], s_containers_pos_obj[i][1][2], 0.00, 0.00, s_containers_pos_obj[i][1][3]);

				s_containers[i][S_CT_DOOR_2] = CreateDynamicObject(s_containers_type[type_containers][SCT_OBJ_DOOR_2_ID], s_containers_pos_obj[i][2][0], s_containers_pos_obj[i][2][1], s_containers_pos_obj[i][2][2], 0.00, 0.00, s_containers_pos_obj[i][2][3]);

				s_containers[i][S_CT_CLOSE_OBJ] = CreateDynamicObject(10477, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 0.00, 0.00, s_containers_pos_obj[i][4][3]);

				new fmt_text[364];
				format(fmt_text, sizeof fmt_text, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб\n\n{FFFFFF}Через {FF8C00}%d {FFFFFF}сек контейнер будет передан\nво владение порта, если не начнутся торги",s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE]), s_containers[i][S_CT_TIME]);
				s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] +3.5, 15.0);

				format(fmt_text, sizeof fmt_text, "Откройте торги за этот контейнер начальная\nстоимость которого составляет: {FF8C00}%s руб", formatInt(s_containers[i][S_CT_PRICE]));
				s_containers[i][S_CT_LABEL_2] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2], 15.0);
			}
		}
		else
		{
			new query[364];
			format(query, sizeof query, "%s(№%d)\n{ffffff}Содержимое: {3CB371}%s\n{ffffff}Cтоимость: {FF8C00}%s руб",
			s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME], i + 1, s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], formatInt(s_containers[i][S_CT_PRICE])
			);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_1], 0xFFFFFFFF, query);

			format(query, sizeof query, "{FFFFFF}Контейнер {FFD700}№%d\n{FFFFFF}До конца торгов осталось {FFD700}%d {FFFFFF}сек\n\nТекущая стоимость: {FF8C00}%s руб\n{FFFFFF}Предложил: {91764d}%s\n{FFFFFF}Оцените этот контейнер в свою пользу",
			i+1, s_containers[i][S_CT_TIME], formatInt(s_containers[i][S_CT_PRICE]), GetPlayerNameEx(s_containers[i][S_CT_WIN_ID])
			);
			UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);

			if(s_containers[i][S_CT_TIME] == 0)
        	{
				s_containers[i][S_CT_STATUS] = 2;

				DestroyDynamicArea(alt_containers_bet[i]);
				alt_containers_bet[i] = 0;

				alt_containers_open[i] = CreateDynamicSphere(s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2],3.0,-1,-1);

				if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_1]);
				s_containers[i][S_CT_LABEL_1] = Text3D: INVALID_3DTEXT_ID;

				format(query, sizeof query, "{32CD32}Контейнер был продан за {FF8C00}%s руб.\n\n{FFFFFF}Вы владелец? Тогда снимите замок с этого контейнера!", formatInt(s_containers[i][S_CT_PRICE]));
				UpdateDynamic3DTextLabelText(s_containers[i][S_CT_LABEL_2], 0xFFFFFFFF, query);

				if(s_containers[i][S_CT_ITEM_TYPE] == 0) //Антиквариат
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(20);
						s_containers_items[i][idx][S_CT_I_TYPE] = 0;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_antiques[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 1)//Техника
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(19);
						s_containers_items[i][idx][S_CT_I_TYPE] = 1;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_technique[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 2)//Мебель
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(7);
						s_containers_items[i][idx][S_CT_I_TYPE] = 2;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_furniture[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 3)//Недорогая одежда
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(29);
						s_containers_items[i][idx][S_CT_I_TYPE] = 3;
						//s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items];
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = items;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 4)//Одежда
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(29);
						s_containers_items[i][idx][S_CT_I_TYPE] = 4;
						//s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items];
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_skins[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = items;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 5)//Спец. Товары
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(15);
						s_containers_items[i][idx][S_CT_I_TYPE] = 5;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_special_goods[items];
						s_containers_items[i][idx][S_CT_I_IDNX] = 0;
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 6)//Транспорт
				{
					new items = random(59);
					s_containers_items[i][0][S_CT_I_TYPE] = 6;
					s_containers_items[i][0][S_CT_I_ID] = s_containers_cars[s_containers[i][S_CT_TYPE]][items];
					s_containers_items[i][0][S_CT_I_IDNX] = 0;
					s_containers_items[i][0][S_CT_I_STATUS] = 1;

					s_containers[i][S_CT_CAR_OBJ] = CreateVehicle(s_containers_cars[s_containers[i][S_CT_TYPE]][items],s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] + 2.5,90.0, 1, 1, 0, 0, VEHICLE_ACTION_TYPE_SVALKA_CAR);
				}
				else if(s_containers[i][S_CT_ITEM_TYPE] == 7)//Аксессуары
				{
					for(new idx; idx < MAX_CONTAINERS_ITEMS; idx++)
					{
						new items = random(19);
						s_containers_items[i][idx][S_CT_I_TYPE] = 7;
						s_containers_items[i][idx][S_CT_I_ID] = s_containers_acs[s_containers[i][S_CT_TYPE]][items][0];
						s_containers_items[i][idx][S_CT_I_IDNX] = s_containers_acs[s_containers[i][S_CT_TYPE]][items][1];
						s_containers_items[i][idx][S_CT_I_STATUS] = 1;
					}
				}

				foreach(new idx: Player)
				{
					if(!IsPlayerConnected(idx)) continue;
            		else if(!IsPlayerLogged(idx)) continue;

					if(containers_id[idx] != i) continue;

					format(query, sizeof query, "{32CD32}%s победил в аукционе и получил контейнер за {FF8C00}%s руб.", GetPlayerNameEx(s_containers[i][S_CT_WIN_ID]), formatInt(s_containers[i][S_CT_PRICE]));
					SCM(idx, -1, query);

					
					if(idx == s_containers[i][S_CT_WIN_ID])
					{
						CEF_HIDE(idx, "ContainersBet");
						
						new Float:old_x,Float:old_y,Float:old_z,Float:cam_x;
                        GetPlayerCameraPos(s_containers[i][S_CT_WIN_ID],old_x,old_y,old_z);

                        cam_x = eContPos[i][CONT_POS_LOCK][0] + (2 * floatsin(eContPos[i][CONT_POS_LOCK][3], degrees));
                        InterpolateCameraPos(s_containers[i][S_CT_WIN_ID],old_x,old_y,old_z, cam_x, eContPos[i][CONT_POS_LOCK][1], eContPos[i][CONT_POS_LOCK][2] + 1.0,3000);
                        InterpolateCameraLookAt(s_containers[i][S_CT_WIN_ID],eContPos[i][CONT_POS][0], eContPos[i][CONT_POS][1], eContPos[i][CONT_POS][2],eContPos[i][CONT_POS][0], eContPos[i][CONT_POS][1], eContPos[i][CONT_POS][2],3000);

                        SetTimerEx("ContainerCamera", 6000, false, "i", idx);

						ModifyCashBalance(idx, -s_containers[i][S_CT_PRICE], "Ставка контейнера");
						
						OnBattlePass_Perfomance(idx, 9, 1);
						AddPlayerAchiv(idx, 33);
						ApplyAnimation(idx, "STRIP", "PUN_HOLLER", 4.0, 0, 0, 0, 0, 0, 0);
					}
					else
					{
						CEF_HIDE(idx, "ContainersBet");
						SetCameraBehindPlayer(idx);
					}
					containers_id[idx] = -1;
					containers_bet[idx] = 0;
				}
			}
		}
	}
}

stock OpenItemContainers(playerid)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.5, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2])) continue;

		if(s_containers[i][S_CT_STATUS] != 3) return 1;
		if(s_containers[i][S_CT_WIN_ID] != playerid) return 1;

		if(s_containers[i][S_CT_ITEM_TYPE] != 6)
		{
			new query[124];
			new count_item;
			STRING_GLOBAL[0] = EOS;
			for(new idx; idx < MAX_CONTAINERS_ITEMS; idx ++)
			{
				if(s_containers_items[i][idx][S_CT_I_STATUS] != 1) continue;

				if(s_containers[i][S_CT_ITEM_TYPE] == 0) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 1) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 2) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 5) format(query, sizeof query, "[%d,15,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 3) format(query, sizeof query, "[100,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 4) format(query, sizeof query, "[100,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				else if(s_containers[i][S_CT_ITEM_TYPE] == 7) format(query, sizeof query, "[183,%d,%d],", s_containers_items[i][idx][S_CT_I_ID], idx);
				strcat(STRING_GLOBAL, query);
				count_item++;
			}

			if(count_item == 0) return DellContainers(i);

			new str_len;
			str_len = strlen(STRING_GLOBAL);
			strdel(STRING_GLOBAL, str_len - 1, str_len);

			if(s_containers[i][S_CT_ITEM_TYPE] == 0) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[0],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[2],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 2) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[4],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 5) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[4],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 3) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[1],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 4) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[1],[%s]]",  STRING_GLOBAL);
			else if(s_containers[i][S_CT_ITEM_TYPE] == 7) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[3],[%s]]",  STRING_GLOBAL);

			CEF_CREATE(playerid, 2, 4, "Containers", STRING_GLOBAL);
		}
		else if(s_containers[i][S_CT_ITEM_TYPE] == 6)//Транспорт
		{
			new str_c[450];
			new port = GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID], VI_PRICE) / 100 * 20;
			format(str_c, sizeof str_c,
			"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20%)\n\n\n{ffffff}1.Оставить себе\n2.Продать в порту", formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE)), formatInt(GetVehicleInfo(s_containers_items[i][0][S_CT_I_ID] , VI_PRICE) - port));
			IntfDialogCallRemote
			(
				playerid, DIALOG_PLAYER_CAR_CONTAINER, DIALOG_STYLE_LIST, "{769A37}Действие с транспортом", str_c,
				"Выбор", "Отмена"
			);	
		}
		containers_id[playerid] = i;
		break;
	}
	return true;
}

public: OnClickQuests(playerid, quest_id)
{
	if(quest_id == -1)
	{
	    CEF_HIDE(playerid, "Quests");
	}
	if(quest_id == 0)
	{
	    if(GetPVarInt(playerid, "quest") == 0)
	    {
		    ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>Перекус на ходу", 4000);
		    SetPVarInt(playerid, "quest", 1);
			SetPlayerData(playerid, P_QUEST_1_STATS, 2);
			UpdatePlayerDatabaseInt(playerid, "quest_1_stats", GetPlayerData(playerid, P_QUEST_1_STATS));
		    CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"Пища богов\", \"Употребите еду из инвентаря\", 0]");
		    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			CEF_CREATE(playerid, 2, 4, "TrainingHint", "[\"Откройте инвентарь нажав на кнопку i на вашей клавиатуре\", 5000]");
		    SendClientMessage(playerid, -1, "");
			SendClientMessage(playerid, 0xFFA500FF, "Выполнение задания: {"#cW"}Пища богов");
			SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Употребите еду из инвентаря");
			GiveIteam(playerid, 252, 1, 1, 0);
			CEF_HIDE(playerid, "Quests");
			CEF_HIDE(playerid, "MainMenu");
		}
		else
		{
		    IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		}
	}
	if(quest_id == 1)
	{
        if(GetPlayerData(playerid, P_QUEST_1_STATS) == 1)
		{
            if(GetPVarInt(playerid, "quest") == 0)
	        {
		        ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>С чего-то надо начинать", 4000);
		        SetPVarInt(playerid, "quest", 2);
				SetPlayerData(playerid, P_QUEST_2_STATS, 2);
			    UpdatePlayerDatabaseInt(playerid, "quest_2_stats", GetPlayerData(playerid, P_QUEST_2_STATS));
		        CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"С чего-то надо начинать\", \"Заработайте 2500 рублей на начальных работах (шахта, лесопилка, завод)\", 0]");
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Выполнение квеста: {"#cW"}С чего-то надо начинать");
			    SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Заработайте 2500 рублей на начальных работах (шахта, лесопилка, завод)");
			    CEF_HIDE(playerid, "Quests");
				CEF_HIDE(playerid, "MainMenu");
		    }
		    else
		    {
		        IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Данный тип заданий~n~Нужно выполнять по ~n~~r~порядку\",4000,0,-1,1,0,2.29]')");
	}
	if(quest_id == 2)
	{
	    if(GetPlayerData(playerid, P_QUEST_2_STATS) == 1)
		{
            if(GetPVarInt(playerid, "quest") == 0)
	        {
		        ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>Мобильная связь", 4000);
		        SetPVarInt(playerid, "quest", 3);
				SetPlayerData(playerid, P_QUEST_3_STATS, 2);
			    UpdatePlayerDatabaseInt(playerid, "quest_3_stats", GetPlayerData(playerid, P_QUEST_3_STATS));
		        CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"Мобильная связь\", \"Приобретите мобильный телефон в салоне связи\", 0]");
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Выполнение квеста: {"#cW"}Мобильная связь");
			    SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Приобретите мобильный телефон в салоне связи");
			    CEF_HIDE(playerid, "Quests");
				CEF_HIDE(playerid, "MainMenu");
		    }
		    else
		    {
		        IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Данный тип заданий~n~Нужно выполнять по ~n~~r~порядку\",4000,0,-1,1,0,2.29]')");
	}
	if(quest_id == 3)
	{
	    if(GetPlayerData(playerid, P_QUEST_3_STATS) == 1)
		{
            if(GetPVarInt(playerid, "quest") == 0)
	        {
		        ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>Первая лицензия", 4000);
		        SetPVarInt(playerid, "quest", 0);
		        CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"Первая лицензия\", \"Получите вашу первую лицензию - права на управление автомобилем\", 0]");
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Выполнение квеста: {"#cW"}Первая лицензия");
			    SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Получите вашу первую лицензию - права на управление автомобилем");
			    CEF_HIDE(playerid, "Quests");
			    CEF_HIDE(playerid, "QuestsProgressInfo");
				CEF_HIDE(playerid, "MainMenu");
			    SetPlayerData(playerid, P_QUEST_4_STATS, 1);
			    UpdatePlayerDatabaseInt(playerid, "quest_4_stats", GetPlayerData(playerid, P_QUEST_4_STATS));

		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}2500 руб {FFA500}и {"#cGold"}3 exp.");
			    SendClientMessage(playerid, -1, "");
			    ModifyCashBalance(playerid, 2500, "выполнение квеста", true, true);
			    ShowDisplayText(playerid, "Задание выполнено<br><font color=#F1B50C>2500 руб и 3 EXP", 4000);

			    AddPlayerData(playerid, P_EXP, +, 3);
				OnClickQuests(playerid, 5);

			    if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
			    {
				    SetPlayerData(playerid, P_EXP, 0);
				    AddPlayerData(playerid, P_LEVEL, +, 1);
				    SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
				    SetPlayerLevelInit(playerid);
			    }
		    }
		    else
		    {
		        IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Данный тип заданий~n~Нужно выполнять по ~n~~r~порядку\",4000,0,-1,1,0,2.29]')");
	}
	if(quest_id == 5)
	{
	    if(GetPlayerData(playerid, P_QUEST_4_STATS) == 1)
		{
            if(GetPVarInt(playerid, "quest") == 0)
	        {
		        ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>Первый автомобиль", 4000);
		        SetPVarInt(playerid, "quest", 4);
				SetPlayerData(playerid, P_QUEST_6_STATS, 2);
			    UpdatePlayerDatabaseInt(playerid, "quest_6_stats", GetPlayerData(playerid, P_QUEST_6_STATS));
		        CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"Первый автомобиль\", \"Купите первую машину в автосалоне или с рук\", 0]");
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Выполнение квеста: {"#cW"}Первый автомобиль");
			    SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Купите первую машину в автосалоне или с рук");
			    CEF_HIDE(playerid, "Quests");
				CEF_HIDE(playerid, "MainMenu");
		    }
		    else
		    {
		        IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Данный тип заданий~n~Нужно выполнять по ~n~~r~порядку\",4000,0,-1,1,0,2.29]')");
	}
	if(quest_id == 6)
	{
	    if(GetPlayerData(playerid, P_QUEST_6_STATS) == 1)
		{
            if(GetPVarInt(playerid, "quest") == 0)
	        {
		        ShowDisplayText(playerid, "Начато задание<br><font color=#F1B50C>Солидная внешность", 4000);
		        SetPVarInt(playerid, "quest", 5);
				SetPlayerData(playerid, P_QUEST_7_STATS, 2);
			    UpdatePlayerDatabaseInt(playerid, "quest_7_stats", GetPlayerData(playerid, P_QUEST_7_STATS));
		        CEF_CREATE(playerid, 2, 4, "QuestsProgressInfo", "[0, 0, 0, \"Солидная внешность\", \"Приобретите новый внешний вид в магазине одежды\", 0]");
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, -1, "");
			    SendClientMessage(playerid, 0xFFA500FF, "Выполнение квеста: {"#cW"}Солидная внешность");
			    SendClientMessage(playerid, 0xFFA500FF, "Цель: {"#cW"}Приобретите новый внешний вид в магазине одежды");
			    CEF_HIDE(playerid, "Quests");
				CEF_HIDE(playerid, "MainMenu");
		    }
		    else
		    {
		        IntfDialogCallRemote(playerid, DIALOG_QUEST_END, DIALOG_STYLE_MSGBOX, "{C0D897}Предупреждение", "{EBEBEB}Вы действительно хотите отказаться от данного задания?", "Да", "Нет");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Данный тип заданий~n~Нужно выполнять по ~n~~r~порядку\",4000,0,-1,1,0,2.29]')");
	}
	return 1;
}

public:ClickPlayerContainerItemBox(playerid, item_id)
{
	new i = containers_id[playerid];

	containers_item_id[playerid] = item_id;

	if(s_containers[i][S_CT_ITEM_TYPE] == 3 || s_containers[i][S_CT_ITEM_TYPE] == 4)
	{
		new str_c[450],str_cs[70];
		new port = s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Одежда: №%d",s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][0]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1]), formatInt(s_containers_skins[s_containers[i][S_CT_TYPE]][s_containers_items[i][item_id][S_CT_I_IDNX]][1] - port));
		
		IntfDialogCallRemote
		(
			playerid, DIALOG_PLAYER_SKIN_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
	else if(s_containers[i][S_CT_ITEM_TYPE] != 7)
	{
		new str_c[450],str_cs[70];
		new port = ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Предмет: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price]), formatInt(ItemsInfo[s_containers_items[i][item_id][S_CT_I_ID]][i_item_price] - port));
		
		IntfDialogCallRemote
		(
			playerid, DIALOG_PLAYER_ITEM_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
	else 
	{
		new str_c[450],str_cs[70];
		new port = 50000 / 100 * 20;
		format(str_cs, sizeof str_cs,"{769A37}Аксессуар: №%d", s_containers_items[i][item_id][S_CT_I_ID]);
		format(str_c, sizeof str_c,
		"{ffffff}-Государственная стоимость: {FFA500}%s руб\n{ffffff}-Стоимость в порту: {FFA500}%s руб {B25520}(-20 %)\n{FFFFFF}\n{ffffff}1.Оставить себе\n{ffffff}2.Продать в порту", formatInt(50000), formatInt(50000 - port));
		
		IntfDialogCallRemote
		(
			playerid, DIALOG_PLAYER_ACS_CONTAINER, DIALOG_STYLE_LIST, str_cs, str_c,
			"Выбор", "Отмена"
		);
	}
    return 1;
}

stock OpenPlayersContainers(playerid)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2])) continue;

		if(s_containers[i][S_CT_STATUS] == 2)
		{
			if(s_containers[i][S_CT_WIN_ID] != playerid) return 1;

			DestroyDynamicArea(alt_containers_open[i]);
			alt_containers_open[i] = 0;

			alt_containers_items[i] = CreateDynamicSphere(s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2],4.5,-1,-1);

			if(IsValidDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2])) DestroyDynamic3DTextLabel(s_containers[i][S_CT_LABEL_2]);
			s_containers[i][S_CT_LABEL_2] = Text3D: INVALID_3DTEXT_ID;

			new fmt_text[364];
			format(fmt_text, sizeof fmt_text, "{32CD32}%s\n{FFFFFF}Осмотрите содержимое контейнера", s_containers_type[s_containers[i][S_CT_TYPE]][SCT_NAME]);
			s_containers[i][S_CT_LABEL_1] = CreateDynamic3DTextLabel(fmt_text, -1, s_containers_pos_obj[i][0][0], s_containers_pos_obj[i][0][1], s_containers_pos_obj[i][0][2] + 2.5, 15.0);

			s_containers[i][S_CT_STATUS] = 3;

			if(IsValidDynamicObject(s_containers[i][S_CT_CLOSE_OBJ])) DestroyDynamicObject(s_containers[i][S_CT_CLOSE_OBJ]);
			s_containers[i][S_CT_CLOSE_OBJ] = INVALID_OBJECT_ID;

			new Float: pos_x, Float: pos_y, Float: pos_z,Float: pos_x2, Float: pos_y2, Float: pos_z2;

			GetDynamicObjectPos(s_containers[i][S_CT_DOOR_2], pos_x, pos_y, pos_z);
			GetDynamicObjectPos(s_containers[i][S_CT_DOOR_1], pos_x2, pos_y2, pos_z2);

			MoveDynamicObject(s_containers[i][S_CT_DOOR_2],pos_x-0.1, pos_y, pos_z,0.12,0.0000, 0.0000, 96.6);
			MoveDynamicObject(s_containers[i][S_CT_DOOR_1],pos_x2-0.1, pos_y2, pos_z2,0.12,0.0000, 0.0000, -96.6);
		}
		else if(s_containers[i][S_CT_STATUS] == 1) 
		{
			if(containers_block_time[playerid] == 0) IntfDialogCallRemote(playerid, DIALOG_CONTAINER_BET, DIALOG_STYLE_MSGBOX, "{FFFFFF}Аукцион за контейнер", "{FFFFFF}Вы хотите войти в режим аукциона за этот контейнер?", "Готово", "Отмена");
			else SCMF(playerid, COLOR_RED, "У вас есть запрет на участие в аукционах за контейнер, осталось %d минут.", containers_block_time[playerid] / 60);
		}
		return 1;
	}
	return 1;
}

public: OnContainersChangeBet(playerid, bet)
{
	for(new i; i < MAX_CONTAINERS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, s_containers_pos_obj[i][4][0], s_containers_pos_obj[i][4][1], s_containers_pos_obj[i][4][2])) continue;

		if(s_containers[i][S_CT_WIN_ID] == playerid) 
			return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);

		if(!VerifyIntString(QueryPlayerBalance(playerid), s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
			return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

		if(bet > 999999999) 
			return GameText(playerid, "Максимальная сумма для ставки~n~999.999.999 руб", 3000, 2);

		if(s_containers[i][S_CT_TIME] <= 3 && s_containers[i][S_CT_TIME] > 0) 
			return SCM(playerid, -1, "До открытия контейнера меньше 3-х секунд, ставки закрыты.");

		if(bet < s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10 || !VerifyIntString(QueryPlayerBalance(playerid),s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
		{
			if(!VerifyIntString(QueryPlayerBalance(playerid),s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10))
				return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

			if(bet < s_containers[i][S_CT_PRICE] / 10) SCMF(playerid, -1, "Следующая ставка не может быть меньше чем %s", formatInt(s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10));

			CEF_HIDE(playerid, "ContainersBet");
			
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\", %d, %d, %d, %d]", s_containers_type_name[s_containers[i][S_CT_ITEM_TYPE]], s_containers[i][S_CT_TYPE], s_containers[i][S_CT_PRICE], s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10, s_containers[i][S_CT_TIME]);
			CEF_CREATE(playerid, 2, 4, "ContainersBet", STRING_GLOBAL);
			containers_id[playerid] = i;
		}
		else
		{
			s_containers[i][S_CT_PRICE] = bet;
			s_containers[i][S_CT_TIME] = 30;
			s_containers[i][S_CT_WIN_ID] = playerid;
			containers_bet[playerid] = s_containers[i][S_CT_PRICE];

			foreach(new idx: Player)
			{
				if(!IsPlayerConnected(idx)) continue;
				else if(!IsPlayerLogged(idx)) continue;

				if(containers_id[idx] != i) continue;

				ApplyAnimation(idx, "STRIP", "PLY_CASH", 4.0, 0, 0, 0, 0, 0, 0);

				SCMF(idx, 0xbec129FF, "%s назначил цену в {be9138}%s руб {bec129}за %d контейнер", GetPlayerNameEx(playerid), formatInt(s_containers[i][S_CT_PRICE]), i + 1);

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('ContainersBet').setBetData(%d, %d, %d)", s_containers[i][S_CT_PRICE], s_containers[i][S_CT_PRICE] + s_containers[i][S_CT_PRICE] / 10, s_containers[i][S_CT_TIME]);
				CEF_CREATE(idx, 1, 2, STRING_GLOBAL);
			}
		}
	}
	return 1;
}

stock OnContainersCloseBet(playerid)
{
	CEF_HIDE(playerid, "ContainersBet");
	SetCameraBehindPlayer(playerid);
	if(s_containers[containers_id[playerid]][S_CT_WIN_ID] == playerid)
	{
		s_containers[containers_id[playerid]][S_CT_WIN_ID] = -1;
		s_containers[containers_id[playerid]][S_CT_TIME] = 60;
		s_containers[containers_id[playerid]][S_CT_PRICE] = s_containers_type_price[s_containers[containers_id[playerid]][S_CT_TYPE]][s_containers[containers_id[playerid]][S_CT_ITEM_TYPE]];
	}
	if(containers_bet[playerid] != 0) containers_block_time[playerid] = 300, 
		SCM(playerid, COLOR_RED, "Вам было заблокирована возможность участвовать в аукционе за контейнер на 5 минут"),
		SCM(playerid, COLOR_RED, "Так как Вы вышли с торгов поставив ставку");
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
}

cmd:contspawn(playerid, params[])
{
	if(GetPlayerData(playerid, P_CMD_contspawn) == 0)
	{
		if(IsPlayerAdminLevel(playerid) < 7) return 1;
    	if(IsPlayerAdminLevel(playerid) >= 7) 
			if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	}
	extract params -> new type; else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /contspawn [Тип контейнеров]");
		SendClientMessage(playerid, 0xCECECEFF, "Тип контейнеров:");
		SendClientMessage(playerid, 0xCECECEFF, "0 - Антиквариат");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Техника");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Мебель");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Недорогая одежда");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Одежда");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Спец. Товары");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Транспорт");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Аксессуары");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Random");
		return 1;
	}
	if(type == 0 || type == 1 || type == 2 || type == 3 || type == 4 || type == 5 || type == 6 || type == 7 || type == 8) AddContainers(type);
	return 1;
}

#define MAX_SVALKA_CARS 18
#define MAX_SVALKA_ITEMS 93

new alt_svalka_items[MAX_SVALKA_ITEMS];
new alt_svalka_cars[MAX_SVALKA_CARS];

new g_svalka_playerid[MAX_PLAYERS] = -1;
new g_svalka_playerid_type[MAX_PLAYERS];
new g_svalka_playerid_bet[MAX_PLAYERS][2];
new g_svalka_playerid_svalka_id_car[MAX_PLAYERS] = -1;
new g_svalka_playerid_svalka_item[MAX_PLAYERS] = -1;
//масивы отвечающие за авто на свалке
enum S_SVALKA_CARS_STRUCT
{
    S_CAR_ID,
    S_CAR_BID, // ставка
    S_CAR_WIN_ID,
    S_CAR_TIME,
    S_CAR_STATUS,
    S_CAR_OBJECT,
    Text3D:S_CAR_LABEL,
    S_CAR_IZNOS,
    S_CAR_COLOR
}
new g_svalka_cars[MAX_SVALKA_CARS][S_SVALKA_CARS_STRUCT];


new Float: g_svalka_pos_cars[MAX_SVALKA_CARS][4] =
{
    {-2746.9509,-1449.7039,11.7463,14.1715},
    {-2748.4934,-1443.9131,11.7463,15.6358},
    {-2750.3896,-1436.3767,11.7965,14.5668},
    {-2752.1265,-1430.5571,11.7965,14.9631},
    {-2771.7644,-1369.8912,11.8200,18.8114},
    {-2773.8130,-1364.0001,11.8200,18.9847},
    {-2775.9368,-1356.6779,11.8200,14.2542},
    {-2777.5903,-1350.4185,11.8200,15.7583},
    {-2779.1279,-1343.1324,11.8111,10.8452},
    {-2780.4036,-1336.9703,11.8111,12.4337},
    {-2781.4551,-1329.4396,11.8180,6.7110},
    {-2782.3032,-1323.2158,11.8181,7.7379},
    {-2790.4866,-1243.8090,11.7981,8.8088},
    {-2791.4768,-1237.6049,11.7979,8.1332},
    {-2792.5254,-1230.0830,11.7583,10.5889},
    {-2793.7229,-1223.8425,11.7583,10.8525},
    {-2795.0344,-1216.3081,11.7134,11.9074},
    {-2796.3142,-1210.3247,11.7133,12.0640}
};

new Float: g_svalka_pos_cars_win[11][4] =
{
    {-2743.6868,-1414.3472,9.8857,135.2798},
    {-2750.9519,-1415.6448,9.9549,138.8938},
    {-2779.5432,-1441.6849,9.9129,310.6334},
    {-2786.2700,-1369.5956,9.9270,310.1269},
    {-2761.6501,-1335.1210,9.9270,143.7762},
    {-2790.3291,-1314.2927,9.9278,281.2876},
    {-2804.6755,-1283.0017,9.9308,254.6990},
    {-2814.6519,-1264.1732,9.9271,338.8241},
    {-2814.8931,-1241.9766,9.9266,207.7707},
    {-2775.7175,-1254.2181,9.8886,52.8942},
    {-2780.0249,-1243.4910,9.9967,169.8922}
};

new g_svalka_cars_id[266][2] =
{
    //{ид машины, стартовая ставка}
	{401, 50000},
    {404, 165000},
    {412, 230000},
    {421, 350000},
    {422, 320000},
    {439, 100000},
    {445, 330000},
    {458, 320000},
    {467, 115000},
    {478, 50000},
    {491, 350000},
    {492, 190000},
    {496, 130000},
    {526, 210000},
    {527, 190000},
    {534, 490000},
    {536, 210000},
    {542, 100000},
    {546, 90000},
    {547, 200000},
    {549, 30000},
    {550, 300000},
    {554, 360000},
    {555, 25000},
    {561, 210000},
    {565, 145000},
    {566, 300000},
    {567, 99000},
    {576, 50000},
    {600, 50000},
    {613, 410000},
    {799, 350000},
    {15070, 190000},
    {15074, 215000},
    {15078, 160000},
    {15079, 85000},
    {15080, 105000},
    {15084, 300000},
    {15124, 220000},
    {15119, 700000},
    {15145, 150000},
    {15150, 160000},
    {15151, 170000},
    {15207, 150000},
    {15262, 350000},
    {15281, 20000},
    {15296, 200000},
    {15603, 490000},
    {15621, 350000},
    {15641, 250000},
    {15648, 150000},
    {15663, 110000},
	{411, 2000000},
    {419, 820000},
    {436, 1000000},
    {475, 1300000},
    {477, 2000000},
    {479,  450000},
    {495, 2800000},
    {507, 530000},
    {508, 490000},
    {516, 900000},
    {540, 780000},
    {551, 1300000},
    {559, 2000000},
    {560, 1800000},
    {562, 2000000},
    {585, 1800000},
    {589, 3000000},
    {612, 2000000},
    {614, 2600000},
    {699, 1700000},
    {793, 5700000},
    {908, 2500000},
    {909, 900000},
    {1326, 2000000},
    {15065, 1100000},
    {15066, 2000000},
    {15067, 1400000},
    {15068, 1050000},
    {15069, 1700000},
    {15072, 1200000},
    {15077, 990000},
    {15081, 1250000},
    {15086, 2200000},
    {15087, 1230000},
    {15088, 1020000},
    {15090, 1600000},
    {15093, 2100000},
    {15121, 700000},
    {15115, 800000},
    {15118, 3000000},
    {15128, 850000},
    {15125, 800000},
    {15131, 1000000},
    {15141, 3500000},
    {15144, 2100000},
    {15147, 2500000},
    {15149, 1500000},
    {15152, 1800000},
    {15140, 3200000},
    {15157, 3500000},
    {15162, 1200000},
    {15163, 1600000},
    {15168, 700000},
    {15171, 2000000},
    {15180, 2200000},
    {15183, 15000000},
    {15184, 900000},
    {15185, 2000000},
    {15181, 3300000},
    {15191, 2000000},
    {15209, 4500000},
    {15203, 4000000},
    {15240, 1600000},
    {15226, 4800000},
    {15214, 1200000},
    {15221, 10000000},
    {15220, 2800000},
    {15231, 700000},
    {15272, 800000},
    {15273, 1200000},
    {15274, 3000000},
    {15275, 3500000},
    {15276, 1900000},
    {15234, 5000000},
    {15619, 3990000},
    {15605, 4000000},
    {15645, 2500000},
    {15651, 4000000},
    {15664, 700000},
	{400, 10000000},
    {402, 500000},
    {405, 6000000},
    {409, 13000000},
    {410, 6000000},
    {415, 20000000},
    {429, 13000000},
    {451, 11000000},
    {466, 6000000},
    {480, 9000000},
    {489, 17000000},
    {490, 8000000},
    {494, 4300000},
    {502, 13500000},
    {503, 6800000},
    {505, 12000000},
    {506, 12400000},
    {533, 5500000},
    {541, 12000000},
    {543, 6000000},
    {558, 4000000},
    {573, 18000000},
    {579, 5500000},
    {587, 2500000},
    {602, 4000000},
    {604, 8400000},
    {605, 14100000},
    {794, 6300000},
    {795, 35000000},
    {796, 19000000},
    {797, 5500000},
    {798, 3200000},
    {907, 3600000},
    {965, 25000000},
    {999, 11500000},
    {15071, 7800000},
    {15073, 2900000},
    {15075, 13000000},
    {15076, 11300000},
    {15082, 10000000},
    {15085, 100000000},
    {15089, 5300000},
    {15092, 3150000},
    {15094, 4200000},
    {15109, 11500000},
    {15108, 6000000},
    {15107, 13000000},    
    {15106, 8000000},
    {15105, 22000000},
    {15113, 8000000},
    {15114, 13000000},
    {15116, 20000000},
    {15120, 11000000},
    {15126, 7000000},
    {15137, 40000000},
    {15142, 13000000},
    {15146, 55000000},
    {15148, 6000000},
    {15153, 12000000},
    {15155, 25000000},
    {15156, 300000000},
    {15158, 15000000},
    {15159, 15000000},
    {15164, 14500000},
    {15165, 11000000},
    {15166, 11000000},
    {15167, 6000000},
    {15169, 13500000},
    {15170, 40000000},
    {15172, 20000000},
    {15173, 18000000},
    {15178, 10000000},
    {15187, 15000000},
    {15188, 15000000},
    {15192, 20000000},
    {15213, 5000000},
    {15219, 5000000},
    {15225, 25000000},
    {15237, 14000000},
    {15211, 7000000},
    {15206, 16000000},
    {15236, 250000000},
    {15212, 30000000},
    {15224, 22000000},
    {15239, 3000000},
    {15216, 4000000},
    {15210, 4000000},
    {15228, 20000000},
    {15217, 5000000},
    {15215, 13000000},
    {15222, 120000000},
    {15205, 150000000},
    {15227, 100000000},
    {15218, 18000000},
    {15204, 11000000},
    {15235, 25000000},
    {15230, 35000000},
    {15266, 70000000},
    {15246, 7000000,},
    {15247, 5500000},
    {15248, 15000000},
    {15249, 15000000},
    {15250, 353000000},
    {15252, 75000000},
    {15259, 18000000},
    {15261, 164000000},
    {15263, 65000000},
    {15264, 8000000},
    {15265, 3800000},
    {15269, 20000000},
    {15270, 12000000},
    {15271, 3000000},
    {15286, 18000000},
    {15284, 15000000},
    {15288, 13000000},
    {15289, 15000000},
    {15290, 12000000},
    {15287, 65000000},
    {15602, 70000000},
    {15601, 20000000},
    {15611, 60000000},
    {15613, 125000000},
    {15622, 17000000},
    {15626, 200000000},
    {15627, 16000000},
    {15628, 16000000},
    {15630, 15000000},
    {15637, 12000000},
    {15640, 35000000},
    {15653, 13000000},
    {15652, 20000000},
    {15662, 15000000},
    {15666, 25000000},
    {15677, 1500000},
    {15117, 10000000}
};

//масивы отвечающие за предметы на свалке
enum S_SVALKA_ITEMS_STRUCT
{
    S_ITEM_ID,
    S_ITEM_BID, // ставка
    S_ITEM_WIN_ID,
    S_ITEM_TIME,
    S_ITEM_STATUS,
    S_ITEM_OBJECT,
    Text3D:S_ITEM_LABEL
}
new g_svalka_items[MAX_SVALKA_ITEMS][S_SVALKA_ITEMS_STRUCT];

new Float: g_svalka_pos_items[MAX_SVALKA_ITEMS][3] =
{
    {-2731.030762, -1360.448608, 11.294101},
	{-2733.709717, -1358.176025, 13.407500},
	{-2735.472656, -1365.781494, 13.180200},
	{-2737.954834, -1358.736694, 13.387300},
	{-2739.353271, -1366.995361, 13.488000},
	{-2711.956787, -1367.007813, 12.640800},
	{-2742.857422, -1372.010742, 8.967401},
	{-2745.194824, -1349.956055, 14.672600},
	{-2741.771484, -1338.635254, 12.623900},
	{-2706.632568, -1376.297485, 13.212400},
	{-2752.840088, -1349.164063, 13.503600},
	{-2732.849854, -1390.720459, 11.044500},
	{-2753.497070, -1341.885986, 13.610100},
	{-2728.641113, -1391.991089, 13.129500},
	{-2754.074951, -1378.973145, 12.440901},
	{-2755.940674, -1343.187012, 13.455900},
	{-2731.707764, -1393.218994, 13.164701},
	{-2759.259766, -1372.186768, 13.484000},
	{-2763.023926, -1371.922363, 13.395801},
	{-2752.253418, -1330.143066, 12.792500},
	{-2735.946289, -1401.074219, 13.084100},
	{-2765.409424, -1379.991333, 9.126400},
	{-2730.275879, -1403.450317, 13.210800},
	{-2738.738525, -1402.332153, 11.931900},
	{-2747.335938, -1320.171997, 11.758700},
	{-2731.824463, -1404.466064, 13.554701},
	{-2749.511475, -1399.713135, 14.398600},
	{-2749.526855, -1317.896851, 13.632000},
	{-2730.380371, -1407.789429, 13.673000},
	{-2745.645020, -1404.324829, 15.019300},
	{-2774.082520, -1384.497314, 13.014300},
	{-2775.507813, -1381.880249, 13.604200},
	{-2729.006836, -1413.049805, 13.588500},
	{-2774.477051, -1384.505249, 13.360100},
	{-2767.590820, -1320.717163, 10.626200},
	{-2778.715820, -1382.623901, 15.034201},
	{-2778.136963, -1386.708984, 14.992900},
	{-2773.811523, -1322.229370, 11.263400},
	{-2782.627930, -1384.223267, 15.070300},
	{-2703.946533, -1416.349731, 13.576700},
	{-2727.663330, -1421.325073, 13.254001},
	{-2745.454834, -1298.841919, 12.926800},
	{-2698.072754, -1417.835571, 12.236700},
	{-2728.685303, -1425.021484, 13.555301},
	{-2732.388672, -1429.224609, 13.351100},
	{-2698.282715, -1423.950684, 13.281600},
	{-2747.968994, -1291.967407, 12.323501},
	{-2751.286133, -1291.029419, 13.675800},
	{-2729.859863, -1432.651123, 13.532400},
	{-2781.469238, -1409.607666, 13.258600},
	{-2757.678467, -1292.395630, 10.233000},
	{-2754.483398, -1288.683472, 12.592401},
	{-2719.589844, -1436.088379, 15.308001},
	{-2785.478760, -1410.883301, 13.430700},
	{-2776.955078, -1299.892944, 13.461101},
	{-2760.370117, -1435.548828, 13.488500},
	{-2706.247559, -1440.092163, 13.662801},
	{-2773.089844, -1289.992554, 13.293401},
	{-2777.545898, -1289.868408, 13.510500},
	{-2793.373535, -1303.570435, 11.489300},
	{-2796.305420, -1304.875854, 13.238900},
	{-2800.079346, -1304.928345, 13.320801},
	{-2795.161865, -1294.657715, 9.219700},
	{-2803.954834, -1297.890381, 12.883400},
	{-2760.342773, -1454.120483, 11.917300},
	{-2768.979980, -1457.009644, 13.480200},
	{-2763.136230, -1259.737549, 14.689600},
	{-2768.465820, -1261.389771, 13.412701},
	{-2776.171143, -1264.656494, 13.772099},
	{-2780.468262, -1266.425171, 11.552401},
	{-2777.160889, -1262.108032, 13.666699},
	{-2809.139648, -1277.934082, 10.882300},
	{-2761.216797, -1246.052734, 13.247700},
	{-2760.465332, -1237.928345, 13.405400},
	{-2766.620361, -1231.973511, 13.279800},
	{-2774.134521, -1232.795654, 15.282899},
	{-2799.015137, -1243.624146, 11.160001},
	{-2771.252686, -1228.851440, 13.772700},
	{-2819.994629, -1257.139038, 10.600901},
	{-2801.128906, -1241.040527, 13.681000},
	{-2804.216797, -1240.584351, 13.630600},
	{-2819.766357, -1249.941040, 12.877100},
	{-2823.629639, -1250.733765, 13.532400},
	{-2801.206787, -1233.172974, 12.988700},
	{-2804.407471, -1233.613159, 13.715899},
	{-2824.150879, -1244.405273, 13.585200},
	{-2828.968018, -1242.233521, 11.989700},
	{-2818.881836, -1231.267944, 13.467000},
	{-2811.937988, -1223.236450, 13.525700},
	{-2818.380127, -1226.838623, 13.266900},
	{-2829.897461, -1233.098145, 11.952300},
	{-2483.381836, -1502.767456, 8.392940},
	{-2800.582764, -1299.616577, 12.722860}
};
new g_svalka_items_id[66][3] =
{
    //{ид предмета, объект предмета, стартовая ставка}
    {104, 10704, 3000},
    {105, 10705, 7000},
    {106, 10706, 13000},
    {115, 10715, 9000},
    {118, 10719, 19000},
    {119, 10718, 21000},
    {117, 10717, 4000},
    {103, 10703, 15000},
    {120, 10720, 15000},
    {122, 10722, 25000},
    {111, 10714, 35000},
    {112, 10713, 62000},
    {113, 10712, 41000},
    {114, 10711, 101000},
    {77, 10508, 22000},
    {78, 10509, 7000},
    {107, 10707, 3000},
    {108, 10708, 9000},
    {109, 10709, 12000},
    {110, 10507, 33000},
    {123, 10723, 41000},
    {74, 10505, 52000},
    {200, 13930, 40000},
    {192, 13922, 60000},
    {29, 10716, 2000},
    {197, 13927, 4000},
    {198, 13928, 4000},
    {199, 13929, 4000},
    {193, 13923, 10000},
    {189, 13949, 100000},
    {194, 13924, 7000},
    {195, 13925, 8000},
    {196, 13926, 9000},
    {301, 16196, 20000},
    {316, 16212, 10000},
    {317, 16214, 10000},
    {318, 16213, 10000},
    {319, 16215, 10000},
    {304, 16200, 500},
    {305, 16201, 300},
    {306, 16202, 300},
    {307, 16203, 250},
    {308, 16204, 150},
    {309, 16205, 150},
    {310, 16206, 1000},
    {311, 16207, 150},
    {312, 16208, 1000},
    {313, 16209, 150},
    {314, 16210, 5000},
    {315, 16211, 3000},
    {148, 10826, 500},
    {149, 10827, 1500},
    {150, 10828, 3000},
    {146, 10825, 1000},
    {147, 10824, 1000},
    {157, 10815, 700},
    {158, 10815, 700},
    {159, 10815, 700},
    {160, 10815, 700},
    {154, 10832, 1000},
    {153, 10831, 1000},
    {188, 13949, 1000},
    {155, 10833, 1000},
    {191, 13952, 1000},
    {156, 10834, 1000},
    {190, 13951, 1000}
};

stock OnCreateSvalka()
{
    for(new i; i < MAX_SVALKA_ITEMS; i++)
    {
        DestroyDynamicObject(g_svalka_items[i][S_ITEM_OBJECT]);

        new random_item = random(65);
        g_svalka_items[i][S_ITEM_OBJECT] = CreateDynamicObject(g_svalka_items_id[random_item][1], g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2], 0.0, 0.0, 0.0);
        alt_svalka_items[i] = CreateDynamicSphere(g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2],2.0,-1,-1);
        g_svalka_items[i][S_ITEM_TIME] = -1;
        g_svalka_items[i][S_ITEM_ID] = g_svalka_items_id[random_item][0];
        g_svalka_items[i][S_ITEM_BID] = g_svalka_items_id[random_item][2];
        g_svalka_items[i][S_ITEM_WIN_ID] = -1;
        g_svalka_items[i][S_ITEM_STATUS] = 1;
    }
    for(new i; i < MAX_SVALKA_CARS; i++)
    {
        DestroyVehicle(g_svalka_cars[i][S_CAR_OBJECT]);

        new random_car = random(264);
        new random_car_izons = RandomEx(50, 100);
        new procent = g_svalka_cars_id[random_car][1] / 150 * random_car_izons;
        new price = (g_svalka_cars_id[random_car][1] - procent) / 3;
        new car_color = random(10);
        g_svalka_cars[i][S_CAR_OBJECT] = CreateVehicle(g_svalka_cars_id[random_car][0],g_svalka_pos_cars[i][0],g_svalka_pos_cars[i][1],g_svalka_pos_cars[i][2],g_svalka_pos_cars[i][3], car_color, 0, 0, 0, VEHICLE_ACTION_TYPE_SVALKA_CAR);
        alt_svalka_cars[i] = CreateDynamicSphere(g_svalka_pos_cars[i][0],g_svalka_pos_cars[i][1],g_svalka_pos_cars[i][2],4.0,-1,-1);
        g_svalka_cars[i][S_CAR_TIME] = -1;
        g_svalka_cars[i][S_CAR_ID] = g_svalka_cars_id[random_car][0];
        g_svalka_cars[i][S_CAR_BID] = price; 
        g_svalka_cars[i][S_CAR_WIN_ID] = -1;
        g_svalka_cars[i][S_CAR_STATUS] = 1;
        g_svalka_cars[i][S_CAR_IZNOS] = random_car_izons;
        g_svalka_cars[i][S_CAR_COLOR] = car_color;
    }
    SendClientMessageToAll(0xead671FF, "Новая партия мусора была доставлена на свалку.");
}

public: Dump_OnPlayerClose(playerid)
{
    g_svalka_playerid[playerid] = -1;
	CEF_HIDE(playerid, "BlackMarket");
	SetCameraBehindPlayer(playerid);

    return true;
}
public: Dump_OnPlayerSetBet(playerid, count)
{	
	if(g_svalka_playerid[playerid] == -1) return 1;

    new svalka_id = g_svalka_playerid[playerid];

    if(g_svalka_playerid_type[playerid] == 1)
    {
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);

        if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999 руб", 3000, 2);

        if(g_svalka_playerid_bet[playerid][0] == g_svalka_cars[svalka_id][S_CAR_BID]) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);

        if(count <= g_svalka_cars[svalka_id][S_CAR_BID]) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);

        if(!VerifyIntString(QueryPlayerBalance(playerid), count - g_svalka_playerid_bet[playerid][0])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

        if(g_svalka_cars[svalka_id][S_CAR_TIME] == -1) 
        {
            g_svalka_cars[svalka_id][S_CAR_TIME] = 30;

            new query[365];
            format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME),
            count,
            GetPlayerNameEx(playerid),
            g_svalka_cars[svalka_id][S_CAR_TIME]
            );
            g_svalka_cars[svalka_id][S_CAR_LABEL] = CreateDynamic3DTextLabel(query, 0xFFFFFFFF, g_svalka_pos_cars[svalka_id][0],g_svalka_pos_cars[svalka_id][1],g_svalka_pos_cars[svalka_id][2], 15.0);
        }
        ModifyCashBalance(playerid, -(count - g_svalka_playerid_bet[playerid][0]), "Ставка на свалке");

        g_svalka_playerid_svalka_id_car[playerid] = svalka_id;
        g_svalka_cars[svalka_id][S_CAR_BID] = count;
	    g_svalka_playerid_bet[playerid][0] = count;

        STRING_GLOBAL[0] = EOS;

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;

            if(g_svalka_cars[svalka_id][S_CAR_WIN_ID] == GetPlayerAccountID(i))
            {
                SCMF(i, 0xFFD700FF, "{FF8C00}%s {FFD700}предложил {FF8C00}%d руб {FFD700}за содержимое аукциона.", GetPlayerNameEx(playerid), count);
            }

            if(g_svalka_playerid[i] == -1) continue;

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').setData('[0,0,0,%d,%d,%d,30,[[0,\"%s\"]]]'", 
            g_svalka_playerid_bet[i][0], 
            g_svalka_cars[svalka_id][S_CAR_BID], 
            g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), 
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME)
            );
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100));
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100));
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", g_svalka_cars[svalka_id][S_CAR_BID]);
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", g_svalka_playerid_bet[i][0]);
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

        }
        g_svalka_cars[svalka_id][S_CAR_WIN_ID] = GetPlayerAccountID(playerid);
        g_svalka_cars[svalka_id][S_CAR_TIME] = 30;
    }
    else if(g_svalka_playerid_type[playerid] == 2)
    {
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);

        if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999 руб", 3000, 2);

        if(g_svalka_playerid_bet[playerid][1] == g_svalka_items[svalka_id][S_ITEM_BID]) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);

        if(count <= g_svalka_items[svalka_id][S_ITEM_BID]) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);

        if(!VerifyIntString(QueryPlayerBalance(playerid), count - g_svalka_playerid_bet[playerid][1])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

        if(g_svalka_items[svalka_id][S_ITEM_TIME] == -1) 
        {
            g_svalka_items[svalka_id][S_ITEM_TIME] = 30;
 
            new query[365];
            format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]],
            count,
            GetPlayerNameEx(playerid),
            g_svalka_items[svalka_id][S_ITEM_TIME]
            );
            g_svalka_items[svalka_id][S_ITEM_LABEL] = CreateDynamic3DTextLabel(query, -1, g_svalka_pos_items[svalka_id][0],g_svalka_pos_items[svalka_id][1],g_svalka_pos_items[svalka_id][2] + 1.5, 15.0);
        }

        ModifyCashBalance(playerid, -(count - g_svalka_playerid_bet[playerid][1]), "Ставка на свалке");

        g_svalka_playerid_svalka_item[playerid] = svalka_id;
        g_svalka_items[svalka_id][S_ITEM_BID] = count;
        g_svalka_playerid_bet[playerid][1] = count;

        STRING_GLOBAL[0] = EOS;

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;

            if(g_svalka_items[svalka_id][S_ITEM_WIN_ID] == GetPlayerAccountID(i))
            {
                SCMF(i, 0xFFD700FF, "{FF8C00}%s {FFD700}предложил {FF8C00}%d руб {FFD700}за содержимое аукциона.", GetPlayerNameEx(playerid), count);
            }

            if(g_svalka_playerid[i] == -1) continue;

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').setData('[0,0,0,%d,%d,%d,30,[[3,\"%s\"]]]'", 
            g_svalka_playerid_bet[i][1], 
            g_svalka_items[svalka_id][S_ITEM_BID], 
            g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100), 
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]]
            );
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100));
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100));
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", g_svalka_items[svalka_id][S_ITEM_BID]);
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", g_svalka_playerid_bet[i][1]);
            CEF_CREATE(i, 1, 2, STRING_GLOBAL);
        }
        g_svalka_items[svalka_id][S_ITEM_WIN_ID] = GetPlayerAccountID(playerid);
        g_svalka_items[svalka_id][S_ITEM_TIME] = 30;
    }
	return true;
}

stock ContraUse(playerid)
{
    if(GetPVarInt(playerid, "ContraTimeUse") > gettime()) return SCM(playerid, COLOR_RED, "Вы недавно открывали сумку с контрабандой");
    
    if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

    new gunpt = RandomEx(15, 50);
    new amountcontr = RandomEx(1, 5);
	new amountnarko = RandomEx(1, 25);

	new gun = RandomEx(1, 11);

	if(gun == 1) GiveWeapon(playerid, 24, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Desert Eagle\" (%d пт.)", gunpt);
    else if(gun == 2) GiveWeapon(playerid, 25, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Дробовик\" (%d пт.)", gunpt);
    else if(gun == 3) GiveWeapon(playerid, 26, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Обрез\" (%d пт.)", gunpt);
    else if(gun == 4) GiveWeapon(playerid, 29, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"MP5\" (%d пт.)", gunpt);
    else if(gun == 5) GiveWeapon(playerid, 30, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Ak-47\" (%d пт.)", gunpt);
    else if(gun == 6) GiveWeapon(playerid, 31, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000}\"M4\" (%d пт.)", gunpt);
    else if(gun == 7) GiveWeapon(playerid, 34, gunpt), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"СВД\" (%d пт.)", gunpt);
    else if(gun == 8) GiveIteam(playerid, 2, 1, amountcontr, 0), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Аптечка\" (%d шт.)", amountcontr);
    else if(gun == 9) GiveIteam(playerid, 25, 1, amountnarko, 0), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Наркотики\" (%d шт.)", amountnarko);
    else if(gun == 10) GiveIteam(playerid, 26, 1, gunpt, 0), SCMF(playerid, COLOR_WHITE, "Вы открыли сумку с контрабандой и получили {FF0000} \"Патроны\" (%d шт.)", gunpt);

	contraband_amount--;
    Contraband_UpdateLabel();
    
    SetPVarInt(playerid, "ContraTimeUse", gettime() + 60);

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, 0, 0, 0, 0);
    return 1;
}

stock GiveRandCase(playerid)
{
    switch(random(350))
	{
		case 0:
		{
			SCM(playerid, 0x3399FFFF, "Вы успешно получили ключ от{ffffff}любого кейса!{3399FF} Воспользоваться им можно через инвентарь");
			GiveIteam(playerid, 259, 1, 1, 0);
			CEF_CREATE(playerid, 1, 2, "interface('ScreenNotification').add('[1, \"Информация\", \"Вы получили новую награду!\", \"8b00ff\", 5000]')");
		}
		case 1:
		{
            new case_id[] = {258, 261, 272, 278, 284, 290, 300, 328, 344, 348, 350, 355, 356, 360};
			new case_name[][64] = {"Форсаж", "Темные дела", "Велесова ночь", "Оперской", "Новогодний", "Черное золото", "Охотничий", "Египетская сила", "Велесова ночь 2", "Рождественский экспресс", "Путь воина", "Пиратский", "Проклятие", "Зимняя сказка"};
            new add = RandomEx(0, sizeof(case_id) - 1);
			
			new casename[64];
            format(casename, sizeof(casename), "%s", case_name[add]);

			SCMF(playerid, 0x3399FFFF, "Вы успешно получили кейс {ffffff}`%s`{3399FF}, взаимодействовать с ним можно через инвентарь", casename);
			GiveIteam(playerid, case_id[add], 1, 1, 0);
			CEF_CREATE(playerid, 1, 2, "interface('ScreenNotification').add('[1, \"Информация\", \"Вы получили новую награду!\", \"8b00ff\", 5000]')");
		}
	}
    return 1;
}

stock OnPlayerOpenDump(playerid, svalka_id, type)
{
    g_svalka_playerid[playerid] = svalka_id;
    g_svalka_playerid_type[playerid] = type;

    if(type == 2) 
    {
        string_dialog[0] = EOS;
        format
        (
            string_dialog, sizeof string_dialog,
            "{FFFFFF}Вы что-то нашли, хотите прейти к торгам за этот предмет?\n\
            \n\
            {cda70e}Наименование: %s\n\
            {FFFFFF}Начальная стоимость: {cda70e}%d руб\n\
            \n\
            {FFFFFF}Эту награду можно будет продать в антикварном магазине.",
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]], g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100)
        );

        IntfDialogCallRemote
        (
            playerid, DIALOG_BET_SVALKA, DIALOG_STYLE_MSGBOX, 
            "Информация", 
            string_dialog,
            "Далее", "Закрыть"
        );
    }
    else
    {
        string_dialog[0] = EOS;
        format
        (
            string_dialog, sizeof string_dialog,
            "{FFFFFF}Вы хотите перейти к торгам за это транспортное средство?\n\
            \n\
            {cda70e}Модель: %s\n\
            {FFFFFF}Начальная стоимость: {cda70e}%d руб\n\
            {FFFFFF}Износ: {c77124}%d%",
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME), g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), g_svalka_cars[svalka_id][S_CAR_IZNOS]
        );

        IntfDialogCallRemote
        (
            playerid, DIALOG_BET_SVALKA, DIALOG_STYLE_MSGBOX, 
            "Информация", 
            string_dialog,
            "Далее", "Закрыть"
        );
    }
    return 1;
}

stock OnPlayerOpenDumpInterface(playerid, svalka_id, type)
{
    g_svalka_playerid[playerid] = svalka_id;
    g_svalka_playerid_type[playerid] = type;

    if(type == 1) 
    {
        if(g_svalka_cars[svalka_id][S_CAR_TIME] == 0) return 1;

        if(g_svalka_playerid_svalka_id_car[playerid] != -1 && g_svalka_playerid_svalka_id_car[playerid] != svalka_id) return SCM(playerid, COLOR_YELLOW, "Вы уже начали торги за другой транспорт");

        STRING_GLOBAL[0] = EOS;

        new time_bet;

        if(g_svalka_cars[svalka_id][S_CAR_TIME] == -1) time_bet = 30;
        else time_bet = g_svalka_cars[svalka_id][S_CAR_TIME];

        format
        (	
            STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,0,%d,%d,%d,%d,[[0,\"%s\"]]]", 
            g_svalka_playerid_bet[playerid][0], 
            g_svalka_cars[svalka_id][S_CAR_BID], 
            g_svalka_cars[svalka_id][S_CAR_BID] + (g_svalka_cars[svalka_id][S_CAR_BID] / 100), 
            time_bet,
            GetVehicleInfo(g_svalka_cars[svalka_id][S_CAR_ID], VI_NAME)
        );
    }
    else if(type == 2)
    {
        if(g_svalka_items[svalka_id][S_ITEM_TIME] == 0) return 1;

        if(g_svalka_playerid_svalka_item[playerid] != -1 && g_svalka_playerid_svalka_item[playerid] != svalka_id) return SCM(playerid, COLOR_YELLOW, "Вы уже начали торги за другую вещь");

        new time_bet;

        if(g_svalka_items[svalka_id][S_ITEM_TIME] == -1) time_bet = 30;
        else time_bet = g_svalka_items[svalka_id][S_ITEM_TIME];

        STRING_GLOBAL[0] = EOS;
        format
        (	
            STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,0,%d,%d,%d,%d,[[3,\"%s\"]]]", 
            g_svalka_playerid_bet[playerid][1], 
            g_svalka_items[svalka_id][S_ITEM_BID], 
            g_svalka_items[svalka_id][S_ITEM_BID] + (g_svalka_items[svalka_id][S_ITEM_BID] / 100), 
            time_bet,
            ItemsInfo[g_svalka_items[svalka_id][S_ITEM_ID]]
        );
    }
    CEF_CREATE(playerid, 2, 4,"BlackMarket", STRING_GLOBAL);
    return true;
}


stock Dump()
{
    for(new i; i < MAX_SVALKA_CARS; i++)
    {
        if(g_svalka_cars[i][S_CAR_TIME] == 0 || g_svalka_cars[i][S_CAR_TIME] == -1) continue;

        g_svalka_cars[i][S_CAR_TIME]--;

        new query[248];
        format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
        GetVehicleInfo(g_svalka_cars[i][S_CAR_ID], VI_NAME),
        g_svalka_cars[i][S_CAR_BID],
        GetPlayerNameEx(GetPlayerIDBySqlID(g_svalka_cars[i][S_CAR_WIN_ID])),
        g_svalka_cars[i][S_CAR_TIME]
        );
        UpdateDynamic3DTextLabelText(g_svalka_cars[i][S_CAR_LABEL], 0xFFFFFFFF, query);

        if(g_svalka_cars[i][S_CAR_TIME] == 0)
        {
            DestroyDynamic3DTextLabel(g_svalka_cars[i][S_CAR_LABEL]);
            DestroyDynamicArea(alt_svalka_cars[i]);
            DestroyVehicle(g_svalka_cars[i][S_CAR_OBJECT]);

            new Random_car = random(10);

            format
            (
                query, sizeof query, 
                "INSERT INTO ownable_cars (owner_id,model_id,color_1,color_2,vinil,pos_x,pos_y,pos_z,angle,create_time,iznos) VALUES ('%d','%d','%d','%d','%d','%f','%f','%f','%f','%d','%d')",
                g_svalka_cars[i][S_CAR_WIN_ID],
                g_svalka_cars[i][S_CAR_ID],
                g_svalka_cars[i][S_CAR_COLOR],
                0,
                -1,
                g_svalka_pos_cars_win[Random_car][0],
                g_svalka_pos_cars_win[Random_car][1],
                g_svalka_pos_cars_win[Random_car][2],
                g_svalka_pos_cars_win[Random_car][3],
                gettime(),
                g_svalka_cars[i][S_CAR_IZNOS]
            );
            mysql_query(mysql, query, false);

            foreach(new idx: Player)
            {
                if(!IsPlayerConnected(idx)) continue;
                else if(!IsPlayerLogged(idx)) continue;

                if(g_svalka_playerid_svalka_id_car[idx] != i) continue;

                new win_id = GetPlayerIDBySqlID(g_svalka_cars[i][S_CAR_WIN_ID]);

	            if(win_id != INVALID_PLAYER_ID)
                {
                    format(query, sizeof query, "{FF8C00}%s {32CD32}одерживает победу в аукционе за {FF8C00}%d руб.", GetPlayerNameEx(win_id), g_svalka_playerid_bet[win_id][0]);
                    SCM(idx, 0x32CD32FF, query);
                }

                CEF_HIDE(idx, "BlackMarket");

                if(g_svalka_cars[i][S_CAR_WIN_ID] == GetPlayerAccountID(idx))
                {
                    g_svalka_playerid_bet[idx][0] = 0;
                    g_svalka_playerid_svalka_id_car[idx] = -1;
                    SCM(idx, 0x7CFC00FF, "Вы получили своё транспортное средство со свалки, при спавне оно появится возле вогонов.");
                    OnBattlePass_Perfomance(idx, 16, 1);
                }
                else
                {
                    ModifyCashBalance(idx, g_svalka_playerid_bet[idx][0], "Возврат ставки на свалке");
                    g_svalka_playerid_svalka_id_car[idx] = -1;
                    g_svalka_playerid_bet[idx][0] = 0;

                }
            }
        }
    }
    for(new i; i < MAX_SVALKA_ITEMS; i++)
    {
        if(g_svalka_items[i][S_ITEM_TIME] == 0 || g_svalka_items[i][S_ITEM_TIME] == -1) continue;

        g_svalka_items[i][S_ITEM_TIME]--;

        new query[248];
        format(query, sizeof query, "{FFFFFF}Аукцион\n{FFD700}%s\n{FFFFFF}Текущая стоимость: {FF8C00}%d руб\n{FFFFFF}Предложил: %s\n\nДо завершения аукциона осталось\n{FF8C00}%d {FFFFFF}сек",
        ItemsInfo[g_svalka_items[i][S_ITEM_ID]],
        g_svalka_items[i][S_ITEM_BID],
        GetPlayerNameEx(GetPlayerIDBySqlID(g_svalka_items[i][S_ITEM_WIN_ID])),
        g_svalka_items[i][S_ITEM_TIME]
        );
        UpdateDynamic3DTextLabelText(g_svalka_items[i][S_ITEM_LABEL], 0xFFFFFFFF, query);

        if(g_svalka_items[i][S_ITEM_TIME] == 0)
        {
            DestroyDynamic3DTextLabel(g_svalka_items[i][S_ITEM_LABEL]);
            DestroyDynamicArea(alt_svalka_items[i]);
            DestroyDynamicObject(g_svalka_items[i][S_ITEM_OBJECT]);

            format
            (
                query, sizeof query , 
                "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', %d, %d, %d, %d, %d)", 
                g_svalka_items[i][S_ITEM_WIN_ID], 
                ItemsInfo[g_svalka_items[i][S_ITEM_ID]], 
                8, 
                g_svalka_items[i][S_ITEM_ID],
                0, 
                1, 
                0
            );

            mysql_query(mysql, query, false);

            foreach(new idx: Player)
            {
                if(!IsPlayerConnected(idx)) continue;
                else if(!IsPlayerLogged(idx)) continue;

                if(g_svalka_playerid_svalka_item[idx] != i) continue;

                new win_id = GetPlayerIDBySqlID(g_svalka_items[i][S_ITEM_WIN_ID]);

	            if(win_id != INVALID_PLAYER_ID)
                {
                    format(query, sizeof query, "{FF8C00}%s {32CD32}одерживает победу в аукционе за {FF8C00}%d руб.", GetPlayerNameEx(win_id), g_svalka_playerid_bet[win_id][1]);
                    SCM(idx, 0x32CD32FF, query);
                }

                CEF_HIDE(idx, "BlackMarket");

                if(g_svalka_items[i][S_ITEM_WIN_ID] == GetPlayerAccountID(idx))
                {
                    g_svalka_playerid_bet[idx][1] = 0;
                    g_svalka_playerid_svalka_item[idx] = -1;
                    SCM(idx, 0x7CFC00FF, "Вы получили свой предмет со свалки, оно находится в разделе `Мои награды`.");
                    OnBattlePass_Perfomance(idx, 16, 1);
                }
                else
                {
                    ModifyCashBalance(idx, g_svalka_playerid_bet[idx][1], "Возврат ставки на свалке");
                    g_svalka_playerid_svalka_item[idx] = -1;
                    g_svalka_playerid_bet[idx][1] = 0;
                }
            }
        }
    }
}
cmd:svalkaspawn(playerid)
{
    if(GetPlayerData(playerid, P_CMD_dumpspawn) == 0)
	{
        if(IsPlayerAdminLevel(playerid) < 7) return 1;
        if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
    }
	OnCreateSvalka();
    return 1;
}
cmd:contdel(playerid)
{
    if(IsPlayerAdminLevel(playerid) < 7) return 1;
    if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
    for(new i; i < MAX_CONTAINERS; i++)
	{
       DellContainers(i);
	}
	SendClientMessage(playerid, COLOR_GREEN, "Вы успешно удалили контейнеры");
    return 1;
}

CMD:spawn_contraband(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return 1;
    Contraband_Spawn();
    return true;
}

new status_player_blackmarket[MAX_PLAYERS]; // открыто/закрыто меню
new type_blackmarket; // тип валюты донат/вирты
new bet_player_blackmarket[MAX_PLAYERS]; // ставка игрока
new last_bet_blackmarket; // последняя ставка
new time_blackmarket[2]; // 0 - время до начала | 1 - время до конца
new winner_player_blackmarket; // номер аккаунта игрока который выигрывает в аукционе

new dlya_vadima;

#define MAX_PRIZE_BLACKMARKET	(2)

new type_prize_blackmarket[MAX_PRIZE_BLACKMARKET]; // 0 - авто | 1 - одежда | 2 - аксессуар | 3 - предмет
new id_prize_blackmarket[MAX_PRIZE_BLACKMARKET];
//new count_prize_blackmarket[MAX_PRIZE_BLACKMARKET];

new Text3D: text_blackmarket; // текст в ангаре
new object_blackmarket[2]; // объект в ангаре | 0 - машина , 1 - нпс

stock OnPlayerOpenBlackMarket(playerid)
{
	status_player_blackmarket[playerid] = 1;

	if(time_blackmarket[1] != 0)
	{
		STRING_GLOBAL[0] = EOS;
		for(new i; i < MAX_PRIZE_BLACKMARKET; i++)
		{
			new query[64];
			if(type_prize_blackmarket[i] == 0) format(query, sizeof query, "[%d,\"%s\"],", type_prize_blackmarket[i], GetVehicleInfo(id_prize_blackmarket[i], VI_NAME));
			else if(type_prize_blackmarket[i] == 1) format(query, sizeof query, "[%d,\"Одежда [№ %d]\"],", type_prize_blackmarket[i], id_prize_blackmarket[i]);
			else if(type_prize_blackmarket[i] == 2) format(query, sizeof query, "[%d,\"Аксессуар [№ %d]\"],", type_prize_blackmarket[i], id_prize_blackmarket[i]);
			else format(query, sizeof query, "[%d,\"%s\"],", type_prize_blackmarket[i], ItemsInfo[id_prize_blackmarket[i]]);
			strcat(STRING_GLOBAL, query);
		}
		new str_len = strlen(STRING_GLOBAL);
		strdel(STRING_GLOBAL, str_len - 1, str_len);

		format
		(	
			STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,0,%d,%d,%d,%d,%d,[%s]]", 
			type_blackmarket, 
			bet_player_blackmarket[playerid], 
			last_bet_blackmarket, 
			last_bet_blackmarket + (last_bet_blackmarket / 100), 
			time_blackmarket[1], 
			STRING_GLOBAL
		);

		CEF_CREATE(playerid, 2, 4,"BlackMarket", STRING_GLOBAL);
		
		if(type_blackmarket == 0) GameText(playerid, "Данный аукцион~n~~r~принимает только деньги", 3000, 2);

		if(type_blackmarket == 1) GameText(playerid, "Данный аукцион~n~~y~принимает только донат", 3000, 2);

		SetPlayerCameraPos(playerid,-1766.024414,2891.523437,7.521500);
        SetPlayerCameraLookAt(playerid,-1759.6050,2894.0237,5.9712);
	}

	return true;
}

public: BlackMarket_OnPlayerClose(playerid)
{
	if(g_svalka_playerid[playerid] != -1) return Dump_OnPlayerClose(playerid);

	status_player_blackmarket[playerid] = 0; 
	CEF_HIDE(playerid, "BlackMarket");
	SetCameraBehindPlayer(playerid);

	return true;
}
public: BlackMarket_OnPlayerSetBet(playerid, count)
{
	if(g_svalka_playerid[playerid] != -1) return Dump_OnPlayerSetBet(playerid, count);
	
	if(status_player_blackmarket[playerid] != 1) return 1;

	if(time_blackmarket[1] == 0) return GameText(playerid, "Аукцион окончен", 3000, 0);

	if(count > 1999999999) return GameText(playerid, "Максимальная допустимая ставка~r~~n~1.999.999.999", 3000, 2);

	if(bet_player_blackmarket[playerid] == last_bet_blackmarket) return GameText(playerid, "Вы уже поставили максимальную ставку", 3000, 0);

	if(count <= last_bet_blackmarket) return GameText(playerid, "Нельзя поставить ставку равной или меньше текущей", 3000, 0);

	if(type_blackmarket == 0) 
	{
		if(!VerifyIntString(QueryPlayerBalance(playerid), count - bet_player_blackmarket[playerid])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		ModifyCashBalance(playerid, -(count - bet_player_blackmarket[playerid]), "Ставка на Черном рынке", true, true);
	}
	if(type_blackmarket == 1) 
	{
		if(QueryPlayerDonationBalance(playerid) < (count - bet_player_blackmarket[playerid])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		ProcessPlayerCredit(playerid, -(count - bet_player_blackmarket[playerid]), "Ставка на Черном рынке", true, true);
	}

	SetPlayerData(playerid, P_BLACK_MARKET_BET, count);
	UpdatePlayerDatabaseInt(playerid, "black_market_bet", GetPlayerData(playerid, P_BLACK_MARKET_BET));

	last_bet_blackmarket = count;
	bet_player_blackmarket[playerid] = count;
	time_blackmarket[1] = time_blackmarket[1] + 10;

	foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;

		if(winner_player_blackmarket == GetPlayerAccountID(i))
		{
			SCMF(i, COLOR_BLUENEW, "Игрок {FFFFFF}%s [%d] {B8CEF6}Перебил вашу ставку на аукционе `Чёрный рынок`", GetPlayerNameEx(playerid), playerid);
		}

		if(status_player_blackmarket[i] != 1) continue;

		STRING_GLOBAL[0] = EOS;

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').bet = %d", last_bet_blackmarket + (last_bet_blackmarket / 100));
		CEF_CREATE(i, 1, 2, STRING_GLOBAL);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').minBet = %d", last_bet_blackmarket + (last_bet_blackmarket / 100));
		CEF_CREATE(i, 1, 2, STRING_GLOBAL);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').currentBet = %d", last_bet_blackmarket);
		CEF_CREATE(i, 1, 2, STRING_GLOBAL);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('BlackMarket').myBet = %d", bet_player_blackmarket[i]);
		CEF_CREATE(i, 1, 2, STRING_GLOBAL);
	}
	
	if(winner_player_blackmarket) CreatePlayerNotification(winner_player_blackmarket, "Чёрный рынок", "Вашу ставку на аукционе `Чёрный рынок` перебили");

	winner_player_blackmarket = GetPlayerAccountID(playerid);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffa500}Лот {FFFFFF}№1\n {ffa500}Ставка: {FFFFFF}%s", formatInt(last_bet_blackmarket));
    UpdateDynamic3DTextLabelText(text_blackmarket, 0xFFFFFFEE, STRING_GLOBAL);
	return true;
}

stock BlackMarket()
{
	if(time_blackmarket[0] != 0)
	{
		time_blackmarket[0]--;
		if(time_blackmarket[0] == 0)
		{
			time_blackmarket[1] = dlya_vadima;

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffa500}Лот {FFFFFF}№1\n {ffa500}Ставка: {FFFFFF}%s", formatInt(last_bet_blackmarket));
			text_blackmarket = CreateDynamic3DTextLabel(STRING_GLOBAL, 0xFFFFFFFF, -1759.6050,2894.0237,6.9712 + 0.1, 8.0);

			for(new i; i < MAX_PRIZE_BLACKMARKET; i++)
			{
				if(type_prize_blackmarket[i] == 0)
				{
					object_blackmarket[0] = CreateVehicle(id_prize_blackmarket[i],-1759.6050,2894.0237,5.9712,90.3436, 1, 1, -1, 0, VEHICLE_ACTION_TYPE_BLACKMARKET);
					SetVehicleVirtualWorld(object_blackmarket[0], 4);
				}
				if(type_prize_blackmarket[i] == 1)
				{
					object_blackmarket[1] = CreateActor(id_prize_blackmarket[i], -1762.5723,2892.5132,6.0870,114.7690);
					SetActorVirtualWorld(object_blackmarket[1], 4);
				}
			}
			SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");
			SendClientMessageToAll(COLOR_BLUENEW, "Прямо сейчас стартует Чёрный рынок с эксклюзивными авто и одеждой.");
			SendClientMessageToAll(COLOR_BLUENEW, "Место проведение Черного рынка — ангар недалеко от контейнеров.");
			SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");
		}
	}
	else if(time_blackmarket[1] != 0)
	{
		time_blackmarket[1]--;
		if(time_blackmarket[1] == 0)
		{
			DestroyVehicle(object_blackmarket[0]);
			DestroyActor(object_blackmarket[1]);
            DestroyDynamic3DTextLabel(text_blackmarket);

			new player_win = -1;
			foreach(new i: Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;

				if(bet_player_blackmarket[i] != 0)
				{
					if(winner_player_blackmarket != GetPlayerAccountID(i)) 
					{
						GameText(i, "Аукцион черного рынка окончен~n~вы ~r~проиграли", 3000, 0);

						SCM(i, COLOR_YELLOW, "Вам вернули вашу ставку с аукциона `Чёрный рынок` находятся в `Мои награды`");

						if(type_blackmarket == 0) GivePlayerMyPrizes(i, "Деньги", 5, 0, 0, bet_player_blackmarket[i], 0);
						else if(type_blackmarket == 1) GivePlayerMyPrizes(i, "Донат", 10, 0, 0, bet_player_blackmarket[i], 0);

					}
					if(winner_player_blackmarket == GetPlayerAccountID(i)) 
					{
						GameText(i, "Аукцион черного рынка окончен~n~вы ~g~выиграли", 3000, 0);
						player_win = i;
						AddPlayerAchiv(i, 42);
						SCM(i, COLOR_YELLOW, "Ваш выигрыш с аукциона `Чёрный рынок` находится в `Мои награды`");
					}
				}

				if(bet_player_blackmarket[i] == 0) continue;
				bet_player_blackmarket[i] = 0;

				
			}
			if(winner_player_blackmarket != 0)
			{
				new query[256];
				STRING_GLOBAL[0] = EOS;

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s [№%d]", GetVehicleInfo(id_prize_blackmarket[0], VI_NAME), id_prize_blackmarket[0]);
				format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', 3, %d, 0, 1, -1)", winner_player_blackmarket, STRING_GLOBAL, id_prize_blackmarket[0]);
				mysql_tquery(mysql, query, "", "");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Одежда [№%d]", id_prize_blackmarket[1]);
				format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', 4, %d, 0, 1, 0)", winner_player_blackmarket, STRING_GLOBAL, id_prize_blackmarket[1]);
				mysql_tquery(mysql, query, "", "");

				if(player_win != -1)
				{
					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Победил в аукционе `Черный рынок` {FFFFFF}%s [%d]", GetPlayerNameEx(player_win), player_win);
					SendClientMessageToAll(COLOR_BLUENEW, STRING_GLOBAL);
				}
				winner_player_blackmarket = 0;
			}
		}
	}
	return true;
}
cmd:add_black_market(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new type, vehicleid, skin, count, time, time_2; else return SCM(playerid, COLOR_GREY, "/add_black_market [тип: 0 деньги | 1 донат] [id авто] [id скина] [начальная сумма ставки] [время до начала (в сек)] [время аукциона (в сек)]");

	if(time_blackmarket[1] != 0) return SCM(playerid, COLOR_RED, "*Аукцион уже идет!");
	if(time_blackmarket[0] != 0) return SCM(playerid, COLOR_RED, "*Аукцион уже идет!");

	type_blackmarket = type;
	time_blackmarket[0] = time;
	last_bet_blackmarket = count;

	type_prize_blackmarket[0] = 0;
	id_prize_blackmarket[0] = vehicleid;

	type_prize_blackmarket[1] = 1;
	id_prize_blackmarket[1] = skin;
	dlya_vadima = time_2;

	winner_player_blackmarket = 0;

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		if(bet_player_blackmarket[i] != 0) 
			bet_player_blackmarket[i] = 0;
	}

	SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");
	SendClientMessageToAll(COLOR_BLUENEW, "Любителям аукционов приготовиться!");
	SendClientMessageToAll(COLOR_BLUENEW, "Уже ближайшее время стартует Чёрный рынок с эксклюзивными авто и одеждой.");
	SendClientMessageToAll(COLOR_BLUENEW, "Место проведение Черного рынка — ангар недалеко от контейнеров.");
	SendClientMessageToAll(COLOR_BLUENEW, "------------------------------ Чёрный Рынок ------------------------------");

	return 1;
}

CMD:i(playerid, params[])
{
	new stationid = GetNearestBusiness(playerid, 10.0);
		
	if(stationid == -1) return 1;

	new vehicleid = GetPlayerVehicleID(playerid);
	new modelid = GetVehicleData(vehicleid, V_MODELID);
	new index = GetVehicleData(vehicleid, V_MODELID)  ;
    
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");
		if(modelid == 15641 || modelid == 15647 || modelid == 15126 || modelid == 543 || modelid == 15192 || modelid == 15104 || modelid == 15110 || modelid == 15627 || modelid == 15639 || modelid == 15288) return SendClientMessage(playerid, 0xCECECEFF, "В транспортном средстве установлен электродвигатель, вы не сможете заправить его бензином.");
		if(GetBusinessData(stationid, B_TYPE) != 37) return SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");

		if(IsPlayerDriver(playerid) && IsPlayerInVehicle(playerid, vehicleid) && 0 <= stationid <= g_business_loaded)
		{
			if(GetBusinessData(stationid, B_LOCK_STATUS)) return GameText(playerid, "~w~АЗС~n~~r~~h~закрыта", 3000, 2);
			if(GetVehicleData(vehicleid, V_FUEL) + 1.0 >= GetVehicleInfo(index, VI_MAX_FUEL)) return GameText(playerid, "~r~Ваш Бензобак~n~полон", 3000, 2);
			if(GetBusinessData(stationid, B_PRODS) < 10) return GameText(playerid, "~r~В данной азс~n~нет топлива", 3000, 2);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0, %d, %d, %d]", floatround(GetVehicleData(vehicleid, V_FUEL)), GetVehicleInfo(index, VI_MAX_FUEL), GetBusinessData(stationid, B_PROD_PRICE));
			CEF_CREATE(playerid, 2, 4, "Fuel", STRING_GLOBAL);
		}
		//BattlePass_Completingtasks(playerid, 1, 2);
	}
	return 1;
}
CMD:ic(playerid)
{
   	new vehicleid = GetPlayerVehicleID(playerid);
   	new modelid = GetVehicleData(vehicleid, V_MODELID);

	new stationid = GetNearestBusiness(playerid, 35.0);
	if(GetBusinessData(stationid, B_PRODS) < 10) return GameText(playerid, "~r~В данной азс~n~нет топлива", 3000, 2);

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 740.6722,2593.2686,12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.7357,1216.0225,4.9021) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.3786,407.8583,12.0000) 
	|| IsPlayerInRangeOfPoint(playerid, 15.0, -2603.8452,-11.4564,12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, 2222.0361,-1700.8455,22.0557) || IsPlayerInRangeOfPoint(playerid, 15.0, 1884.8348,-2943.7678,3.8352) 
	|| IsPlayerInRangeOfPoint(playerid, 15.0, 1912.0714,-848.0580,15.7839) || IsPlayerInRangeOfPoint(playerid, 15.0, -2557.9216,1946.0831,52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 3970.4331,4347.5366,7.9306) 
	|| IsPlayerInRangeOfPoint(playerid, 15.0, -2042.2933,-1984.5055,8.5077) || IsPlayerInRangeOfPoint(playerid, 15.0, 2553.3914,-2399.2551,21.8503))
	{
		if(modelid == 15641 || modelid == 15647 || modelid == 15126 || modelid == 543 || modelid == 15192 || modelid == 15104 || modelid == 15110 || modelid == 15627 || modelid == 15639 || modelid == 15288)
		{
			if(!IsPlayerDriver(playerid) && !IsPlayerInVehicle(playerid, vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");
		
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1, %d, 100, 250000]", floatround(GetVehicleData(vehicleid, V_FUEL)));
			CEF_CREATE(playerid, 2, 4, "Fuel", STRING_GLOBAL);
			
			SetPVarInt(playerid, "VidTopliva", 1);
		}
	}
	return 1;
}

public:OnPlayerFillClose(playerid)
{
	SetPVarInt(playerid, "VidTopliva", 0);
	CEF_HIDE(playerid, "Fuel");
	return true;
}
public: OnPlayerStartFill(playerid, event, fuel)
{
    new stationid = GetNearestBusiness(playerid, 35.0);
    new vehicleid = GetPlayerVehicleID(playerid);

	new fuels = fuel - floatround(GetVehicleData(vehicleid, V_FUEL));
    new price = fuels * GetBusinessData(stationid, B_PROD_PRICE);

	if(GetPVarInt(playerid, "VidTopliva") != 1) return SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), CEF_HIDE(playerid, "Fuel");
	
	if(!VerifyIntString(QueryPlayerBalance(playerid), price)) return GameText(playerid, "~r~недостаточно~n~средств", 3000, 2);
    ModifyCashBalance(playerid, -price, "Покупка топлива на заправке", true, true);

	OnBattlePass_Perfomance(playerid, 11, fuels);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~b~+%d Л~n~~r~-%d РУБ", fuels, price);
	GameText(playerid, STRING_GLOBAL, 4000, 2);

    SetVehicleData(vehicleid, V_FUEL, fuel);
	CEF_CREATE(playerid, 1, 2, "interface('Fuel').stopFilling()");

	AddBusinessProfit(playerid, stationid, (price / 2), fuels);
	return 1;
}
stock OnPlayerSelectFuelClass(playerid, event)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_MODELID);

 	switch(event)
 	{
 		case 0:
		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 92) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
		}
 		case 1:
		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 95) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
		}
 		case 2: 
 		{
			if(GetVehicleInfo(index, VI_TYPE_FUEL) == 98) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
	 	}
 		case 3:
 		{
 		    if(GetVehicleInfo(index, VI_TYPE_FUEL) == 33) SetPVarInt(playerid, "VidTopliva", 1);
			else SCM(playerid, 0x999999FF, "Выбранный тип топлива не подходит к Вашему ТС."), SetPVarInt(playerid, "VidTopliva", 0);
	 	}
 	}
}
new active_acs_id[MAX_PLAYERS];
new active_acs[MAX_PLAYERS];

#define MAX_ACTIVE_ACS 4

enum E_ACTIVE_ACCESSORIES_STRUCT
{
	ACTIVE_ACS_ID,
	ACTIVE_ACS_NAME[24]
};

new g_info_active_accessories[MAX_ACTIVE_ACS][E_ACTIVE_ACCESSORIES_STRUCT] = 
{
	{17163, "Гидроцикл"},
	{16229, "Велосипед"},
	{17273, "MB Brabus Kart"},
	{17607, "Иж Педальный"}
};

stock GetActiveAcsName(acs_id)
{
	new fmt_text[24];
	for(new i; i < sizeof g_info_active_accessories; i++)
	{
		if(g_info_active_accessories[i][ACTIVE_ACS_ID] != acs_id)
			continue;

		format(fmt_text, sizeof fmt_text, "%s", g_info_active_accessories[i][ACTIVE_ACS_NAME]);
		break;
	}

	return fmt_text;
}

enum E_NAME_ACCESSORIES_STRUCT
{
	ACS_ID,
	ACS_NAME[64]
};

new g_info_name_accessories[25][E_NAME_ACCESSORIES_STRUCT] = 
{
	{15736, "Ёлка на крышу"},
	{15737, "Антены"},
	{15738, "Сноуборд"},
	{15739, "Автобокс"},
	{15740, "Ватрушка"},
	{15741, "Багажник"},
	{15892, "Канистры"},
	{15894, "Маскировочная сеть"},
	{15895, "Маскировочная сеть"},
	{15896, "Колючая проволока"},
	{15967, "Кенгурятник"},
	{16229, "Велосипед"},
	{16512, "Доска для серфинга"},
	{16866, "Подарки"},
	{16867, "Феерверки"},
	{15874, "Мишка"},
	{15873, "Кольца"},
	{15872, "Воздушные шарики"},
	{15871, "Воздушные шарики"},
	{17163, "Гидроцикл"},
	{17273, "MB Brabus Kart"},
	{17637, "Труп"},
	{17272, "Лодка"},
	{17607, "Иж педальный"},
	{18540, "Пуш бампер"}
};

stock GetAcsName(acs_id, name[], size = sizeof name)
{
    for(new i; i < sizeof g_info_name_accessories; i++)
    {
        if(g_info_name_accessories[i][ACS_ID] == acs_id)
        {
            format(name, size, "%s", g_info_name_accessories[i][ACS_NAME]);
            return 1;
        }
    }

    format(name, size, "Аксессуар");
    return 0;
}

stock IsActiveAcsID(acs_id)
{
	for(new i; i < sizeof g_info_active_accessories; i++)
	{
		if(g_info_active_accessories[i][ACTIVE_ACS_ID] != acs_id)
			continue;

		return 1;
	}
	return 0;
}

enum E_ACCESSORIES_STRUCT
{
	ACS_TYPE,
	ACS_COUNT,
    ACS_ID,
    ACS_NAME[32],
    ACS_PRICE,
    ACS_INDEX
};
new g_load_accessories_shop[121][E_ACCESSORIES_STRUCT] = 
{
 	{0, 0, 19006, "Красные", 300000, 0}, 
	{0, 1, 19007, "Желтые", 350000, 0}, 
	{0, 2, 19008, "Зеленые", 350000, 0},
	{0, 3, 19009, "Синие", 350000, 0}, 
	{0, 4, 19010, "Розовые", 350000, 0},
	{0, 5, 19011, "Гипноз", 350000, 0},
	{0, 6, 19012, "Черные", 350000, 0},
	{0, 7, 19013, "Глаза", 350000, 0},
	{0, 8, 19014, "Шахматы", 350000, 0},
	{0, 9, 19015, "Обычные", 350000, 0},
	{0, 10, 19016, "X-Ray", 350000, 0},
	{0, 11, 13953, "Для сноуборда", 8750000, 0},
	{0, 12, 13995, "Gucci", 1050000, 0},
	{0, 13, 13996, "American", 1050000, 0},
	{0, 14, 13997, "С обводкой", 1050000, 0},
	{0, 15, 13998, "Синий тигр", 1050000, 0},
	{0, 16, 13999, "Желтые", 1050000, 0},
	{0, 17, 14462, "Модные очки", 1665000, 0},
	{1, 0, 18908, "Морская", 850000, 0},
	{1, 1, 18909, "Небо", 850000, 0},
	{1, 2, 18910, "Огненная", 850000, 0},
	{1, 3, 13969, "Пустыня", 1500000, 0},
	{2, 0, 18891, "Пингвин", 1500000, 0},
	{2, 1, 18892, "Свинья", 1500000, 0},
	{2, 2, 18893, "Кошка", 1500000, 0},
	{2, 3, 18894, "Белый медведь", 1500000, 0},
	{2, 4, 18895, "Лошадь", 1500000, 0},
	{2, 5, 18896, "Кобра", 1500000, 0},
	{2, 6, 18897, "Заяц", 1500000, 0},
	{2, 7, 18898, "Бурый медведь", 1500000, 0},
	{2, 8, 18899, "Сова", 1500000, 0},
	{2, 9, 18900, "Петух", 1500000, 0},
	{2, 10, 18901, "Мышь", 1500000, 0},
	{2, 11, 18902, "Зебра", 1500000, 0},
	{2, 12, 18903, "Тигрица", 1500000, 0},
	{2, 13, 18904, "Тигр", 1500000, 0},
	{2, 14, 18905, "Лягушка", 1500000, 0},
	{2, 15, 18911, "Свинья 2", 1500000, 0},
	{2, 16, 18912, "Монстр", 1500000, 0},
	{2, 17, 18913, "Мясник", 1500000, 0},
	{2, 18, 18914, "Обезьяна", 1500000, 0},
	{2, 19, 18915, "Обезьяна 2", 1500000, 0},
	{2, 20, 18916, "Карнавал", 1500000, 0},
	{2, 21, 18918, "Гном", 1500000, 0},
	{2, 22, 18919, "Печенька", 1500000, 0},
	{2, 23, 18920, "Снеговик", 1500000, 0},
	{2, 24, 13954, "Perfect", 1500000, 0},
	{2, 25, 13956, "Обычная", 1500000, 0},
	{2, 26, 13957, "V", 4000000, 0},
	{2, 27, 13958, "Brift", 2000000, 0},
	{2, 28, 13959, "Chanel Black", 3000000, 0},
	{2, 29, 13960, "Chanel White", 3000000, 0},
	{2, 30, 13961, "Chanel Pink", 3000000, 0},
	{2, 31, 13962, "Chanel Gold", 3000000, 0},
	{2, 32, 13985, "Дьявол", 2500000, 0},
	{2, 33, 13986, "Монстр", 2500000, 0},
	{2, 34, 13987, "Supreme", 3000000, 0},
	{2, 35, 13988, "Bigness", 2000000, 0},
	{2, 36, 13989, "Bigness", 2000000, 0},
	{2, 37, 13990, "Bigness", 2000000, 0},
	{2, 38, 13991, "Bigness", 2000000, 0},
	{2, 39, 13992, "Bigness", 2000000, 0},
	{2, 40, 14456, "Маска", 15000000, 0},
	{2, 41, 14461, "Противогаз", 30000000, 0},
	{2, 42, 14465, "Загадочная маска", 7000000, 0},
	{3, 0, 18921, "Черный", 800000, 0},
	{3, 1, 18922, "Красный", 800000, 0},
	{3, 2, 18923, "Голубой", 800000, 0},
	{3, 3, 18924, "Армейский", 800000, 0},
	{3, 4, 18925, "Французский", 800000, 0},
	{4, 0, 18931, "Магическая", 1000000, 0},
	{4, 1, 18935, "Желтая кепка", 1000000, 0},
	{4, 2, 18941, "Черная кепка (Обратная)", 1000000, 0},
	{4, 3, 18943, "Зеленая кепка (Обратная)", 1000000, 0},
	{4, 4, 18944, "Огненная", 1000000, 0},
	{4, 5, 18945, "Черно-Белая", 1000000, 0},
	{4, 6, 18946, "Серая", 1000000, 0},
	{4, 7, 18947, "Черная", 1000000, 0},
	{4, 8, 18948, "Голубая", 1000000, 0},
	{4, 9, 18949, "Зеленая", 1000000, 0},
	{4, 10, 18950, "Красная", 1000000, 0},
	{4, 11, 18951, "Желтая", 1000000, 0},
	{4, 12, 18971, "Текстура 1", 1000000, 0},
	{4, 13, 18972, "Текстура 2", 1000000, 0},
	{4, 14, 18973, "Текстура 3", 1000000, 0},
	{4, 15, 13970, "Gucci", 3000000, 0},
	{4, 16, 13971, "Gucci", 3000000, 0},
	{4, 17, 13972, "Chill", 1500000, 0},
	{4, 18, 13973, "Nike", 1750000, 0},
	{4, 19, 13974, "Religion", 1400000, 0},
	{4, 20, 13975, "Adidas", 1750000, 0},
	{4, 21, 13976, "Mercedes-Benz", 2500000, 0},
	{4, 22, 13977, "Audi", 2500000, 0},
	{4, 23, 13978, "BMW", 2500000, 0},
	{4, 24, 13979, "Gucci Gold", 3000000, 0},
	{4, 25, 13980, "Gucci White", 3000000, 0},
	{4, 26, 13981, "Gucci Black", 3000000, 0},
	{4, 27, 13982, "Supreme", 3000000, 0},
	{4, 28, 13983, "Ralph Laurnen", 2200000, 0},
	{4, 29, 13984, "Ralph Laurnen White", 2200000, 0},
	{4, 30, 14460, "Шляпа из фольги", 2000000, 0},
	{4, 31, 14463, "Ушки демона", 10000000, 0},
	{5, 0, 13964, "Gucci", 50000000, 5},
	{5, 1, 13965, "Louis Vuitton", 50000000, 5},
	{5, 2, 13966, "OFF WHITE", 50000000, 5},
	{5, 3, 13967, "Radmir", 50000000, 5},
	{5, 4, 13968, "Adidas", 50000000, 5},
	{6, 0, 14001, "OFF-WHITE", 5000000, 6},
	{6, 1, 14002, "OFF-WHITE", 5000000, 6},
	{7, 0, 14009, "Серебряные", 2500000, 7},
	{7, 1, 14008, "Золотые", 2500000, 7},
	{7, 2, 14010, "Бронзовые", 2500000, 7},
	{7, 3, 14011, "Apple", 2500000, 7},
	{8, 0, 14003, "Разноцветная", 2750000, 12},
	{8, 1, 14004, "NIKE", 2200000, 10},
	{8, 2, 14005, "Gucci", 2750000, 12},
	{8, 3, 14006, "Louis Vuitton", 3300000, 15},
	{9, 0, 14457, "Красный чокер", 1750000, 9},
	{9, 1, 14458, "Чокер с сердечком", 1750000, 9},
	{9, 2, 14459, "Черный чокер", 1750000, 1},
	{9, 3, 14466, "Белый чокер", 1750000, 9}
};


public: BS_OnChangeCategory(playerid, category)
{
	SetPVarInt(playerid, "category_bs", category);

	new query[68];

	STRING_GLOBAL = "";
	for(new i; i < sizeof g_load_accessories_shop; i++)
	{
		if(g_load_accessories_shop[i][ACS_TYPE] == category)
		{
			format(query, sizeof query, "[%d,\"%s\",%d,%d,%d],", 
			g_load_accessories_shop[i][ACS_ID], 
			g_load_accessories_shop[i][ACS_NAME], 
			g_load_accessories_shop[i][ACS_PRICE], 
			category,
			g_load_accessories_shop[i][ACS_COUNT]
			);
			strcat(STRING_GLOBAL, query);
		}
	}
	new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Accessories').setItems('[%s]')", STRING_GLOBAL);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	switch(category)
	{
	    case 0,1,2,3,4:
		{
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
		}
		case 5,6:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1241.211425,-2779.911376,1001.63);
			SetPlayerCameraLookAt(playerid,1251.122192,-2779.970458,1000.0);
		}
		case 7:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1242.810791,-2779.194580,1001.194885);
			SetPlayerCameraLookAt(playerid,1250.301391,-2785.346435,998.735961);
		}
		case 8:
		{
			SetPlayerPos(playerid, 1243.4812,-2779.9861,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			TogglePlayerControllable(playerid, false);
			SetPlayerCameraPos(playerid,1244.402343,-2778.809082,1001.75);
			SetPlayerCameraLookAt(playerid,1238.271728,-2786.645019,1000.0);
		}
		case 9:
		{
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
		}
	}
	return 1;
}

public: BS_OnPlayerClickItem(playerid, item)
{

	new category = GetPVarInt(playerid, "category_bs");

	new index;

	if(category == 0) index = 7;//очки
	if(category == 1) index = 1;//банданы
	if(category == 2) index = 1;//маски
	if(category == 3) index = 3;//береты
	if(category == 4) index = 3;//шляпы
	if(category == 5) index = 2;//сумка
	if(category == 6) index = 8;//ремень
	if(category == 7) index = 4;//часы
	if(category == 8) index = 0;//рюкзак
	if(category == 9) index = 5;//чекер

	for(new i; i < sizeof g_load_accessories_shop; i++)
	{
		if(g_load_accessories_shop[i][ACS_TYPE] == category && g_load_accessories_shop[i][ACS_COUNT] == item)
		{
			if(!VerifyIntString(QueryPlayerBalance(playerid), g_load_accessories_shop[i][ACS_PRICE])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

			SetPVarInt(playerid, "Type1", 2);
			SetPVarInt(playerid, "akstype", category);
			SetPVarInt(playerid, "price_acs", g_load_accessories_shop[i][ACS_PRICE]);

			SetPVarInt(playerid, "EditObjectAcs", 1);
			SetPVarInt(playerid, "EditObjectAcsIndex", index);

			if(category == 0) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2,0.056999,0.018000,0.026000,93.999984,82.199966,-7.299994);

			if(category == 1) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.157999,0.015000,0.016999,96.100013,-49.100017,-88.999954);

			if(category == 2) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2);

			if(category == 3) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2);

			if(category == 4) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.3);

			if(category == 5) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15,0.032000,-0.071999,-0.311999,0.000000,0.000000,-15.800003), SetPVarInt(playerid, "Type1", 15);

			if(category == 6) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15,0.023000,-0.119999,-0.477999), SetPVarInt(playerid, "Type1", 15);

			if(category == 7) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 6,0.000000,-0.045999,0.012999,15.100001,-96.299995,-165.699935,1.224001,1.022000), SetPVarInt(playerid, "Type1", 6);

			if(category == 8) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 15), SetPVarInt(playerid, "Type1", 15);

			if(category == 9) SetPlayerAttachedObject(playerid, index, g_load_accessories_shop[i][ACS_ID], 2, 0.157999,0.015000,0.016999,96.100013,-49.100017,-88.999954);

			EditAttachedObject(playerid, index);
			CEF_CREATE(playerid, 1, 2, "closeInterface('Accessories')");
			break;
		}
	}
	return true;
}
public: BS_OnCloseInterface(playerid)
{
	CEF_HIDE(playerid, "Accessories");
	SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
	SetPlayerFacingAngle(playerid, 89.0);
	SetCameraBehindPlayer(playerid);
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	new businessid = GetPlayerInBiz(playerid);
	SetPlayerVirtualWorld(playerid, businessid + 255);
	DeletePVar(playerid,"aks_id");
	return 1;
}

public:MenuInt_OnPlayerKey(playerid) CEF_CREATE(playerid, 2, 4, "PlayerInteraction", "[\"\",[[1,\"Персонаж\",\"Character\",1],[1,\"Транспорт\",\"Vehicle\",4],[1,\"Другое\",\"Other\",6]]]");

public:MenuInt_OnPlayerClickItem(playerid, type, event)
{
    if(event == 0)
    {
        if(type == 0) callcmd::mn(playerid);
        if(type == 1) callcmd::menu(playerid);
        if(type == 2) SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /pass [ID игрока]");
        if(type == 3) callcmd::anim(playerid, "");
        if(type == 4) callcmd::craft(playerid);
        if(type == 5)
        {
            if(GetPlayerData(playerid, P_TARGET_ID) != INVALID_PLAYER_ID)
                ShowPlayerTrade(playerid, GetPlayerData(playerid, P_TARGET_ID));
        } //задания
        if(type == 6){} //штрафы
        if(type == 7){} //мои професии
        if(type == 8) callcmd::warns(playerid);
        if(type == 9) callcmd::plist(playerid);
        if(type == 10) callcmd::liclist(playerid);
        if(type == 11) callcmd::leave(playerid);
///////////////////////////////////////////////////////////////////////
        if(type == 12) callcmd::lock(playerid, "1");
        if(type == 13) callcmd::trunk(playerid);
        if(type == 14) SendClientMessage(playerid, 0xCECECEFF, "Используйте: /carpass [ID игрока]");
        if(type == 15) MakeStroboskopes(playerid);
        if(type == 16)
        {
            new vehicleid = GetPlayerVehicleID(playerid);

            if(vehicleid != -1)
            {
                if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

                new index = GetVehicleData(vehicleid, V_ACTION_ID);

                if(GetOwnableCarData(index, OC_MUSIC_STATUS) == 1)
                {
                    STRING_GLOBAL[0] = EOS;
                    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"https://music.radmir.online/\", [[[\"%s\", 230]],%d,0,false,0,50]]", g_subwoofer[index][E_NAME], GetOwnableCarData(index, OC_MUSIC_TIME));
                    CEF_CREATE(playerid, 2, 4, "Music", STRING_GLOBAL);
                }
                else
                {
                    CEF_CREATE(playerid, 2, 4, "Music", "[\"https://music.radmir.online/\", [[],[],0,false,0,50]]");
                }
                SetOwnableCarData(index, OC_MUSIC_VOLUME, 50);
            }
        }
///////////////////////////////////////////////////////////////////////
        if(type == 17){} //список событий
        if(type == 18) callcmd::leaders(playerid);
        if(type == 19) 
        {
            new vehicleid = GetNearestVehicleID(playerid, 6.0),
			    vehicleid1 = GetPlayerOwnableCarLast(playerid);

            if(vehicleid1 == vehicleid)
			{
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);

                new query[250],
                    Cache: result;

                mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
                result = mysql_query(mysql, query, true);

                new rows = cache_num_rows();

                if(!rows) return SendClientMessage(playerid, 0x4169E1FF, "На данном транспорте не установлены аксессуары");

                SetPVarInt(playerid, "AcsVehicleCar", vehicleid);

                string_dialog[0] = EOS;
                for(new i; i < rows; i++)
                {
					new acs_id = cache_get_field_content_int(i, "model_id");

                    SetPlayerListitemValue(playerid, i, cache_get_field_content_int(i, "id"));

					new acs_name[64];
                    GetAcsName(acs_id, acs_name, sizeof acs_name);

                    format(query, sizeof query, "%d. %s\n", i + 1, acs_name);
                    strcat(string_dialog, query);
                }
				strcat(string_dialog, " \n");

                IntfDialogCallRemote
                (
                    playerid, DIALOG_CAR_ACCESSORIES_LIST, DIALOG_STYLE_LIST,
                    "{FFD83D}Список украшений",
                    string_dialog,
                    "Выбор", "Выйти"
                );
                cache_delete(result);
            }
            else SendClientMessage(playerid, 0x4169E1FF, "Вы должны находиться около личного транспорта");
        }
		if(type == 20)
        {
            new vehicleid = GetNearestVehicleID(playerid, 6.0), 
			    vehicleid1 = GetPlayerOwnableCarLast(playerid);

            if(vehicleid1 != vehicleid)
                return SendClientMessage(playerid, 0x4169E1FF, "Вы должны находиться около личного транспорта");

            new index = GetVehicleData(vehicleid, V_ACTION_ID);
            new car_id = GetOwnableCarData(index, OC_SQL_ID);

            new query[250], Cache:result;
            mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
            result = mysql_query(mysql, query, true);

            new rows = cache_num_rows();
            if(!rows)
            {
                cache_delete(result);
                return SendClientMessage(playerid, 0x4169E1FF, "На данном транспорте не установлены активные аксессуары");
            }

            SetPVarInt(playerid, "AcsVehicleCar", vehicleid);

            string_dialog = "Название\tСтатус\n";
            new list_index = 0;

            for(new i = 0; i < rows; i++)
            {
                new model_id = cache_get_field_content_int(i, "model_id");
                if(!IsActiveAcsID(model_id)) continue;

                new acs_id = cache_get_field_content_int(i, "id");

                SetPlayerListitemValue(playerid, list_index, acs_id);

                format(query, sizeof query, "%s\t%s\n", GetActiveAcsName(model_id), active_acs_id[playerid] != acs_id ? "На транспорте" : "Снято с транспорта");

                strcat(string_dialog, query);
                list_index++;
            }

            if(list_index == 0)
            {
                cache_delete(result);
                return SendClientMessage(playerid, 0x4169E1FF, "На данном транспорте не установлены активные аксессуары");
            }

            IntfDialogCallRemote(
				playerid, DIALOG_CAR_ACTIVE_ACS_LIST, DIALOG_STYLE_TABLIST_HEADERS, 
			    "{FFFFFF}Активные аксессуары",
                string_dialog,
                "Выбор", "Закрыть"
            );
            cache_delete(result);
        }
		if(type == 21)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);

			mysql_string[0] = EOS;
			format(mysql_string,sizeof mysql_string,"INSERT INTO police_tablet (event, name, place, x, y, z, time) VALUES (9, '%s', '[нет данных] Нижегородская область.', '%f', '%f', '%f', %d)", GetPlayerNameEx(playerid), x,y,z,gettime());
			mysql_tquery(mysql,mysql_string);

			static const query[] = "[МВД] Всем постам %s вызывает подкрепление, что бы найти его посмотрите в планшет(/police_tablet)";
			new fmt[sizeof query + MAX_PLAYER_NAME];
			format(fmt, sizeof fmt, query, GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(fmt, 0xFFC000FF);
		}
		if(type == 22) callcmd::police_tablet(playerid);
    }
    if(event == 1)
    {
        if(type == 1) 
        {
            if(GetPlayerData(playerid, P_TARGET_ID) == INVALID_PLAYER_ID) 
                CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Личная информация\",1,0,0],[0,\"Навигация\",1,1,1],[0,\"Мои документы\",1,2,2],[0,\"Анимации\",1,3,3],[0,\"Скрафтить\",1,4,4],[0,\"Задания\",1,5,5],[0,\"Список штрафов\",1,6,6],[0,\"Список профессий\",1,7,7],[0,\"Список предупреждений\",1,8,8],[0,\"Бонусы\",1,9,9],[0,\"Списки доступных сотрудников\",1,10,0],[0,\"Уволиться\",1,11,0]]]')");
            else 
                CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Личная информация\",1,0,0],[0,\"Навигация\",1,1,1],[0,\"Мои документы\",1,2,2],[0,\"Анимации\",1,3,3],[0,\"Скрафтить\",1,4,4],[0,\"Обмен предметами\",1,5,5],[0,\"Список штрафов\",1,6,6],[0,\"Список профессий\",1,7,7],[0,\"Список предупреждений\",1,8,8],[0,\"Бонусы\",1,9,9]]]')");

        }
        if(type == 4)
        {
            new vehicleid = GetVehicleModel(GetPlayerVehicleID(playerid));
	        if(vehicleid == 15217 || vehicleid == 15620 || vehicleid == 528 || vehicleid == 15143 || vehicleid == 525 || vehicleid == 15186 || vehicleid == 596 || vehicleid == 597 || vehicleid == 598 || vehicleid == 15609 || vehicleid == 15608 || vehicleid == 15607 || vehicleid == 15606 || vehicleid == 15610 || vehicleid == 15241 || vehicleid == 523 || vehicleid == 427 || vehicleid == 15604 || vehicleid == 15282 || vehicleid == 15283)
                CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Закрыть двери\",4,12,0],[0,\"Багажник\",4,13,1],[0,\"Украшения\",4,19,2],[0,\"Посмотреть тех. паспорт\",4,14,3],[0,\"Стробоскопы\",4,15,4],[0,\"Активные украшения\",4,20,5]]]')");
            else CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Магнитолла\",4,16,0],[0,\"Закрыть двери\",4,12,1],[0,\"Багажник\",4,13,2],[0,\"Украшения\",4,19,3],[0,\"Посмотреть тех. паспорт\",4,14,4],[0,\"Активные украшения\",4,20,5]]]')");
        }
        if(type == 6)
		{
			if(GetPlayerTeamEx(playerid) == TEAM_MVD)
			{
                CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Список событий\",6,17,0],[0,\"Список руководителей\",6,18,1],[0,\"Отправить сигнал помощи\",6,21,1],[0,\"Полицейский планшет\",6,22,1]]]')");
			}
            else CEF_CREATE(playerid, 1, 2, "interface('PlayerInteraction').onServerResponse('[\"\",[[0,\"Список событий\",6,17,0],[0,\"Список руководителей\",6,18,1]]]')");
		}
    }	  
    return true;  
}
#define GetNeftData(%0,%1) 			g_neft[%0][%1]
#define SetNeftData(%0,%1,%2) 		g_neft[%0][%1] = %2
#define AddNeftData(%0,%1,%2,%3) 		g_neft[%0][%1] %2= %3

#define IsNeftOwned(%0)				(GetNeftData(%0, N_OWNER_ID) > 0)

#define MAX_NEFT			(100)
//нефтевышки
new neftobj[MAX_NEFT], neftobj1[MAX_NEFT], neftobj2[MAX_NEFT], neftobj3[MAX_NEFT], neftobj4[MAX_NEFT], neftobj5[MAX_NEFT], neftobj6[MAX_NEFT];
new status_neft = 0;
new status_nefte = 0;
new fuels_neft[MAX_NEFT] = 0;
new timerneft = 0;
new neftcreatetime[MAX_NEFT];
new neftfuels[MAX_NEFT];
new neftpickup[MAX_NEFT];
new Text3D:neftlabel[MAX_NEFT];
new Text3D:neftlabelty[MAX_NEFT];
new neft_cp[MAX_PLAYERS];

enum E_NEFT_STRUCT
{
	N_SQL_ID,			// ид в базе данных
	N_OWNER_ID,			// ид аккаунта владельца
	N_IMPROVEMENTS,		// уровень улучшений
	N_RENT_DATE,		// аренда на n времени
	N_PRICE,			// стоимость бизнеса
	N_RENT_PRICE,		// плата за аренду в день
	N_FUELS,
	N_BALANCE,
	N_WORK_STATUS,		// статус (открыта/закрыта)
	Float: N_POS_X,		// позиция бизнеса
	Float: N_POS_Y,		// позиция бизнеса
	Float: N_POS_Z,		// позиция бизнеса
	Float: N_POS_RZ,// позиция после выхода из бизнеса
	N_OWNER_NAME[20 + 1],	// имя владельца
	N_CREATE_TYPE		// Время 29/60 секунд
};

new g_neft[MAX_NEFT][E_NEFT_STRUCT];
new g_neft_loaded;

public: LoadNeft()
{
	new query[480],
		Cache: result, rows;

    result = mysql_query(mysql, "SELECT * FROM neftenasos", true);
	rows = cache_num_rows();

	if(rows > MAX_NEFT){
		rows = MAX_NEFT;
		print("[Neft]: DB rows > MAX_NEFT");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetNeftData(idx, N_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetNeftData(idx, N_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		SetNeftData(idx, N_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetNeftData(idx, N_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetNeftData(idx, N_PRICE,			cache_get_field_content_int(idx, "price"));
        SetNeftData(idx, N_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetNeftData(idx, N_FUELS, 			cache_get_field_content_int(idx, "neftfuels"));
		SetNeftData(idx, N_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetNeftData(idx, N_WORK_STATUS,			cache_get_field_content_int(idx, "work"));

		SetNeftData(idx, N_POS_X,			cache_get_field_content_float(idx, "x"));
		SetNeftData(idx, N_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetNeftData(idx, N_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetNeftData(idx, N_POS_RZ,			cache_get_field_content_float(idx, "rz"));
		cache_get_field_content(idx, "owner_name", g_neft[idx][N_OWNER_NAME], mysql, 21);
		SetNeftData(idx, N_CREATE_TYPE,			cache_get_field_content_int(idx, "create_type"));

		mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET id=%d WHERE id=%d",idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		
		if(GetNeftData(idx, N_OWNER_ID) == 0){
			SetNeftData(idx, N_WORK_STATUS, 0);
			SetNeftData(idx, N_CREATE_TYPE, 0);
	   	    SetNeftData(idx, N_IMPROVEMENTS,0);
			SetNeftData(idx, N_FUELS,0);
	   	    format(g_neft[idx][N_OWNER_NAME], 21, "None", 0);
	   	    mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET owner_id=0,improvements=0,work=0,neftfuels=0,create_type=0,owner_name='None' WHERE id=%d", GetNeftData(idx, N_SQL_ID));
			mysql_query(mysql, query, false);
	   	}
		else{
			if(GetNeftData(idx, N_WORK_STATUS) == 0){
				neftobj[idx] = CreateDynamicObject(15836, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				if(GetNeftData(idx, N_CREATE_TYPE) != 1){
				    neftcreatetime[idx] = 1800;
				}
				else{
					neftcreatetime[idx] = 60;
				}
			}
			if(GetNeftData(idx, N_WORK_STATUS) > 0){
				neftobj1[idx] = CreateDynamicObject(15831, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj2[idx] = CreateDynamicObject(15832, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj3[idx] = CreateDynamicObject(15834, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 0.74, GetNeftData(idx, N_POS_Z) + 12.6144,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj4[idx] = CreateDynamicObject(15833, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 12.2344,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
				neftobj5[idx] = CreateDynamicObject(15835, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 9.14, GetNeftData(idx, N_POS_Z) + 13.8844,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
			}
			neftobj6[idx] = CreateDynamicObject(15839, GetNeftData(idx, N_POS_X) + 9.22999, GetNeftData(idx, N_POS_Y) + 5.31, GetNeftData(idx, N_POS_Z) + 1.24437,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
			neftpickup[idx] = CreatePickup(19134, 23, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 6.82, GetNeftData(idx, N_POS_Z) + 0.0244, -1, PICKUP_ACTION_TYPE_NEFT);

			if(GetNeftData(idx, N_IMPROVEMENTS) == 0) neftfuels[idx] = 4500;
			if(GetNeftData(idx, N_IMPROVEMENTS) > 0) neftfuels[idx] = 6700;

			neftlabelty[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 9.22999,GetNeftData(idx, N_POS_Y) + 4.60,GetNeftData(idx, N_POS_Z)+3, 20.0);
			neftlabel[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 2,GetNeftData(idx, N_POS_Y) + 2,GetNeftData(idx, N_POS_Z)+3, 20.0);

			CreateDynamicMapIcon(GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z), 11, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		CallLocalFunction("UpdateNeftLabel", "i", idx);
	}
	g_neft_loaded = rows;
	cache_delete(result);
	printf("[Нефтевышки]: Нефтевышек загружено: %d", g_neft_loaded);
}

public: UpdateNeftLabel(neftid)
{
	new fmt_str[300 + 1];
	new fmt_text[148];
	new playerid;
	if(GetNeftData(neftid, N_WORK_STATUS) == 0){
		if(GetNeftData(neftid, N_CREATE_TYPE) != 1){
		    if(!IsNeftOwned(neftid)) format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится менее чем за минуту\n{FF8800}Владелец: {ffffff}Государство\n", neftid);
		    else format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится через {ffffff}%d мин.\n{FF8800}Владелец: {ffffff}%s\n", neftid, neftcreatetime[neftid] / 60, GetNeftData(neftid, N_OWNER_NAME));
		}
		else{
			if(!IsNeftOwned(neftid)) format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится менее чем за минуту\n{FF8800}Владелец: {ffffff}Государство\n", neftid);
		    else format(fmt_str, sizeof fmt_str,"{FF8800}Строительство нефтяного насоса {ffffff}№%d\n{FF8800}Закончится {ffffff}менее чем за минуту\n{FF8800}Владелец: {ffffff}%s\n", neftid, GetNeftData(neftid, N_OWNER_NAME));
		}
	}
	if(GetNeftData(neftid, N_WORK_STATUS) > 0){
		if(!IsNeftOwned(neftid)) format(fmt_str, sizeof fmt_str,"{FF8800}Нефтяной насос {ffffff}№%d\n{FF8800}Владелец: {ffffff}Государство\n",neftid);
		else format(fmt_str, sizeof fmt_str,"{FF8800}Нефтяной насос {ffffff}№%d\n{FF8800}Владелец: {ffffff}%s\n",neftid,GetNeftData(neftid, N_OWNER_NAME));
	}
	UpdateDynamic3DTextLabelText(neftlabel[neftid], 0xFFFF00FF, fmt_str);
	format(fmt_str, sizeof fmt_str, "{FF8800}Резервуар:\n{FFFFFF}%d.%d/%d", GetNeftData(neftid, N_FUELS), fuels_neft[neftid], neftfuels[neftid]);
	UpdateDynamic3DTextLabelText(neftlabelty[neftid], 0xFFFF00FF, fmt_str);

	if(GetNeftData(neftid, N_IMPROVEMENTS) == 0)
	{
        if(GetNeftData(neftid, N_FUELS) == 4500)
	    {
           SetNeftData(neftid, N_WORK_STATUS, 1);
           if(GetNeftData(neftid, N_OWNER_ID) == GetPlayerAccountID(playerid)) format(fmt_text, sizeof fmt_text, "Ваш нефтяной насос {FFFFFF}№%d {B8CEF6}только что был отключён.", neftid), SendClientMessage(playerid, 0xB8CEF6FF, fmt_text);
	    }
	}
	else if(GetNeftData(neftid, N_FUELS) == 6700)
	{
        SetNeftData(neftid, N_WORK_STATUS, 1);
        if(GetNeftData(neftid, N_OWNER_ID) == GetPlayerAccountID(playerid)) format(fmt_text, sizeof fmt_text, "Ваш нефтяной насос {FFFFFF}№%d {B8CEF6}только что был отключён.", neftid), SendClientMessage(playerid, 0xB8CEF6FF, fmt_text);
	}
}

public: CreatePlayerNeft(playerid, type_create)
{
    new query[148];
	new idx = GetNearestNeft(playerid, 8.0);
	if(GetNeftData(idx, N_OWNER_ID) != 0) return 1;
	SetNeftData(idx, N_OWNER_ID, GetPlayerAccountID(playerid));
	SetNeftData(idx, N_CREATE_TYPE, type_create);
	neftobj[idx] = CreateDynamicObject(15836, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 2, GetNeftData(idx, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
	if(GetNeftData(idx, N_CREATE_TYPE) != 1) neftcreatetime[idx] = 1800;
	else neftcreatetime[idx] = 60;
	neftobj6[idx] = CreateDynamicObject(15839, GetNeftData(idx, N_POS_X) + 9.22999, GetNeftData(idx, N_POS_Y) + 5.31, GetNeftData(idx, N_POS_Z) + 1.24437,   0.00000, 0.00000, GetNeftData(idx, N_POS_RZ));
	neftpickup[idx] = CreatePickup(19134, 23, GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 6.82, GetNeftData(idx, N_POS_Z) + 0.0244, -1, PICKUP_ACTION_TYPE_NEFT);
	neftlabelty[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 9.22999,GetNeftData(idx, N_POS_Y) + 4.60,GetNeftData(idx, N_POS_Z)+3, 20.0);
	neftlabel[idx] = CreateDynamic3DTextLabel("", -1, GetNeftData(idx, N_POS_X) + 2,GetNeftData(idx, N_POS_Y) + 2,GetNeftData(idx, N_POS_Z)+3, 20.0);
	neftfuels[idx] = 4500;
	CreateDynamicMapIcon(GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z), 11, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	format(g_neft[idx][N_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
	mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET owner_id=%d,create_type=%d,owner_name='%s' WHERE id=%d", GetPlayerAccountID(playerid), GetNeftData(idx, N_CREATE_TYPE), GetPlayerNameEx(playerid), GetNeftData(idx, N_SQL_ID));
	mysql_query(mysql, query, false);
	CallLocalFunction("UpdateNeftLabel", "i", idx);
	return 1;
}

public: NeftMove()
{
	for(new idx; idx < g_neft_loaded; idx ++)
	{
		if(GetNeftData(idx, N_WORK_STATUS) == 2){
			if(status_nefte == 0){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 6.50, GetNeftData(idx, N_POS_Z) + 5.10638,0.01, 90.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj3[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) - 0.76, GetNeftData(idx, N_POS_Z) + 12.6344,0.01, 30.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj5[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) - 9.16, GetNeftData(idx, N_POS_Z) + 11.8844,0.6, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 7.22, GetNeftData(idx, N_POS_Z) + 16.2344,1.1, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 1;
				timerneft = 4;
			}
			if(status_nefte == 1){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,0.01, 180.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 16.2344,0.01, -20.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 2;
				timerneft = 4;
			}
			if(status_nefte == 2){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 6.50, GetNeftData(idx, N_POS_Z) + 5.10638,0.01, 270.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj3[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 0.74, GetNeftData(idx, N_POS_Z) + 12.6144,0.01, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj5[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) - 9.14, GetNeftData(idx, N_POS_Z) + 13.8844,0.6, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2.02, GetNeftData(idx, N_POS_Y) + 7.22, GetNeftData(idx, N_POS_Z) + 12.2344,1.1, -20.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 3;
				timerneft = 4;
			}
			if(status_nefte == 3){
				MoveDynamicObject(neftobj2[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 6.52, GetNeftData(idx, N_POS_Z) + 5.10438,0.01, 360.000000, 0, GetNeftData(idx, N_POS_RZ));
				MoveDynamicObject(neftobj4[idx], GetNeftData(idx, N_POS_X) + 2, GetNeftData(idx, N_POS_Y) + 7.2, GetNeftData(idx, N_POS_Z) + 12.2344,0.01, 0.000000, 0, GetNeftData(idx, N_POS_RZ));
				status_neft = 0;
				timerneft = 4;
			}
			if(GetNeftData(idx, N_FUELS) < neftfuels[idx]){
				if(fuels_neft[idx] < 9) fuels_neft[idx] = fuels_neft[idx] + 1;
				else SetNeftData(idx, N_FUELS, GetNeftData(idx, N_FUELS) + 1), fuels_neft[idx] = 0;
			}
			new query[148];
			mysql_format(mysql, query, sizeof query, "UPDATE neftenasos SET neftfuels=%d WHERE id=%d", GetNeftData(idx, N_FUELS), GetNeftData(idx, N_SQL_ID));
			mysql_query(mysql, query, false);
			CallLocalFunction("UpdateNeftLabel", "i", idx);
		}	
	}
	return 0;
}
stock PremiumNeft(playerid)
{
    IntfDialogCallRemote(playerid, DIALOG_NEFT_PREMIUM, DIALOG_STYLE_MSGBOX,"{FFFFFF}Заказ у транспортных компаний","{FFFFFF}Вы действительно желаете заказать экспорт нефти с Вашего нефтенасоса?","Далее", "Назад");
    return 1;
}
stock ShowMenuNeft(playerid)
{
	new fmt[248];
	if(GetNeftData(GetPVarInt(playerid, "ownableneft"), N_WORK_STATUS) <= 1) format(fmt, sizeof fmt, "Включить насос");
	if(GetNeftData(GetPVarInt(playerid, "ownableneft"), N_WORK_STATUS) == 2) format(fmt, sizeof fmt, "Выключить насос");
	format(fmt, sizeof fmt,"{FFFFFF}1. %s\n{FFFFFF}2. Заказать вывоз нефти\n{FFFFFF}3. Отменить заказ\n{FFFFFF}4. Информация\n{FFFFFF}5. Список улучшений\n{FFFFFF}6. Продать нефтяной насос игроку\n{FFFFFF}7. Демонтировать нефтяной насос",fmt);
	return IntfDialogCallRemote(playerid, DIALOG_NEFTENASOS, DIALOG_STYLE_LIST, "{FFFFFF}Управление нефтенасосом", fmt, "Далее", "Закрыть");
}
stock GetNearestNeft(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new neft_id = -1;
	new Float: my_dist;

	for(new idx; idx < g_neft_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetNeftData(idx, N_POS_X), GetNeftData(idx, N_POS_Y), GetNeftData(idx, N_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			neft_id = idx;
		}
	}
	return neft_id;
}

cmd:neft(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new neft_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /neft [номер нефтенасоса]");

	if(!(0 <= neft_id <= g_neft_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного нефтенасоса не существует на сервере");

	SetPlayerPos
	(
		playerid,
		GetNeftData(neft_id, N_POS_X),
		GetNeftData(neft_id, N_POS_Y),
		GetNeftData(neft_id, N_POS_Z)
	);

	new fmt_text[35];
	format(fmt_text, sizeof fmt_text, "Вы телепортировались к нефтенасосу №%d", neft_id);
	SendClientMessage(playerid, -1, fmt_text);
	return 1;
}

new bool:donate_case[MAX_PLAYERS];
new kase_osnova[MAX_PLAYERS];
new kase_krishka[MAX_PLAYERS];
new kase_prize[MAX_PLAYERS];
new Text3D:kase_text[MAX_PLAYERS];
new kase_open[MAX_PLAYERS];

enum E_CASE_STRUCT
{
	E_NAME_PRIZE[40],
	E_PRICE_PRIZE,
	E_ITEM_PRIZE,
	E_SIZE_PRIZE,
	E_TYPE_PRIZE, 
	E_BLOCK_PRIZE,
	E_INDX_PRIZE,
	E_TYPE_CASE
};

new const g_case_info[14][25][E_CASE_STRUCT] = 
{
	//Форсаж
    {
		{"Кепка MB", 25000, 13976, 6, 0, 13976, 4, 0},
        {"Кепка BMW", 25000, 13978, 6, 0, 13978, 4, 0},
        {"Ваз 2106", 75000, 567, 3, 0, 14535, -1, 0},
        {"Заз", 15000, 555, 3, 0, 14535, -1, 0},
        {"BMW E30", 300000, 534, 3, 1, 14537, -1, 0},
        {"Гонщик", 270000, 15314, 4, 1, 10816, 0, 0},
        {"Toyota Mark 2", 700000, 15068, 3, 1, 14537, -1, 0},
	    {"Subaru Impreza WRX", 3000000, 15234, 3, 2, 14538, -1, 0},
	    {"MMC Lancer Evo", 6000000, 15256, 3, 2, 14538, -1, 0},
	    {"Mazda RX-7", 6000000, 15254, 3, 2, 14538, -1, 0},
	    {"Маска Форсаж", 0, 14520, 6, 3, 14520, 2, 0},
	    {"Маска Форсаж", 0, 14521, 6, 3, 14521, 2, 0},
	    {"Маска Форсаж", 0, 14522, 6, 3, 14522, 2, 0},
	    {"Крест Вин Дизеля", 0, 14519, 6, 3, 14519, 9, 0},
	    {"Пол Уокер", 0, 15453, 4, 4, 16506, 0, 0},
	    {"Вин Дизель", 0, 258, 4, 4, 16506, 0, 0},
	    {"Mazda RX-7", 0, 15255, 3, 4, 14536, -1, 0},
	    {"Nissan GTR", 0, 15257, 3, 4, 14536, -1, 0},
	    {"Dodge Charger", 0, 15253, 3, 4, 14536, -1, 0},
	    {"Toyota Supra", 0, 15258, 3, 4, 14536, -1, 0},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Темные дела
	{
        {"Vip Silver(3 дня)", 25000, 1, 7, 0, 14609, 3, 1},
	    {"Золотые часы", 25000, 14598, 6, 0, 14598, 7, 1},
	    {"Шляпа `Мафиозника`", 25000, 14599, 6, 0, 14599, 4, 1},
        {"ОКА", 20000, 549, 3, 0, 14535, -1, 1},
        {"Lada 2108", 80000, 565, 3, 0, 14535, -1, 1},
        {"JEEP", 400000, 15115, 3, 1, 14537, -1, 1},
        {"Перчаточный Маньяк", 150000, 108, 4, 1, 10816, 0, 1},
        {"Mercedes W140 S600", 1000000, 585, 3, 1, 14537, -1, 1},
        {"Toyota Land Cruiser 300", 9000000, 15290, 3, 2, 14538, -1, 1},
	    {"Саша `Белый`", 3000000, 15437, 4, 2, 16506, 0, 1},
	    {"Mersedes GLS 63 AMG", 10000000, 15286, 3, 2, 14538, -1, 1},
	    {"Кепка `Острого козырька`", 0, 14597, 6, 3, 14597, 3, 1},
	    {"Чемодан", 0, 14600, 6, 3, 14600, 7, 1},
	    {"Футляр от скрипки", 0, 14596, 6, 3, 14596, 22, 1},
	    {"Мафиозник", 0, 15455, 4, 3, 16506, 0, 1},
	    {"Тони Монтана", 0, 15454, 4, 3, 16506, 0, 1},
	    {"Rollce Royce Phantom Bunker", 0, 15283, 3, 4, 14536, -1, 1},
	    {"Rollce Royce Cullinan Bunker", 0, 15282, 3, 4, 14536, -1, 1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Велесова ночь
	{
        {"Маска тыквы", 30000, 14052, 6, 0, 14052, 2, 2},
	    {"Цепочка пришельца", 25000, 14623, 6, 0, 14623, 9, 2},
	    {"Lada Инвалидка", 50000, 15281, 3, 0, 14535, -1, 2},
	    {"Иж Комби", 80000, 546, 3, 0, 14535, -1, 2},
	    {"Volvo V40", 1000000, 15152, 3, 1, 14537, -1, 2},
	    {"Шляпник", 300000, 33, 4, 1, 16506, 0, 2},
	    {"Hundai Santa Fe", 600000, 909, 3, 1, 14537, -1, 2},
	    {"Ford Mustang", 10000000, 15293, 3, 2, 14538, -1, 2},
	    {"Псих", 3500000, 234, 4, 2, 16506, 0, 2},
	    {"Дьявольский смайлик", 6666666, 14628, 6, 2, 14628, 9, 2},
	    {"Котелок", 0, 14707, 6, 3, 14707, 8, 2},
	    {"Плащ", 0, 14705, 6, 3, 14705, 10, 2},
	    {"Цири", 0, 15481, 4, 3, 16506, 0, 2},
	    {"Ведьмак", 0, 15479, 4, 3, 16506, 0, 2},
	    {"Призрак", 0, 14738, 6, 3, 14738, 9, 2},
	    {"Монстр", 0, 15480, 4, 4, 16506, 0, 2},
	    {"FORD HOTROD", 0, 15295, 3, 4, 14536, 1, 2},
	    {"Mersedez-Benz BRABUS HALLOWEEN", 0, 15294, 3, 4, 14536, 1, 2},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Оперской
	{
        {"Берет", 30000, 18923, 6, 0, 18923, 3, 3},
        {"Чёрные очки", 35000, 19012, 6, 0, 19012, 0, 3},
	    {"Москвич", 50000, 576, 3, 0, 14535, -1, 3},
        {"ЛУАЗ", 80000, 542, 3, 0, 14535, -1, 3},
        {"Mazda 3 MPS", 1200000, 15087, 3, 1, 14537, -1, 3},
        {"UAZ 3153", 400000, 500, 3, 1, 14537, -1, 3},
	    {"Ford Focus 3", 800000, 516, 3, 1, 14537, -1, 3},
        {"Шлем Алтын", 4000000, 14795, 6, 2, 14795, 2, 3},
	    {"Чёрный противогаз", 6000000, 14791, 6, 2, 14791, 2, 3},
	    {"Dodge Charger SRT HellCat", 1000000, 15217, 3, 2, 14538, 1, 3},
	    {"Бронежелет Gucci", 0, 14797, 6, 3, 14797, 11, 3},
	    {"Бронежелет Lui Vitton", 0, 14798, 6, 3, 14798, 11, 3},
	    {"Бородач", 0, 15484, 4, 3, 16506, 0, 3},
	    {"Сергей Бурунов", 0, 15485, 4, 3, 16506, 0, 3},
	    {"Чак Норис", 0, 15492, 4 ,4, 16506, 0, 3},
	    {"Стэтхэм", 0, 15496, 4, 4, 16506, 0, 3},
	    {"Скала", 0, 15493, 4, 4, 16506, 0, 3},
	    {"Волга КГБ", 0, 15604, 3, 4, 14536, -1, 3},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Новогодний
	{
        {"Шапка ушанка", 28000, 14012, 6, 0, 14012, 4, 4},
	    {"Новогодняя шапка", 25000, 14203, 6, 0, 14203, 4, 4},
	    {"Скутер", 30000, 15127, 3, 0, 14535, -1, 4},
	    {"ВАЗ 2104", 45000, 15079, 3, 0, 14535, -1, 4},
	    {"ВАЗ 2101", 75000, 439, 3, 0, 14535, -1, 4},
	    {"Парень в черном", 200000, 15390, 4, 1, 10816, 0, 4},
	    {"Toyota Hachiroku AE86", 450000, 15184, 3, 1, 14537, -1, 4},
	    {"Subaru Impreza WRX", 500000, 15131, 3, 1, 14537, -1, 4},
	    {"Nissan Silvia", 750000, 15090, 3, 1, 14537, -1, 4},
	    {"Mitsubitsi Lancer X", 1000000, 15125, 3, 1, 14537, -1, 4},
	    {"Мурад", 2000000, 15515, 4, 2, 16506, 0, 4},
	    {"Бодров", 2000000, 15463, 4, 2, 16506, 0, 4},
	    {"Верка сердючка", 1000000, 15516, 4, 2, 16506, 0, 4},
	    {"Дом на колесах", 1500000, 15277, 3, 2, 14538, 0, 4},
	    {"International ProStar", 1800000, 15618, 3, 2, 14538, -1, 4},
	    {"C.P Company", 5000000, 15751, 6, 2, 15751, 4, 4},
	    {"Рюкзачок", 0, 15746, 6, 3, 15746, 8, 4},
	    {"Крылья синие", 0, 14781, 6, 3, 14781, 13, 4},
	    {"Ди Каприо", 0, 15504, 4, 3, 16506, 0, 4},
	    {"Джим Кери", 0, 15517, 4, 4, 16506, 0, 4},
	    {"Дельфинчик", 0, 15750, 6, 4, 15750, 8, 4},
	    {"Хасбик", 0, 15498, 4, 4, 16506, 0, 4},
	    {"Daewoo Matiz Limuzin", 0, 426, 3, 4, 14536, -1, 4},
	    {"Lamborghini Countach", 0, 15614 , 3, 4, 14536, 0, 4},
	    {"Bentley UltraTank", 0, 15616, 3, 4, 14536, -1, 4}
	},
	//Черное золото
	{
        {"Lada Инвалидка", 30000, 15281, 3, 0, 14535, -1, 5},
	    {"ЗАЗ", 15000, 555, 3, 0, 14535, -1, 5},
	    {"Черные очки", 20000, 19012, 6, 0, 19012, 0, 5},
	    {"Золотая маска", 100000, 15847, 6, 0, 15847, 2, 5},
	    {"Кинжал", 300000, 15850, 6, 1, 15850, 7, 5},
	    {"Yamaha Wolverine", 600000, 424, 3, 1, 14537, -1, 5},
	    {"Модник", 300000, 15313, 4, 1, 10816, 0, 5},
	    {"Куфия", 2000000, 15849, 6, 2, 15849, 4, 5},
	    {"Золотая корона", 3000000, 15848, 6, 2, 15848, 4, 5},
	    {"Олигарх", 5000000, 15534, 4, 2, 16506, 0, 5},
	    {"Mercedes-Benz Vito", 800000, 15630, 3, 2, 14538, 2, 5},
	    {"Сумка с деньгами", 0, 15851, 6, 3, 15851, 5, 5},
	    {"Бизнесмен", 0, 15520, 4, 3, 16506, 0, 5},
	    {"Mercedes-Benz EQG", 0, 15627, 3, 3, 14538, -1, 5},
	    {"Павел Дуров", 0, 15530, 4, 4, 16506, 0, 5},
	    {"Carbon Black Ferrari Enzo", 0, 15624, 3, 4, 14536, 1, 5},
	    {"Gold Black Ferrari Enzo", 0, 15624, 3, 4, 14536, 0, 5},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Охотничий
	{
        {"УАЗ Буханка", 30000, 15070, 3, 0, 14535, -1, 6},
	    {"ЛуАЗ 969", 15000, 542, 3, 0, 14535, -1, 6},
	    {"2 EXP", 20000, -1, 2, 0, 16506, 2, 6},
	    {"Обэма", 300000, 180, 4, 1, 16506, 2, 6},
	    {"UAZ Patriot", 300000, 554, 3, 1, 14537, -1, 6},
	    {"Mercedes Benz X", 1200000, 15147, 3, 1, 14537, -1, 6},
	    {"Паша Техник", 1400000, 15552, 4, 2, 16506, 0, 6},
	    {"Jeep Rubicon", 1600000, 15221, 3, 2, 14538, -1, 6},
	    {"Шлем Водолаза", 3000000, 15968, 6, 2, 15968, 2, 6},
	    {"Mercedes-Benz Патч", 1500000, 15634, 3, 2, 14538, -1, 6},
	    {"Кенгурятник", 0, 15967, 6, 3, 15967, 14, 6},
	    {"Бурундук", 0, 15969, 6, 3, 15969, 5, 6},
	    {"Gost", 0, 15562, 4, 4, 16506, 0, 6},
	    {"Генерал", 0, 15566, 4, 4, 16506, 2, 6},
	    {"БРДМ", 0, 444, 3, 4, 14536, -1, 6},
	    {"БРДМ", 0, 444, 3, 4, 14536, 1, 6},
	    {"БРДМ", 0, 444, 3, 4, 14536, 2, 6},
	    {"БРДМ", 0, 444, 3, 4, 14536, 0, 6},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Египетская сила
	{
        {"Citroen Ami", 75000, 15641, 3, 0, 14535, -1, 7},
	    {"ИЖ-5", 35000, 521, 3, 0, 14535, -1, 7},
	    {"Hotline Miami", 25000, 18903, 6, 0, 15313, 2, 7},
	    {"Летний прикид", 500000, 15304, 4, 1, 16506, 2, 7},
	    {"CrossBike", 250000, 15130, 3, 1, 14537, -1, 7},
	    {"Mazda MX5 Miata", 450000, 15088, 3, 1, 14537, -1, 7},
	    {"Японка", 5000000, 15581, 4, 2, 16506, 0, 7},
	    {"LEXUS LX570", 4000000, 15071, 3, 2, 14538, -1, 7},
	    {"Маска мумии", 3000000, 16511, 6, 2, 16511, 2, 7},
	    {"Lamborghini Diablo", 0, 15650, 3, 3, 14538, 1, 7},
	    {"Рюкзак Зведные войны", 0, 16460, 6, 3, 16460, 8, 7},
	    {"Рюкзак Хамилион", 0, 16454, 6, 3, 16454, 8, 7},
	    {"Мумия", 0, 15577, 4, 4, 16506, 0, 7},
	    {"GMC Hummer EV", 0, 15647, 3, 4, 14536, -1, 7},
	    {"Яхта", 0, 15646, 3, 4, 14536, 1, 7},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Велесова ночь 2
	{
        {"Маска тыквы", 30000, 14052, 6, 0, 14052, 2, 8},
	    {"Volvo 940", 50000, 404, 3, 0, 14535, -1, 8},
	    {"BMW M5 E28", 45000, 15207, 3, 0, 14535, -1, 8},
	    {"Subaru Impreza WRX", 550000, 15131, 3, 1, 14537, -1, 8},
	    {"НЕО", 170000, 15530, 4, 1, 10816, 0, 8},
	    {"Volkswagen Touareg", 450000, 15066, 3, 1, 14537, -1, 8},
	    {"Mercedes 560 SE", 3000000, 15155, 3, 2, 14538, -1, 8},
	    {"Летучая мышь", 4000000, 16598, 6, 2, 16598, 5, 8},
	    {"Франкенштейн", 5000000, 17000, 4, 2, 16506, 0, 8},
	    {"Покемон", 0, 16608, 6, 3, 16608, 8, 8},
	    {"Бронежелет Франкенштейн", 0, 16606, 6, 3, 16606, 11, 8},
	    {"Призрачный гонщик", 0, 15657, 3, 3, 14538, -1, 8},
	    {"Мясник", 0, 15591, 4, 4, 16506, 0, 8},
	    {"Уэнздей", 0, 15538, 4, 4, 16506, 0, 8},
	    {"Rolls Royce Phantom VII", 0, 15658, 3, 4, 14536, 0, 8},
	    {"Rolls Royce Phantom VII", 0, 15658, 3, 4, 14536, 1, 8},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Рождественский экспресс
	{
        {"ВАЗ 2105", 105000, 15080, 3, 0, 14535, -1, 9},
        {"ВАЗ 2102", 50000, 15663, 3, 0, 14535, -1, 9},
        {"Новогодняя шапка", 45000, 16745, 6, 0, 16745, 4, 9},
        {"Chevrolet Suburban", 1200000, 15214, 3, 1, 14537, -1, 9},
        {"Honda Civic TypeR FN2", 2000000, 15171, 3, 1, 14537, -1, 9},
        {"Зимний прикид", 450000, 17016, 4, 1, 16506, -1, 9},
        {"Mercedes-Benz SL65 AMG", 3000000, 15178, 3, 2, 14538, -1, 9},
        {"Шарф Гуччи", 3000000, 16776, 6, 2, 16776, 9, 9},
        {"Гусь в шапке", 2500000, 16748, 6, 2, 16748, 8, 9},
        {"Адидас", 0, 17024, 4, 3, 16506, 0, 9},
        {"Красный дракон", 0, 16697, 6, 3, 16697, 19, 9},
        {"Ковалевский", 0, 17010, 4, 3, 16506, 0, 9},
        {"Tesla Semi", 0, 15665, 3, 4, 14536, -1, 9},
	    {"Дед Радмир", 0, 17017, 4, 4, 16506, 0, 9},
        {"BMW XM OFFROAD", 0, 15667, 3, 4, 14536, -1, 9},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Путь воина
	{
        {"Honda CRX", 65000, 496, 3, 0, 14535, -1, 10},
        {"Маска Ниндзя", 50000, 16977, 6, 0, 16977, 2, 10},
        {"Маска Кицуне", 160000, 16947, 6, 1, 16947, 2, 10},
        {"Маска Анбу", 120000, 16979, 6, 1, 16979, 2, 10},
        {"Toyota Hachiroku AE86", 300000, 15184, 3, 1, 14537, -1, 10},
        {"Шляпа Архимага", 1400000, 16975, 6, 2, 16975, 4, 10},
        {"Красный клинок", 1800000, 16941, 6, 2, 16941, 7, 10},
        {"Проклятый дух", 3000000, 17044, 4, 2, 16506, 0, 10},
        {"Посох", 0, 16976, 6, 3, 16976, 12, 10},
        {"Красная стрела", 0, 16982, 6, 3, 16982, 18, 10},
        {"Ледяной ветер", 0, 16983, 6, 3, 16983, 18, 10},
        {"ZIL 131 600", 0, 15681, 3, 4, 14536, 0, 10},
        {"Киллуа", 0, 17045, 4, 4, 16506, 0, 10},
	    {"Porsche 911 Mansory", 0, 15682, 3, 4, 14536, 0, 10},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Пиратский
	{
        {"LADA 2103", 45000, 15648, 3, 0, 14535, -1, 11},
        {"Рыжик", 5000, 22, 4, 0, 16506, 0, 11},
        {"VW Golf 2", 57000, 527, 3, 0, 14535, -1, 11},
        {"BMW 525i E34", 250000, 507, 3, 1, 14537, -1, 11},
        {"Летний прикид", 360000, 15392, 4, 1, 16506, 0, 11},
        {"Mercedes S320 CDI W220", 250000, 15664, 3, 1, 14537, -1, 11},
        {"Пиратский пояс", 1500000, 17257, 6, 2, 17257, 6, 11},
        {"Mercedes Brabus Iseki 26", 1500000, 572, 3, 2, 14538, -1, 11},
        {"Пират", 3500000, 17064, 4, 2, 16506, 0, 11},
        {"Посох чародея", 0, 17253, 6, 3, 17253, 12, 11},
        {"Рюкзак бочка", 0, 17248, 6, 3, 17248, 8, 11},
        {"Mercedes-Benz Brabus KART", 0, 17273, 6, 4, 17273, 14, 11},
	    {"Mercedes XLP 900 6x6", 0, 557, 3, 4, 14536, 0, 11},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Проклятие
	{
        {"ZAZ 1102 Таврия", 120000, 15600, 3, 0, 14535, -1, 12},
        {"Обруч с рожками", 60000, 14463, 6, 0, 14463, 0, 12},
        {"Volkswagen Passat B3", 57000, 15698, 3, 0, 14535, -1, 12},
        {"Volkswagen Golf R", 250000, 589, 3, 1, 14537, -1, 12},
        {"Иван Золо", 250000, 15433, 4, 1, 16506, 0, 12},
        {"Infiniti Q50", 250000, 15220, 3, 1, 14537, -1, 12},
        {"Мишка с шипами", 2500000, 17390, 6, 2, 17390, 8, 12},
        {"Mercedes G63 6x6", 18000000, 573, 3, 2, 14538, -1, 12},
        {"Цой", 3500000, 15363, 4, 2, 16506, 0, 12},
        {"Рюкзак", 0, 17394, 6, 3, 17394, 8, 12},
        {"Аксессуар на транспорт Иж", 0, 17607, 6, 3, 17607, 14, 12},
        {"Билли", 0, 17070, 4, 4, 16506, 0, 12},
	    {"BMW M5 G99", 0, 15697, 3, 4, 14536, 0, 12},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	},
	//Зимняя сказка
	{
        {"VIP SILVER (3 дня)", 50000, 1, 7, 0, 14609, 3, 13},
        {"Lada 2113", 57000, 15654, 3, 0, 14535, -1, 13},
        {"Moskvich 2141", 57000, 17403, 3, 0, 14535, -1, 13},
        {"Zeekr 001", 1050000, 15675, 3, 1, 14537, -1, 13},
        {"Одежда мавроди", 530000, 192, 4, 1, 16506, 0, 13},
        {"Nissan 370Z", 600000, 15191, 3, 1, 14537, -1, 13},
        {"Рюкзак Луи", 2500000, 17999, 6, 2, 17999, 8, 13},
        {"Acura NSX", 4500000, 15159, 3, 2, 14538, -1, 13},
        {"Андеграунд", 3600000, 285, 4, 2, 16506, 0, 13},
        {"Шматко", 0, 15513, 4, 3, 16506, 0, 13},
        {"Рюкзак", 0, 18000, 6, 3, 18000, 8, 13},
        {"Бронижелет Санты", 0, 17985, 6, 3, 17985, 11, 13},
        {"Эльф", 0, 15597, 4, 4, 16506, 0, 13},
	    {"Эльф", 0, 265, 4, 4, 16506, 0, 13},
	    {"Lamborghini Pickup", 0, 17409, 3, 4, 14536, 0, 13},
	    {"Ferrari Purosangue", 0, 17407, 3, 4, 14536, 0, 13},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1},
		{"Пусто", -1, -1, -1, -1, -1, -1, -1}
	}
};

enum E_CASE_CEF_STRUCT
{
	E_TYPE_PRIZE,
	E_INDEX_PRIZE,
	E_NAME_PRIZE[40],
	E_SIZE_PRIZE,
	E_CASE_NAME[40],
	E_CASE_ID
};

new const g_case_cef[14][17][E_CASE_CEF_STRUCT] = 
{
	//Форсаж
    {
        {0, 0, "Кепка MB", 6},
		{0, 1, "Кепка BMW", 6},
		{0, 2, "ВАЗ 2106", 3},
		{0, 3, "ЗАЗ", 3},
		{1, 4, "BMW E30", 3},
		{1, 5, "Гонщик", 4},
		{1, 6, "Toyota Mark 2", 3},
		{2, 7, "Subaru Impreza WRX", 3},
		{2, 8, "MMC Lancer Evo", 3},
		{2, 9, "Mazda RX-7", 3},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "Кейс", -1, "Форсаж", 258}
	},
	//Темные дела
    {
        {0, 0, "VIP SILVER (3 дня)", 7},
		{0, 1, "Золотые часы", 6},
		{0, 2, "Шляпа Мафиозник", 6},
		{0, 3, "ОКА", 3},
		{0, 4, "ВАЗ 2108", 3},
		{1, 5, "JEEP", 3},
		{1, 6, "Перчаточный Маньяк", 4},
		{1, 7, "Mercedes W140 S600", 3},
		{2, 8, "Land Cruiser 300", 3},
		{2, 9, "Саша Белый", 4},
		{2, 10, "Mercedes GLS 63 AMG", 3},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "Кейс", -1, "Темные дела", 261}
	},
	//Велесова ночь
	{
        {0, 0, "Маска тыквы", 6},
		{0, 1, "Цепочка пришельца", 6},
		{0, 2, "Lada Инвалидка", 3},
		{0, 3, "Иж Комби", 3},
		{1, 4, "Volvo V40", 3},
		{1, 5, "Шляпник", 4},
		{1, 6, "Hundai Santa Fe", 3},
		{2, 7, "Ford Mustang", 3},
		{2, 8, "Псих", 4},
		{2, 9, "Дявольский смайлик", 6},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "Кейс", -1, "Велесова ночь", 272}
	},
	//Оперской
	{
		{0, 0, "Берет", 6},
		{0, 1, "Черные очки", 6},
		{0, 2, "Москвич", 3},
		{0, 3, "ЛУАЗ", 3},
		{1, 4, "Mazda 3 MPS", 3},
		{1, 5, "УАЗ ХАНТЕР", 3},
		{1, 6, "Ford Focus 3", 3},
		{2, 7, "Шлем Алтын", 6},
		{2, 8, "Черный противогаз", 6},
		{2, 9, "Dodge Charger SRT HellCat", 3},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "Кейс", -1, "Оперской", 278}
	},
	//Новогодний
	{
		{0, 0, "Шапка ушанка", 6},
		{0, 1, "Новогодняя шапка", 6},
		{0, 2, "Скутер", 3},
		{0, 3, "ВАЗ 2104", 3},
		{0, 4, "ВАЗ 2101", 3},
		{1, 5, "Парень в черном", 4},
		{1, 6, "Toyota Hachiroku AE86", 3},
		{1, 7, "Subaru Impreza WRX", 3},
		{1, 8, "Nissan Silvia", 3},
		{1, 9, "Mitsubitshi Lancer X", 3},
		{2, 10, "Мурад", 4},
		{2, 11, "Бодров", 4},
		{2, 12, "Верка сердючка", 4},
		{2, 13, "Дом на колесах", 3},
		{2, 14, "International ProStar LT", 3},
		{2, 15, "C.P Company", 6},
        {-1, -1, "Кейс", -1, "Новогодний", 284}
	},
	//Черное золото
	{
		{0, 0, "Lada Инвалидка", 3},
		{0, 1, "ЗАЗ", 3},
		{0, 2, "Черные очки", 6},
		{1, 3, "Золотая маска", 6},
		{1, 4, "Кинжал", 6},
		{1, 5, "Yamaha Wolverine", 3},
		{1, 6, "Модник", 4},
		{2, 7, "Куфия", 6},
		{2, 8, "Золотая корона", 6},
		{2, 9, "Коломойский", 4},
		{2, 10, "Mercedes-Benz Vito", 3},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Черное золото", 290}
	},
	//Охотничий
	{
		{0, 0, "УАЗ Буханка", 3},
		{0, 1, "Луаз 969", 3},
		{0, 2, "2 EXP", 6},
		{1, 3, "Обэма", 4},
		{1, 4, "UAZ Patriot", 3},
	    {1, 5, "Mercedes Benz X", 3},
		{1, 6, "Паша Техник", 4},
		{2, 7, "Jeep Rubicon", 3},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Охотничий", 300}
	},
	//Египетская сила
	{
		{0, 0, "Citroen ami", 3},
		{0, 1, "ИЖ - 5", 3},
		{0, 2, "Hotline Miami", 6},
		{1, 3, "Летний прикид", 4},
		{1, 4, "CrossBike", 3},
		{1, 5, "Mazda MX5 Miata", 3},
		{2, 6, "Японка", 4},
		{2, 7, "Lexus LX", 3},
		{2, 8, "Маска мумии", 6},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Египетская сила", 328}
	},
	//Велесова ночь 2
	{
		{0, 0, "Маска тыквы", 6},
		{0, 1, "Volvo 940", 3},
	    {0, 2, "BMW M5 E28", 3},
		{1, 3, "Subaru Impreza WRX", 3},
		{1, 4, "Нео", 4},
		{1, 5, "Volkswagen Touareg", 3},
		{2, 6, "Mercedes 560 SE", 3},
		{2, 7, "Летучая мышь", 6},
		{2, 8, "Франкенштейн", 4},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Велесова ночь 2", 344} 
	},
	//Рождественский экспресс
	{
		{0, 0, "ВАЗ 2105", 3},
		{0, 1, "ВАЗ 2102", 3},
		{0, 2, "Новогодняя шапка", 6},
		{1, 3, "Chevrolet Suburban", 3},
		{1, 4, "Honda Civic TypeR FN2", 3},
		{1, 5, "Зимний прикид", 4},
		{2, 6, "Mercedes-Benz SL65 AMG", 3},
		{2, 7, "Шарф Гуччи", 6},
		{2, 8, "Гусь в шапке", 6},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Рождественский Экспресс", 348}
	},
	//Путь воина
	{
		{0, 0, "Honda CRX", 3},
		{0, 1, "Маска ниндзя", 6},
		{1, 2, "Маска Кицуне", 6},
		{1, 3, "Маска Анбу", 6},
		{1, 4, "Toyota Hachiroku AE86", 3},
		{2, 5, "Шляпа Архимага", 6},
		{2, 6, "Красный клинок", 6},
		{2, 7, "Проклятый дух", 4},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Путь воина", 350}
	},
	//Пиратский
	{
		{0, 0, "LADA 2103", 3},
		{0, 1, "Рыжик", 4},
		{0, 2, "VW Golf 2", 3},
		{1, 3, "BMW 525i E34", 3},
		{1, 4, "Летний прикид", 4},
		{1, 5, "Mercedes S320 CDI W220", 3},
		{2, 6, "Пиратский пояс", 6},
		{2, 7, "Mercedes Brabus Iseki 26", 3},
		{2, 8, "Пират", 4},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Пиратский", 355}
	},
	//Проклятие
	{
		{0, 0, "ZAZ 1102 Таврия", 3},
		{0, 1, "Обруч с рожками", 6},
		{0, 2, "Volkswagen Passat B3", 3},
		{1, 3, "Volkswagen Golf R", 3},
		{1, 4, "Иван Золо", 4},
		{1, 5, "Infiniti Q50", 3},
		{2, 6, "Мишка с шипами", 6},
		{2, 7, "Mercedes G63 6x6", 3},
		{2, 8, "Цой", 4},
        {-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Проклятие", 356}
	},
	//Зимняя сказка
	{
		{0, 0, "VIP SILVER (3 дня)", 7},
		{0, 1, "Lada 2113", 3},
		{0, 2, "Moskvich 2141", 3},
		{1, 3, "Zeekr 001", 3},
		{1, 4, "Одежда мавроди", 4},
		{1, 5, "Nissan 370Z", 3},
		{2, 6, "Рюкзак Луи", 6},
		{2, 7, "Acura NSX", 3},
		{2, 8, "Андеграунд", 4},
		{3, 9, "Шматко", 4},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
		{-1, -1, "CanVas Dev Крутой", -1},
        {-1, -1, "Кейс", -1, "Зимняя сказка", 360}
	}
};

stock GetCaseIndex(indx)
{
	if(indx >= 1 && indx <= 14)
		return indx - 1;
	return -1;
}


new const case_names[][] = {
    "Форсаж",
    "Темные дела",
    "Велесова ночь",
    "Оперской",
    "Новогодний",
    "Черное золото",
    "Охотничий",
    "Египетская сила",
    "Велесова ночь 2",
    "Рождественский экспресс",
    "Путь воина",
    "Пиратский",
    "Проклятие",
    "Зимняя сказка"
};

new const HTML_COLOR[][] = {
	"ffffff", // белый
	"0000ff", // синий
	"FF0000", // красный
	"8b00ff", // фиолетовый
	"FFDD00" // золотой
};

new const chances[14][5] = {
    {5, 10, 185, 800, 998}, // Форсаж
    {2, 5, 167, 1000, 1500}, // Темные дела
    {2, 5, 158, 1100, 1245},  // Велесова ночь
	{3, 6, 175, 950, 1300},  // Оперской
	{4, 8, 160, 700, 1015},  // Новогодний
	{4, 9, 170, 705, 1050},  // Черное золото
	{3, 7, 160, 700, 1068},  // Охотничий
	{5, 9, 125, 560, 1096},  // Египетская сила
	{4, 8, 260, 467, 980},  // Велесова ночь 2
	{6, 10, 260, 469, 999},  // Рождественский экспресс
	{4, 7, 270, 450, 1009},  // Путь воина
	{6, 12, 340, 501, 987},  // Пиратский
	{4, 9, 169, 560, 895},  // Проклятие
	{3, 6, 187, 580, 1076}  // Зимняя сказка
};

public: OpenCase(playerid)
{
	new Float:X,Float:Y,Float:Z,Float:angle;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);

	if(GetPVarInt(playerid, "case_type") == 1){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 2){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.8, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 3){
		new Float: case_x = X + (1.455 * floatsin(-angle, degrees)),Float: case_y = Y + (1.455 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.2, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 4){
		new Float: krishka_x1 = X + (1.63 * floatsin(-angle, degrees)),Float: krishka_y1 = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], krishka_x1, krishka_y1, Z-0.6, 0.03, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 5){
	    new Float: krishka_x = X + (1.45 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.45 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], krishka_x, krishka_y, Z-0.69, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 6){
		new Float: case_x = X + (1.4 * floatsin(-angle, degrees)),Float: case_y = Y + (1.4 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 7){
		new Float: case_x = X + (1.45 * floatsin(-angle, degrees)),Float: case_y = Y + (1.45 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.7, 0.2, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 8){
		new Float: kr_x = X + (1.85 * floatsin(-angle, degrees)),Float: kr_y = Y + (1.85 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], kr_x, kr_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 9)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 10)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 11)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 12)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 13)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	if(GetPVarInt(playerid, "case_type") == 14)
	{
		new Float: case_x = X + (1.63 * floatsin(-angle, degrees)),Float: case_y = Y + (1.63 * floatcos(-angle, degrees));
		MoveDynamicObject(kase_krishka[playerid], case_x, case_y, Z-0.71, 0.1, -75.0, 0, angle);
	}
	SetTimerEx("SelectPrizeCase", 1000, false, "i", playerid); 

}

stock ShowCase(playerid)
{
	new fmt_str[1024];
	new query[2048];
    
	new index = GetPVarInt(playerid, "case_type");
	new type = GetCaseIndex(index);

	new case_id = g_case_cef[type][16][E_CASE_ID];

	for(new i; i < sizeof g_case_cef[]; i++)
	{
		if(g_case_cef[type][i][E_TYPE_PRIZE] == -1) continue;

		format(query, sizeof query, "%s[%d,%d,\"%s\",%d],",  
		query, 
		g_case_cef[type][i][E_TYPE_PRIZE], 
		g_case_cef[type][i][E_INDEX_PRIZE], 
		g_case_cef[type][i][E_NAME_PRIZE], 
		g_case_cef[type][i][E_SIZE_PRIZE]);

	}
	strdel(query, strlen(query) - 1, strlen(query));

	if(GetIteam(playerid, 259) >= 1 && GetIteam(playerid, case_id) >= 1)
	{
        format(fmt_str, sizeof fmt_str, "[%d, \"%s\", 1, %d, 1, [%s]]", 
	    type,
	    g_case_cef[type][16][E_CASE_NAME], 
	    kase_open[playerid], 
	    query);
		
		donate_case[playerid] = false;
	}
	else if(GetIteam(playerid, 259) < 1 && GetIteam(playerid, case_id) >= 1)
	{
		format(fmt_str, sizeof fmt_str, "[%d, \"%s\", 120, %d, 0, [%s]]", 
	    type,
	    g_case_cef[type][16][E_CASE_NAME], 
	    kase_open[playerid], 
	    query);
		
		donate_case[playerid] = true;
	}
	CEF_CREATE(playerid, 2, 4, "Case", fmt_str);
	return 1;
}

public: Cases_OnPlayerCloseInterface(playerid, type, id)
{
	if(type == 1)
	{
		if(GetPVarInt(playerid, "type_priz") != 0)
		{
			new items = GetPVarInt(playerid, "type_priz") - 1;
			new case_index = GetPVarInt(playerid, "case_type");
			new index = GetCaseIndex(case_index);

		    if(id == 0)
			{
			    CEF_HIDE(playerid, "CaseResult");
			    ModifyCashBalance(playerid, g_case_info[index][items][E_PRICE_PRIZE], "продажа с кейса", true, true);
			}
			if(id == 1)
			{
				new fmt_msg[144];
		    	CEF_HIDE(playerid, "CaseResult");

				new html_color_index = g_case_info[index][items][E_TYPE_PRIZE];

		    	format(fmt_msg, sizeof fmt_msg, "Вы успешно открыли {ffffff}кейс `%s` {6495ED}и получили{%s} `%s`", case_names[index], HTML_COLOR[html_color_index], g_case_info[index][items][E_NAME_PRIZE]);
				SendClientMessage(playerid, 0x6495EDFF, fmt_msg);

		    	SendClientMessage(playerid, 0x6495EDFF, "Приз был добавлен в ваши награды {ffffff}(Меню -> Награды)");

				GivePlayerMyPrizes(playerid, g_case_info[index][items][E_NAME_PRIZE], g_case_info[index][items][E_SIZE_PRIZE], g_case_info[index][items][E_ITEM_PRIZE], g_case_info[index][items][E_TYPE_PRIZE], 1, g_case_info[index][items][E_INDX_PRIZE]);
			}

			if(GetPVarInt(playerid, "CaseFree") == 1)
			{
				SetPVarInt(playerid, "CaseFree", 0);
			}
			else
			{
                if(GetIteam(playerid, GetPVarInt(playerid, "case_id")) > 0) ShowCase(playerid);
			}
			SetPVarInt(playerid, "type_priz", 0);

			if(kase_open[playerid] == 0)
			{
				DestroyDynamicObject(kase_osnova[playerid]);
				DestroyDynamicObject(kase_krishka[playerid]);
				DestroyDynamicObject(kase_prize[playerid]);
				DestroyDynamic3DTextLabel(kase_text[playerid]);
				SetCameraBehindPlayer(playerid);
			}
	    }
    }
	return 1;
}

stock Cases_OnPlayerInterfaceRequest(playerid,event,fast)
{
	if(event == 0)
	{
		CEF_HIDE(playerid, "Case");

		if(donate_case[playerid] == true) if(QueryPlayerDonationBalance(playerid) < 120) return SCM(playerid, 0xCECECEFF, "[Ошибка] Недостаточно донат валюты");
		if(donate_case[playerid] == false) if(GetIteam(playerid,259) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет ключа для открытия кейса");

		if(fast == 0)
		{
			new Float:X,Float:Y,Float:Z,Float:angle;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, angle);

			new Float: cam_x = X + (1.3 * floatsin(-angle + 90.0, degrees)),Float: cam_y = Y + (1.3 * floatcos(-angle + 90.0, degrees)),Float: cam_z = Z + 0.3;

			new Float: case_x, Float:case_y;

			kase_open[playerid] = 0;

			if(GetPVarInt(playerid, "case_type") == 1)//Форсаж
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(14349, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(14348, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 258, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 2)//Темные
			{
				new Float: krx = X + (1.41 * floatsin(-angle, degrees)),Float: kry = Y + (1.41 * floatcos(-angle, degrees));
				case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(14594, krx, kry, Z-0.81, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(14593, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 261, 0, 1, 0, "Открытие кейса [Cases]");
				OnBattlePass_Perfomance(playerid, 25, 1);
			}
			else if(GetPVarInt(playerid, "case_type") == 3)//Велесова
			{
				case_x = X + (1.44 * floatsin(-angle, degrees)),case_y = Y + (1.44 * floatcos(-angle, degrees));
				new Float: krx = X + (1.455 * floatsin(-angle, degrees)),Float: kry = Y + (1.455 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(14692, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(14693, krx, kry, Z-0.82, 0.0,0.0,angle);
				GiveIteam(playerid, 272, 0, 1, 0, "Открытие кейса [Cases]");
				OnBattlePass_Perfomance(playerid, 26, 1);
			}
			else if(GetPVarInt(playerid, "case_type") == 4)
			{
				new Float: krishka_x = X + (1.6 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.6 * floatcos(-angle, degrees));
				case_x = X + (1.37 * floatsin(-angle, degrees)),case_y = Y + (1.37 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(14783, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(14784, krishka_x, krishka_y, Z-0.6, 0.0,0.0,angle);
				GiveIteam(playerid, 278, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 5)
			{
				case_x = X + (1.3 * floatsin(-angle, degrees)),case_y = Y + (1.3 * floatcos(-angle, degrees));
				new Float: krishka_x = X + (1.45 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_osnova[playerid] = CreateDynamicObject(15709, case_x, case_y, Z-1, 0.0,0.0,angle);
				kase_krishka[playerid] = CreateDynamicObject(15710, krishka_x, krishka_y, Z-0.71, 0.0,0.0,angle);
				GiveIteam(playerid, 284, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 6)
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(15845, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(15844, case_x, case_y, Z-0.8, 0.0,0.0,angle);
				GiveIteam(playerid, 290, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 7)
			{
				case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(15962, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(15961, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 300, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 8)
			{
				case_x = X + (1.7 * floatsin(-angle, degrees)), case_y = Y + (1.7 * floatcos(-angle, degrees));
				new Float: kr_x = X + (1.85 * floatsin(-angle, degrees)),Float: kr_y = Y + (1.85 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16452, kr_x, kr_y, Z-0.74, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16451, case_x, case_y, Z-1.0, 0.0,0.0,angle);
				GiveIteam(playerid, 328, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 9)
			{
				case_x = X + (1.6 * floatsin(-angle, degrees)), case_y = Y + (1.6 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16663, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16662, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 344, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 10)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16772, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16771, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 348, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 11)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(16965, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(16964, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 350, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 12)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(17205, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(17206, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 355, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 13)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(17608, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(17609, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 356, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else if(GetPVarInt(playerid, "case_type") == 14)
			{
				case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
				kase_krishka[playerid] = CreateDynamicObject(18237, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				kase_osnova[playerid] = CreateDynamicObject(18238, case_x, case_y, Z-0.7, 0.0,0.0,angle);
				GiveIteam(playerid, 360, 0, 1, 0, "Открытие кейса [Cases]");
			}
			else return CEF_HIDE(playerid, "Case");
			
			if(donate_case[playerid] == true) ProcessPlayerCredit(playerid, -120, "Кейс", true, true);
			if(donate_case[playerid] == false) GiveIteam(playerid, 259, 0, 1, 0, "Открытие кейса [Cases]");

			OpenCasePlayer(playerid, 0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, X + (0.95 * floatsin(-angle, degrees)), Y + (0.95 * floatcos(-angle, degrees)), Z + 0.2, 5000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, X + (0.5 * floatsin(-angle, degrees)), Y + (0.5 * floatcos(-angle, degrees)), Z - 0.5, case_x, case_y, Z - 0.85, 5000, CAMERA_MOVE);
			SetTimerEx("OpenCase", 7000, false, "i", playerid);
			OnBattlePass_Perfomance(playerid, 3, 1);
			AddPlayerAchiv(playerid, 24);
		}
		if(fast == 1)
		{
			kase_open[playerid] = 1;
			if(GetPVarInt(playerid, "case_type") == 1) GiveIteam(playerid, 258, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 2) GiveIteam(playerid, 261, 0, 1, 0, "Открытие кейса [Cases]"), OnBattlePass_Perfomance(playerid, 25, 1);
			if(GetPVarInt(playerid, "case_type") == 3) GiveIteam(playerid, 272, 0, 1, 0, "Открытие кейса [Cases]"), OnBattlePass_Perfomance(playerid, 26, 1);
			if(GetPVarInt(playerid, "case_type") == 4) GiveIteam(playerid, 278, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 5) GiveIteam(playerid, 284, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 6) GiveIteam(playerid, 290, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 7) GiveIteam(playerid, 300, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 8) GiveIteam(playerid, 328, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 9) GiveIteam(playerid, 344, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 10) GiveIteam(playerid, 348, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 11) GiveIteam(playerid, 350, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 12) GiveIteam(playerid, 355, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 13) GiveIteam(playerid, 356, 0, 1, 0, "Открытие кейса [Cases]");
			if(GetPVarInt(playerid, "case_type") == 14) GiveIteam(playerid, 360, 0, 1, 0, "Открытие кейса [Cases]");
			if(donate_case[playerid] == true) ProcessPlayerCredit(playerid, -120, "Кейс", true, true);
			if(donate_case[playerid] == false) GiveIteam(playerid, 259, 0, 1, 0, "Открытие кейса [Cases]");
			OpenCasePlayer(playerid, 1);
			OnBattlePass_Perfomance(playerid, 3, 1);
			AddPlayerAchiv(playerid, 24);
		}
	}
	return 1;
}

stock OpenCasePlayer(playerid, q)
{
	new prizeIndex, category;
	new case_type = GetPVarInt(playerid, "case_type");
	new index = GetCaseIndex(case_type);
	
	if(case_type == 0) return 0;

	new const GoldChance = chances[index][0];
    new const VioletChance = chances[index][1];
    new const RedChance = chances[index][2];
    new const BlueChance = chances[index][3];
    new const WhiteChance = chances[index][4];

    new totalChance = GoldChance + VioletChance + RedChance + BlueChance + WhiteChance;
    new randWeight = RandomEx(0, totalChance - 1);

    if(randWeight < GoldChance){
        category = 0; // Золотое
    }
	else if(randWeight < GoldChance + VioletChance){
        category = 1; // Фиолетовое
    }
    else if(randWeight < GoldChance + VioletChance + RedChance){
        category = 2; // Красное
    }
    else if(randWeight < GoldChance + VioletChance + RedChance + BlueChance){
        category = 3; // Синее
    }else{
        category = 4; // Белое
    }

	new const info_prizes[15][5] = {
		{-1, -1, -1, -1, -1}, {19, 15, 12, 8, 4}, {17, 13, 10, 6, 4}, {17, 14, 9, 6, 3}, {17, 13, 10, 6, 4},
		{25, 19, 15, 10, 4}, {16, 13, 10, 6, 4}, {17, 13, 10, 6, 4}, {14, 12, 9, 6, 4}, {15, 12, 9, 6, 4}, 
		{14, 12, 9, 5, 2}, {14, 10, 7, 4, 1}, {12, 10, 8, 5, 2}, {12, 11, 9, 6, 3}, {14, 11, 8, 6, 3}
	};

	prizeIndex = RandomEx(0, info_prizes[case_type][category]);

	if(q == 1){
		new fmt[256];
        format(fmt, sizeof fmt, "[%d,\"%s\",\"%s\",%d,%d,%d,%d]", 
	    g_case_info[index][prizeIndex][E_PRICE_PRIZE], 
	    g_case_info[index][prizeIndex][E_NAME_PRIZE],
	    case_names[index],
	    g_case_info[index][prizeIndex][E_TYPE_PRIZE], 
	    prizeIndex,
	    g_case_info[index][prizeIndex][E_TYPE_CASE],
	    g_case_info[index][prizeIndex][E_SIZE_PRIZE]);

	    SetPVarInt(playerid, "type_priz", prizeIndex + 1);
	    CEF_CREATE(playerid, 2, 4, "CaseResult", fmt);
	}
	else{
		new Float:X,Float:Y,Float:Z,Float:angle;

	    GetPlayerPos(playerid, X, Y, Z);
	    GetPlayerFacingAngle(playerid, angle);

	    new Float: case_x, Float: case_y;

	    case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
	    kase_prize[playerid] = CreateDynamicObject(g_case_info[index][prizeIndex][E_BLOCK_PRIZE], case_x, case_y, Z-0.8, 0.0, 0.0, angle);

	    SetPVarInt(playerid, "PrizeCases", prizeIndex);
	}

	return 1;
}

public: SelectPrizeCase(playerid)
{
	new fmt[256];
	new caseType = GetPVarInt(playerid, "case_type");
    new prizeIndex = GetPVarInt(playerid, "PrizeCases");
	new index = GetCaseIndex(caseType);

	format(fmt, sizeof fmt, "[%d,\"%s\",\"%s\",%d,%d,%d,%d]", 
	g_case_info[index][prizeIndex][E_PRICE_PRIZE], 
	g_case_info[index][prizeIndex][E_NAME_PRIZE],
	case_names[index],
	g_case_info[index][prizeIndex][E_TYPE_PRIZE], 
	prizeIndex,
	g_case_info[index][prizeIndex][E_TYPE_CASE],
	g_case_info[index][prizeIndex][E_SIZE_PRIZE]);

	SetPVarInt(playerid, "type_priz", prizeIndex + 1);
	CEF_CREATE(playerid, 2, 4, "CaseResult", fmt);
}

cmd:givecase(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, random111, type; else return SCM(playerid, 0xCECECEFF, "/givecase [ид игрока] [кол-во] [тип]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SCM(playerid, 0xCECECEFF, "Такого игрока нет");

	if(random111 > 100 || random111 < 1) return SCM(playerid, 0xCECECEFF, "Нельзя выдавать более 100 кейсов или менее 1 кейса за раз!");

	if(type < 1 || type > 14)
	{
		SCM(playerid, 0xCECECEFF, "Выберите тип:");
		SCM(playerid, 0xCECECEFF, "1 - Кейс 'Форсаж'");
		SCM(playerid, 0xCECECEFF, "2 - Кейс 'Темные дела'");
		SCM(playerid, 0xCECECEFF, "3 - Кейс 'Велесова ночь'");
		SCM(playerid, 0xCECECEFF, "4 - Кейс 'Оперской'");
		SCM(playerid, 0xCECECEFF, "5 - Кейс 'Новогодний'");
		SCM(playerid, 0xCECECEFF, "6 - Кейс 'Черное золото'");
		SCM(playerid, 0xCECECEFF, "7 - Кейс 'Охотничий'");
		SCM(playerid, 0xCECECEFF, "8 - Кейс 'Египетская сила'");
		SCM(playerid, 0xCECECEFF, "9 - Кейс 'Велесова ночь 2'");
		SCM(playerid, 0xCECECEFF, "10 - Кейс 'Рождественский Экспресс'");
		SCM(playerid, 0xCECECEFF, "11 - Кейс 'Путь воина'");
		SCM(playerid, 0xCECECEFF, "12 - Кейс 'Пиратский'");
		SCM(playerid, 0xCECECEFF, "13 - Кейс 'Проклятие'");
		SCM(playerid, 0xCECECEFF, "14 - Кейс 'Зимняя сказка'");
		return 1;
	}

	if(type == 1) GiveIteam(to_player, 258, 1, random111, 0);
	if(type == 2) GiveIteam(to_player, 261, 1, random111, 0);
	if(type == 3) GiveIteam(to_player, 272, 1, random111, 0);
	if(type == 4) GiveIteam(to_player, 278, 1, random111, 0);
	if(type == 5) GiveIteam(to_player, 284, 1, random111, 0);
	if(type == 6) GiveIteam(to_player, 290, 1, random111, 0);
	if(type == 7) GiveIteam(to_player, 300, 1, random111, 0);
	if(type == 8) GiveIteam(to_player, 328, 1, random111, 0);
	if(type == 9) GiveIteam(to_player, 344, 1, random111, 0);
	if(type == 10) GiveIteam(to_player, 348, 1, random111, 0);
	if(type == 11) GiveIteam(to_player, 350, 1, random111, 0);
	if(type == 12) GiveIteam(to_player, 355, 1, random111, 0);
	if(type == 13) GiveIteam(to_player, 356, 1, random111, 0);
	if(type == 14) GiveIteam(to_player, 360, 1, random111, 0);

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s выдал вам %d кейсов", GetPlayerNameEx(playerid), random111);
	SendClientMessage(to_player, 0xFFFFFFFF, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] выдал кейсы %s[%d] в кол-во %d шт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, random111);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	return 1;
}

cmd:givekey(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, random111; else return SCM(playerid, 0xCECECEFF, "Используйте: /givekey [ид игрока] [кол-во]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SCM(playerid, 0xCECECEFF, "Такого игрока нет");
	
	if(random111 > 100 || random111 < 1) return SCM(playerid, 0xCECECEFF, "Нельзя выдавать более 100 ключей или менее 1 ключа за раз!");
	
	GiveIteam(to_player, 259, 1, random111, 0);

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s выдал Вам %d ключей от кейсов", GetPlayerNameEx(playerid), random111);
	SendClientMessage(to_player, 0xFFFFFFFF, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] выдал ключи от кейсов %s[%d] в кол-во %d шт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, random111);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	return 1;
}
cmd:givecaseall(playerid, params[])
{	
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new random111, type; else return SCM(playerid, 0xCECECEFF, "/givecaseall [кол-во] [тип]");
	
	if(type < 1 || type > 14)
	{
		SCM(playerid, 0xCECECEFF, "Выберите тип:");
		SCM(playerid, 0xCECECEFF, "1 - Кейс 'Форсаж'");
		SCM(playerid, 0xCECECEFF, "2 - Кейс 'Темные дела'");
		SCM(playerid, 0xCECECEFF, "3 - Кейс 'Велесова ночь'");
		SCM(playerid, 0xCECECEFF, "4 - Кейс 'Оперской'");
		SCM(playerid, 0xCECECEFF, "5 - Кейс 'Новогодний'");
		SCM(playerid, 0xCECECEFF, "6 - Кейс 'Черное золото'");
		SCM(playerid, 0xCECECEFF, "7 - Кейс 'Охотничий'");
		SCM(playerid, 0xCECECEFF, "8 - Кейс 'Египетская сила'");
		SCM(playerid, 0xCECECEFF, "9 - Кейс 'Велесова ночь 2'");
		SCM(playerid, 0xCECECEFF, "10 - Кейс 'Рождественский Экспресс'");
		SCM(playerid, 0xCECECEFF, "11 - Кейс 'Путь воина'");
		SCM(playerid, 0xCECECEFF, "12 - Кейс 'Пиратский'");
		SCM(playerid, 0xCECECEFF, "13 - Кейс 'Проклятие'");
		SCM(playerid, 0xCECECEFF, "14 - Кейс 'Зимняя сказка'");
		return 1;
	}
	if(random111 > 100 || random111 < 1) return SCM(playerid, 0xCECECEFF, "Нельзя выдавать более 100 кейсов или менее 1 кейса за раз!");

	if(type == 1) type = 258;
	if(type == 2) type = 261;
	if(type == 3) type = 272;
	if(type == 4) type = 278;
	if(type == 5) type = 284;
	if(type == 6) type = 290;
	if(type == 7) type = 300;
	if(type == 8) type = 328;
	if(type == 9) type = 344;
	if(type == 10) type = 348;
	if(type == 11) type = 350;
	if(type == 12) type = 355;
	if(type == 13) type = 356;
	if(type == 14) type = 360;

	new query[64];
	format(query, sizeof query, "Администратор %s[%d] выдал вам %s в количестве %d шт.", GetPlayerNameEx(playerid), playerid, ItemsInfo[type][i_item_name], random111);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		GiveIteam(i, type, 1, random111, 0);

		GiveIteam(i, 259, 1, random111, 0);

		SCM(i, 0xFFFFFFFF, query);
	}
	
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] выдал кейсы %s всем в количестве %d шт", GetPlayerNameEx(playerid), playerid, ItemsInfo[type][i_item_name], random111);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	
	return 1;
}

#define BE_MIN_HLS 500.00 // здоровье ниже которого машина считается сломанной
#define BE_MAX_SPD_VAR 30 // максимальная скорость, можно изменять
#define BE_MAX_SPD BE_MAX_SPD_VAR*0.005  

new const BE_Bad_Vehs[] = {460, 464, 476, 511, 512, 513, 519, 520, 539, 553, 577, 592, 593, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563};
new bool: BE_Play_Check[MAX_PLAYERS];  

forward BadEngine();
public BadEngine()
{
    new veh, Float:spd[3], Float:hls;
    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;
        
        if(!BE_Play_Check[i]) continue;

        veh = GetPlayerVehicleID(i);

        if(!veh) continue; 

        GetVehicleHealth(veh, hls);

        if(hls < 300) SetVehicleHealth(veh, 350);

        if(hls > BE_MIN_HLS) continue;

        GetVehicleVelocity(veh, spd[0], spd[1], spd[2]);

        if(floatabs(spd[0]) > floatabs(spd[1]))
        {
            if(floatabs(spd[0]) > BE_MAX_SPD)
            {
                hls = BE_MAX_SPD / floatabs(spd[0]);
                SetVehicleVelocity(veh, spd[0] * hls, spd[1] * hls, spd[2]);
            }
        }
        else
        {
            if(floatabs(spd[1]) > BE_MAX_SPD)
            {
                hls = BE_MAX_SPD / floatabs(spd[1]);
                SetVehicleVelocity(veh, spd[0] * hls, spd[1] * hls, spd[2]);
            }
        }
    }
} 

new DailyreWards_Time[MAX_PLAYERS];

#include "systems/daily_rewards.inc"

#define MAX_KIOSKS				(50)

new kioskobj[MAX_KIOSKS];
new kiosktext[MAX_KIOSKS];
new array_kiosk_data[MAX_KIOSKS];

enum E_KIOSK_STRUCT
{
	K_SQL_ID,			// ид в базе данных
	K_NAME[24],			// название
	K_OWNER_ID,			// ид аккаунта владельца
	K_CITY,				// ид города
	K_ZONE,				// ид района
	K_IMPROVEMENTS,		// уровень улучшений
	K_BALANCE[21],			// бюджет бизнеса
	K_ARENDA_PRICE,
	K_RENT_DATE,		// аренда на n времени
	K_PRICE,			// стоимость бизнеса
	K_RENT_PRICE,		// плата за аренду в день
	K_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: K_POS_X,		// позиция бизнеса
	Float: K_POS_Y,		// позиция бизнеса
	Float: K_POS_Z,		// позиция бизнеса
	K_MIN_PRICE,
	// -------------------------
	K_OWNER_NAME[20 + 1],	// имя владельца
	K_INTER,
	Float: K_POS_X_INTER,
	Float: K_POS_Y_INTER,
	Float: K_POS_ANGEL_INTER,
	K_NALOG,
	K_DAY,
	K_MONTH,
	K_YEAR,
};

new g_kiosk[MAX_KIOSKS][E_KIOSK_STRUCT];
new g_kiosk_loaded;

stock GetImprovementsStall(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new count,
		query[248],
		Cache: result;
	format(query, sizeof query, "SELECT * FROM kiosks_items WHERE kiosk_id='%d'", GetKioskData(kiosk_id, K_SQL_ID));
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock GetNearestKiosk(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new kiosk_id = -1;
	new Float: my_dist;

	for(new idx; idx < g_kiosk_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			kiosk_id = idx;
		}
	}
	return kiosk_id;
}
CMD:kiosk_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kiosk_slot [id игрока] [кол-во слотов]");
	new string[1024], str[1024];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 15");

	AddPlayerData(to_player, P_KIOSK_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "kiosk_slots", GetPlayerData(to_player, P_KIOSK_SLOTS));

	format(string, sizeof(string), "Руководитель %s[%d] добавил игроку %s[%d] %d слотов под киоск", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(string, 0xFFFF00FF);

	format(str, sizeof(str), "Руководитель %s[%d] добавил вам %d слотов под киоск", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, str);

	return 1;
}

stock GetPlayerOwnableKiosk(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

public: LoadKiosks()
{
	new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM kiosk b LEFT JOIN accounts_canvasdev a ON a.id=b.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_KIOSKS)
	{
		rows = MAX_KIOSKS;
		print("[Kioski]: DB rows > MAX_KIOSKS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetKioskData(idx, K_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetKioskData(idx, K_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_kiosk[idx][K_NAME], mysql, 24);

		cache_get_field_content(idx, "balance", g_kiosk[idx][K_BALANCE], mysql, 21);

		SetKioskData(idx, K_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetKioskData(idx, K_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetKioskData(idx, K_PRICE,			cache_get_field_content_int(idx, "price"));
        SetKioskData(idx, K_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetKioskData(idx, K_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));
        SetKioskData(idx, K_NALOG,			cache_get_field_content_int(idx, "nalog"));
        SetKioskData(idx, K_MIN_PRICE,			cache_get_field_content_int(idx, "min_price"));
		SetKioskData(idx, K_POS_X,			cache_get_field_content_float(idx, "x"));
		SetKioskData(idx, K_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetKioskData(idx, K_POS_Z,			cache_get_field_content_float(idx, "z"));


        SetKioskData(idx, K_DAY,			cache_get_field_content_int(idx, "day"));
        SetKioskData(idx, K_MONTH,			cache_get_field_content_int(idx, "month"));
        SetKioskData(idx, K_YEAR,			cache_get_field_content_int(idx, "year"));

		SetKioskData(idx, K_INTER,			cache_get_field_content_int(idx, "inter"));
		SetKioskData(idx, K_POS_X_INTER, cache_get_field_content_float(idx, "x_inter"));
		SetKioskData(idx, K_POS_Y_INTER, cache_get_field_content_float(idx, "y_inter"));
		SetKioskData(idx, K_POS_ANGEL_INTER, cache_get_field_content_float(idx, "angel_inter"));

		cache_get_field_content(idx, "owner_name", g_kiosk[idx][K_OWNER_NAME], mysql, 21);
		mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET id=%d WHERE id=%d", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);

		kioskobj[idx] = CreateDynamicObject(GetKioskData(idx, K_INTER), GetKioskData(idx, K_POS_X_INTER), GetKioskData(idx, K_POS_Y_INTER), 1000, 0.0, 0.0, GetKioskData(idx, K_POS_ANGEL_INTER));

		array_kiosk_data[idx] = CreateDynamicSphere(GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z), 3.0, -1, -1);

		if(GetKioskData(idx, K_IMPROVEMENTS) > 2)
		{
			SetKioskData(idx, K_IMPROVEMENTS, 2);
			mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=%d WHERE id=%d", GetKioskData(idx, K_IMPROVEMENTS), GetKioskData(idx, K_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsKioskOwned(idx) && !strcmp(GetKioskData(idx, K_OWNER_NAME), "None", true))
		{
			SetKioskData(idx, K_OWNER_ID, 0);
            format(g_kiosk[idx][K_OWNER_NAME], 21, "Государство", 0);
			mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=1 WHERE id=%d", GetKioskData(idx, K_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(!IsKioskOwned(idx))
		{
			SetKioskData(idx, K_LOCK_STATUS, false);
		}
		CreatePickup(19134, 25, GetKioskData(idx, K_POS_X), GetKioskData(idx, K_POS_Y), GetKioskData(idx, K_POS_Z), 9, PICKUP_ACTION_TYPE_KIOSK_ENTER, idx);

		if(GetKioskData(idx, K_POS_ANGEL_INTER) == 0) kiosktext[idx] = CreateDynamicObject(15935, GetKioskData(idx, K_POS_X_INTER) + 0.04452, GetKioskData(idx, K_POS_Y_INTER) - 0.73069, 1000 + 3.61999,0.000000,0.000000, GetKioskData(idx, K_POS_ANGEL_INTER) + 180);
		else kiosktext[idx] = CreateDynamicObject(15935, GetKioskData(idx, K_POS_X_INTER) + 0.04452, GetKioskData(idx, K_POS_Y_INTER) + 0.73069, 1000 + 3.61999,0.000000,0.000000, GetKioskData(idx, K_POS_ANGEL_INTER) + 180);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL,sizeof STRING_GLOBAL,"{FF8800}Магазин №%d\n{0E0101}\"%s\"", idx,g_kiosk[idx][K_NAME]);
		SetDynamicObjectMaterialText(kiosktext[idx], 0,STRING_GLOBAL, 120, "Arial", 20, 1, 0xFFFFFFFF, 0xFFFFFFFF, 1);
	}

	g_kiosk_loaded = rows;
	cache_delete(result);

	printf("[Kiosk]: Киосков загружено: %d", g_kiosk_loaded);
}
stock SellKiosk(playerid)
{
	new businessid = GetPVarInt(playerid, "ownablekiosk_id");

	if(businessid != -1)
	{
		new kiosk_price = GetKioskData(businessid, K_PRICE);
		new kiosk_percent = kiosk_price / 100 * 60;
		new kiosk_improvemnts_price = 0;

		if(kiosk_improvemnts_price)
			kiosk_improvemnts_price = kiosk_improvemnts_price / 100 * 35;

		new query[200];
		new return_money = kiosk_percent;

		SetKioskData(businessid, K_OWNER_ID, 	0);

		AddPlayerData(playerid, P_BANK, +, return_money);

		BankLog(playerid, return_money, "Продажа бизнеса");

		SetKioskData(businessid, K_IMPROVEMENTS, 	0);
		format(g_kiosk[businessid][K_BALANCE], 21, "0");
		SetKioskData(businessid, K_RENT_DATE,		0);
		SetKioskData(businessid, K_LOCK_STATUS,	false);
		format(g_kiosk[businessid][K_OWNER_NAME], 21, "Государство", 0);

		format(query, sizeof query, "UPDATE accounts_canvasdev a,kiosk b SET a.bank=%d,b.improvements=1,b.owner_id=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetKioskData(businessid, K_SQL_ID));
		mysql_query(mysql, query, false);

		ModifyCashBalance(playerid, 0, "Продажа киоска государству", false, false);

		SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой киоск!");

		format(query, sizeof query, "Вы продали ваш киоск Государству за {99CC00}%d руб", kiosk_price);
		SendClientMessage(playerid, 0xCECECEFF, query);

		format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", kiosk_price);
		SendClientMessage(playerid, 0xFFFFFFFF, query);
	
		format(query, sizeof query, "~g~+%d rub", kiosk_price);
		GameText(playerid, query, 4000, 2);
	}
}

stock BuyPlayerKiosk(playerid, kiosk_id, bool: buy_from_owner = false, price = -1)
{
	if(price <= 0)
		price = GetKioskData(kiosk_id, K_PRICE);

	if(VerifyIntString(QueryPlayerBalance(playerid), price))
	{
		new query[256];

		format(query, sizeof query, "UPDATE accounts_canvasdev a, kiosk b SET a.money=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", SetPlayerIntStr(playerid, QueryPlayerBalance(playerid), -price), kiosk_id, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			SetKioskData(kiosk_id, K_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetKioskData(kiosk_id, K_IMPROVEMENTS, 	0);
			new time = gettime();
			if(!buy_from_owner)
			{
				format(g_kiosk[kiosk_id][K_BALANCE], 21, "0");
				SetKioskData(kiosk_id,	K_RENT_DATE,	0);
				SetKioskData(kiosk_id,	K_LOCK_STATUS,	false);
			}
			else
			{
				if(GetElapsedTime(GetKioskData(kiosk_id, K_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0) SetKioskData(kiosk_id, K_RENT_DATE, 0);
			}
			format(g_kiosk[kiosk_id][K_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

			ModifyCashBalance(playerid, -price, "Покупка киоска", false, true);

			format(query, sizeof query, "UPDATE kiosk SET improvements=1,balance=%s,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1",  GetKioskData(kiosk_id, K_BALANCE), GetKioskData(kiosk_id, K_RENT_DATE), GetKioskData(kiosk_id, K_LOCK_STATUS), GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);
			return 1;
		}
		SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
		return 0;
	}
	return 0;
}
stock SellDebtorsPropertyKiosk()
{
	new query[580];
	for(new i=0; i < g_kiosk_loaded; i ++)
	{
	    if(GetKioskData(i, K_OWNER_ID) != 0)
	    {
	        if(GetKioskData(i, K_RENT_DATE) < -1)
	        {
	            format(g_kiosk[i][K_OWNER_NAME], 21, "Государство", 0);
	            SetKioskData(i, K_OWNER_ID, 0);
	            SetKioskData(i, K_IMPROVEMENTS, 0);
	            SetKioskData(i, K_RENT_DATE, 0);

	            format(query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=1,rent=0 WHERE id='%d'", GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, query, false);
	        }
	    }
 	}
}

public: OnPlayerManageEvent(playerid, event)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	if(event == 0) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");
	if(event == 1)
	{
		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 1) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");

		if(!VerifyIntString(QueryPlayerBalance(playerid), 2000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

		ModifyCashBalance(playerid, -2000000, "Купил улучшение в киоске", true, true);

		SendClientMessage(playerid,0xFFA500FF,"Вы приобрели улучшение киоска {FFFFFF}2 {FFA500}уровня за {FFFFFF}2.000.000 {FFA500}руб.");

		SetKioskData(kiosk_id, K_IMPROVEMENTS,1);

		new fmt_text[100];
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET improvements=%d WHERE id=%d", GetKioskData(kiosk_id, K_IMPROVEMENTS), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);

		UpdKioskss(playerid);
	}
	if(event == 2)
	{
		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 0) return SendClientMessage(playerid,0xFFDE7AFF,"Вам пока что недоступно текущее улучшение, сначала купите предыдущее.");

		if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 2) return SendClientMessage(playerid,0xFFDE7AFF,"Это улучшение уже куплено.");

		if(!VerifyIntString(QueryPlayerBalance(playerid), 4000000)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
		
		ModifyCashBalance(playerid, -4000000, "Купил улучшение в киоске", true, true);

		SendClientMessage(playerid,0xFFA500FF,"Вы приобрели улучшение киоска {FFFFFF}3 {FFA500}уровня за {FFFFFF}4.000.000 {FFA500}руб.");

		SetKioskData(kiosk_id, K_IMPROVEMENTS,2);

		new fmt_text[100];
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET improvements=%d WHERE id=%d", GetKioskData(kiosk_id, K_IMPROVEMENTS), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);

		UpdKioskss(playerid);		
	}
	if(event == 3)
	{
	    new fmt_text[250];
	    format(fmt_text, sizeof fmt_text, "Текущая минимальная цена: %d руб.", GetKioskData(kiosk_id, K_MIN_PRICE));
	    IntfDialogCallRemote(playerid, DIALOG_KIOSK_MIN_PRICE, DIALOG_STYLE_INPUT,fmt_text,"{FFDE7A}Введите новое значение, если хотите изменить<n>Имейте в виду, что вы устанавливаете минимальную цену<n>не на одну единицу товара, а на само предложение.","Далее", "Назад");
	}
	if(event == 4) IntfDialogCallRemote(playerid, DIALOG_KIOSK_NALOG, DIALOG_STYLE_INPUT,"Установка налога","{FFDE7A}Введите процент налога на продажу (от {42B02C}1 {FFDE7A}до {42B02C}25).","Далее", "Назад");
	if(event == 5)
	{
		new fmt_text[2640],
		Cache: result;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE kiosk_id=%d", GetKioskData(kiosk_id, K_SQL_ID));
		result = mysql_query(mysql, fmt_text, true);

		new rows = cache_num_rows();

		new query[170], price, item, id, name[32], number[32], region[32], typenumber, aks_id, typeacs, skin_id, item_type;

		format(fmt_text, sizeof fmt_text, "");

		if(!rows) fmt_text = "";
		for(new i = 0; i < rows; i ++)
		{

			cache_get_field_content(i, "region", region);
			cache_get_field_content(i, "number", number);
			cache_get_field_content(i, "name", name);

		    typenumber = cache_get_field_content_int(i, "typenumber");
		    aks_id = cache_get_field_content_int(i, "aks_id");
		    typeacs = cache_get_field_content_int(i, "typeacs");
			skin_id = cache_get_field_content_int(i, "skin_id");
			item_type = cache_get_field_content_int(i, "item_type");
			price = cache_get_field_content_int(i, "price");
			item = cache_get_field_content_int(i, "item_id");
			id = cache_get_field_content_int(i, "id");

			if(item_type == 1) format(query, sizeof query, "[\"%s\", %d, [99, %d, \"%s %s\"], %d, \"%s\"],", name, price, typenumber ,number, region, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 2) format(query, sizeof query, "[\"%s\", %d, [%d, %d], %d, \"%s\"],", name, price, typeacs, aks_id, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 3) format(query, sizeof query, "[\"%s\", %d, [100,0,%d], %d, \"%s\"],", name, price, skin_id, id, GetKioskData(kiosk_id, K_NAME));
			if(item_type == 0) format(query, sizeof query, "[\"%s\", %d, %d, %d, \"%s\"],", name, price, item, id, GetKioskData(kiosk_id, K_NAME));
			strcat(fmt_text, query);
		}
		new str_len;
		str_len = strlen(fmt_text);
		strdel(fmt_text, str_len - 1, str_len);

		cache_delete(result);

	    STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s]", fmt_text);
	    CEF_HIDE(playerid, "StallCard");
		CEF_CREATE(playerid, 2, 4, "Stall", STRING_GLOBAL);

		SetPVarInt(playerid, "RemoveStallItems", 1);
	}
	if(event == 6)
	{
		new fmt_text[144];
		new day,month,year;
		getdate(year, month, day);
		ClearAnimations(playerid);
		ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
		SetKioskData(kiosk_id, K_DAY, day);
		SetKioskData(kiosk_id, K_MONTH, month);
		SetKioskData(kiosk_id, K_YEAR, year);
		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE kiosk SET day=%d,month=%d,year=%d WHERE id=%d", GetKioskData(kiosk_id, K_DAY),GetKioskData(kiosk_id, K_MONTH),GetKioskData(kiosk_id, K_YEAR), GetKioskData(kiosk_id, K_SQL_ID));
		mysql_query(mysql, fmt_text, false);
		CEF_CREATE(playerid, 1, 4,"StallManage");
		SetTimerEx("updkiosk", 3000, false, "i", playerid);
		SendClientMessage(playerid,0xFFA500FF,"Вы закончили уборку. Не забывайте, что убираться нужно не реже чем раз в {FFFFFF}1 {FFA500}день.");
		SendClientMessage(playerid,0xFFA500FF,"Иначе ваш киоск может начать ломаться и потеряет улучшения.");
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 0, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
		CEF_HIDE(playerid, "StallManage");
	}
	if(event == 7)
	{
		if(GetKioskData(kiosk_id, K_LOCK_STATUS)) SetKioskData(kiosk_id, K_LOCK_STATUS, false), SendClientMessage(playerid, 0x66CC00FF, "Киоск открыт");
		else SetKioskData(kiosk_id, K_LOCK_STATUS, true), SendClientMessage(playerid, 0xFF6600FF, "Киоск закрыт");
	}
	if(event == 8) callcmd::sellstall(playerid);
	
	if(event == 9)
	{
		new fmt[148]; 
		format(fmt, sizeof fmt, "{ffffff}Текущее название: '%s'\nЕсли хотите изменить его, введите новое название в поле ниже.", GetKioskData(kiosk_id, K_NAME));
		IntfDialogCallRemote(playerid, DIALOG_KIOSK_NAME, DIALOG_STYLE_INPUT,"Название киоска", fmt,"Готово", "Закрыть");
	}

	if(event == 10) IntfDialogCallRemote(playerid, DIALOG_KIOSK_INTER, DIALOG_STYLE_LIST,"{FFFF00}Список интерьеров","{FFFFFF}№1\t{ffa500}1.000.000 руб.\n{FFFFFF}№2\t{ffa500}1.500.000 руб.\n{FFFFFF}№3\t{ffa500}2.000.000 руб.\n{FFFFFF}№4\t{ffa500}3.000.000 руб.","Далее", "Назад"), CEF_HIDE(playerid, "StallManage");
	
	if(event == 11)
	{
		CEF_HIDE(playerid, "StallManage");
		IntfDialogCallRemote(playerid,INVALID_DIALOG_ID,DIALOG_STYLE_LIST,"Выберите действие","1. Разместить аксессуар\n2. Включить режим редактирования\n 3. Удалить все аксессуары с прилавка","Далее","Назад");
	}
	
	if(event == 255) CEF_HIDE(playerid, "StallManage");
	return 1;
}

public: OnPlayerStallCardEvent(playerid, event)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	if(kiosk_id != -1)
	{
		if(event == 255) CEF_HIDE(playerid, "StallCard");
	 	if(event == 1)
	 	{
	 	    new fmt_text[2640],
				Cache: result,
				biz_id;

			mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_text, true);

			new rows = cache_num_rows();

			if(!rows)
				return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");

			for(new i = 0; i < rows; i ++)
			{
				biz_id = cache_get_field_content_int(i, "id");
				
				if(biz_id == kiosk_id)
				{
		 	        CEF_HIDE(playerid, "StallCard");
		 	        CEF_CREATE(playerid, 1, 4, "StallManage");
                    updkiosk(playerid);
					SetTimerEx("updkiosk", 1000, false, "i", playerid);
		 	  	}
			}
			cache_delete(result);
	 	}
	 	if(event == 2)
	  	{
	  		if(GetKioskData(kiosk_id, K_LOCK_STATUS))
	  		{
	  		    SendClientMessage(playerid,0xFFDE7AFF,"Киоск закрыт.");
				return 1;
	  		}
	  		CEF_HIDE(playerid, "StallCard");
	  		CEF_HIDE(playerid, "Stall");
			ShowPlayerStall(playerid);
	  	}
	}
 	return 1;
}

stock ShowPlayerStall(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new fmt_text[2640],
	Cache: result;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE kiosk_id=%d", GetKioskData(kiosk_id, K_SQL_ID));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	new query[170], price, item, id, name[32], number[32], region[32], typenumber, aks_id, typeacs, skin_id, item_type;

	format(fmt_text, sizeof fmt_text, "");

	if(!rows) fmt_text = "";
	for(new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "region", region);
		cache_get_field_content(i, "number", number);
		cache_get_field_content(i, "name", name);
	
		typenumber = cache_get_field_content_int(i, "typenumber");
		aks_id = cache_get_field_content_int(i, "aks_id");
		typeacs = cache_get_field_content_int(i, "typeacs");
		skin_id = cache_get_field_content_int(i, "skin_id");
		item_type = cache_get_field_content_int(i, "item_type");
		price = cache_get_field_content_int(i, "price");
		item = cache_get_field_content_int(i, "item_id");
		id = cache_get_field_content_int(i, "id");

		if(item_type == 1) format(query, sizeof query, "[\"%s\", %d, [99, %d, \"%s %s\"], %d, \"%s\"],", name, price, typenumber ,number, region, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 2) format(query, sizeof query, "[\"%s\", %d, [%d, %d], %d, \"%s\"],", name, price, typeacs, aks_id, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 3) format(query, sizeof query, "[\"%s\", %d, [100,0,%d], %d, \"%s\"],", name, price, skin_id, id, GetKioskData(kiosk_id, K_NAME));
		if(item_type == 0) format(query, sizeof query, "[\"%s\", %d, %d, %d, \"%s\"],", name, price, item, id, GetKioskData(kiosk_id, K_NAME));
		strcat(fmt_text, query);
	}
	new str_len;
	str_len = strlen(fmt_text);
	strdel(fmt_text, str_len - 1, str_len);

	cache_delete(result);
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%s]", fmt_text);
	CEF_HIDE(playerid, "StallCard");
	CEF_CREATE(playerid, 2, 4, "Stall", STRING_GLOBAL);

	DeletePVar(playerid, "RemoveStallItems");
}

public: updkiosk(playerid){UpdKioskss(playerid);}

stock UpdKioskss(playerid)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	STRING_GLOBAL[0] = EOS;

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').level = %d", GetKioskData(kiosk_id, K_IMPROVEMENTS));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').balance = %s.00", GetKioskData(kiosk_id, K_BALANCE));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').owner.name = '%s'", GetKioskData(kiosk_id, K_NAME));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').owner.number = %d", kiosk_id);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').tax = %d", GetKioskData(kiosk_id, K_NALOG));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').day = %d", GetKioskData(kiosk_id, K_DAY));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').month = %d", GetKioskData(kiosk_id, K_MONTH));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').year = %d", GetKioskData(kiosk_id, K_YEAR));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('StallManage').paidDays = %d", GetKioskData(kiosk_id, K_RENT_DATE));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}
CMD:changestallname(playerid)
{
    new kiosk_id = GetNearestKiosk(playerid, 7.0);
	if(kiosk_id == -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находится возле своего киоска.");

	new fmt[148]; 
	format(fmt, sizeof fmt, "{ffffff}Текущее название: '%s'\nЕсли хотите изменить его, введите новое название в поле ниже.", GetKioskData(kiosk_id, K_NAME));
	IntfDialogCallRemote(playerid, DIALOG_KIOSK_NAME, DIALOG_STYLE_INPUT,"Название киоска", fmt,"Готово", "Закрыть");
	return 1;
}

CMD:sellstall(playerid)
{
    new fmt_text[2640],
		Cache: result,
		biz_id;
		
    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");

	new query[256];
	format(fmt_text, sizeof fmt_text, "");
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");

		format(query, sizeof query, "{FFFFFF}Киоск №%d\n", biz_id);
		strcat(fmt_text, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}
	IntfDialogCallRemote
	(
		playerid, DIALOG_KIOSK_SELL_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите киоск",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

stock GetStallItemsId(event)
{
	new query[64],
		count,
		Cache: result;
	format(query, sizeof query, "SELECT * FROM kiosks_items WHERE id=%d", event);
	result = mysql_query(mysql, query, true);
	if(!cache_num_rows()) count = -1;
	else count = cache_num_rows();
	cache_delete(result);
	return count;
}

public:OnPlayerStallBuy(playerid, event)
{
	new fmt_text[148],
		query[248],
		number[32], 
		region[32],
		Cache: result;

	format(fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE id=%d", event);
	result = mysql_query(mysql, fmt_text, true);

	if(!cache_num_rows()) return SCM(playerid, COLOR_BLUENEW, "Данный предемет был продан или снят с продажи.");

	new item_id = cache_get_field_content_int(0, "item_id");
	new count = cache_get_field_content_int(0, "count");
	new price = cache_get_field_content_int(0, "price");
	new owner_id = cache_get_field_content_int(0, "owner_id");
	new item_type = cache_get_field_content_int(0, "item_type");
	new typenumber = cache_get_field_content_int(0, "typenumber");
	new aks_id = cache_get_field_content_int(0, "aks_id");
	new typeacs = cache_get_field_content_int(0, "typeacs");
	new indx = cache_get_field_content_int(0, "indx");
	new skin_id = cache_get_field_content_int(0, "skin_id");

	cache_get_field_content(0, "region", region);
	cache_get_field_content(0, "number", number);

	cache_delete(result);

	new kiosk_id = GetNearestKiosk(playerid, 7.0);
	new to_player = GetPlayerIDBySqlID(owner_id);

	if(GetPlayerLevel(playerid) < 3) return SCM(playerid, -1, "Покупка в киосках доступна с 3 лвл.");

	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

	if(owner_id == GetPlayerAccountID(playerid))
	{
		if(item_type == 0) GiveIteam(playerid, item_id, 1, count, indx), SCM(playerid, 0xADCEEAFF, "Вы сняли ваш предмет с продажи.");

		if(item_type == 1)
		{
			new i = GetFreeItemsID();

			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, number, region, typenumber, type_item, get_id) VALUES (%d, 1, %d, \"%s\", \"%s\", %d, 1, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), number, region, typenumber, i);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));

			format(g_player_item[i][PI_NUMBER], 32, "%s", number);
			format(g_player_item[i][PI_REGION], 32, "%s", region);

			SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
			SetPlayerItem(i, PI_TYPE_ITEM, 		1);

			SCM(playerid, 0xADCEEAFF, "Вы сняли ваши автомобильные номера с продажи.");
		}
		if(item_type == 2)
		{
			new i = GetFreeItemsID();

			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, aks_id, typeacs, status, indx, type_item, get_id) VALUES (%d, 1, %d, %d, %d, 0, %d, 2, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), aks_id, typeacs, indx, i);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			SetPlayerItem(i, PI_AKS_ID, 		aks_id);
			SetPlayerItem(i, PI_TYPEACS, 		typeacs);
			SetPlayerItem(i, PI_STATUS, 		0);
			SetPlayerItem(i, PI_INDX, 			indx);
			SetPlayerItem(i, PI_TYPE_ITEM, 		2);

			SCM(playerid, 0xADCEEAFF, "Вы сняли ваш аксессуар с продажи.");
		}

		if(item_type == 3) GiveSkin(playerid, skin_id), SCM(playerid, 0xADCEEAFF, "Вы сняли вашу одежду с продажи.");

		format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
		mysql_query(mysql, query, false);
	}
	else
	{
		if(!VerifyIntString(QueryPlayerBalance(playerid), price)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

	    if(item_type == 0)
	    {
			DLGF(playerid, DIALOG_STALL_BUY_ITEM, DIALOG_STYLE_INPUT, "Покупка предмета", "{FFFFFF}Сколько вы желаете приобрести?\nНа продаже: {006400}%d {FFFFFF}ед.", "Далее", "Назад", count);

			SetPVarInt(playerid, "count", count);
			SetPVarInt(playerid, "price", price);
			SetPVarInt(playerid, "item_id", item_id);
			SetPVarInt(playerid, "indx_items", indx);
			SetPVarInt(playerid, "owner_id", owner_id);
			SetPVarInt(playerid, "count1", count);
			SetPVarInt(playerid, "id", event);
		}
		if(item_type == 1)
	    {
			new count1 = count;

			ModifyCashBalance(playerid, -price, "покупка автомобильных намеров в киоске");

			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));

			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);

			new i = GetFreeItemsID();

			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, number, region, typenumber, type_item, get_id) VALUES (%d, 1, %d, \"%s\", \"%s\", %d, 1, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), number, region, typenumber, i);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));

			format(g_player_item[i][PI_NUMBER], 32, "%s", number);
			format(g_player_item[i][PI_REGION], 32, "%s", region);

			SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
			SetPlayerItem(i, PI_TYPE_ITEM, 		1);
			
			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели автомобильные номера в киоске.");

			if(count1 - count != 0) format(query, sizeof query, "UPDATE kiosks_items SET count=%d WHERE id=%d LIMIT 1", count1 - count, event);
			else format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);

			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				ModifyCashBalance(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа автомобильных намеров в киоске");
				SCM(to_player, 0xADCEEAFF, "Ваши автомобильные номера в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts_canvasdev SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
		if(item_type == 2)
	    {
			new count1 = count;

			if(!VerifyIntString(QueryPlayerBalance(playerid), price)) return SCM(playerid, 0xADCEEAFF, "У вас недостаточно средств.");

			ModifyCashBalance(playerid, -price, "покупка аксессуара в киоске");

			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));

			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);

			new i = GetFreeItemsID();

			format(query, sizeof query, "INSERT INTO items (owner_id, type, slots, aks_id, typeacs, status, indx, type_item, get_id) VALUES (%d, 1, %d, %d, %d, 0, %d, 2, %d)", GetPlayerAccountID(playerid), GetInventorySlots(playerid), aks_id, typeacs, indx, i);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_OWNER_ID, 		GetPlayerAccountID(playerid));
			SetPlayerItem(i, PI_TYPE, 			1);
			SetPlayerItem(i, PI_SLOTS, 			GetInventorySlots(playerid));
			SetPlayerItem(i, PI_AKS_ID, 		aks_id);
			SetPlayerItem(i, PI_TYPEACS, 		typeacs);
			SetPlayerItem(i, PI_STATUS, 		0);
			SetPlayerItem(i, PI_INDX, 			indx);
			SetPlayerItem(i, PI_TYPE_ITEM, 		2);

			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели аксессуар в киоске.");

			if(count1 - count != 0) format(query, sizeof query, "UPDATE kiosks_items SET count=%d WHERE id=%d LIMIT 1", count1 - count, event);
			else format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);

			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				ModifyCashBalance(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа аксессуара в киоске");
				SCM(to_player, 0xADCEEAFF, "Ваш аксессуар в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts_canvasdev SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
		if(item_type == 3)
	    {
			ModifyCashBalance(playerid, -price, "покупка скина в киоске");

			format(g_kiosk[kiosk_id][K_BALANCE], 21, "%s", SetILPlayerInt(playerid, g_kiosk[kiosk_id][K_BALANCE], (price / 100) * GetKioskData(kiosk_id, K_NALOG)));

			format(query, sizeof query, "UPDATE kiosk SET balance=%s WHERE id=%d", GetKioskData(kiosk_id, K_BALANCE),GetKioskData(kiosk_id, K_SQL_ID));
			mysql_query(mysql, query, false);

			GiveSkin(playerid, skin_id);

			format(query, sizeof query, "DELETE FROM kiosks_items WHERE id=%d", event);
			mysql_query(mysql, query, false);

			SCM(playerid, 0xADCEEAFF, "Вы успешно приобрели одежду в киоске.");

			if(IsPlayerConnected(to_player) && IsPlayerLogged(to_player))
			{
				ModifyCashBalance(to_player, price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), "продажа скина в киоске");
				SCM(to_player, 0xADCEEAFF, "Вашу одежду в киоске преобрели.");
			}
			else
			{
				format(query, sizeof query, "UPDATE accounts_canvasdev SET bank = bank + %d WHERE id=%d LIMIT 1", price - ((price / 100) * GetKioskData(kiosk_id, K_NALOG)), owner_id);
				mysql_query(mysql, query, false);
			}
		}
	}
	CEF_HIDE(playerid, "Stall");
	return 1;
}
public:OnPlayerSelectStallItem(playerid, event)
{
	if(GetPVarInt(playerid, "RemoveStallItems") == 1)
	{
		new fmt_text[2640], 
			Cache: result;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE id=%d", event);
		result = mysql_query(mysql, fmt_text, true);

		new item = cache_get_field_content_int(0, "item_id");
		cache_delete(result);

		SetPVarInt(playerid, "RemoveItem", item), SetPVarInt(playerid, "ItemSQLid", event);

		IntfDialogCallRemote(playerid, DIALOG_REMOVE_STALL_ITEM, DIALOG_STYLE_MSGBOX, "Предмет", "Вы действительно хотите снять с продажи этот предмет?", "Да", "Нет");

		CEF_HIDE(playerid, "Stall");

		DeletePVar(playerid, "RemoveStallItems");
	}
}
CMD:sellmystall(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xFF6600FF, "Этим можно пользоваться со 2 уровня");
		
    if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmystall [id игрока] [стоимость]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(price < 1)
		return SendClientMessage(playerid, 0xFF6600FF, "Укажите стоимость продажи");

	if(!VerifyIntString(QueryPlayerBalance(to_player), price))
		return SendClientMessage(playerid, 0xFF6600FF, "У покупателя нет такого количества средств");

	new fmt_text[2640],
		Cache: result,
		kiosk_id;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного киоска во владении.");

	SetPVarInt(playerid, "to_player", to_player);
	SetPVarInt(playerid, "price", price);
	
	new query[256];
	format(fmt_text, sizeof fmt_text, "");
	for(new i = 0; i < rows; i ++)
	{
		kiosk_id = cache_get_field_content_int(i, "id");

		format(query, sizeof query, "{FFFFFF}Киоск №%d\n", kiosk_id);
		strcat(fmt_text, query);
		SetPlayerListitemValue(playerid, i, kiosk_id-1);
	}
	IntfDialogCallRemote
	(
		playerid, DIALOG_SELL_MYSTALL, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите киоск",
		fmt_text,
		"Выбрать", "Закрыть"
	);
	cache_delete(result);
	return 1;
}
CMD:stall(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new kiosk_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kiosk [номер киоска]");

	if(!(0 <= kiosk_id <= g_kiosk_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного киоска не существует на сервере");

	SetPlayerPos
	(
		playerid,
		GetKioskData(kiosk_id, K_POS_X),
		GetKioskData(kiosk_id, K_POS_Y),
		GetKioskData(kiosk_id, K_POS_Z)
	);

	new fmt_text[35];
	format(fmt_text, sizeof fmt_text, "Вы телепортировались к киоску №%d", kiosk_id);
	SendClientMessage(playerid, -1, fmt_text);
	return 1;
}
#define MAX_GARDENS			500
#define MAX_GARDENS_YAM		21

#define GetGardenData(%0,%1) 			g_garden[%0][%1]
#define SetGardenData(%0,%1,%2) 		g_garden[%0][%1] = %2
#define AddGardenData(%0,%1,%2,%3) 		g_garden[%0][%1] %2= %3

#define IsGardenOwned(%0)				(GetGardenData(%0, G_OWNER_ID) > 0)

new	G_STATUS_YAM[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_TYPE_YAM[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_STATUSS[MAX_GARDENS][MAX_GARDENS_YAM];
new	G_STATUS_WOTER[MAX_GARDENS][MAX_GARDENS_YAM];
new bool:G_HAS_WEED[MAX_GARDENS][MAX_GARDENS_YAM];
new bool:G_HAS_YDOB[MAX_GARDENS][MAX_GARDENS_YAM];
new bool:G_HAS_YDOB2[MAX_GARDENS][MAX_GARDENS_YAM];
new bool:G_HAS_YDOB_YES[MAX_GARDENS][MAX_GARDENS_YAM];
new rost[MAX_GARDENS][MAX_GARDENS_YAM];
new G_WT_ST[MAX_GARDENS][MAX_GARDENS_YAM];
new Garden_Status[MAX_GARDENS];
new array_gardens_data[MAX_GARDENS];
new array_gardens_data_2[MAX_GARDENS];
new array_gardens_data_3[MAX_GARDENS];
new array_gardens_yamka[MAX_GARDENS][MAX_GARDENS_YAM];
new array_gardens_yamka_2[MAX_GARDENS][MAX_GARDENS_YAM];
new array_gardens_yamka_3[MAX_GARDENS][MAX_GARDENS_YAM];

new gardenobj[MAX_GARDENS];
new gardenobj_1[MAX_GARDENS];
new gardenobj_1_woter[MAX_GARDENS];
new Text3D:gardenobj_1_label[MAX_GARDENS];
new gardenobj_2[MAX_GARDENS];
new gardendver[MAX_GARDENS];
new gardendyamka[MAX_GARDENS][MAX_GARDENS_YAM];
new Text3D:gardendyamkalab[MAX_GARDENS][MAX_GARDENS_YAM];
new Text3D:gardenlabel[MAX_GARDENS];
new Text3D:gardendvlabel[MAX_GARDENS];
new Text3D:gardendyamkasor[MAX_GARDENS][MAX_GARDENS_YAM];

new garden_name[9][32] =
{
	{"Помидоры"},
	{"Огурцы"},
	{"Марихуана"},
	{"Картофель"},
	{"Свёкла"},
	{"Перец"},
	{"Баклажан"},
	{"Капуста"},
	{"Морковь"}
};

new const Float:GardenGryadka_1[10][3] = 
{
	{2.3301700, 1.329370, -0.353425},
	{1.1589300, 1.179110, -0.353425},
	{0.0828660, 1.218390, -0.353425},
	{-1.106380, 1.110110, -0.353425},
	{-2.409940, 1.147260, -0.353425},
	{2.2354700, -1.30656, -0.353425},
	{1.0838900, -1.32176, -0.353425},
	{-0.030416, -1.34015, -0.353425},
	{-1.070720, -1.15078, -0.353425},
	{-2.323950, -1.31990, -0.353425}
};

new const Float:GardenGryadka_2[14][3] = 
{
	{3.2468700, 1.250690, -0.30281},
	{2.2132400, 1.212150, -0.30281},
	{1.2194400, 1.144390, -0.30281},
	{0.2158920, 1.262400, -0.30281},
	{-0.918480, 1.196750, -0.30281},
	{-1.912190, 1.130280, -0.30281},
	{-3.114080, 1.179900, -0.30281},
	{3.1987000, -1.35575, -0.30281},
	{2.2050000, -1.35272, -0.30281},
	{1.0236100, -1.33562, -0.30281},
	{0.1031830, -1.36212, -0.30281},
	{-0.969063, -1.35088, -0.30281},
	{-1.913220, -1.36969, -0.30281},
	{-3.044610, -1.38868, -0.30281}
};

new const Float:GardenGryadka_3[20][3] = 
{
	{1.5634500, -1.259690, -0.30954},
	{0.5423510, -1.285880, -0.30954},
	{-0.464825, -1.311840, -0.30954},
	{-1.486510, -1.328910, -0.30954},
	{-2.592960, -1.304490, -0.30954},
	{-3.790350, -1.285910, -0.30954},
	{-4.911210, -1.260120, -0.30954},
	{-4.854350, 1.3629200, -0.30954},
	{-3.850400, 1.3938200, -0.30954},
	{-2.874140, 1.3875700, -0.30954},
	{-1.775260, 1.3262900, -0.30954},
	{-0.786306, 1.2874100, -0.30954},
	{0.3654820, 1.2194600, -0.30954},
	{1.4934000, 1.2168800, -0.30954},
	{2.6332600, 1.2574800, -0.30954},
	{3.8631700, 1.2588600, -0.30954},
	{4.8718400, 1.2767000, -0.30954},
	{4.4897600, 0.1945770, -0.30954},
	{4.4936300, -0.697426, -0.30954},
	{4.4720600, -1.635830, -0.30954}
};

enum E_GARDEN_STRUCT
{
	G_SQL_ID,			// ид в базе данных
	G_OWNER_ID,			// ид аккаунта владельца
	G_STATUS,
	G_CITY,				// ид города
	G_ZONE,				// ид района
	G_IMPROVEMENTS,		// уровень улучшений
	G_RENT_DATE,		// аренда на n времени
	G_PRICE,			// стоимость бизнеса
	G_RENT_PRICE,		// плата за аренду в день
	G_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: G_POS_X,		// позиция бизнеса
	Float: G_POS_Y,		// позиция бизнеса
	Float: G_POS_Z,		// позиция бизнеса
	// -------------------------
	G_OWNER_NAME[20 + 1],	// имя владельца
	G_OREND_ID,		// ид аккаунта арендатора
	G_ARENDA_TIME,
	G_ARENDA_PRICE
};

new g_garden[MAX_GARDENS][E_GARDEN_STRUCT];
new g_garden_loaded;

public: LoadGardens()
{
	new query[85];
	new Cache: result, rows;

    result = mysql_query(mysql, "SELECT * FROM gardens", true);
	rows = cache_num_rows();

	if(rows > MAX_GARDENS)
	{
		rows = MAX_GARDENS;
		print("[Gardens]: DB rows > MAX_GARDENS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetGardenData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetGardenData(idx, G_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		SetGardenData(idx, G_STATUS, 	cache_get_field_content_int(idx, "status"));
		SetGardenData(idx, G_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetGardenData(idx, G_RENT_DATE,		cache_get_field_content_int(idx, "rent"));
		SetGardenData(idx, G_PRICE,			cache_get_field_content_int(idx, "price"));
        SetGardenData(idx, G_RENT_PRICE,			cache_get_field_content_int(idx, "rent_price"));
		SetGardenData(idx, G_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "g_lock"));
		SetGardenData(idx, G_POS_X,			cache_get_field_content_float(idx, "x"));
		SetGardenData(idx, G_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetGardenData(idx, G_POS_Z,			cache_get_field_content_float(idx, "z"));
		SetGardenData(idx, G_OREND_ID, 	cache_get_field_content_int(idx, "orend_id"));
		SetGardenData(idx, G_ARENDA_TIME, 	cache_get_field_content_int(idx, "arenda_time"));
		SetGardenData(idx, G_ARENDA_PRICE, 	cache_get_field_content_int(idx, "arenda_price"));
        cache_get_field_content(idx, "owner_name", g_garden[idx][G_OWNER_NAME], mysql, 21);

		format(query, sizeof query, "UPDATE gardens SET id=%d WHERE id=%d",idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);

        gardenlabel[idx] = CreateDynamic3DTextLabel("", -1, GetGardenData(idx, G_POS_X),GetGardenData(idx, G_POS_Y),GetGardenData(idx, G_POS_Z)+4, 10.0);

	   	if(GetGardenData(idx, G_OWNER_ID) == 0)
	   	{
	   	    SetGardenData(idx, G_IMPROVEMENTS,0);
	   	    format(g_garden[idx][G_OWNER_NAME], 21, "None", 0);
	   	    mysql_format(mysql, query, sizeof query, "UPDATE gardens SET owner_id=0,improvements=0,owner_name='None' WHERE id=%d", GetGardenData(idx, G_SQL_ID));
			mysql_query(mysql, query, false);
	   	}
		if(GetGardenData(idx, G_IMPROVEMENTS) > 0)
		{
			if(GetGardenData(idx, G_IMPROVEMENTS) < 3) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -2.67, GetGardenData(idx, G_POS_Y) + -0.009998, GetGardenData(idx, G_POS_Z) + 0.124374,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -2.67, GetGardenData(idx, G_POS_Y) + -0.009998, (GetGardenData(idx, G_POS_Z) + 0.124374) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}	
			if(GetGardenData(idx, G_IMPROVEMENTS) == 3) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -3.39779, GetGardenData(idx, G_POS_Y) + 0.025699, GetGardenData(idx, G_POS_Z) + 0.025609,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -3.39779, GetGardenData(idx, G_POS_Y) + 0.025699, (GetGardenData(idx, G_POS_Z) + 0.025609) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}
			if(GetGardenData(idx, G_IMPROVEMENTS) == 4) 
			{
				gardenobj_1[idx] = CreateDynamicObject(16560, GetGardenData(idx, G_POS_X) + -5.07046, GetGardenData(idx, G_POS_Y) + 0.075143, GetGardenData(idx, G_POS_Z) + 0.036848,0.00000, 0.00000, 0.0);
				gardenobj_1_label[idx] = CreateDynamic3DTextLabel("{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}0/150 л.", -1, GetGardenData(idx, G_POS_X) + -5.07046, GetGardenData(idx, G_POS_Y) + 0.075143, (GetGardenData(idx, G_POS_Z) + 0.036848) + 1.5, 2.0);
				gardenobj_1_woter[idx] = 0;
			}
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) > 1)
		{
			if(GetGardenData(idx, G_IMPROVEMENTS) < 4) gardenobj_2[idx] = CreateDynamicObject(16564, GetGardenData(idx, G_POS_X) + -0.034111, GetGardenData(idx, G_POS_Y) + -0.00752, GetGardenData(idx, G_POS_Z) + 0.017313,0.00000, 0.00000, 0.0);
			else gardenobj_2[idx] = CreateDynamicObject(16564, GetGardenData(idx, G_POS_X) + -0.434392, GetGardenData(idx, G_POS_Y) + -0.054589, GetGardenData(idx, G_POS_Z) + 0.461218,0.00000, 0.00000, 0.0);

		}
		if(GetGardenData(idx, G_IMPROVEMENTS) < 3)
		{
			for(new i = 0; i < 10; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
                array_gardens_yamka[idx][i] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_1[i][2] + 1, 1.0, -1, -1);
			}

			gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 2.97934, GetGardenData(idx, G_POS_Y) + 0.393404, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(16563, GetGardenData(idx, G_POS_X) + 2.97934, GetGardenData(idx, G_POS_Y) + 0.393404, GetGardenData(idx, G_POS_Z) + -0.000461,   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(16562, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
			array_gardens_data[idx] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + 2.97934, GetGardenData(idx, G_POS_Y) + 0.393404, GetGardenData(idx, G_POS_Z) + -0.000461, 1.5, -1, -1);
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) == 3)
		{
			for(new i = 0; i < 14; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_2[i][2] + 1, 2.0);
                array_gardens_yamka_2[idx][i] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_2[i][2] + 1, 1.0, -1, -1);
			}
		    gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 3.75328, GetGardenData(idx, G_POS_Y) + 0.393359, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(10938, GetGardenData(idx, G_POS_X) + 3.75328, GetGardenData(idx, G_POS_Y) + 0.393359, GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(10933, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
			array_gardens_data_2[idx] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + 3.75328, GetGardenData(idx, G_POS_Y) + 0.393359, GetGardenData(idx, G_POS_Z) + 0.00000, 1.5, -1, -1);
		}
		if(GetGardenData(idx, G_IMPROVEMENTS) == 4)
		{
			for(new i = 0; i < 20; i ++)
			{
				gardendyamkalab[idx][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(idx, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_3[i][2] + 1, 2.0);
                array_gardens_yamka_3[idx][i] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(idx, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(idx, G_POS_Z) + GardenGryadka_3[i][2] + 1, 1.0, -1, -1);
			}
		    gardendvlabel[idx] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(idx, G_POS_X) + 2.20977, GetGardenData(idx, G_POS_Y) + -2.19371, GetGardenData(idx, G_POS_Z) + 1, 2.0);
		    gardendver[idx] = CreateObject(16060, GetGardenData(idx, G_POS_X) + 2.20977, GetGardenData(idx, G_POS_Y) + -2.19371, GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.00000);
			gardenobj[idx] = CreateObject(16042, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0.0);
			array_gardens_data_3[idx] = CreateDynamicSphere(GetGardenData(idx, G_POS_X) + 2.20977, GetGardenData(idx, G_POS_Y) + -2.19371, GetGardenData(idx, G_POS_Z) + 0.00000, 1.5, -1, -1);
		}
        CallLocalFunction("UpdateGardenLabel", "i", idx);
		// -------------------------
        CreateDynamicMapIcon(GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z), 58, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(!IsGardenOwned(idx))
		{
			SetGardenData(idx, G_LOCK_STATUS, false);
		}
	}
	g_garden_loaded = rows;
	cache_delete(result);

	printf("[Огороды]: Огородов загружено: %d", g_garden_loaded);
}

public: UpdateGardenLabel(gardenid)
{
	new fmt_str[300 + 1];
	if(!IsGardenOwned(gardenid))
	{
	    format
		(
			fmt_str, sizeof fmt_str,
			"{FF8800}Огород {ffffff}№%d\n"\
			"{FF8800}Цена: {ffffff}%s {FF8800}руб\n"\
			"Для покупки введите  {ffffff}/buygarden",gardenid,formatInt(GetGardenData(gardenid, G_PRICE))
		);
	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"{FF8800}Огород {ffffff}№%d\n"\
			"{FF8800}Владелец: {ffffff}%s\n",
   			gardenid,GetGardenData(gardenid, G_OWNER_NAME)
		);
	}
	UpdateDynamic3DTextLabelText(gardenlabel[gardenid], 0xFFFF00FF, fmt_str);
}

stock ShowPlayerGardenPayForRent(playerid,garden)
{
	if(garden != -1)
	{
		new fmt_str[256];
		SetPVarInt(playerid, "garden_id", garden);
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Огород:<t><t><t><t>№%d\n"\
			"Оплаченных дней аренды:<t><t>%d из 30\n"\
			"Ежедневная арендная плата:<t>%d руб\n"\
			"На сколько дней Вы хотите арендовать огород?",
			garden,
			GetGardenData(garden, G_RENT_DATE),
			GetGardenData(garden, G_RENT_PRICE)
		);
		IntfDialogCallRemote(playerid, DIALOG_PAY_FOR_RENT_GARDEN, DIALOG_STYLE_INPUT, "{66CC00}Аренда огорода", fmt_str, "Оплатить", "Назад");
	}
}

stock GetNearestGarden(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new garden = -1;
	new Float: my_dist;

	for(new idx; idx < g_garden_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			garden = idx;
		}
	}
	return garden;
}

stock SellGarden(playerid, garden, to_player = INVALID_PLAYER_ID)
{
	if(garden != -1)
	{
	    SetGardenData(garden, G_OWNER_ID,		0);
        if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), GetGardenData(garden, G_PRICE) / 100 * 70));

			BankLog(playerid, GetGardenData(garden, G_PRICE) / 100 * 70, "Продажа огорода");

			DestroyDynamic3DTextLabel(gardendvlabel[garden]);
			DestroyDynamicObject(gardenobj_1[garden]);
			DestroyDynamicObject(gardenobj_2[garden]);
			DestroyObject(gardendver[garden]);
			DestroyObject(gardenobj[garden]);
			DestroyDynamicArea(array_gardens_data_2[garden]);
			DestroyDynamicArea(array_gardens_data_3[garden]);
			array_gardens_data_2[garden] = 0;
			array_gardens_data_3[garden] = 0;

			gardendver[garden] = CreateObject(16563, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + -0.000461,   0.00000, 0.00000, 0.00000);
			gardenobj[garden] = CreateObject(16562, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.0);
			gardendvlabel[garden] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1, 2.0);
			array_gardens_data[garden] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + -0.000461, 1.5, -1, -1);

			if(GetGardenData(garden, G_IMPROVEMENTS) == 3)
			{
				for(new i = 0; i < 14; i ++)
				{
					DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
					DestroyDynamicArea(array_gardens_yamka_2[garden][i]);
					array_gardens_yamka_2[garden][i] = 0;
					DestroyDynamic3DTextLabel(gardendyamkasor[garden][i]);
		            G_HAS_WEED[garden][i] = false;
					G_HAS_YDOB[garden][i] = false;
					G_HAS_YDOB2[garden][i] = false;
					G_HAS_YDOB_YES[garden][i] = false;
				}
				for(new i = 0; i < 10; i ++)
				{
					gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
                    array_gardens_yamka[garden][i] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 1.0, -1, -1);
				}
			}
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4)
			{
				for(new i = 0; i < 20; i ++)
				{
					DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
					DestroyDynamicArea(array_gardens_yamka_3[garden][i]);
					array_gardens_yamka_3[garden][i] = 0;
					DestroyDynamic3DTextLabel(gardendyamkasor[garden][i]);
		            G_HAS_WEED[garden][i] = false;
					G_HAS_YDOB[garden][i] = false;
					G_HAS_YDOB2[garden][i] = false;
					G_HAS_YDOB_YES[garden][i] = false;
				}
				for(new i = 0; i < 10; i ++)
				{
					gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
                    array_gardens_yamka[garden][i] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 1.0, -1, -1);
				}
			}

			SetGardenData(garden, G_IMPROVEMENTS,	0);

			SetGardenData(garden, G_RENT_DATE,		0);
			SetGardenData(garden, G_LOCK_STATUS,	false);
			new query[300];
			format(query, sizeof query, "UPDATE gardens SET owner_id=0,g_lock=0,improvements=0,owner_name='None' WHERE id=%d", GetGardenData(garden, G_SQL_ID));
			mysql_query(mysql, query, false);

			mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET bank=%s WHERE id=%d", GetPlayerData(playerid, P_BANK),GetPlayerAccountID(playerid));
			mysql_query(mysql, query, false);

			ModifyCashBalance(playerid, 0, "Продажа огорода государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой огород!");

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", GetGardenData(garden, G_PRICE) / 100 * 70);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

			format(g_garden[garden][G_OWNER_NAME], 21, "Государство", 0);
			CallLocalFunction("UpdateGardenLabel", "i", garden);
		}
		else
		{
			BuyPlayerGarden(to_player, garden, true);
		}
	}
	return 1;
}
stock BuyPlayerGarden(playerid, garden, bool: buy_from_owner = false, price = -1)
{
	if(!IsGardenOwned(garden))
	{
		if(price <= 0)
			price = GetGardenData(garden, G_PRICE);

		if(VerifyIntString(QueryPlayerBalance(playerid), price))
		{
			new query[256];

			format(query, sizeof query, "UPDATE gardens SET owner_id=%d, owner_name='%s' WHERE id=%d",  GetPlayerAccountID(playerid),GetPlayerNameEx(playerid), GetGardenData(garden, G_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{

				SetGardenData(garden, G_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetGardenData(garden, G_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{

					SetGardenData(garden,	G_RENT_DATE,	1);
					SetGardenData(garden,	G_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetGardenData(garden, G_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetGardenData(garden, G_RENT_DATE, rent_time);
					}
				}
				format(g_garden[garden][G_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateGardenLabel", "i", garden);

				ModifyCashBalance(playerid, -price, "Покупка огорода", false, true);

				format(query, sizeof query, "UPDATE gardens SET improvements=0,rent=1,g_lock=%d WHERE id=%d LIMIT 1", GetGardenData(garden, G_LOCK_STATUS), GetGardenData(garden, G_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock GetPlayerGardens(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

public: Garden_OnPlayerSelectUpgrade(playerid, type)
{
	new garden = GetPVarInt(playerid,"garden_id");

    if(GetGardenData(garden, G_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;

	if(type == 0)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 0) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		IntfDialogCallRemote
	    (
		   playerid, DIALOG_IMPROVEMENTS_BUY, DIALOG_STYLE_MSGBOX,
		   "Бочка для воды",
		   "{FFFFFF}Вы можете заливать в бочку воду с помощью канистры (доступна в крафте)\n"\
		   "{FFFFFF}и в дальнейшем наполнить свою лейку с бочки (обьём: {fab13b}150 литров{FFFFFF})\n"\
		   "{FFFFFF}Стоимость: {fab13b}50.000 руб.",
		   "Купить", "Назад"
	    );
	}
	if(type == 1)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 1) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 1) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		IntfDialogCallRemote
	    (
		   playerid, DIALOG_IMPROVEMENTS_BUY2, DIALOG_STYLE_MSGBOX,
		   "Ультрафиолетовая лампа",
		   "{FFFFFF}Благодаря лампе растения в огороде будут расти даже ночью.\n"\
		   "{FFFFFF}Стоимость: {fab13b}150.000 руб.",
		   "Купить", "Назад"
	    );
	}
	if(type == 2)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 2) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 2) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		IntfDialogCallRemote
	    (
		   playerid, DIALOG_IMPROVEMENTS_BUY3, DIALOG_STYLE_MSGBOX,
		   "Средняя теплица",
		   "{FFFFFF}Хотите приобрести {fab13b}среднюю {FFFFFF}теплицу?\n"\
		   "{FFFFFF}Количество ямок: {fab13b}14\n"\
		   "{FFFFFF}Стоимость: {fab13b}200.000 руб.",
		   "Купить", "Назад"
	    );
	}
	if(type == 3)
	{
		if(GetGardenData(garden, G_IMPROVEMENTS) > 3) return GameText(playerid, "~r~Это улучшение~n~уже куплено", 3000, 2);
		if(GetGardenData(garden, G_IMPROVEMENTS) != 3) return GameText(playerid, "~r~Предыдущее улучшение~n~не куплено", 3000, 2);
		IntfDialogCallRemote
	    (
		   playerid, DIALOG_IMPROVEMENTS_BUY4, DIALOG_STYLE_MSGBOX,
		   "Большая теплица",
		   "{FFFFFF}Хотите приобрести {fab13b}большую {FFFFFF}теплицу?\n"\
		   "{FFFFFF}Количество ямок: {fab13b}20\n"\
		   "{FFFFFF}Стоимость: {fab13b}300.000 руб.",
		   "Купить", "Назад"
	    );
	}
	return true;
}
public: OnPlayerGardensMenu(playerid, type)
{
	new garden = GetPVarInt(playerid,"garden_id");

	if(type == 0) //Закрыть огород
	{
		new ownerID = GetGardenData(garden, G_OWNER_ID);
        new renterID = GetGardenData(garden, G_OREND_ID);
        new playerID = GetPlayerAccountID(playerid);

        if(renterID != 0)
        {
            if(playerID != renterID)
                return GameText(playerid, "~r~У вас нет ключей от теплицы так как вы сдали её в аренду.", 3000, 2);
        }
        else
        {
            if(playerID != ownerID)
                return 1;
        }
    
	    if(GetGardenData(garden, G_LOCK_STATUS) == 1) SetGardenData(garden, G_LOCK_STATUS,0);
	    else
	    {
	        SetGardenData(garden, G_LOCK_STATUS,1);
         	if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
	   		if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),50,   0.00000, 0.00000, 0.0);
	    }

		new query[144];
        format(query, sizeof query, "UPDATE gardens SET g_lock=%d WHERE id=%d",GetGardenData(garden, G_LOCK_STATUS), GetGardenData(garden, G_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "interface('Gardens').setDoorStatus(%d)",GetGardenData(garden, G_LOCK_STATUS));
		CEF_CREATE(playerid, 1, 2, query);
	}

	if(type == 1) // продажа
	{
		if(GetGardenData(garden, G_OWNER_ID) == GetPlayerAccountID(playerid))
	    {
			SetCameraBehindPlayer(playerid);
		    CEF_HIDE(playerid, "Gardens");
	        SellGarden(playerid, garden);
		}
	}

	if(type == 2) SetCameraBehindPlayer(playerid), CEF_HIDE(playerid, "Gardens"); // закрыть

	if(type == 3)
	{
		if(GetGardenData(garden, G_OWNER_ID) == GetPlayerAccountID(playerid))
	    {
		    if(GetGardenData(garden, G_OREND_ID) == 0)
            {
                IntfDialogCallRemote
	            (
		            playerid, DIALOG_SEND_ORENDA_GARDEN, DIALOG_STYLE_INPUT,
		            "Аренда огорода",
		            "{FFFFFF}Введите ID арендатора, длительность аренды (в часах) и стоимость, используя пробел\n"\
		            "{FFFFFF}Пример: {fab13b}0 3 15000 {FFFFFF}- сдать огород в аренду игроку 0 ID на 3 часа за 15.000 руб.",
		            "Готово", "Закрыть"
	            );
		    }
		    else
		    {
			    new remaining = GetGardenData(garden, G_ARENDA_TIME) - gettime();

                if(remaining < 0) remaining = 0;

                new hours = remaining / 3600;
                new minutes = (remaining % 3600) / 60;

			    new straf = GetGardenData(garden, G_ARENDA_PRICE);

			    new fmt_text[215];
                format
                (
                    fmt_text, sizeof fmt_text,
                    "{AFAFAF}Вы уже сдаете этот огород в аренду, хотите перервать её досрочно?\n"\
                    "{FFFFFF}Оставшееся время аренды: {FF8000}%d ч. и %d мин.\n"\
                    "{FF8000}Вам предстоит оплатить арендатору штраф в размере %s руб.",
				    hours, 
				    minutes,
				    formatInt(straf)
                );
                IntfDialogCallRemote(playerid, DIALOG_ARENDA_STOP, DIALOG_STYLE_MSGBOX, "Прекращение договора аренды", fmt_text, "Да", "Закрыть");
			}
		}
		else
		{
			new remaining = GetGardenData(garden, G_ARENDA_TIME) - gettime();

            if(remaining < 0) remaining = 0;

            new hours = remaining / 3600;
            new minutes = (remaining % 3600) / 60;

			new fmt_text[215];
            format
            (
                fmt_text, sizeof fmt_text,
                "{AFAFAF}Хотите отказаться от аренды теплицы?\n"\
                "{FFFFFF}Оставшееся время аренды: {FF8000}%d ч. и %d мин.\n"\
                "{FF8000}Внимание! Потраченные на аренду деньги возвращены не будут.",
				hours, 
				minutes
            );
            IntfDialogCallRemote(playerid, DIALOG_ARENDA_STOP_2, DIALOG_STYLE_MSGBOX, "Прекращение договора аренды", fmt_text, "Да", "Закрыть");
		}
	}
	return 1;
}

public: gardengryadka(garden,yamka)
{
    new fmt_rank[144];
    if(G_STATUS_WOTER[garden][yamka] == 0)
    {
        new rand = 0;
	    format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Требует полива",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
		UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
        return 1;
    }
    G_STATUSS[garden][yamka] ++;

	if(!G_HAS_WEED[garden][yamka])
    {
        if(RandomEx(1, 500) <= 5)
        {
			if(G_STATUSS[garden][yamka] != 100)
	        {
                G_HAS_WEED[garden][yamka] = true;
			
                if(GetGardenData(garden, G_IMPROVEMENTS) < 3)
		        {
                    gardendyamkasor[garden][yamka] = CreateDynamic3DTextLabel("{FFFFFF}Сорняк", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] + 0.7, 2.0);
		        }
		        if(GetGardenData(garden, G_IMPROVEMENTS) == 3)
		        {
			        gardendyamkasor[garden][yamka] = CreateDynamic3DTextLabel("{FFFFFF}Сорняк", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] + 0.7, 2.0);
		        }
		        if(GetGardenData(garden, G_IMPROVEMENTS) == 4)
		        {
			        gardendyamkasor[garden][yamka] = CreateDynamic3DTextLabel("{FFFFFF}Сорняк", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] + 0.7, 2.0);
				}
			}
		}
    }

    if(G_STATUSS[garden][yamka] == 100)
	{
	    if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	    if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	    if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka],   GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] + 0.3,0.12,   0.00000, 0.00000, 0.0000);
	   
	    G_WT_ST[garden][yamka] = 0;
	    G_STATUSS[garden][yamka] = 0;
	    KillTimer(rost[garden][yamka]);
	    G_STATUS_WOTER[garden][yamka] = 0;
	    G_STATUS_YAM[garden][yamka] = 4;
		format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Нажмите {FF8800}ALT {FFFFFF}для сбора",garden_name[G_TYPE_YAM[garden][yamka]-1]);
		UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
		return 1;
	}

	if(G_STATUSS[garden][yamka] == 10) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.9,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 20) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.8,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 30) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.7,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 40) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.6,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 50) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.5,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 60) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.4,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 70) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.3,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 80) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.2,0.12,   0.00000, 0.00000, 0.0000);
	
	if(G_STATUSS[garden][yamka] == 90) 
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_1[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_2[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);
		else if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendyamka[garden][yamka], GetGardenData(garden, G_POS_X) + GardenGryadka_3[yamka][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[yamka][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[yamka][2] - 0.1,0.12,   0.00000, 0.00000, 0.0000);



    if(G_STATUSS[garden][yamka] == 25) G_STATUS_WOTER[garden][yamka] --;
    if(G_STATUSS[garden][yamka] == 50) G_STATUS_WOTER[garden][yamka] --;
    if(G_STATUSS[garden][yamka] == 75) G_STATUS_WOTER[garden][yamka] --;
    new rand = RandomEx(1,9);
    if(G_STATUS_WOTER[garden][yamka] == 1) format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Почва: {FF8800}влажная",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
	if(G_STATUS_WOTER[garden][yamka] == 2) format(fmt_rank, sizeof fmt_rank,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.%d %\n{FFFFFF}Почва: {FF8800}очень мокрая",garden_name[G_TYPE_YAM[garden][yamka]-1],G_STATUSS[garden][yamka],rand);
	UpdateDynamic3DTextLabelText(gardendyamkalab[garden][yamka], 0xFFFF00FF, fmt_rank);
	return 1;
}

CMD:asellgarden(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");

    extract params -> new garden; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellgarden [номер огорода]");

	if(!(0 <= garden <= g_garden_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного огорода не существует на сервере");
	new query[256];
    
	DestroyDynamic3DTextLabel(gardendvlabel[garden]);
	DestroyDynamicObject(gardenobj_1[garden]);
	DestroyDynamic3DTextLabel(gardenobj_1_label[garden]);
	DestroyDynamicObject(gardenobj_2[garden]);
	DestroyObject(gardendver[garden]);
	DestroyObject(gardenobj[garden]);
	DestroyDynamicArea(array_gardens_data_2[garden]);
	DestroyDynamicArea(array_gardens_data_3[garden]);
	array_gardens_data_2[garden] = 0;
	array_gardens_data_3[garden] = 0;

	gardendver[garden] = CreateObject(16563, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + -0.000461,   0.00000, 0.00000, 0.00000);
	gardenobj[garden] = CreateObject(16562, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z),   0.00000, 0.00000, 0.0);
	gardendvlabel[garden] = CreateDynamic3DTextLabel("{FFA500}Двери теплицы", -1, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1, 2.0);
	array_gardens_data[garden] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + -0.000461, 1.5, -1, -1);

	if(GetGardenData(garden, G_IMPROVEMENTS) == 3)
	{
		for(new i = 0; i < 14; i ++)
		{
			DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
			DestroyDynamicArea(array_gardens_yamka_2[garden][i]);
			array_gardens_yamka_2[garden][i] = 0;
			DestroyDynamic3DTextLabel(gardendyamkasor[garden][i]);
		    G_HAS_WEED[garden][i] = false;
			G_HAS_YDOB[garden][i] = false;
			G_HAS_YDOB2[garden][i] = false;
			G_HAS_YDOB_YES[garden][i] = false;
		}
		for(new i = 0; i < 10; i ++)
		{
			gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
            array_gardens_yamka[garden][i] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 1.0, -1, -1);
		}
	}
	if(GetGardenData(garden, G_IMPROVEMENTS) == 4)
	{
		for(new i = 0; i < 20; i ++)
		{
			DestroyDynamic3DTextLabel(gardendyamkalab[garden][i]);
			DestroyDynamicArea(array_gardens_yamka_3[garden][i]);
			array_gardens_yamka_3[garden][i] = 0;
			DestroyDynamic3DTextLabel(gardendyamkasor[garden][i]);
		    G_HAS_WEED[garden][i] = false;
			G_HAS_YDOB[garden][i] = false;
			G_HAS_YDOB2[garden][i] = false;
			G_HAS_YDOB_YES[garden][i] = false;
		}
		for(new i = 0; i < 10; i ++)
		{
			gardendyamkalab[garden][i] = CreateDynamic3DTextLabel("{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка", -1, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 2.0);
            array_gardens_yamka[garden][i] = CreateDynamicSphere(GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1, 1.0, -1, -1);
		}
	}

	SetGardenData(garden, G_IMPROVEMENTS,	0);
    SetGardenData(garden, G_OWNER_ID,		0);
	SetGardenData(garden, G_RENT_DATE,		0);
	SetGardenData(garden, G_LOCK_STATUS,	false);
	format(query, sizeof query, "UPDATE gardens SET owner_id=0,g_lock=0,improvements=0,owner_name='None' WHERE id=%d", GetGardenData(garden, G_SQL_ID));
	mysql_query(mysql, query, false);

	format(g_garden[garden][G_OWNER_NAME], 21, "Государство", 0);
	CallLocalFunction("UpdateGardenLabel", "i", garden);
	return 1;
}
CMD:addgarden(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addgarden [цена] [цена аренды]");
	
	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	EditObjectPlayer[playerid] = CreateDynamicObject(16042, x, y, z, 0, 0, 0);
	EditDynamicObject(playerid, EditObjectPlayer[playerid]);
	SetPVarInt(playerid, "create_garden", 1);
	SetPVarInt(playerid, "price", price);
	SetPVarInt(playerid, "rent_price", rent_price);
	return 1;
}

CMD:gotogarden(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new garden; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /togar [номер огорода]");

	if(!(0 <= garden <= g_garden_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного огорода не существует на сервере");

	SetPlayerPos
	(
		playerid,
		GetGardenData(garden, G_POS_X),
		GetGardenData(garden, G_POS_Y),
		GetGardenData(garden, G_POS_Z)+1
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к огороду №%d", garden);
	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:sellgarden(playerid) SCM(playerid, 0xFFFFFFFF, "Используйте команду /garden для продажи огорода");

CMD:buygarden(playerid, params[])
{
	new garden = GetNearestGarden(playerid, 6.0);
	if(garden != -1)
	{
		if(GetPlayerOwnableGarden(playerid) + 1 > GetPlayerGardenSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество огородов.");

	    if(GetGardenData(garden, G_STATUS) == -1)
	    {
			SetPVarInt(playerid, "buy_biz_id", garden);
			new fmt_str[376];

			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Огород: {FFA500}№%d\n\
				{FFFFFF}Стоимость: {FFA500}%s {FFFFFF} руб",
				garden,
				formatInt(GetGardenData(garden, G_PRICE))
			);

			IntfDialogCallRemote(playerid, DIALOG_GARDEN_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка огорода", fmt_str, "Купить", "Закрыть");
		}
		else
		{
			new houseid = GetNearestHouse(playerid, 25.0);
			if(houseid != -1) if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не можете купить данный огород, данный огород может только купить владелец дома.");
			SetPVarInt(playerid, "buy_biz_id", garden);
			new fmt_str[376];

			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Огород: {FFA500}№%d\n\
				{FFFFFF}Стоимость: {FFA500}%s {FFFFFF} руб",
				garden,
				formatInt(GetGardenData(garden, G_PRICE))
			);

			IntfDialogCallRemote(playerid, DIALOG_GARDEN_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка огорода", fmt_str, "Купить", "Закрыть");
		}
	}
	else SendClientMessage(playerid, 0xFFDF87FF, "Вы должны находиться на огороде который хотите приобрести");

	return 1;
}

CMD:sellmygarden(playerid,params[])
{
	new garden = GetNearestGarden(playerid, 7.0);
	if(garden != -1)
	{
	    if(GetGardenData(garden,G_OWNER_ID) == GetPlayerAccountID(playerid))
	    {
			if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Продавать огород можно только с {99ff00}2{CECECE} уровня");
			if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmygarden [id игрока] [стоимость]");
			extract params -> new to_player, price;

			if(!VerifyIntString(QueryPlayerBalance(to_player), price))
				return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

			if(GetPlayerOwnableGarden(to_player) + 1 > GetPlayerGardenSlots(to_player)) 
				return SendClientMessage(playerid, 0x3399FFFF, "Игрок уже имеете максимально количество огородов.");

			if(IsPlayerInRangeOfPoint(playerid, 7.0, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z)) && IsPlayerInRangeOfPoint(to_player, 7.0, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z)))
			{
				SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_GARDEN,garden, price);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около огорода");
  		}
	}
	else SCM(playerid, COLOR_GREY, "Вы должны быть возле вашего огорода.");
	
	return 1;
}

CMD:garden(playerid)
{
	new garden = GetNearestGarden(playerid, 6.0);
	if(garden != -1)
	{
	    if(GetGardenData(garden,G_OWNER_ID) != GetPlayerAccountID(playerid) && GetGardenData(garden,G_OREND_ID) != GetPlayerAccountID(playerid)) return GameText(playerid, "~r~Недоступно", 3000, 2);
		
		SetPlayerCameraPos(playerid, GetGardenData(garden, G_POS_X) + 3.78888, GetGardenData(garden, G_POS_Y) + 0.41373, GetGardenData(garden, G_POS_Z) + 1);
		SetPlayerCameraLookAt(playerid, GetGardenData(garden, G_POS_X), GetGardenData(garden, G_POS_Y), GetGardenData(garden, G_POS_Z));

		SetPVarInt(playerid, "garden_id",garden);

		new idgarden;
		if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
		if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
		if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;

		STRING_GLOBAL[0] = EOS;
		for(new i; i < idgarden; i ++)
		{
			if(G_STATUS_YAM[garden][i] == 0) continue;

			if(G_TYPE_YAM[garden][i] == 1) strcat(STRING_GLOBAL, "[\"Помидоры\", 1],");
			if(G_TYPE_YAM[garden][i] == 2) strcat(STRING_GLOBAL, "[\"Огурцы\", 1],");
			if(G_TYPE_YAM[garden][i] == 3) strcat(STRING_GLOBAL, "[\"Марихуанна\", 1],");
			if(G_TYPE_YAM[garden][i] == 4) strcat(STRING_GLOBAL, "[\"Картофель\", 1],");
			if(G_TYPE_YAM[garden][i] == 5) strcat(STRING_GLOBAL, "[\"Свёкла\", 1],");
			if(G_TYPE_YAM[garden][i] == 6) strcat(STRING_GLOBAL, "[\"Перец\", 1],");
			if(G_TYPE_YAM[garden][i] == 7) strcat(STRING_GLOBAL, "[\"Баклажан\", 1],");
			if(G_TYPE_YAM[garden][i] == 8) strcat(STRING_GLOBAL, "[\"Капуста\", 1],");
			if(G_TYPE_YAM[garden][i] == 9) strcat(STRING_GLOBAL, "[\"Морковь\", 1],");
		}

		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d, [%s], %d, [[0,50000],[1,150000],[2,200000],[3,300000]]]", GetGardenData(garden, G_LOCK_STATUS), STRING_GLOBAL, GetGardenData(garden, G_IMPROVEMENTS));
		CEF_CREATE(playerid, 2, 4, "Gardens", STRING_GLOBAL);

	}
	else SendClientMessage(playerid, 0xFFDF87FF, "Вы должны находиться возле огорода");

	return true;
}

public: OnHarvestingPlayerComplete(playerid)
{
	if(GetPVarInt(playerid, "g_garden_loaded") != 0 && GetPVarInt(playerid, "idgarden") != 0)
	{
		new idx = GetPVarInt(playerid, "g_garden_loaded") - 1;
		new i = GetPVarInt(playerid, "idgarden") - 1;

        if(G_HAS_WEED[idx][i])
        {
			if(G_HAS_YDOB[idx][i])
            {
				if(G_TYPE_YAM[idx][i] == 1) GiveIteam(playerid, 171, 1, 15, 0);
		        if(G_TYPE_YAM[idx][i] == 2) GiveIteam(playerid, 170, 1, 15, 0);
		        if(G_TYPE_YAM[idx][i] == 3) GiveIteam(playerid, 169, 1, 15, 0);
		        if(G_TYPE_YAM[idx][i] == 4) GiveIteam(playerid, 337, 1, 15, 0);
		        if(G_TYPE_YAM[idx][i] == 5) GiveIteam(playerid, 337, 1, 15, 1);
		        if(G_TYPE_YAM[idx][i] == 6) GiveIteam(playerid, 337, 1, 15, 2);
		        if(G_TYPE_YAM[idx][i] == 7) GiveIteam(playerid, 337, 1, 15, 3);
		        if(G_TYPE_YAM[idx][i] == 8) GiveIteam(playerid, 337, 1, 15, 4);
		        if(G_TYPE_YAM[idx][i] == 9) GiveIteam(playerid, 337, 1, 15, 5);

		        OnBattlePass_Perfomance(playerid, 24, 15);

                SCMF(playerid, 0xFFFFFFFF, "Вы собрали {33AA33}\"%s\" {FFFFFF}в количестве {33AA33}15{FFFFFF} шт с грядки", garden_name[G_TYPE_YAM[idx][i]-1]);
		        CEF_HIDE(playerid, "Harvesting");
			}
			else
			{
				if(G_TYPE_YAM[idx][i] == 1) GiveIteam(playerid, 171, 1, 6, 0);
		        if(G_TYPE_YAM[idx][i] == 2) GiveIteam(playerid, 170, 1, 6, 0);
		        if(G_TYPE_YAM[idx][i] == 3) GiveIteam(playerid, 169, 1, 6, 0);
		        if(G_TYPE_YAM[idx][i] == 4) GiveIteam(playerid, 337, 1, 6, 0);
		        if(G_TYPE_YAM[idx][i] == 5) GiveIteam(playerid, 337, 1, 6, 1);
		        if(G_TYPE_YAM[idx][i] == 6) GiveIteam(playerid, 337, 1, 6, 2);
		        if(G_TYPE_YAM[idx][i] == 7) GiveIteam(playerid, 337, 1, 6, 3);
		        if(G_TYPE_YAM[idx][i] == 8) GiveIteam(playerid, 337, 1, 6, 4);
		        if(G_TYPE_YAM[idx][i] == 9) GiveIteam(playerid, 337, 1, 6, 5);

		        OnBattlePass_Perfomance(playerid, 24, 6);

                SCMF(playerid, 0xFFFFFFFF, "Вы собрали {33AA33}\"%s\" {FFFFFF}в количестве {33AA33}6{FFFFFF} шт с грядки", garden_name[G_TYPE_YAM[idx][i]-1]);
		        CEF_HIDE(playerid, "Harvesting");
			}
        }
        else
        {
			if(G_HAS_YDOB[idx][i])
            {
		        if(G_TYPE_YAM[idx][i] == 1) GiveIteam(playerid, 171, 1, 35, 0);
		        if(G_TYPE_YAM[idx][i] == 2) GiveIteam(playerid, 170, 1, 35, 0);
		        if(G_TYPE_YAM[idx][i] == 3) GiveIteam(playerid, 169, 1, 35, 0);
		        if(G_TYPE_YAM[idx][i] == 4) GiveIteam(playerid, 337, 1, 35, 0);
		        if(G_TYPE_YAM[idx][i] == 5) GiveIteam(playerid, 337, 1, 35, 1);
		        if(G_TYPE_YAM[idx][i] == 6) GiveIteam(playerid, 337, 1, 35, 2);
		        if(G_TYPE_YAM[idx][i] == 7) GiveIteam(playerid, 337, 1, 35, 3);
		        if(G_TYPE_YAM[idx][i] == 8) GiveIteam(playerid, 337, 1, 35, 4);
		        if(G_TYPE_YAM[idx][i] == 9) GiveIteam(playerid, 337, 1, 35, 5);

		        OnBattlePass_Perfomance(playerid, 24, 35);

                SCMF(playerid, 0xFFFFFFFF, "Вы собрали {33AA33}\"%s\" {FFFFFF}в количестве {33AA33}35{FFFFFF} шт с грядки", garden_name[G_TYPE_YAM[idx][i]-1]);
		        CEF_HIDE(playerid, "Harvesting");
			}
			else
			{
		        if(G_TYPE_YAM[idx][i] == 1) GiveIteam(playerid, 171, 1, 10, 0);
		        if(G_TYPE_YAM[idx][i] == 2) GiveIteam(playerid, 170, 1, 10, 0);
		        if(G_TYPE_YAM[idx][i] == 3) GiveIteam(playerid, 169, 1, 10, 0);
		        if(G_TYPE_YAM[idx][i] == 4) GiveIteam(playerid, 337, 1, 10, 0);
		        if(G_TYPE_YAM[idx][i] == 5) GiveIteam(playerid, 337, 1, 10, 1);
		        if(G_TYPE_YAM[idx][i] == 6) GiveIteam(playerid, 337, 1, 10, 2);
		        if(G_TYPE_YAM[idx][i] == 7) GiveIteam(playerid, 337, 1, 10, 3);
		        if(G_TYPE_YAM[idx][i] == 8) GiveIteam(playerid, 337, 1, 10, 4);
		        if(G_TYPE_YAM[idx][i] == 9) GiveIteam(playerid, 337, 1, 10, 5);

		        OnBattlePass_Perfomance(playerid, 24, 10);

                SCMF(playerid, 0xFFFFFFFF, "Вы собрали {33AA33}\"%s\" {FFFFFF}в количестве {33AA33}10{FFFFFF} шт с грядки", garden_name[G_TYPE_YAM[idx][i]-1]);
		        CEF_HIDE(playerid, "Harvesting");
			}
        }

		G_STATUS_YAM[idx][i] = 0;
		G_TYPE_YAM[idx][i] = 0;
		DestroyDynamic3DTextLabel(gardendyamkasor[idx][i]);
		G_HAS_WEED[idx][i] = false;
		G_HAS_YDOB[idx][i] = false;
		G_HAS_YDOB2[idx][i] = false;
		G_HAS_YDOB_YES[idx][i] = false;
		DestroyObject(gardendyamka[idx][i]);
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
		ClearAnimations(playerid);
		UpdateDynamic3DTextLabelText(gardendyamkalab[idx][i], 0xFFFF00FF, "{FFA500}Свободная ямка\n{FFFFFF}Требуется обработка");
	}
	return true;
}

public: OnHarvestingPlayerClose(playerid)
{
	ClearAnimations(playerid);
	CEF_HIDE(playerid, "Harvesting");
	SetPVarInt(playerid, "g_garden_loaded", 0);
	SetPVarInt(playerid, "idgarden", 0);
}

CMD:garden_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /garden_slot [id игрока] [кол-во слотов]");
	new string[1024], str[1024];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 15");

	AddPlayerData(to_player, P_GARDEN_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "garden_slots", GetPlayerData(to_player, P_GARDEN_SLOTS));

	format(string, sizeof(string), "Руководитель %s[%d] добавил игроку %s[%d] %d слотов под огород", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(string, 0xFFFF00FF);

	format(str, sizeof(str), "Руководитель %s[%d] добавил вам %d слотов под огород", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, str);

	return 1;
}

stock GetPlayerOwnableGarden(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}
#define MAX_DICE_TABLE 7 //максимальное количество столов

new DiceTable[MAX_PLAYERS]; // id стола
new OwnerJoinDiceGame[MAX_PLAYERS]; // ид игроков присоединишихся к игре
new DiceTrowPlayer[MAX_PLAYERS][2]; // кости падающие 
new DiceTrowPlayerStatus[MAX_PLAYERS];

new Text3D: DiceTableLabel[MAX_DICE_TABLE]; // текст над столом

new dice_string[1024];

new Float: g_casino_table_pos[7][3] = // позиции столиков в казино
{
	{0.0,0.0,-1011.7900},
	{203.9708,-288.1277,1011.7900},
	{204.5368,-282.9423,1011.7900},
	{201.0867,-277.4176,1011.7900},
	{198.2179,-280.3122,1011.7900},
	{198.1618,-285.4484,1011.7900},
	{198.0668,-290.6460,1011.7900}
};

enum S_DICE_STRUCT
{
    DICE_GAME_BET, 			// Сумма ставки на столе
    DICE_GAME_MAX_PLAYERS, 	// Количество игроков на одном столе
    DICE_GAME_STATUS, 		// статус стола
    OWNER_CREATE_DICE_GAME, // ид игрока создавшего игру
    COUNT_PLAYER_DICE, 		// количество игроков за столом
    DICE_TROW_TIMER, 		// таймер ставки
    DICE_FINAL_TROW 		// сколько человек кинули кости
}
new s_dice[MAX_DICE_TABLE][S_DICE_STRUCT];

stock CreateCasinoTables()
{
	for(new idx = 1; idx < sizeof g_casino_table_pos; idx ++)
	{
		DiceTableLabel[idx] = CreateDynamic3DTextLabel("", -1, g_casino_table_pos[idx][0], g_casino_table_pos[idx][1], g_casino_table_pos[idx][2] + 0.1, 7.0);
		CallLocalFunction("UpdateCasinoTables", "i", idx);
	}
}
public: UpdateCasinoTables(event)
{
	dice_string[0] = EOS;
	if(s_dice[event][DICE_GAME_STATUS] == 0) format(dice_string, sizeof dice_string, "{d9c72b}Игра в кости\n{FFFFFF}Свободно");
	if(s_dice[event][DICE_GAME_STATUS] == 1) format(dice_string, sizeof dice_string, "{d9c72b}Ждем игроков {FFFFFF}[%d/%d]", s_dice[event][COUNT_PLAYER_DICE], s_dice[event][DICE_GAME_MAX_PLAYERS]);
	if(s_dice[event][DICE_GAME_STATUS] == 2) format(dice_string, sizeof dice_string, "{d9c72b}Играем");
	UpdateDynamic3DTextLabelText(DiceTableLabel[event], 0xFFFF00FF, dice_string);
}

cmd:dice(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.9476,-288.0615,1011.7900)) DiceTable[playerid] = 1; // 1
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 204.5841,-282.9256,1011.7900)) DiceTable[playerid] = 2; // 2
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.1470,-277.1536,1011.7900)) DiceTable[playerid] = 3; // 3
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 197.9208,-280.2674,1011.7900)) DiceTable[playerid] = 4; // 4
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 198.1707,-285.5460,1011.7900)) DiceTable[playerid] = 5; // 5
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 197.7222,-291.1371,1011.7900)) DiceTable[playerid] = 6; // 6
	else DiceTable[playerid] = 0;

	if(DiceTable[playerid] == 0) return 1;
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2) return SCM(playerid, COLOR_GREY, "*Игра уже началась. Дождитесь окончания");
	CEF_CREATE(playerid, 2, 4, "CasinoDice", "{\"windows\":{\"queries\":true,\"game\":false,\"action\":false}}");

	DiceTrowPlayerStatus[playerid] = 0;

	return 1;
}

public:CasinoDice_ClosePanel(playerid) // закрыл после окончания игры
{
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0)
	{
		DiceTable[playerid] = 0;
		CEF_HIDE(playerid, "CasinoDice");
	}
	else IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация", "{FFFFFF}Дождитесь завершения игры!", "Закрыть", "");
}

public: CasinoDice_UpdQueriesListPanel(playerid) // автоматическая загрузка ставок
{
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0) CEF_CREATE(playerid, 1, 2, "interface('CasinoDice').updateListGame('[]')");
	else if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 1)
	{
		new query[170];

		dice_string[0] = EOS;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid])
			{
				format(query, sizeof query, ",\"%s\"", GetPlayerNameEx(i));
				strcat(dice_string, query);
			}
		}

		format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"%s]]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET], s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), dice_string);
		CEF_CREATE(playerid, 1, 2, dice_string);
	}
}
public: CasinoDice_OpenCreateGame(playerid) // начал создавать ставку
{
	CEF_CREATE(playerid, 1, 2, "interface('CasinoDice').toggleModal('createGame', true)");
	return 1;
}

public:OnCasinoDiceCreateBet(playerid, select_id, money, players) // создал ставку
{
	if(money < 10 || money > 1000) return SendClientMessage(playerid, 0xFF6600FF, "Укажите корректную цену ставки. Минимальная ставка 1000 фишек");

	if(GetIteam(playerid, 293) < money) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек");

	if(select_id == 0)
	{
		if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 1) return SCM(playerid, -1, "В данный момент данный стол занят"); // прописать сообщение о том что уже создана ставка

		s_dice[DiceTable[playerid]][DICE_GAME_BET] = money;
		s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS] = players;
		s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] = playerid;
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 1;
		s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = 1;

		CEF_CREATE(playerid, 1, 2, "interface('CasinoDice').closeModalCreateQueries()");
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid])
			{
				dice_string[0] = EOS;
				format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"]]]')", money, players, GetPlayerNameEx(playerid));
				CEF_CREATE(i, 1, 2, dice_string);
			}
		}
		CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	}
	else SCM(playerid, -1, "В разработке!");
	return 1;
}
public: OnCasinoDiceThrow(playerid) //кинул кости
{
	if(DiceTrowPlayer[playerid][0] != 0) return 1;
	if(s_dice[DiceTable[playerid]][DICE_TROW_TIMER] > 11) return 1;
	if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 0) return 1;

	DiceTrowPlayerStatus[playerid] = 1;

	DiceTrowPlayer[playerid][0] = RandomEx(1,6);
	DiceTrowPlayer[playerid][1] = RandomEx(1,6);

	s_dice[DiceTable[playerid]][DICE_FINAL_TROW]++;

	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] == DiceTable[playerid]) LoadThrow(i);
	}

	if(s_dice[DiceTable[playerid]][DICE_FINAL_TROW] == s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS]) s_dice[DiceTable[playerid]][DICE_TROW_TIMER] = 0, PlayerWinnerDiceTrow(DiceTable[playerid]);

	return 1;
}
stock LoadThrow(playerid)
{
	new query[148];

	dice_string[0] = EOS;
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;

		if(DiceTable[i] == DiceTable[playerid] && OwnerJoinDiceGame[i] != 0)
		{
			if(s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i) format(query, sizeof query, ",[\"%s\",%d,%d]", GetPlayerNameEx(i), DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1], s_dice[DiceTable[i]][DICE_GAME_BET]);
			strcat(dice_string, query);
		}
	}
	format(dice_string, sizeof dice_string, "interface('CasinoDice').updateGame('[0,%d,40,%d,%d,%d,[[\"%s\",%d,%d]%s]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET] * s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], DiceTrowPlayer[playerid][0], DiceTrowPlayer[playerid][1],s_dice[DiceTable[playerid]][DICE_TROW_TIMER], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), DiceTrowPlayer[s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]][0] + DiceTrowPlayer[s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]][1], s_dice[DiceTable[playerid]][DICE_GAME_BET], dice_string);
	CEF_CREATE(playerid, 1, 2, dice_string);
	dice_string[0] = EOS;

	CEF_CREATE(playerid, 1, 2, "interface('CasinoDice').toggleWindow('queries', false)");
	CEF_CREATE(playerid, 1, 2, "interface('CasinoDice').toggleWindow('game', true)");
	
	return 1;
}

public:OnJoinGameDiceCasino(playerid, rooms) // присоединился к игре
{
	dice_string[0] = EOS;

	if(OwnerJoinDiceGame[playerid] != 0) return 1;
	if(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] == playerid) return 1;

	if(GetIteam(playerid, 293) < s_dice[DiceTable[playerid]][DICE_GAME_BET]) return SCM(playerid, COLOR_GREY, "*У вас недостаточно фишек");

	if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] == 0) s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = 2;
	else s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] + 1;

	OwnerJoinDiceGame[playerid] = 1;

	if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] < s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS])
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid]) UpdateListGame(i);
		}
	}
	else if(s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] == s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS])
	{
		s_dice[DiceTable[playerid]][DICE_TROW_TIMER] = 12;
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 2;

		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;

			if(s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2 && OwnerJoinDiceGame[i] == 1 || s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] == i)
			{
				if(DiceTable[i] == DiceTable[playerid] && s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2)
				{
					LoadThrow(i);
					GiveIteam(i, 293, 0, s_dice[DiceTable[i]][DICE_GAME_BET], 0, "Ставка в dice [Казино]");

					format(dice_string, sizeof dice_string, "~r~-%s фишек", formatInt(s_dice[DiceTable[i]][DICE_GAME_BET]));
					GameText(i, dice_string, 3000, 2);
				}
			}
			if(DiceTable[i] != 0 && s_dice[DiceTable[i]][DICE_GAME_STATUS] == 2 && OwnerJoinDiceGame[i] != 1 && s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i)
			{
				CEF_HIDE(i, "CasinoDice");
				IntfDialogCallRemote(i, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Информация", "{FFFFFF}В этой игре уже максимально количество участников", "Закрыть", "");
				DiceTable[i] = 0;
			}
		}
	}
	CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	return 1;
}

stock UpdateListGame(playerid)
{
	new query[170];

	dice_string[0] = EOS;

	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid])
		{
			if(s_dice[DiceTable[i]][OWNER_CREATE_DICE_GAME] != i) format(query, sizeof query, ",\"%s\"", GetPlayerNameEx(i));
			strcat(dice_string, query);
		}
	}
	format(dice_string, sizeof dice_string, "interface('CasinoDice').updateListGame('[[0,%d,0,%d,0,[\"%s\"%s]]]')", s_dice[DiceTable[playerid]][DICE_GAME_BET], s_dice[DiceTable[playerid]][DICE_GAME_MAX_PLAYERS], GetPlayerNameEx(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME]), dice_string);
	CEF_CREATE(playerid, 1, 2, dice_string);
	
	dice_string[0] = EOS;
}
public: CasinoDice_LeaveTable(playerid) // вышел из стола
{	
	dice_string[0] = EOS;

	if(s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] == playerid)
	{
		s_dice[DiceTable[playerid]][DICE_GAME_STATUS] = 0;
		s_dice[DiceTable[playerid]][OWNER_CREATE_DICE_GAME] = 0;
		OwnerJoinDiceGame[playerid] = 0;

		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(DiceTable[i] == DiceTable[playerid]) CEF_CREATE(i, 1, 2, "interface('CasinoDice').updateListGame('[]')");
		}
	}
	else if(OwnerJoinDiceGame[playerid] == 1)
	{
		OwnerJoinDiceGame[playerid] = 0;
		s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] = s_dice[DiceTable[playerid]][COUNT_PLAYER_DICE] - 1;

		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(OwnerJoinDiceGame[i] != 0 && DiceTable[i] == DiceTable[playerid]) UpdateListGame(i);
		}
	}
	CallLocalFunction("UpdateCasinoTables", "i", DiceTable[playerid]);
	DiceTable[playerid] = 0;
	CEF_HIDE(playerid, "CasinoDice");
	return true;
}

stock UpdateDiceTrow()
{
	for(new i; i < MAX_DICE_TABLE; i++)
	{
		if(s_dice[i][DICE_GAME_STATUS] == 2 && s_dice[i][DICE_TROW_TIMER] != 0) s_dice[i][DICE_TROW_TIMER] = s_dice[i][DICE_TROW_TIMER] - 1;

		if(s_dice[i][DICE_GAME_STATUS] == 2 && s_dice[i][DICE_TROW_TIMER] < 2) PlayerWinnerDiceTrow(i);
	}
}
stock PlayerWinnerDiceTrow(table_id)
{
	if(s_dice[table_id][DICE_GAME_STATUS] == 2)
	{
		if(s_dice[table_id][DICE_TROW_TIMER] == 1)
		{
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;

				if(DiceTable[i] == table_id)
				{
					if(DiceTrowPlayer[i][0] == 0)
					{
						DiceTrowPlayer[i][0] = RandomEx(1,6);
						DiceTrowPlayer[i][1] = RandomEx(1,6);
						DiceTrowPlayerStatus[i] = 1;
					}
				}
			}
			return true;
		}
		if(s_dice[table_id][DICE_TROW_TIMER] == 0)
		{
			new get_trow = GetDiceTrowTable(table_id);
			if(get_trow > 1)
			{
				foreach(new i: Player)
				{
					if(!IsPlayerLogged(i)) continue;
					
					if(DiceTable[i] != table_id) continue;

					DiceTrowPlayerStatus[i] = 0;

					if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] == get_trow)
					{
						DiceTrowPlayer[i][0] = 0;
						DiceTrowPlayer[i][1] = 0;
					}
				}
				s_dice[table_id][DICE_TROW_TIMER] = 12;
				return true;
			}
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;

				if(DiceTable[i] == table_id)
				{
					if(DiceTrowPlayerStatus[i] == 1)
					{
						if(i == GetDiceTrowWinner(table_id))
						{
							SCM(i, -1, "{ffd700}Уведомление: {FFFFFF}Поздравляем, Вы {00b300}выиграли");
							GiveIteam(i, 293, 1, s_dice[DiceTable[i]][DICE_GAME_BET] * s_dice[DiceTable[i]][DICE_GAME_MAX_PLAYERS], 0, "Выйгрыш в dice [Казино]");

							format(dice_string, sizeof dice_string, "~g~+%s фишек", formatInt(s_dice[DiceTable[i]][DICE_GAME_BET] * s_dice[DiceTable[i]][DICE_GAME_MAX_PLAYERS]));
							GameText(i, dice_string, 3000, 2);

							OnBattlePass_Perfomance(i, 18, 1);
						}
						else SCMF(i, -1, "{ffd700}Уведомление: {FFFFFF}К сожалению, Вы {ffa500}проиграли. {FFFFFF}Вам выпало {ffa500}%d", DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1]);

					}
					else SCMF(i, -1, "{ffd700}Уведомление: {FFFFFF}К сожалению, Вы {ffa500}проиграли. {FFFFFF}Вам выпало {ffa500}%d", DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1]);
				}
			}
			foreach(new i: Player)
			{
				if(!IsPlayerLogged(i)) continue;

				if(DiceTable[i] == table_id)
				{
					OwnerJoinDiceGame[i] = 0;
					DiceTrowPlayer[i][0] = 0;
					DiceTrowPlayer[i][1] = 0;
					DiceTable[i] = 0;
				}
			}
			s_dice[table_id][DICE_GAME_STATUS] = 0;
			s_dice[table_id][OWNER_CREATE_DICE_GAME] = 0;
			s_dice[table_id][DICE_GAME_BET] = 0;
			s_dice[table_id][DICE_GAME_MAX_PLAYERS] = 0;
			s_dice[table_id][DICE_TROW_TIMER] = 0;
			s_dice[table_id][COUNT_PLAYER_DICE] = 0;
			s_dice[table_id][DICE_FINAL_TROW] = 0;

			CallLocalFunction("UpdateCasinoTables", "i", table_id);
		}
	}
	return 1;
}

stock GetDiceTrowTable(table_id)
{
	new status;
	new max_dice_trow;

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		if(DiceTable[i] != table_id) continue;

		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] > max_dice_trow) max_dice_trow = DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1];
	}

	s_dice[table_id][DICE_FINAL_TROW] = 0;
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		if(DiceTable[i] != table_id) continue;

		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] == max_dice_trow) status++;
		else s_dice[table_id][DICE_FINAL_TROW]++;
	}
	
	if(status > 1) return max_dice_trow;
	else return 1;
}
stock GetDiceTrowWinner(table_id)
{
	new winner = -1;
	new max_dice_trow;

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		if(DiceTable[i] != table_id) continue;

		if(DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1] > max_dice_trow) max_dice_trow = DiceTrowPlayer[i][0] + DiceTrowPlayer[i][1], winner = i;
	}
	return winner;
}
new g_player_status_primanka[MAX_PLAYERS];
new g_player_status_fish[MAX_PLAYERS];
new g_player_fishing_zone[MAX_PLAYERS];
new g_player_type_fish_rod[MAX_PLAYERS];
new g_player_type_fish[MAX_PLAYERS];
new g_player_type_fish_ves[MAX_PLAYERS];
new g_player_fish_timer[MAX_PLAYERS];

#define MAX_FISHING_ZONE 9

enum E_FISHING_ZONES_STRUCT
{
	Float:FZ_POS_X,
	Float:FZ_POS_Y,
	Float:FZ_POS_Z,
	Float:FZ_POS_SIZE
};

new g_fishing_zones[MAX_FISHING_ZONE][E_FISHING_ZONES_STRUCT] =
{
    {-275.550689, 2297.300537, 2.0, 200.0},
	{1315.585571, 2043.356323, 2.0, 200.0},
	{-2886.154541, -674.604858, 2.0, 200.0},
	{4204.732421, 3963.182128, 2.0, 200.0},
	{3070.477539, 1352.182861, 2.0, 200.0},
	{2549.223876, 2110.489501, 2.0, 200.0},
	{2078.196044, 1076.217773, 2.0, 200.0},
	{393.921234, -260.088745, 2.0, 200.0},
	{-248.6179,  -1197.6448, 2.0, 200.0}
};

new indxFishType[10][14] = {"Красноперка", "Щука", "Сом", "Карась", "Тунец", "Лосось", "Карп", "Мальма", "Осетр", "Угорь"};

new const fishImageMap[10] = {
    -1, // 0: Красноперка ? -1.png
    0, // 1: Щука       ? 0.png
    1, // 2: Сом         ? 2.png
    2, // 3: Карась      ? 3.png
    3, // 4: Тунец       ? 5.png
    4, // 5: Лосось      ? 6.png
    5, // 6: Карп        ? 4.png
    6, // 7: Мальма      ? 7.png
    7, // 8: Осетр       ? 8.png
    8  // 9: Угорь       ? 9.png
};

new g_fishing_sphere[MAX_FISHING_ZONE];

stock CreateFishingZones()
{
	for(new i; i < MAX_FISHING_ZONE; i++)
	{
		g_fishing_sphere[i] = CreateDynamicSphere(g_fishing_zones[i][FZ_POS_X], g_fishing_zones[i][FZ_POS_Y], g_fishing_zones[i][FZ_POS_Z], g_fishing_zones[i][FZ_POS_SIZE], -1, -1);
	}

	CreateDynamic3DTextLabel
	(
		"{eb8a08}Продажа выловленной рыбы\n\n\
		{FFFFFF}Цены\n\
		Красноперка - 9500 руб. за 1 кг\n\
		Щука - 11000 руб. за 1 кг\n\
		Сом - 12365 руб. за 1 кг\n\
		Карась - 10000 руб. за 1 кг\n\
		Тунец - 17392 руб. за 1 кг\n\
		Лосось - 17981 руб. за 1 кг\n\
		Карп - 15213 руб. за 1 кг\n\
		Мальма - 16783 руб. за 1 кг\n\
		Осетр - 25000 руб. за 1 кг\n\
		Угорь - 75000 руб. за 1 кг",
		-1, 
		-2242.0110,224.8079,24.7780, 
		15.0
	);
	CreatePickup(19134, 23, -2242.0110,224.8079,24.7780, -1);
}

stock OnFishPlayerTimer(playerid)
{
	if(g_player_status_fish[playerid] == 4)
	{
		if(g_player_fish_timer[playerid] != -2)
		{
			g_player_fish_timer[playerid]--;
			if(g_player_fish_timer[playerid] == 0)
			{
				CEF_CREATE(playerid, 1, 2, "interface('Fishing').updateFishingInfo('[1, 1, 0.0, false, 45]')");
			}
			else if(g_player_fish_timer[playerid] == -2)
			{
				SCM(playerid, 0xf1951aFF, "Подсечка не удалась, рыба съела наживку и уплыла.");

				CEF_HIDE(playerid, "Fishing");
				CEF_HIDE(playerid, "Interactions");
				CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");
				g_player_status_fish[playerid] = 2;

				TogglePlayerControllable(playerid,true);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
}


new inventory_sklad_id[MAX_PLAYERS];
new inventory_shelf_id[MAX_PLAYERS];
new inventory_trunk_id[MAX_PLAYERS];
new inventory_bag_id[MAX_PLAYERS];

new inventory_load_status[MAX_PLAYERS];
new inventory_load_vehicle[MAX_VEHICLES];

new inventory_kd_move[MAX_PLAYERS];

new inventory_kd_drop[MAX_PLAYERS];
new inventory_kd_take[MAX_PLAYERS];

new bool: inventory_status[MAX_PLAYERS] = true;

stock OnItemsInterfaceClose(playerid)
{
	CEF_HIDE(playerid, "InventoryNew");
	inventory_status[playerid] = true;
	inventory_sklad_id[playerid] = 0;
	inventory_shelf_id[playerid] = 0;
	inventory_plate_id[playerid] = -1;
	inventory_trunk_id[playerid] = 0;
	inventory_bag_id[playerid] = 0;
	return true;
}

stock DestroyPlayerItems(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		DeleteItems(i);
	}
}
stock DestroyVehicleItems(vehicleid)
{
	new car_id = GetOwnableCarData(GetVehicleData(vehicleid, V_ACTION_ID), OC_SQL_ID);
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_CAR_ID) != car_id) continue;
		if(GetPlayerItem(i, PI_OWNER_ID) != -1) continue;

		DeleteItems(i);
	}
	inventory_load_vehicle[vehicleid] = 0;
}
public: LoadVehicleItems(vehicleid)
{
	if(inventory_load_vehicle[vehicleid] == 0)
	{
		new	Cache: result;
		new query[96];

		new car_id = GetOwnableCarData(GetVehicleData(vehicleid, V_ACTION_ID), OC_SQL_ID);

		format(query, sizeof query, "SELECT * FROM items WHERE car_id=%d AND owner_id=-1", car_id);
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(rows > MAX_PLAYER_ITEMS)
		{
			rows = MAX_PLAYER_ITEMS;
			print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
		}

		if(rows)
		{
			for(new idx; idx < rows; idx++)
			{	
				new i = GetFreeItemsID();

				SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(idx, "id"));

				SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
				SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(idx, "return_items"));
				SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(idx, "type"));
				SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(idx, "slots"));
				SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(idx, "item"));
				SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(idx, "count"));

				cache_get_field_content(idx, "number", g_player_item[i][PI_NUMBER], mysql, 32);
				cache_get_field_content(idx, "region", g_player_item[i][PI_REGION], mysql, 32);

				SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(idx, "typenumber"));
				SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(idx, "aks_id"));
				SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(idx, "typeacs"));
				SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(idx, "status"));
				SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(idx, "indx"));

				SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(idx, "foffset_x"));
				SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(idx, "foffset_y"));
				SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(idx, "foffset_z"));
				SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(idx, "frot_x"));
				SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(idx, "frot_y"));
				SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(idx, "frot_z"));
				SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(idx, "fscale_x"));
				SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(idx, "fscale_y"));
				SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(idx, "fscale_z"));

				SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(idx, "skin_id"));
				SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(idx, "skin_iznos"));
				SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(idx, "shelf"));
				SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(idx, "sklad"));
				SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(idx, "car_id"));
				SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(idx, "type_item"));
				SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(idx, "weapon"));
				SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(idx, "patron"));
				SetPlayerItem(i, PI_PLATE, 			cache_get_field_content_int(idx, "plate"));
                SetPlayerItem(i, PI_SKIN_ACTIVE, 			cache_get_field_content_int(idx, "skin_active"));
			}
		}
		cache_delete(result);

		inventory_load_vehicle[vehicleid] = 1;
	}
	return 1;
}
public: LoadPlayerItems(playerid)
{
	if(inventory_load_status[playerid] == 0)
	{
		new	Cache: result;
		new query[96];

		format(query, sizeof query, "SELECT * FROM items WHERE owner_id=%d", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(rows > MAX_PLAYER_ITEMS)
		{
			rows = MAX_PLAYER_ITEMS;
			print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
		}

		if(rows)
		{
			for(new idx; idx < rows; idx++)
			{	
				new i = GetFreeItemsID();

				SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(idx, "id"));

				SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
				SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(idx, "return_items"));
				SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(idx, "type"));
				SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(idx, "slots"));
				SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(idx, "item"));
				SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(idx, "count"));

				cache_get_field_content(idx, "number", g_player_item[i][PI_NUMBER], mysql, 32);
				cache_get_field_content(idx, "region", g_player_item[i][PI_REGION], mysql, 32);

				SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(idx, "typenumber"));
				SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(idx, "aks_id"));
				SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(idx, "typeacs"));
				SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(idx, "status"));
				SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(idx, "indx"));

				SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(idx, "foffset_x"));
				SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(idx, "foffset_y"));
				SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(idx, "foffset_z"));
				SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(idx, "frot_x"));
				SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(idx, "frot_y"));
				SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(idx, "frot_z"));
				SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(idx, "fscale_x"));
				SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(idx, "fscale_y"));
				SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(idx, "fscale_z"));

				SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(idx, "skin_id"));
				SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(idx, "skin_iznos"));
				SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(idx, "shelf"));
				SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(idx, "sklad"));
				SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(idx, "car_id"));
				SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(idx, "type_item"));
				SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(idx, "weapon"));
				SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(idx, "patron"));
				SetPlayerItem(i, PI_PLATE, 			cache_get_field_content_int(idx, "plate"));
				SetPlayerItem(i, PI_SKIN_ACTIVE, 			cache_get_field_content_int(idx, "skin_active"));
			}
		}
		cache_delete(result);
		//printf("[PlayerItems] Предметы игрока %s загружены: %d", GetPlayerNameEx(playerid), rows);

		inventory_load_status[playerid] = 1;
	}
	return 1;
}
public: LoadItems()
{
	new	Cache: result;

	result = mysql_query(mysql, "SELECT * FROM items WHERE type=3 AND car_id=0", true);

	new rows = cache_num_rows();

	if(rows > MAX_PLAYER_ITEMS)
	{
		rows = MAX_PLAYER_ITEMS;
		print("[PlayerItems] Привышен лимит предметов (MAX_PLAYER_ITEMS)");
	}

	for(new i; i < rows; i++)
	{	
		SetPlayerItem(i, PI_SQL_ID, 		cache_get_field_content_int(i, "id"));

		SetPlayerItem(i, PI_OWNER_ID, 		cache_get_field_content_int(i, "owner_id"));
		SetPlayerItem(i, PI_RETURN_ITEMS, 	cache_get_field_content_int(i, "return_items"));
		SetPlayerItem(i, PI_TYPE, 			cache_get_field_content_int(i, "type"));
		SetPlayerItem(i, PI_SLOTS, 			cache_get_field_content_int(i, "slots"));
		SetPlayerItem(i, PI_ITEM, 			cache_get_field_content_int(i, "item"));
		SetPlayerItem(i, PI_COUNT, 			cache_get_field_content_int(i, "count"));

		cache_get_field_content(i, "number", g_player_item[i][PI_NUMBER], mysql, 32);
		cache_get_field_content(i, "region", g_player_item[i][PI_REGION], mysql, 32);

		SetPlayerItem(i, PI_TYPENUMBER, 	cache_get_field_content_int(i, "typenumber"));
		SetPlayerItem(i, PI_AKS_ID, 		cache_get_field_content_int(i, "aks_id"));
		SetPlayerItem(i, PI_TYPEACS, 		cache_get_field_content_int(i, "typeacs"));
		SetPlayerItem(i, PI_STATUS, 		cache_get_field_content_int(i, "status"));
		SetPlayerItem(i, PI_INDX, 			cache_get_field_content_int(i, "indx"));

		SetPlayerItem(i, PI_FOFFSET_X, 		cache_get_field_content_float(i, "foffset_x"));
		SetPlayerItem(i, PI_FOFFSET_Y, 		cache_get_field_content_float(i, "foffset_y"));
		SetPlayerItem(i, PI_FOFFSET_Z, 		cache_get_field_content_float(i, "foffset_z"));
		SetPlayerItem(i, PI_FROT_X, 		cache_get_field_content_float(i, "frot_x"));
		SetPlayerItem(i, PI_FROT_Y, 		cache_get_field_content_float(i, "frot_y"));
		SetPlayerItem(i, PI_FROT_Z, 		cache_get_field_content_float(i, "frot_z"));
		SetPlayerItem(i, PI_FSCALE_X, 		cache_get_field_content_float(i, "fscale_x"));
		SetPlayerItem(i, PI_FSCALE_Y, 		cache_get_field_content_float(i, "fscale_y"));
		SetPlayerItem(i, PI_FSCALE_Z, 		cache_get_field_content_float(i, "fscale_z"));

		SetPlayerItem(i, PI_SKIN_ID, 		cache_get_field_content_int(i, "skin_id"));
		SetPlayerItem(i, PI_SKIN_IZNOS, 	cache_get_field_content_int(i, "skin_iznos"));
		SetPlayerItem(i, PI_SHELF, 			cache_get_field_content_int(i, "shelf"));
		SetPlayerItem(i, PI_SKLAD, 			cache_get_field_content_int(i, "sklad"));
		SetPlayerItem(i, PI_CAR_ID, 		cache_get_field_content_int(i, "car_id"));
		SetPlayerItem(i, PI_TYPE_ITEM, 		cache_get_field_content_int(i, "type_item"));
		SetPlayerItem(i, PI_WEAPON, 		cache_get_field_content_int(i, "weapon"));
		SetPlayerItem(i, PI_PATRON, 		cache_get_field_content_int(i, "patron"));
		SetPlayerItem(i, PI_PLATE, 			cache_get_field_content_int(i, "plate"));
		SetPlayerItem(i, PI_SKIN_ACTIVE, 			cache_get_field_content_int(i, "skin_active"));

	}
	cache_delete(result);
	printf("[PlayerItems] Предметов загружено: %d", rows);
	return 1;
}

stock DeleteItems(item_id)
{
	SetPlayerItem(item_id, PI_SQL_ID, 		0);
	SetPlayerItem(item_id, PI_OWNER_ID, 	0);
	SetPlayerItem(item_id, PI_RETURN_ITEMS, 0);
	SetPlayerItem(item_id, PI_TYPE, 		0);
	SetPlayerItem(item_id, PI_SLOTS, 		0);
	SetPlayerItem(item_id, PI_ITEM, 		0);
	SetPlayerItem(item_id, PI_COUNT, 		0);

	SetPlayerItem(item_id, PI_TYPENUMBER, 	0);
	SetPlayerItem(item_id, PI_AKS_ID, 		0);
	SetPlayerItem(item_id, PI_TYPEACS, 		0);
	SetPlayerItem(item_id, PI_STATUS, 		0);
	SetPlayerItem(item_id, PI_INDX, 		0);

	SetPlayerItem(item_id, PI_FOFFSET_X, 	0.0);
	SetPlayerItem(item_id, PI_FOFFSET_Y, 	0.0);
	SetPlayerItem(item_id, PI_FOFFSET_Z, 	0.0);
	SetPlayerItem(item_id, PI_FROT_X, 		0.0);
	SetPlayerItem(item_id, PI_FROT_Y, 		0.0);
	SetPlayerItem(item_id, PI_FROT_Z, 		0.0);
	SetPlayerItem(item_id, PI_FSCALE_X, 	0.0);
	SetPlayerItem(item_id, PI_FSCALE_Y, 	0.0);
	SetPlayerItem(item_id, PI_FSCALE_Z, 	0.0);

	SetPlayerItem(item_id, PI_SKIN_ID, 		0);
	SetPlayerItem(item_id, PI_SKIN_IZNOS, 	0);
	SetPlayerItem(item_id, PI_SHELF, 		0);
	SetPlayerItem(item_id, PI_SKLAD, 		0);
	SetPlayerItem(item_id, PI_CAR_ID, 		0);
	SetPlayerItem(item_id, PI_TYPE_ITEM, 	0);
	SetPlayerItem(item_id, PI_WEAPON, 		0);
	SetPlayerItem(item_id, PI_PATRON, 		0);
	SetPlayerItem(item_id, PI_PLATE, 		0);
	SetPlayerItem(item_id, PI_SKIN_ACTIVE, 	0);
	return 1;
}

stock GetFreeItemsID()
{
	for(new i; i < MAX_PLAYER_ITEMS; i ++)
	{
		if(GetPlayerItem(i, PI_SQL_ID) != 0) continue;
		if(GetPlayerItem(i, PI_OWNER_ID) != 0) continue;
		if(GetPlayerItem(i, PI_CAR_ID) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != 0) continue;
		if(GetPlayerItem(i, PI_SLOTS) != 0) continue;
		return i;
	}

	return -1;
}

stock GetPlayerMoneyInventory(playerid)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;

		if(!VerifyIntString(QueryPlayerBalance(playerid), 1))
		{
			new query[248];
			format(query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);

			DeleteItems(i);
		}
		else
		{
			new query[248];
			format(query, sizeof query, "UPDATE items SET count=1 WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_COUNT, 1);
		}
		count++;
		break;
	}

	if(count == 0)
	{
		if(VerifyIntString(QueryPlayerBalance(playerid), 1))
		{
			CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), 0, 1, 0, -1, -1, 0, 0);
		}
	}
	return true;
}

new Itemindx[6][24] = {"Картофель", "Свёкла", "Перец", "Баклажан", "Капуста", "Морковь"};
new indxFishRod[3][24] = {"Поплавочная удочка", "Улучшенная удочка", "Спиннинг"};
new indxFish[6][14] = {"Кусочки хлеба", "Лягушка", "Кузнечик", "Червь", "Мотыль", "Опарыш"};

stock LoadInventory(playerid, status = 0)
{
	GetPlayerMoneyInventory(playerid);
	new query[148];

	load_inventory[playerid] = "";

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;

		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new indx = GetPlayerItem(i, PI_INDX);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new weapon = GetPlayerItem(i, PI_WEAPON);
		new patron = GetPlayerItem(i, PI_PATRON);

		new type = GetPlayerItem(i, PI_TYPE);
		new slots = GetPlayerItem(i, PI_SLOTS);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);

		if(typeitem == 0) 
		{
			if(item_id == 261) format(query, sizeof query, "[%d,%d,%d,0,\"Тёмные дела\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 258) format(query, sizeof query, "[%d,%d,%d,0,\"Форсаж\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 272) format(query, sizeof query, "[%d,%d,%d,0,\"Велесова ночь\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 278) format(query, sizeof query, "[%d,%d,%d,0,\"Оперской\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 284) format(query, sizeof query, "[%d,%d,%d,0,\"Новогодний\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 290) format(query, sizeof query, "[%d,%d,%d,0,\"Черное золото\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 300) format(query, sizeof query, "[%d,%d,%d,0,\"Охотничий\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 328) format(query, sizeof query, "[%d,%d,%d,0,\"Египетская сила\",%d,%d,1.0],", type, slots, item_id, slots, count);
			else if(item_id == 336) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,\"%s\",1.0],", type, slots, item_id, slots, QueryPlayerBalance(playerid));
            else if(item_id == 295 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Плохая\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Превосходная\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Пиво\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Вино\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 3) format(query, sizeof query, "[%d,%d,%d,%d,\"Водка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 4) format(query, sizeof query, "[%d,%d,%d,%d,\"Виски\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 5) format(query, sizeof query, "[%d,%d,%d,%d,\"Коньяк\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 6) format(query, sizeof query, "[%d,%d,%d,%d,\"Шампанское\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 7) format(query, sizeof query, "[%d,%d,%d,%d,\"Чай\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 12) format(query, sizeof query, "[%d,%d,%d,0,\"Glock 19\",%d,%d,0.7,1,0],", type, slots, item_id, slots, count);
			else if(item_id == 14) format(query, sizeof query, "[%d,%d,%d,0,\"Remington\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			else if(item_id == 15) format(query, sizeof query, "[%d,%d,%d,0,\"Обрез\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			else if(item_id == 16) format(query, sizeof query, "[%d,%d,%d,0,\"Сайга-12\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			else if(item_id == 17) format(query, sizeof query, "[%d,%d,%d,0,\"ОЦ-14 Гроза\",%d,%d,1.0,1,4],", type, slots, item_id, slots, count);
			else if(item_id == 18) format(query, sizeof query, "[%d,%d,%d,0,\"АКС-74У\",%d,%d,1.0,1,4],", type, slots, item_id, slots, count);
			else if(item_id == 19) format(query, sizeof query, "[%d,%d,%d,0,\"Desert Eagle\",%d,%d,1.7,1,1],", type, slots, item_id, slots, count);
			else if(item_id == 20) format(query, sizeof query, "[%d,%d,%d,0,\"HK416\",%d,%d,1.0,1,5],", type, slots, item_id, slots, count);
			else if(item_id == 21) format(query, sizeof query, "[%d,%d,%d,0,\"АКМ\",%d,%d,1.0,1,6],", type, slots, item_id, slots, count);
			else if(item_id == 22) format(query, sizeof query, "[%d,%d,%d,0,\"AWM\",%d,%d,1.0,1,2],", type, slots, item_id, slots, count);
			else if(item_id == 42) format(query, sizeof query, "[%d,%d,%d,0,\"MSR\",%d,%d,1.0,1,2],", type, slots, item_id, slots, count);
			else if(item_id == 335 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Компостное\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 335 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Торфяное\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			else if(item_id == 279) format(query, sizeof query, "[%d,%d,%d,%d,\"Общий\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);

			else format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, item_id, slots, count);
		}
		else if(typeitem == 1) format(query, sizeof query, "[%d,%d,99,%d,\"%s %s\",%d,1,1.0],", type, slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		else if(typeitem == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,1,1.0],", type, slots, typeacs, aks_id, slots);
		else if(typeitem == 3) format(query, sizeof query, "[%d,%d,100,%d,\"\",%d,1,1.0,%d],", type, slots, skin_id, slots, skin_iznos);
		else if(typeitem == 4) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, GetInvIdWeapon(weapon), slots, patron);
		strcat(load_inventory[playerid], query);
	}

	if(inventory_shelf_id[playerid] != 0 || inventory_sklad_id[playerid] != 0 || inventory_trunk_id[playerid] != 0 || inventory_plate_id[playerid] != -1) 
	{
		string_inventory[0] = EOS;
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			if(inventory_plate_id[playerid] != -1) if(GetPlayerItem(i, PI_PLATE) != inventory_plate_id[playerid]) continue;

			new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
			new count = GetPlayerItem(i, PI_COUNT);
			new item_id = GetPlayerItem(i, PI_ITEM);
			new indx = GetPlayerItem(i, PI_INDX);
			new typeacs = GetPlayerItem(i, PI_TYPEACS);
			new aks_id = GetPlayerItem(i, PI_AKS_ID);
			new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
			new skin_id = GetPlayerItem(i, PI_SKIN_ID);
			new weapon = GetPlayerItem(i, PI_WEAPON);
			new patron = GetPlayerItem(i, PI_PATRON);

			new type = GetPlayerItem(i, PI_TYPE);
			new slots = GetPlayerItem(i, PI_SLOTS);

			new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		
			if(typeitem == 0) 
			{
				if(item_id == 261) format(query, sizeof query, "[%d,%d,%d,0,\"Тёмные дела\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 258) format(query, sizeof query, "[%d,%d,%d,0,\"Форсаж\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 272) format(query, sizeof query, "[%d,%d,%d,0,\"Велесова ночь\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 278) format(query, sizeof query, "[%d,%d,%d,0,\"Оперской\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 284) format(query, sizeof query, "[%d,%d,%d,0,\"Новогодний\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 290) format(query, sizeof query, "[%d,%d,%d,0,\"Черное золото\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 300) format(query, sizeof query, "[%d,%d,%d,0,\"Охотничий\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 328) format(query, sizeof query, "[%d,%d,%d,0,\"Египетская сила\",%d,%d,1.0],", type, slots, item_id, slots, count);
				else if(item_id == 336) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
				else if(item_id == 337) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d,1.0],", type, slots, item_id, indx, Itemindx[indx], slots, count);
			    else if(item_id == 295 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Плохая)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 295 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Нормальная)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 295 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Шкура оленя (Превосходная)\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 132 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 132 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 132 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Пиво\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"Вино\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 3) format(query, sizeof query, "[%d,%d,%d,%d,\"Водка\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 4) format(query, sizeof query, "[%d,%d,%d,%d,\"Виски\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 5) format(query, sizeof query, "[%d,%d,%d,%d,\"Коньяк\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 6) format(query, sizeof query, "[%d,%d,%d,%d,\"Шампанское\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 280 && indx == 7) format(query, sizeof query, "[%d,%d,%d,%d,\"Чай\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 12) format(query, sizeof query, "[%d,%d,%d,0,\"Glock 19\",%d,%d,0.7,1,0],", type, slots, item_id, slots, count);
			    else if(item_id == 14) format(query, sizeof query, "[%d,%d,%d,0,\"Remington\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			    else if(item_id == 15) format(query, sizeof query, "[%d,%d,%d,0,\"Обрез\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			    else if(item_id == 16) format(query, sizeof query, "[%d,%d,%d,0,\"Сайга-12\",%d,%d,1.0,1,3],", type, slots, item_id, slots, count);
			    else if(item_id == 17) format(query, sizeof query, "[%d,%d,%d,0,\"ОЦ-14 Гроза\",%d,%d,1.0,1,4],", type, slots, item_id, slots, count);
			    else if(item_id == 18) format(query, sizeof query, "[%d,%d,%d,0,\"АКС-74У\",%d,%d,1.0,1,4],", type, slots, item_id, slots, count);
			    else if(item_id == 19) format(query, sizeof query, "[%d,%d,%d,0,\"Desert Eagle\",%d,%d,1.7,1,1],", type, slots, item_id, slots, count);
			    else if(item_id == 20) format(query, sizeof query, "[%d,%d,%d,0,\"HK416\",%d,%d,1.0,1,5],", type, slots, item_id, slots, count);
			    else if(item_id == 21) format(query, sizeof query, "[%d,%d,%d,0,\"АКМ\",%d,%d,1.0,1,6],", type, slots, item_id, slots, count);
			    else if(item_id == 22) format(query, sizeof query, "[%d,%d,%d,0,\"AWM\",%d,%d,1.0,1,2],", type, slots, item_id, slots, count);
			    else if(item_id == 42) format(query, sizeof query, "[%d,%d,%d,0,\"MSR\",%d,%d,1.0,1,2],", type, slots, item_id, slots, count);
				else if(item_id == 335 && indx == 0) format(query, sizeof query, "[%d,%d,%d,%d,\"Компостное\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
			    else if(item_id == 335 && indx == 1) format(query, sizeof query, "[%d,%d,%d,%d,\"Торфяное\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else if(item_id == 279) format(query, sizeof query, "[%d,%d,%d,%d,\"Общий\",%d,%d,1.0],", type, slots, item_id, indx, slots, count);
				else format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, item_id, slots, count);
			}
			else if(typeitem == 1) format(query, sizeof query, "[%d,%d,99,%d,\"%s %s\",%d,1,1.0],", type, slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
			else if(typeitem == 2) format(query, sizeof query, "[%d,%d,%d,%d,\"\",%d,1,1.0],", type, slots, typeacs, aks_id, slots);
			else if(typeitem == 3) format(query, sizeof query, "[%d,%d,100,%d,\"\",%d,1,1.0,%d],", type, slots, skin_id, slots, skin_iznos);
			else if(typeitem == 4) format(query, sizeof query, "[%d,%d,%d,0,\"\",%d,%d,1.0],", type, slots, GetInvIdWeapon(weapon), slots, patron);
			strcat(string_inventory, query);
		}
	}

	if(inventory_shelf_id[playerid] != 0 || inventory_sklad_id[playerid] != 0 || inventory_trunk_id[playerid] != 0 || inventory_plate_id[playerid] != -1) 
		strcat(load_inventory[playerid], string_inventory);


	strdel(load_inventory[playerid], strlen(load_inventory[playerid]) - 1, strlen(load_inventory[playerid]));

	if(status == 1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
	return 1;
}

stock StateCheck(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPEACS) != 222) continue;
		if(GetPlayerItem(i, PI_STATUS) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 2) continue;

		inventory_bag_id[playerid] = 1;
		return 1;
	}
	inventory_bag_id[playerid] = 0;
	return 1;
}
stock GetSlotItemInventory(playerid, dop_id, from, slot)
{
	new count = 0;

	if(dop_id == -1)
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
			if(GetPlayerItem(i, PI_TYPE) != from) continue;

			count = 1;
			return count;
		}
	}
	else
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			if(inventory_plate_id[playerid] != -1) if(GetPlayerItem(i, PI_PLATE) != inventory_plate_id[playerid]) continue;
			if(GetPlayerItem(i, PI_TYPE) != 3) continue;
			if(GetPlayerItem(i, PI_SLOTS) != slot) continue;

			count = 1;
			return count;
		}
	}
	return count;
}
stock OnInventoryDisplayChange(playerid, bool:status)
{
	if(status_authorization[playerid] != 1) return true;

	if(DiceTable[playerid] == 0)
	{
		if(status)
		{
			UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);

			STRING_GLOBAL[0] = EOS;

			if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, QueryPlayerBalance(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
			else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[],[%s]]", GetPlayerNameEx(playerid), playerid, QueryPlayerBalance(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);
			CEF_CREATE(playerid, 2, 4, "InventoryNew", STRING_GLOBAL);
			inventory_status[playerid] = false;
			return 1;
		}
		else
		{
			CEF_HIDE(playerid, "InventoryNew");
			inventory_status[playerid] = true;
			inventory_sklad_id[playerid] = 0;
			inventory_shelf_id[playerid] = 0;
			inventory_plate_id[playerid] = -1;
			inventory_trunk_id[playerid] = 0;
			inventory_bag_id[playerid] = 0;
			return 1;
		}
	}
	return 1;
}
public:OnInventoryItemMove(playerid, where, event, from, slot, count_1)
{
	if(inventory_kd_move[playerid] != 0) 
	    return GameText(playerid, "Подождите, вы только что перенесли предмет", 2000, 0), LoadInventory(playerid, 1);
        
	inventory_kd_move[playerid] = 1;

	new str_log[148];

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{	
		if(where == 3)
		{
			if(inventory_shelf_id[playerid] != 0) if(GetPlayerItem(i, PI_SHELF) != inventory_shelf_id[playerid]) continue;
			if(inventory_sklad_id[playerid] != 0) if(GetPlayerItem(i, PI_SKLAD) != inventory_sklad_id[playerid]) continue;
			if(inventory_trunk_id[playerid] != 0) if(GetPlayerItem(i, PI_CAR_ID) != inventory_trunk_id[playerid]) continue;
			if(inventory_plate_id[playerid] != -1) if(GetPlayerItem(i, PI_PLATE) != inventory_plate_id[playerid]) continue;
			if(GetPlayerItem(i, PI_TYPE) != where) continue;
			if(GetPlayerItem(i, PI_SLOTS) != event) continue;
		}
		else
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_SLOTS) != event) continue;
			if(GetPlayerItem(i, PI_TYPE) != where) continue;
		}

		new id = GetPlayerItem(i, PI_SQL_ID);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new item = GetPlayerItem(i, PI_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new status = GetPlayerItem(i, PI_STATUS);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new indx = GetPlayerItem(i, PI_INDX);
		new patron = GetPlayerItem(i, PI_PATRON);
		new weapon = GetPlayerItem(i, PI_WEAPON);
		new slots_plate = GetPlayerItem(i, PI_SLOTS);

		if(item == 293 || item == 359) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);
		
		if(count < count_1 && typeitem == 0 && item != 0)
			return GameText(playerid, "В таком количестве нет данного предмета", 3000, 0), LoadInventory(playerid, 1);
			
		if(patron < count_1 && typeitem == 4) 
			return GameText(playerid, "В таком количестве нет данного оружия", 3000, 0), LoadInventory(playerid, 1);

		if(from == where && event == slot)
			return LoadInventory(playerid, 1);
	
		if(typeitem == 0 && item == 0 && from != 1)
			return LoadInventory(playerid, 1);

		if(typeitem != 2 && from == 0)
			return GameText(playerid, "Этот предмет нельзя положить сюда", 3000, 0), LoadInventory(playerid, 1);

		if(inventory_plate_id[playerid] != -1 && typeitem != 1)
			return GameText(playerid, "Этот предмет нельзя положить сюда", 3000, 0), LoadInventory(playerid, 1);

		if(typeitem == 2 && status == 1 && from != 0)
			return GameText(playerid, "Этот аксессуар сейчас используется", 3000, 0), LoadInventory(playerid, 1);

		if(typeitem == 3 && from != 1)
		{
			if(skin_id == GetPlayerData(playerid, P_SKIN))
			{
				SetPlayerSkin(playerid, 252);
				SetPlayerData(playerid, P_SKIN, 252);
				UpdatePlayerDatabaseInt(playerid, "skin", 252);
			}
		}
		if(from == 3 && where != 3)
		{
			if(GetSlotItemInventory(playerid, 0, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);

			if(typeitem == 0)
			{
				if(count_1 == count)
				{
					new query[148];

					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET sklad=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_sklad_id[playerid], slot, from, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET shelf=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_shelf_id[playerid], slot, from, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET car_id=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_trunk_id[playerid], slot, from, id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, -1);

					if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]), format(str_log, 148, "Положил предмет в склад");
					if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]), format(str_log, 148, "Положил предмет в шкаф");
					if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]), format(str_log, 148, "Положил предмет в багажник");
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count - count_1, id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_COUNT, count - count_1);

					if(inventory_sklad_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, -1, inventory_sklad_id[playerid], 0, 0);
					else if(inventory_shelf_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, inventory_shelf_id[playerid], -1, 0, 0);
					else if(inventory_trunk_id[playerid] != 0) CreateItemsItem(-1, 0, from, slot, item, count_1, indx, -1, -1, inventory_trunk_id[playerid], 0);
				}
			}
			else if(typeitem == 4)
			{
				if(count_1 == patron)
				{
					new query[148];

					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET sklad=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_sklad_id[playerid], slot, from, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET shelf=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_shelf_id[playerid], slot, from, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET car_id=%d, slots=%d, type=%d, owner_id=-1 WHERE id=%d LIMIT 1", inventory_trunk_id[playerid], slot, from, id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, -1);

					if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]);
					if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]);
					if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]);
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", patron - count_1, id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_PATRON, patron - count_1);

					if(inventory_sklad_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, -1, inventory_sklad_id[playerid], 0, 4, weapon, count_1);
					else if(inventory_shelf_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, inventory_shelf_id[playerid], -1, 0, 4, weapon, count_1);
					else if(inventory_trunk_id[playerid] != 0) CreateItemsGun(-1, 0, from, slot, -1, -1, inventory_trunk_id[playerid], 4, weapon, count_1);
				}
			}
			else
			{
				new query[148];
				if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, sklad=%d, owner_id=-1 WHERE id=%d",  slot, from, inventory_sklad_id[playerid], id);
				else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, shelf=%d, owner_id=-1 WHERE id=%d", slot, from, inventory_shelf_id[playerid], id);
				else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, car_id=%d, owner_id=-1 WHERE id=%d",  slot, from, inventory_trunk_id[playerid], id);
				else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, plate=%d, owner_id=-1 WHERE id=%d", slot, from, inventory_plate_id[playerid], id);
				mysql_query(mysql, query, false);

				if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, inventory_sklad_id[playerid]);
				if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, inventory_shelf_id[playerid]);
				if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, inventory_trunk_id[playerid]);
				if(inventory_plate_id[playerid] != -1) SetPlayerItem(i, PI_PLATE, inventory_plate_id[playerid]);

				SetPlayerItem(i, PI_SLOTS, slot);
				SetPlayerItem(i, PI_TYPE, from);
				SetPlayerItem(i, PI_OWNER_ID, -1);
			}
			if(inventory_plate_id[playerid] != -1)
            {
				if(GetPlayerItem(i, PI_PLATE) != inventory_plate_id[playerid]) continue;

                new typenumber = GetPlayerItem(i, PI_TYPENUMBER);

                new number[32], region[32];
                format(number, sizeof number, "%s", GetPlayerItem(i, PI_NUMBER));
                format(region, sizeof region, "%s", GetPlayerItem(i, PI_REGION));

                new garage_id = GetPlayerInGarage(playerid);

				NumberBoardUpdate(typenumber, number, region, garage_id, slot);
            }
			if(inventory_sklad_id[playerid] != 0)
			{
				new query[148];
				if(typeitem == 0) format(query, sizeof query, "%s [%d] положил на склад {1E90FF}%s [№%d] в количестве %d шт.", GetPlayerNameEx(playerid), playerid, ItemsInfo[item], item, count_1);
				if(typeitem == 1) format(query, sizeof query, "%s [%d] положил на склад {1E90FF}Автомобильные номера", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 2) format(query, sizeof query, "%s [%d] положил на склад {1E90FF}Аксессуар", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 3) format(query, sizeof query, "%s [%d] положил на склад {1E90FF}Одежда", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 4) format(query, sizeof query, "%s [%d] положил на склад {1E90FF}Оружие", GetPlayerNameEx(playerid), playerid);

				GiveFamilyLog(playerid, inventory_sklad_id[playerid], query);

				foreach(new idx: Player)
				{
					if(!IsPlayerConnected(idx)) continue;
					if(!IsPlayerLogged(idx)) continue;
					if(GetPlayerData(idx, P_FAMILY) == 0) continue;
					if(GetPlayerData(idx, P_ADVISOR_BLOCK_CHAT)) continue;

					if(GetPlayerData(idx, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

					SendClientMessage(idx, 0x66CC00FF, query);
				}
			}
		}
		else if(from != 3 && where == 3)
		{
			if(GetSlotItemInventory(playerid, -1, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
            
			if(inventory_plate_id[playerid] != -1)
            {
				if(GetPlayerItem(i, PI_PLATE) != inventory_plate_id[playerid]) continue;
				new garage_id = GetPlayerInGarage(playerid);
                NumberBoardDelete(garage_id, slots_plate);
            }
			if(typeitem == 0)
			{
				if(count_1 == count)
				{
					new query[148];

					format(query, sizeof query, "UPDATE items SET sklad=-1, shelf=-1, car_id=0, slots=%d, type=%d, owner_id=%d WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));

					SetPlayerItem(i, PI_SKLAD, -1);
					SetPlayerItem(i, PI_SHELF, -1);
					SetPlayerItem(i, PI_CAR_ID, 0);
					SetPlayerItem(i, PI_PLATE, -1);
				}
				else
				{
					SetPlayerItem(i, PI_COUNT, count - count_1);

					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
					mysql_query(mysql, query, false);

					CreateItemsItem(GetPlayerAccountID(playerid), 0, from, slot, item, count_1, indx, -1, -1, 0, 0);
				}
			}
			else if(typeitem == 4)
			{
				if(count_1 == patron)
				{
					new query[148];

					format(query, sizeof query, "UPDATE items SET sklad=-1, shelf=-1, car_id=0, slots=%d, type=%d, owner_id=%d WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
					SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));

					SetPlayerItem(i, PI_SKLAD, -1);
					SetPlayerItem(i, PI_SHELF, -1);
					SetPlayerItem(i, PI_CAR_ID, 0);
				}
				else
				{
					SetPlayerItem(i, PI_PATRON, patron - count_1);

					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
					mysql_query(mysql, query, false);

					CreateItemsGun(GetPlayerAccountID(playerid), 0, from, slot, -1, -1, 0, 4, weapon, count_1);
				}
			}
			else
			{
				new query[148];
				if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, sklad=-1 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, shelf=-1 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, car_id=0 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "UPDATE items SET slots=%d, type=%d, owner_id=%d, plate=-1 WHERE id=%d LIMIT 1", slot, from, GetPlayerAccountID(playerid), id);
				mysql_query(mysql, query, false);

				if(inventory_sklad_id[playerid] != 0) SetPlayerItem(i, PI_SKLAD, -1);
				else if(inventory_shelf_id[playerid] != 0) SetPlayerItem(i, PI_SHELF, -1);
				else if(inventory_trunk_id[playerid] != 0) SetPlayerItem(i, PI_CAR_ID, 0);
				else if(inventory_plate_id[playerid] != -1) SetPlayerItem(i, PI_PLATE, -1);

				SetPlayerItem(i, PI_SLOTS, 		slot);
				SetPlayerItem(i, PI_TYPE, 		from);
				SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(playerid));
			}
			if(inventory_sklad_id[playerid] != 0)
			{
				new query[148];
				if(typeitem == 0) format(query, sizeof query, "%s [%d] взял со склада {1E90FF}%s [№%d] в количестве %d шт.", GetPlayerNameEx(playerid), playerid, ItemsInfo[item], item, count_1);
				if(typeitem == 1) format(query, sizeof query, "%s [%d] взял со склада {1E90FF}Автомобильные номера", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 2) format(query, sizeof query, "%s [%d] взял со склада {1E90FF}Аксессуар", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 3) format(query, sizeof query, "%s [%d] взял со склада {1E90FF}Одежда", GetPlayerNameEx(playerid), playerid);
				if(typeitem == 4) format(query, sizeof query, "%s [%d] взял со склада {1E90FF}Оружие", GetPlayerNameEx(playerid), playerid);
				GiveFamilyLog(playerid, inventory_sklad_id[playerid], query);

				foreach(new idx: Player)
				{
					if(!IsPlayerConnected(idx)) continue;
					if(!IsPlayerLogged(idx)) continue;
					if(GetPlayerData(idx, P_FAMILY) == 0) continue;
					if(GetPlayerData(idx, P_ADVISOR_BLOCK_CHAT)) continue;

					if(GetPlayerData(idx, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

					SendClientMessage(idx, 0x66CC00FF, query);
				}
			}
		}
		else if(from == 1 && where == 2 || from == 2 && where == 1 || from == 1 && where == 1 || from == 2 && where == 2) 
		{
			if(typeitem == 0)
			{
				if(item != 0)
				{
					if(GetSlotItemInventory(playerid, -1, from, slot) == 0) 
					{
						if(count_1 == count)
						{
							new query[148];
							format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
							mysql_query(mysql, query, false);

							SetPlayerItem(i, PI_SLOTS, slot);
							SetPlayerItem(i, PI_TYPE, from);
						}
						else
						{
							SetPlayerItem(i, PI_COUNT, count - count_1);

							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
							mysql_query(mysql, query, false);

							CreateItemsItem(GetPlayerAccountID(playerid), 0, from, slot, item, count_1, indx, -1, -1, 0, 0);	
						}
					}
					else
					{
						if(from == 1 && where == 2 || from == 2 && where == 1)
							return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
						
						for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
						{
							if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
							if(GetPlayerItem(idx, PI_TYPE) != from) continue;
							if(GetPlayerItem(idx, PI_SLOTS) != slot) continue;

							SetPlayerItem(idx, PI_COUNT, GetPlayerItem(idx, PI_COUNT) + count_1);

							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_COUNT), GetPlayerItem(idx, PI_SQL_ID));
							mysql_query(mysql, query, false);

						}
						if(count_1 == count)
						{
							DestroyItemsMysql(i);
						}
						else
						{
							SetPlayerItem(i, PI_COUNT, GetPlayerItem(i, PI_COUNT) - count_1);

							new query[148];
							format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT), id);
							mysql_query(mysql, query, false);
						}
					}
				}
				else
				{
					new query[148];
					format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_SLOTS, slot);
					SetPlayerItem(i, PI_TYPE, from);
				}
			}
			else if(typeitem == 4)
			{
				if(GetSlotItemInventory(playerid, -1, from, slot) == 0) 
				{
					if(count_1 == patron)
					{
						new query[148];
						format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
						mysql_query(mysql, query, false);

						SetPlayerItem(i, PI_SLOTS, slot);
						SetPlayerItem(i, PI_TYPE, from);
					}
					else
					{
						SetPlayerItem(i, PI_PATRON, patron - count_1);

						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
						mysql_query(mysql, query, false);

						CreateItemsGun(GetPlayerAccountID(playerid), 0, from, slot, -1, -1, 0, 4, weapon, count_1);
					}
				}
				else
				{
					if(from == 1 && where == 2 || from == 2 && where == 1)
						return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);
	
					for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
					{
						if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
						if(GetPlayerItem(idx, PI_TYPE) != from) continue;
						if(GetPlayerItem(idx, PI_SLOTS) != slot) continue;

						SetPlayerItem(idx, PI_PATRON, GetPlayerItem(idx, PI_PATRON) + count_1);

						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_PATRON), GetPlayerItem(idx, PI_SQL_ID));
						mysql_query(mysql, query, false);

					}
					if(count_1 == patron)
					{
						DestroyItemsMysql(i);
					}
					else
					{
						SetPlayerItem(i, PI_PATRON, GetPlayerItem(i, PI_PATRON) - count_1);

						new query[148];
						format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_PATRON), id);
						mysql_query(mysql, query, false);
					}
				}
			}
			else
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_SLOTS, slot);
				SetPlayerItem(i, PI_TYPE, from);
			}
		}
		else if(where == 3 && from == 3)
		{
			if(GetSlotItemInventory(playerid, 0, from, slot) != 0) 
				return GameText(playerid, "Этот слот занят", 3000, 0), LoadInventory(playerid, 1);

			new query[148];
			if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);
			else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "UPDATE items SET slots=%d WHERE id=%d LIMIT 1", slot, id);

			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_SLOTS, slot);
		}
		else if(where == 0 && from != 0 || where != 0 && from == 0 || where == 0 && from == 0)
		{
			new query[148];
			format(query, sizeof query, "UPDATE items SET slots=%d, type=%d WHERE id=%d LIMIT 1", slot, from, id);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_SLOTS, slot);
			SetPlayerItem(i, PI_TYPE, from);
		}

		LoadInventory(playerid);
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		
		if(typeitem == 4) 
			ResetWeapons(playerid);

		if(typeitem == 0)
		    AddWeaponInventory(playerid, item);

		return 1;
	}
	return true;	
}

public:OnInventoryItemUse(playerid, event, slot)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;

		new number[32], region[32];

		format(number, sizeof number, "%s", GetPlayerItem(i, PI_NUMBER));
		format(region, sizeof region, "%s", GetPlayerItem(i, PI_REGION));

		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);

		new skin_id = GetPlayerItem(i, PI_SKIN_ID);

		new item_id = GetPlayerItem(i, PI_ITEM);

		new type = GetPlayerItem(i, PI_TYPEACS);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new status = GetPlayerItem(i, PI_STATUS);
		new boneid = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_COUNT);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);

		if(typeitem == 0)
		{
			if(item_id == 132)
			{
				if(g_player_status_fish[playerid] == 0)
				{
					if(g_player_fishing_zone[playerid] != 1)
						return SCM(playerid, 0xf8d883FF, "Вы должны находится в зоне рыбалки.");

					new Float:x, Float:y, Float:z;
					new Float:depth, Float:playerdepth;

					GetPlayerPos(playerid, x, y, z);

					if(!CA_IsPlayerInWater(playerid, depth, playerdepth)) return SCM(playerid, 0xf8d883FF, "Вы должны находится впритык к воде.");

					g_player_type_fish_rod[playerid] = boneid;

					SCMF(playerid, 0x50e958FF, "Вы успешно взяли \"%s\" в руки.", indxFishRod[boneid]);
					SCM(playerid, 0x50e958FF, "Перед рыбалкой не забудьте намотать леску на удочку.");

					if(boneid == 0) SetPlayerAttachedObject(playerid, 0, 16504, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					if(boneid == 1) SetPlayerAttachedObject(playerid, 0, 16503, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					if(boneid == 2) SetPlayerAttachedObject(playerid, 0, 16502, 6, 0.079376, 0.037070, 0.007706, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
					
					g_player_status_fish[playerid] = 1;

					OnItemsInterfaceClose(playerid);
					
					CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");
				}
				else
				{
					RemovePlayerAttachedObjectEx(playerid, 0, 6);
					g_player_status_fish[playerid] = 0;

					CEF_HIDE(playerid, "Interactions");

				}
			}
			if(item_id == 326)
			{
				if(g_player_status_fish[playerid] == 0) return SCM(playerid, 0xfcdb70FF, "Сначала возьмите в руку удочку.");
				if(g_player_status_fish[playerid] != 2) return SCM(playerid, 0xfcdb70FF, "Сначала намотайте леску на вашу удочку.");
				if(g_player_status_fish[playerid] == 3) return SCM(playerid, 0xfcdb70FF, "Вы уже посадили наживку на удочку.");

				if(g_player_status_fish[playerid] == 2)
				{
					if(boneid == 0) g_player_status_primanka[playerid] = 1;
					else if(boneid == 1) g_player_status_primanka[playerid] = 2;
					else if(boneid == 2) g_player_status_primanka[playerid] = 3;
					else if(boneid == 3) g_player_status_primanka[playerid] = 4;
					else if(boneid == 4) g_player_status_primanka[playerid] = 5;
					else if(boneid == 5) g_player_status_primanka[playerid] = 6;

					SCMF(playerid, 0x50e958FF, "Вы выбрали \"%s\" в качестве наживки. Наживка будет автоматически применена во время рыбалки.", indxFish[boneid]);
				}
			}
			if(item_id == 325)
			{
				if(g_player_status_fish[playerid] == 0) return SCM(playerid, 0xfcdb70FF, "Сначала возьмите в руку удочку.");
				if(g_player_status_fish[playerid] == 2) return SCM(playerid, 0xfcdb70FF, "Вы уже намотали леску на вашу удочку.");
				if(g_player_status_fish[playerid] == 1)
				{
					if(boneid == 0) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.15мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);
					if(boneid == 1) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.3мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);
					if(boneid == 2) SCMF(playerid, 0x50e958FF, "Вы успешно намотали леску 0.85мм на \"%s\".", indxFishRod[g_player_type_fish_rod[playerid]]);

					g_player_status_fish[playerid] = 2;

					GiveIteam(playerid, 325, 0, 1, boneid);
				}
			}
			if(item_id == 280)
			{
               new Float:health;
               GiveIteam(playerid, 280, 0,1,0);
               GetPlayerHealth(playerid, health);
	           SetPlayerData(playerid, P_HEALTH, health+1*25);
			   SetPlayerHealthEx(playerid, health+1*25);
	           GameText(playerid, "~g~+ 25 Здоровья", 5000, 1);
	           Action(playerid, "выпил(а) лимонад");
			}
			if(item_id == 252)
			{
				if(GetPVarInt(playerid, "quest") == 1)
		        {
		            SetPVarInt(playerid, "quest", 0);
		            SetPlayerData(playerid, P_QUEST_1_STATS, 1);
		            CEF_HIDE(playerid, "QuestsProgressInfo");
		            SendClientMessage(playerid, -1, "");
			        SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}1000 руб {FFA500}и {"#cGold"}1 exp.");
			        ShowDisplayText(playerid, "Задание выполнено<br><font color=#F1B50C>1000 руб и 1 EXP", 4000);
			        SendClientMessage(playerid, -1, "");
                    GiveIteam(playerid, 252, 0, 1, 0);
			        ModifyCashBalance(playerid, 1000, "Задание", true, true);
			        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			        UpdatePlayerDatabaseInt(playerid, "quest_1_stats", GetPlayerData(playerid, P_QUEST_1_STATS));
			        AddPlayerData(playerid, P_EXP, +, 1);
					OnClickQuests(playerid, 1);

			        if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
			        {
				       SetPlayerData(playerid, P_EXP, 0);
				       AddPlayerData(playerid, P_LEVEL, +, 1);
				       SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
				       SetPlayerLevelInit(playerid);
                    }
				}
			}
			if(item_id == 331)
			{
				new garden_status, garden = GetNearestGarden(playerid, 6.0);

				if(garden != -1)
				{

					if(GetGardenData(garden, G_IMPROVEMENTS) > 0)
					{
						if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, GetGardenData(garden, G_POS_Z) + 0.124374)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, GetGardenData(garden, G_POS_Z) + 0.025609)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, GetGardenData(garden, G_POS_Z) + 0.036848)) garden_status = 1;
					}
				}
				if(garden_status == 1) 
				{
					if(count < 2) return SCM(playerid, 0xf8d883FF, "Данная канистра не наполнена водой.");

					if(gardenobj_1_woter[garden] + (count - 1) > 150) 
					{
						//GiveIteam(playerid, 331, 0, gardenobj_1_woter[garden] + (count - 1) - 150, 0);

						new fmt_text[84];
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count - (gardenobj_1_woter[garden] + (count - 1) - 150), GetPlayerItem(i, PI_SQL_ID));
						mysql_query(mysql, fmt_text, false);

						AddPlayerItem(i, PI_COUNT, -, gardenobj_1_woter[garden] + (count - 1) - 150);

						SCMF(playerid, 0xf8d883FF, "Вы наполнили бочку с водой на %d л.", gardenobj_1_woter[garden] + (count - 1) - 150);
						gardenobj_1_woter[garden] = 150;

						format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
						UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
					}
					else
					{
						//GiveIteam(playerid, 331, 0, count - 1, 0);

						new fmt_text[84];
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=1 WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
						mysql_query(mysql, fmt_text, false);

						SetPlayerItem(i, PI_COUNT, 1);

						gardenobj_1_woter[garden] = gardenobj_1_woter[garden] + count - 1;
						SCMF(playerid, 0xf8d883FF, "Вы наполнили бочку с водой на %d л.", count - 1);

						format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
						UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
					}
				}
				else
				{
					if(count > 14) return SCM(playerid, 0xf8d883FF, "Данная канистра уже наполнена водой.");

					new Float:x, Float:y, Float:z;

					GetPlayerPos(playerid, x, y, z);

					if(z > 2.40) return SCM(playerid, 0xf8d883FF, "Вы должны находится впритык к воде.");

					//GiveIteam(playerid, 331, 1, 14, 0);

					new fmt_text[84];
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count + 14, GetPlayerItem(i, PI_SQL_ID));
					mysql_query(mysql, fmt_text, false);

					AddPlayerItem(i, PI_COUNT, +, 14);

					SCM(playerid, 0xabcdefFF, "Вы набрали воду в канистру");
				}
			}
		    if(item_id == 334)
			{
				new garden = GetNearestGarden(playerid, 10.0);

	            if(garden != -1)
	            {
                    new idgarden;
			        if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;

			        for(new idx; idx < idgarden; idx ++)
			        {
				        if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_1[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[idx][2] + 1)) continue;
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_2[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[idx][2] + 1)) continue;
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_3[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[idx][2] + 1)) continue;
				
				        if(G_STATUSS[garden][idx] != 100)
						{
							if(G_HAS_WEED[garden][idx])
							{
                                DestroyDynamic3DTextLabel(gardendyamkasor[garden][idx]);
		                        G_HAS_WEED[garden][idx] = false;

				                GiveIteam(playerid, 334, 0, 1, 0);

								ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
							}
							else SCM(playerid, 0xead671FF, "Возле этого растения нет сорняков.");
						}
				    }
				}
			}
			if(item_id == 335)
			{
				new garden = GetNearestGarden(playerid, 10.0);

	            if(garden != -1)
	            {
			        new idgarden;
					if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;

			        for(new idx; idx < idgarden; idx ++)
			        {
				        if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_1[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[idx][2] + 1)) continue;
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_2[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[idx][2] + 1)) continue;
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_3[idx][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[idx][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[idx][2] + 1)) continue;
				            
						if(boneid == 0)
						{
							if(!G_HAS_YDOB_YES[garden][idx])
							{
                                if(!G_HAS_YDOB[garden][idx])
							    {
                                    if(G_STATUSS[garden][idx] != 70)
	                                {
										if(G_STATUS_YAM[garden][idx] != 3) return SCM(playerid, 0xead671FF, "Вы стоите возле пустой ямки.");

		                                G_HAS_YDOB[garden][idx] = true;
									    G_HAS_YDOB_YES[garden][idx] = true;

								        GameText(playerid, "~w~Использовано удобрение~n~Урожайность растения увеличена", 3000, 2);

				                        GiveIteam(playerid, 335, 0, 1, 0);

								        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
									}
								}
							}
							else SCM(playerid, 0xead671FF, "Это растение уже удобряли.");
						}
						if(boneid == 1)
						{
							if(!G_HAS_YDOB_YES[garden][idx])
							{
                                if(!G_HAS_YDOB2[garden][idx])
							    {
                                    if(G_STATUSS[garden][idx] != 70)
	                                {
										if(G_STATUS_YAM[garden][idx] != 3) return SCM(playerid, 0xead671FF, "Вы стоите возле пустой ямки.");

		                                G_HAS_YDOB2[garden][idx] = true;
									    G_HAS_YDOB_YES[garden][idx] = true;

										G_STATUSS[garden][idx] += 15;

								        GameText(playerid, "~w~Использовано удобрение~n~Время роста растения сокращено", 3000, 2);

				                        GiveIteam(playerid, 335, 0, 1, 1);

								        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
									}
								}
							}
							else SCM(playerid, 0xead671FF, "Это растение уже удобряли.");
						}
				    }
				}
			}
			if(item_id == 361)
			{
				new vehicleid = GetNearestVehicleID(playerid, 6.0);
                if(vehicleid == INVALID_VEHICLE_ID) 
                {
                    return 1;
                }

                new Float:x, Float:y, Float:z;

                GetVehiclePos(vehicleid, x, y, z);

                if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z)) 
                    return SCM(playerid, 0xCECECEFF, "* Вы должны находиться рядом с транспортом.");
				
				Progress_Bar_Menu(playerid, 9, 25, 25);
			}
			if(item_id == 316)
			{
				switch(random(50))
				{
					case 0:
					{
						new meshok_id[] = {111, 112, 113, 114, 321, 320}; 
                        new meshok_index = RandomEx(0, sizeof(meshok_id) - 1);
                        new meshokprizes = meshok_id[meshok_index];

                        SCMF(playerid, COLOR_ORANGE, "Вы открыли мешочек с драгоценностями и нашли в нём {ffffff}\"%s\" (1 шт).", ItemsInfo[meshokprizes]);
						GiveIteam(playerid, meshokprizes, 1, 1, 0);

						GiveIteam(playerid, 316, 0, 1, 0, "Открытие мешочка");
					}
					case 1..49:
					{
					    new money = RandomEx(50000, 10000000);

					    ModifyCashBalance(playerid, money, "Мешочек с драгоценностями");
						GiveIteam(playerid, 316, 0, 1, 0, "Открытие мешочка");
                        SCMF(playerid, COLOR_ORANGE, "Вы открыли мешочек с драгоценностями и нашли в нём {ffffff}\"Деньги\" (%s руб).", formatInt(money));
					}
				}
			}
			if(item_id == 126)
			{
				if(e_PlayerGarbage[playerid][ePGarbageModel] == 0) return 1;

                GiveIteam(playerid, 126, 0, 1, 0);

				e_PlayerGarbage[playerid][ePGarbageBatter] = 100;

				switch(e_PlayerGarbage[playerid][ePGarbageModel])
				{
					case 1:
					{
                       SCM(playerid, COLOR_GREEN, "Металлоискатель BHJ {ffffff}был успешно заряжен.");
					}
					case 2:
					{
                       SCM(playerid, COLOR_GREEN, "Металлоискатель GA250 {ffffff}был успешно заряжен.");
					}
				}
			}
			if(item_id == 127)
			{
				if(detector[playerid] == 1)
				{
					if(e_PlayerGarbage[playerid][ePGarbageModel] == 1)
					{
                        Garbage:ClearGarbageInfo(playerid);
					}
				}
				else if(detector[playerid] == 0)
				{
					SCM(playerid, COLOR_WHITE, "{ffffff}Если захотите выключить металлоискатель, откройте и нажмите {B8CEF6}\"Использовать\" {ffffff}еще раз.");
					SCM(playerid, COLOR_WHITE, "{B8CEF6}Удерживайте клавишу {ffffff}\"ALT\" {B8CEF6}для активации поиска. Как только вы отпустите клавишу. прибор перейдет в режим ожидания!");
						
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10803,6,0.045999,-0.000999,0.000000,-0.399999,-113.600013,-101.699989,1.000000,1.000000,1.000000);

					CEF_CREATE(playerid, 2, 4, "GarbageMetalSearch", "[0, 0, 100]");

					str_2[0] = EOS;
                    format(str_2,200,"interface('GarbageMetalSearch').getSearchInfo('[%d,%d,%d]')",e_PlayerGarbage[playerid][ePGarbageState],e_PlayerGarbage[playerid][ePGarbageSignal],e_PlayerGarbage[playerid][ePGarbageBatter]);
                    CEF_CREATE(playerid, 1, 2, str_2);

					detector[playerid] = 1;
					e_PlayerGarbage[playerid][ePGarbageModel] = 1;
					IntfDialogCallRemote
	                (
		                playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
		                "Информация",
		                "{FFFFFF}Существует две модели металлоискателей:\n"\
		                "\n"\
						"{FAAC58}'Garret ACE 250' {FFFFFF}- дорогой, быстро разряжается, большой радиус работы.\n"\
						"{FAAC58}'Bounty Hunter Junior' {FFFFFF}- дешёвый, медленно разряжается, средний радиус работы.\n"\
						"\n"\
						"{FFFFFF}Чтобы начать поиски, необходимо прибыть на поле для поиска металлолома (ищите в GPS).\n"\
		                "{FFFFFF}Там вы сможете найти от {FAAC58}3 до 10 кг. {FFFFFF}металла либо если повезёт что-то более ценное.\n"\
		                "{FFFFFF}Когда вы попадёте на территорию поля, вы увидите уведомление в углу экрана.\n"\
						"{FFFFFF}Аналогичное уведомление отобразится, если вы случайно покините область.\n"\
						"\n"\
						"{FFFFFF}Находясь на территории поля, вы также можете посмотреть его область на карте.\n"\
						"{FFFFFF}Новые точки на поле появляются около {FAAC58}10 {FFFFFF}раз в час в случайные промежутки времени.\n"\
						"{FFFFFF}Когда вы найдете одну из них, на приборе изменится уровень сигнала и вы услышите звук.\n"\
						"{FFFFFF}У игроков с более высоким игровым уровнем шанс найти что-то ценное чуть выше.",
						"Закрыть", ""
	                );
				}
			}
			if(item_id == 128)
			{
				if(detector[playerid] == 1)
				{
					if(e_PlayerGarbage[playerid][ePGarbageModel] == 2)
					{
                        Garbage:ClearGarbageInfo(playerid);
					}
				}
				else if(detector[playerid] == 0)
				{
					SCM(playerid, COLOR_WHITE, "{ffffff}Если захотите выключить металлоискатель, откройте и нажмите {B8CEF6}\"Использовать\" {ffffff}еще раз.");
					SCM(playerid, COLOR_WHITE, "{B8CEF6}Удерживайте клавишу {ffffff}\"ALT\" {B8CEF6}для активации поиска. Как только вы отпустите клавишу. прибор перейдет в режим ожидания!");
						
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10804,6,0.045999,-0.000999,0.000000,-0.399999,-113.600013,-101.699989,1.000000,1.000000,1.000000);

					CEF_CREATE(playerid, 2, 4, "GarbageMetalSearch", "[0, 0, 100]");

					str_2[0] = EOS;
                    format(str_2,200,"interface('GarbageMetalSearch').getSearchInfo('[%d,%d,%d]')",e_PlayerGarbage[playerid][ePGarbageState],e_PlayerGarbage[playerid][ePGarbageSignal],e_PlayerGarbage[playerid][ePGarbageBatter]);
                    CEF_CREATE(playerid, 1, 2, str_2);

					detector[playerid] = 1;
					e_PlayerGarbage[playerid][ePGarbageModel] = 2;
					IntfDialogCallRemote
	                (
		                playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
		                "Информация",
		                "{FFFFFF}Существует две модели металлоискателей:\n"\
		                "\n"\
						"{FAAC58}'Garret ACE 250' {FFFFFF}- дорогой, быстро разряжается, большой радиус работы.\n"\
						"{FAAC58}'Bounty Hunter Junior' {FFFFFF}- дешёвый, медленно разряжается, средний радиус работы.\n"\
						"\n"\
						"{FFFFFF}Чтобы начать поиски, необходимо прибыть на поле для поиска металлолома (ищите в GPS).\n"\
		                "{FFFFFF}Там вы сможете найти от {FAAC58}3 до 10 кг. {FFFFFF}металла либо если повезёт что-то более ценное.\n"\
		                "{FFFFFF}Когда вы попадёте на территорию поля, вы увидите уведомление в углу экрана.\n"\
						"{FFFFFF}Аналогичное уведомление отобразится, если вы случайно покините область.\n"\
						"\n"\
						"{FFFFFF}Находясь на территории поля, вы также можете посмотреть его область на карте.\n"\
						"{FFFFFF}Новые точки на поле появляются около {FAAC58}10 {FFFFFF}раз в час в случайные промежутки времени.\n"\
						"{FFFFFF}Когда вы найдете одну из них, на приборе изменится уровень сигнала и вы услышите звук.\n"\
						"{FFFFFF}У игроков с более высоким игровым уровнем шанс найти что-то ценное чуть выше.",
						"Закрыть", ""
	                );
				}
			}
			if(item_id == 168)
			{
				if(GetInventorySlots(playerid) == -1) return SCM(playerid, 0xf8d883FF, "У вас недостаточно свободных мест в инвентаре");

				new Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				new garden_status, garden = GetNearestGarden(playerid, 6.0);

				if(garden != -1)
				{

					if(GetGardenData(garden, G_IMPROVEMENTS) > 0)
					{
						if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -2.67, GetGardenData(garden, G_POS_Y) + -0.009998, GetGardenData(garden, G_POS_Z) + 0.124374)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -3.39779, GetGardenData(garden, G_POS_Y) + 0.025699, GetGardenData(garden, G_POS_Z) + 0.025609)) garden_status = 1;
						if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGardenData(garden, G_POS_X) + -5.07046, GetGardenData(garden, G_POS_Y) + 0.075143, GetGardenData(garden, G_POS_Z) + 0.036848)) garden_status = 1;
					}
				}

				if(z > 2.40 && garden_status == 0) return SCM(playerid, 0xf8d883FF, "Вы должны находится возле бочки с водой в огороде либо стоять впритык к воде.");

				if(garden_status == 1)
				{
					if(gardenobj_1_woter[garden] > 50)
					{
						gardenobj_1_woter[garden] = gardenobj_1_woter[garden] - 50;
						GiveIteam(playerid, 168, 0, 1, 0);
						GiveIteam(playerid, 247, 1, 50, 0);
					}
					else
					{
						GiveIteam(playerid, 168, 0, 1, 0);
						GiveIteam(playerid, 247, 1, gardenobj_1_woter[garden], 0);
						gardenobj_1_woter[garden] = 0;
					}
					new fmt_text[84];
					format(fmt_text, sizeof fmt_text, "{FFA500}Бочка для воды\n{FFFFFF}Заполнено: {FFA500}%d/150 л.", gardenobj_1_woter[garden]);
					UpdateDynamic3DTextLabelText(gardenobj_1_label[garden], 0xFFFF00FF, fmt_text);
				}
				else
				{
					GiveIteam(playerid, 168, 0, 1, 0);
					GiveIteam(playerid, 247, 1, 50, 0);
				}

				SCM(playerid, 0xabcdefFF, "Вы набрали воду в лейку");
			}

			if(item_id == 342) CEF_CREATE(playerid, 2, 4, "Tablet", "[[0,\"Бизнес\"],[1,\"Равито\"],[1,\"Банда\"]]");

			if(item_id == 288)
			{
				new string[148], Float:distance, fmt[MAX_PLAYERS];	
				for(new idx; idx < g_neft_loaded; idx ++)
				{
					if(GetNeftData(idx, N_OWNER_ID) == 0)
					{
						SetPlayerCheckpoint(playerid, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z), 3.0), EnablePlayerGPS(playerid, 84, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z), ""), distance = GetPlayerDistanceFromPoint(playerid, GetNeftData(idx, N_POS_X),GetNeftData(idx, N_POS_Y),GetNeftData(idx, N_POS_Z));
						neft_cp[playerid] = 1;
						format(string, sizeof(string), "{afdafc}Месторождение нефти найдено в {FFFFFF}%.1fм. {afdafc}от вас и отмечено на карте.", distance);
						SendClientMessage(playerid, 0xffffffFF, string);
						fmt[playerid] = 0;
						return 1;
					}
					else fmt[playerid] = 1;
				}
				if(fmt[playerid] == 1) SendClientMessage(playerid, 0xffffffFF, "{afdafc}*На данный момент вы не можете это использовать, так как привышен лимит нефтевышек.");
			}
			if(item_id == 258){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 1);
				SetPVarInt(playerid, "case_id", 258);
				ShowCase(playerid);
			} 
			if(item_id == 261){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 2);
				SetPVarInt(playerid, "case_id", 261);
				ShowCase(playerid);
			}
			if(item_id == 272){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 3);
				SetPVarInt(playerid, "case_id", 272);
				ShowCase(playerid);
			}
			if(item_id == 278){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 4);
				SetPVarInt(playerid, "case_id", 278);
				ShowCase(playerid);
			}
			if(item_id == 284){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 5);
				SetPVarInt(playerid, "case_id", 284);
				ShowCase(playerid);
			}
			if(item_id == 290){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 6);
				SetPVarInt(playerid, "case_id", 290);
				ShowCase(playerid);
			}
			if(item_id == 300){
				OnInventoryDisplayChange(playerid, false);		
				SetPVarInt(playerid, "case_type", 7);
				SetPVarInt(playerid, "case_id", 300);
				ShowCase(playerid);
			}
			if(item_id == 328){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 8);
				SetPVarInt(playerid, "case_id", 328);
				ShowCase(playerid);
			} 
			if(item_id == 344){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 9);
				SetPVarInt(playerid, "case_id", 344);
				ShowCase(playerid);
			} 
			if(item_id == 348){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 10);
				SetPVarInt(playerid, "case_id", 348);
				ShowCase(playerid);
			} 
			if(item_id == 350){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 11);
				SetPVarInt(playerid, "case_id", 350);
				ShowCase(playerid);
			} 
			if(item_id == 355){
				OnInventoryDisplayChange(playerid, false);	
				SetPVarInt(playerid, "case_type", 12);
				SetPVarInt(playerid, "case_id", 355);
				ShowCase(playerid);
			}
			if(item_id == 356){
				OnInventoryDisplayChange(playerid, false);
				SetPVarInt(playerid, "case_type", 13);
				SetPVarInt(playerid, "case_id", 356);
				ShowCase(playerid);
			}
			if(item_id == 360){
				OnInventoryDisplayChange(playerid, false);
				SetPVarInt(playerid, "case_type", 14);
				SetPVarInt(playerid, "case_id", 360);
				ShowCase(playerid);
			}
			if(item_id == 279)
			{
				new vehicleid = GetNearestVehicleID(playerid, 10.0); 
			    new ownable = GetPlayerOwnableCarLast(playerid);
				new sto = GetNearestBusiness(playerid, 30.0);
				new garage_id = GetPlayerInGarage(playerid);

				if(vehicleid == INVALID_VEHICLE_ID) 
				    return SendClientMessage(playerid, 0xB9C1B8FF, "Вы должны находиться около ТС");

                if(ownable != vehicleid) 
				    return SendClientMessage(playerid, 0xB9C1B8FF, "Можно покрасить только свой личный ТС");
    
		        if((sto == -1 || GetBusinessData(sto, B_TYPE) != 17) && garage_id == -1)
                    return SendClientMessage(playerid, 0xB9C1B8FF, "Проводить покрасочные работы можно в гараже или СТО");

				SetPVarInt(playerid, "livery", 0);
                
				switch(count)
				{
                    case 479: SetPVarInt(playerid, "livery", 9);
					case 481: SetPVarInt(playerid, "livery", 11);
					case 532: SetPVarInt(playerid, "livery", 28);
					case 533: SetPVarInt(playerid, "livery", 29);
					case 566: SetPVarInt(playerid, "livery", 30);
				    case 567: SetPVarInt(playerid, "livery", 31);
				    case 568: SetPVarInt(playerid, "livery", 32);
				    case 569: SetPVarInt(playerid, "livery", 33);
				    case 570: SetPVarInt(playerid, "livery", 34);
				    case 571: SetPVarInt(playerid, "livery", 35);
				    case 648: SetPVarInt(playerid, "livery", 38);
				    case 649: SetPVarInt(playerid, "livery", 39);
				    case 650: SetPVarInt(playerid, "livery", 40);
				    case 651: SetPVarInt(playerid, "livery", 41);
				    case 689: SetPVarInt(playerid, "livery", 42);
				    case 690: SetPVarInt(playerid, "livery", 43);
				    case 700: SetPVarInt(playerid, "livery", 45);
				    case 701: SetPVarInt(playerid, "livery", 46);
				    case 703: SetPVarInt(playerid, "livery", 48);
				    case 704: SetPVarInt(playerid, "livery", 49);
				    case 705: SetPVarInt(playerid, "livery", 50);
					default: return 1;
				}

				if(GetPVarInt(playerid, "livery") > 0)
				{
					GivePlayerWeapon(playerid, 41, 5000);
				    CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[1,\"~b~Вы начали покраску ТС\",3500,0,-1,1,0,3.00]')");
				}
			}
			if(item_id == 44)
			{
				if(GetIteam(playerid, 44) < 1) return SCM(playerid, 0xCECECEFF, "* У вас отсутствует рем. комплект");

				new vehicleid = GetNearestVehicleID(playerid, 6.0);
				if(vehicleid == INVALID_VEHICLE_ID) return SCM(playerid, COLOR_GREY, "Вы должны находится около транспорта");
				
				new Float:pos[5];

				GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BONNET, pos[0], pos[1], pos[2], pos[3], pos[4]);

				if(!IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2])) return SCM(playerid, 0xCECECEFF, "* Вы должны находится около капота");

				if(GetVehicleParam(vehicleid, V_BONNET) != VEHICLE_PARAM_ON) return SCM(playerid, 0xCECECEFF, "* Капот должен быть открыт");

				Progress_Bar_Menu(playerid, 1, 15, 15);
			}
			if(item_id == 257) callcmd::lottery(playerid);
			if(item_id == 254) callcmd::diagnostics(playerid);
			
			if(item_id == 1)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);

					IntfDialogCallRemote
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
			if(item_id == 25)
			{
				if(GetPVarInt(playerid, "DrugsTime") > gettime()) return SendClientMessage(playerid, 0xFF6600FF, "Вы недавно употребляли наркотики.. Подождите немного"),OnInventoryDisplayChange(playerid, false);
				new string[128];
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerData(playerid, P_HEALTH, health+1*20);
				SetPlayerHealthEx(playerid, health+1*20);
				GetPlayerHealth(playerid, health);
				if(health > 120) return SendClientMessage(playerid, COLOR_GREY, "Вам плохо от наркотиков, пожалуйста подождите"),OnInventoryDisplayChange(playerid, false);
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
				format(string, sizeof(string), "Вы употребили %i гр. наркотиков. Ваше здоровье: %3.1f", 1, health);
				SendClientMessage(playerid, 0xCECECEFF, string);
				GiveIteam(playerid, 25, 0,1,0);
				SetPVarInt(playerid, "DrugsTime", gettime() + 60);
				new fmt_str[124];
				format(fmt_str, sizeof fmt_str, "%s употребил(a) %i грамм наркотиков", GetPlayerNameEx(playerid), 1);
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				SetPlayerTime(playerid,17,0);
				SetPlayerDrunkLevel(playerid, 3000);
				SetPlayerWeather(playerid, 0);
			}
			if(item_id == 2)
			{
				SCM(playerid, COLOR_BLUE, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");

				GameText(playerid, "~b~+ 60 Здоровья", 1000, 2);
				SetPlayerChatBubble(playerid, "+60 hp", 0x33CC33FF, 5.0, 1000);
				ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
				SetPlayerHealthEx(playerid, 60.0, true);
				GiveIteam(playerid, 2, 0, 1, 0);
			}
		}
		if(typeitem == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x808080FF, "Вы должны находится возле капота");

			new vehicleid;
			new Float:POS[5];
			new Float:Distance_ = 50.0;

			for(new idx = 0; idx < MAX_VEHICLES; idx++)
			{
				if(GetVehicleData(idx, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(idx, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						new Float:Distance = D_PlayerVehicle(playerid, idx);
						if(Distance < Distance_)
						{
							Distance_ = Distance;
							vehicleid = idx;
						}
					}
				}

			}
			if(Distance_ == 50.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");

			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BONNET, POS[0], POS[1], POS[2], POS[3], POS[4]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, POS[0], POS[1], POS[2]))
			{
				new fmt_texta[505];

				if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
				{
					SCM(playerid, 0x66CC33FF, "Вы успешно повесили номерной знак на ваше транспортное средство");
					SCM(playerid, 0xFFA500FF, "Чтобы снять номера введите - /take_number");

					OnInventoryDisplayChange(playerid, false);

					SetOwnableCarData(index, OC_NUMBERTYPE, typenumber);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

					format(g_ownable_car[index][OC_NUMBER], 10, number);
					format(g_ownable_car[index][OC_REGION], 10, region);

					SetVehicleNumber(vehicleid, typenumber, number, region);
					PACKET_215(playerid, 32, vehicleid, typenumber, number, region);

					mysql_format(mysql, fmt_texta, sizeof fmt_texta, "UPDATE ownable_cars SET number='%s', region='%s', typenumber='%d' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_REGION), typenumber, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_texta, false);

					mysql_format(mysql, fmt_texta, sizeof fmt_texta, "DELETE FROM items WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
					mysql_query(mysql, fmt_texta, false);

					DeleteItems(i);
				}
				else return SCM(playerid, -1, "На этом т/с уже есть номера. Снять номер: /take_number");
			}
			else return SCM(playerid, -1, "Вы должны быть возле капота");
		}
		if(typeitem == 2)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Функция недоступна находясь в транспорте");
            
            if(status == 1)
			{
                if(event != 0) return SCM(playerid, COLOR_ORANGE, "Сначала поместите аксессуар в один из слотов для аксессуаров");

				if(type == 222 && GetPlayerItemsBag(playerid) >= 1) return SCM(playerid, COLOR_RED, "Сначала заберите все вещи с рюкзака."), OnInventoryDisplayChange(playerid, false);

				RemovePlayerAttachedObject(playerid, boneid);
				SCM(playerid, 0xFAAC58FF, "{FFA500}Вы успешно сняли данный аксессуар");

				new query[512];
				format(query, sizeof query, "UPDATE items SET status=0 WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_STATUS, 0);
			}
			if(status == 0)
			{
				if(type == 41)
                {
                    EditDecorationObject(playerid, aks_id, aks_id);
                }
                else if(type == 285)
                {
                    new vehicleid = GetNearestVehicleID(playerid, 6.0);
					new ownable = GetPlayerOwnableCarLast(playerid);

					if(vehicleid == INVALID_VEHICLE_ID) 
		                return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около личного транспорта");

                    if(ownable != vehicleid) 
				        return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около личного транспорта");
					
					new slot_indx = GetFreeCarAccessorySlot(vehicleid);
                    if(slot_indx == -1)
                        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "На этом ТС установлено максимальное кол-во украшений");

                    new acs_name[64];
                    GetAcsName(aks_id, acs_name, sizeof acs_name);
					SCMF(playerid, 0x2C83DBFF, " \"%s\" на свой ТС", acs_name);

					new Float:tx,Float:ty,Float:tz,Float:tr;
					GetVehiclePos(vehicleid,tx,ty,tz);
					GetVehicleZAngle(vehicleid, tr);

					SetPVarInt(playerid, "EditCarAcs", 1);
					SetPVarInt(playerid, "model_id", aks_id);
					SetPVarInt(playerid, "AcsindxCar", slot_indx);
					SetPVarInt(playerid, "AcsVehicleCar", vehicleid);

					SetPVarInt(playerid, "event", event);
					SetPVarInt(playerid, "slot", slot);

					car_accessories[vehicleid][slot_indx] = CreateDynamicObject(aks_id, tx, ty, tz, 0.00000, 0.00000, tr);
					EditDynamicObject(playerid, car_accessories[vehicleid][slot_indx]);
                }
                else
                {
                    if(event != 0) return SCM(playerid, COLOR_ORANGE, "Сначала поместите аксессуар в один из слотов для аксессуаров");

					SCM(playerid, 0xFAAC58FF, "{FFA500}Вы успешно надели данный аксессуар, чтобы исправить расположение используйте редактор");
					SCM(playerid, 0xFAAC58FF, "{FFA500}Напоминание, чтобы переместить камеру зажмите пробел");

					SetPVarInt(playerid, "EditObjectAcs", 0);
					SetPVarInt(playerid, "EditObjectAcsInv", 1);
					SetPVarInt(playerid, "EditObjectAcsIndex", type);

					if(type == 181 && boneid == 7) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.145, 0.041, 0.004999, -2 ,90.1 ,93.2);//очки 
					else if(type == 182 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.061999 ,-0.006999 ,0.004999 ,0 ,93.0999 ,-177.1);//бандана
					else if(type == 183 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.061999 ,-0.006999 ,0.004999 ,0 ,93.0999 ,-177.1);//маска
					else if(type == 184 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.202 ,0 ,-0.003 ,0 ,0 ,0);//берет
					else if(type == 185 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, 0.202 ,0 ,-0.003 ,0 ,0 ,0);//шляпа
					else if(type == 219 && boneid == 2) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.171 , 0.055999, 0.015, -158.3, 90, -23.9002);//Сумка
					else if(type == 220 && boneid == 8) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, -0.124999 ,0.086 ,0.001 ,-2.8 ,83.6001, 177.9);//Ремень
					else if(type == 221 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, -0.03, -0.018, -0.011, 66.6, 63.3999, 110.5);//украшение на руку
					else if(type == 222 && boneid == 0) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.143999, -0.097999, -0.016, 0, 81.1, -177.5);//Рюкзак
					else if(type == 246 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.313, 0.046, 0, 6.2, 85.9001, 170.9);//Украшение на шею
					else if(type == 263 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.316, 0.042, 0.009, 18.9, 87.7001, 74.1);//Плащ
					else if(type == 277 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.148999, 0.005, -0.019999, 0, 90.1999, 99.5999);//бронижелет
					else if(type == 289 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, 0.072 ,0.016999 ,0.092 ,0 ,0 ,0);//Посох
					else if(type == 287 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.164, -0.070999, -0.023, 1.6, 86.1, 86.9002);//Крылья
					else if(type == 324 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.129, -0.124999, 0, 0, 110.8, 95.8);//скейтборд
					else if(type == 275 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 3);//украшение на левое плечо
					else if(type == 291 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, 0.087999, -0.111999, -0.026, -0.000002, 132.2, -86.6);//аксессуар на спину	
					else SCM(playerid, 0xFFA500FF, "Данный аксессуар недоступен!");

					EditAttachedObject(playerid, boneid);

					SetPVarInt(playerid, "EditObjectAcsType", event);
					SetPVarInt(playerid, "EditObjectAcsSlots", slot);
                }
			}
		}
		if(typeitem == 3)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1699.7112,-2197.9077,1001.0000))
			{
				if(GetPlayerData(playerid, P_SKIN) == skin_id)
				{
					if(GetPVarInt(playerid, "skin_wosh")) 
						return SendClientMessage(playerid, 0xCECECEFF, "Ваша одежда уже в стирке");

					if(!VerifyIntString(QueryPlayerBalance(playerid), 12500000)) 
						return SendClientMessage(playerid, 0xCECECEFF, "У вас нет 12.500.000 рублей чтобы заплатить за услуги прачечной");
					
					IntfDialogCallRemote(playerid, DIALOG_WOSH_SKIN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Прачечная", "{FFFFFF}Хотите постирать надетую одежду за {FF7F00}12.500.000 {FFFFFF}рублей?\nПосле стирки её износ будет равен {FF7F00}3 ед.", "Далее", "Отмена");
				
					SetPVarInt(playerid, "skin_wosh", i);
				
				}
				else return SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть одеты в эту одежду");
			}
			else ActivateSkin(playerid, i);
		}
		OnInventoryDisplayChange(playerid, false);	

		return 1;
	}
	return 1;
}

stock ActivateSkin(playerid, slot)
{
	new skin_id = GetPlayerItem(slot, PI_SKIN_ID);

	if(skin_id == 15576){
		new Float:depth, Float:playerdepth;
		if(!CA_IsPlayerInWater(playerid, depth, playerdepth)) return SCM(playerid, -1, "{DC143C}Надевать костюм дайвера можно только рядом с водой.");
	}

    for(new j = 0; j < MAX_PLAYER_ITEMS; j++)
    {
        if(GetPlayerItem(j, PI_SKIN_ACTIVE) == 1)
        {
            SetPlayerItem(j, PI_SKIN_ACTIVE, 0);

            new query2[128];
            format(query2, sizeof(query2), "UPDATE items SET skin_active=0 WHERE id=%d", GetPlayerItem(j, PI_SQL_ID));
            mysql_tquery(mysql, query2);
        }
    }

    SetPlayerItem(slot, PI_SKIN_ACTIVE, 1);
    SetPlayerItem(slot, PI_SKIN_IZNOS, GetPlayerItem(slot, PI_SKIN_IZNOS) + 2);

    new query[128];
    format(query, sizeof(query), "UPDATE items SET skin_active=1, skin_iznos=%d WHERE id=%d", GetPlayerItem(slot, PI_SKIN_IZNOS), GetPlayerItem(slot, PI_SQL_ID));
    mysql_tquery(mysql, query);

    SetPlayerSkin(playerid, skin_id);
    SetPlayerData(playerid, P_SKIN, skin_id);
    UpdatePlayerDatabaseInt(playerid, "skin", skin_id);

    Action(playerid, "переодевается в другую одежду", _, false);

	return SUCCESS;
}

public:OnInventoryItemDrop(playerid, event, slot, count)
{	
	if(count < 1 || count > 500000) return 1;

	if(inventory_kd_drop[playerid] != 0) return 1;

	for(new i; i < MAX_ITEMS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
		{
			SCM(playerid, 0xa9acafFF, "* Рядом уже есть выброшенный предмет!");
			return 1;
		}
	}

	new query[345],
		number[32], 
		region[32];

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;

		format(number, sizeof number, "%s", GetPlayerItem(i, PI_NUMBER));
		format(region, sizeof region, "%s", GetPlayerItem(i, PI_REGION));

		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new item = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new status = GetPlayerItem(i, PI_STATUS);
		new indx = GetPlayerItem(i, PI_INDX);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new count_item = GetPlayerItem(i, PI_COUNT);
		new patron = GetPlayerItem(i, PI_PATRON);
		new weapon = GetPlayerItem(i, PI_WEAPON);

		if(item == 293 || item == 359) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);

		if(typeitem == 0 && count_item < count) return 1;
		else if(typeitem == 4 && patron < count) return 1;
		else if(typeitem != 4 && typeitem != 0 && 1 < count) return 1;

		if(typeitem == 0 && item == 0) if(count > 1000000) return SCM(playerid, COLOR_GREY, "*Максимально разрешено 1.000.000 руб. за раз");

		new idobject = -1;
		for(new idx; idx < MAX_ITEMS; idx++)
		{
			if(items_objs[idx] == -1)
			{
				idobject = idx;
				break;
			}
		}
		if(idobject == -1)
		{
			for(new idx; idx < MAX_ITEMS; idx++)
			{
				idobject = idx;
			}
		}
		new Float: x, Float: y, Float: z, Float: eagle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, eagle);
		itempos[idobject][0] = x;
		itempos[idobject][1] = y;
		itempos[idobject][2] = z;
		type_item[idobject] = typeitem;

		Action(playerid, "выбросил(а) предмет");

		inventory_kd_drop[playerid] = 5;

		ItemDropSphere[idobject] = CreateDynamicSphere(itempos[idobject][0], itempos[idobject][1], itempos[idobject][2],2.0,-1,-1);

		STRING_GLOBAL[0] = EOS;

		if(typeitem == 0)
		{
			new objectid = -1;
            for(new k = 0; k < sizeof(g_inventory_object); k++)
            {
                if(g_inventory_object[k][E_INVENTORY_ITEM] == item)
                {
                    objectid = g_inventory_object[k][E_INVENTORY_OBJECT];
                    break;
                }
            }
            if(objectid != -1)
            {
                items_objs[idobject] = CreateObject(objectid, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
            }
            else
            {
                items_objs[idobject] = CreateObject(2969, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
            }

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{1F75FE}%s", ItemsInfo[item]);
			number_labels[idobject] = CreateDynamic3DTextLabel(STRING_GLOBAL, COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);

			item1[idobject] = item;
			if(item == 279) item2[idobject] = count_item;
			else item2[idobject] = count;
		}
		if(typeitem == 1)
		{
			items_objs[idobject] = CreateObject(2969, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Автомобильный номер", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);

			item1[idobject] = typenumber;
			format(number_item[idobject], 10, number);
			format(region_item[idobject], 5, region);
		}
		if(typeitem == 2)
		{
			if(status == 1) return SCM(playerid, COLOR_RED, "Сначала снимите данный аксессуар."), OnInventoryDisplayChange(playerid, false);

			items_objs[idobject] = CreateObject(aks_id, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{1F75FE}%s", ItemsInfo[typeacs]);
			number_labels[idobject] = CreateDynamic3DTextLabel(STRING_GLOBAL, COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);

			item1[idobject] = aks_id;
			item2[idobject] = indx;
			item3[idobject] = typeacs;
		}
		if(typeitem == 3)
		{
			if(skin_id == GetPlayerData(playerid, P_SKIN))
			{
				SetPlayerSkin(playerid, 252);
				SetPlayerData(playerid, P_SKIN, 252);
				UpdatePlayerDatabaseInt(playerid, "skin", 252);
			}
			items_objs[idobject] = CreateObject(16506, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Одежда", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = skin_id;
		}
		if(typeitem == 4)
		{   
			new object;
			if(weapon == 1) object = 331;
			else if(weapon == 5) object = 336;
			else object = 2969;
            
			items_objs[idobject] = CreateObject(object, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			number_labels[idobject] = CreateDynamic3DTextLabel("{1F75FE}Оружие", COLOR_GOLD, itempos[idobject][0], itempos[idobject][1], itempos[idobject][2]-0.97, 5.0);
			item1[idobject] = weapon;
			item2[idobject] = count;
		}
		if(typeitem == 4)
		{
			if(count == patron)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				DeleteItems(i);
			}
			else if(count < patron)
			{
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d", count_item - count, GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_PATRON, patron - count);
			}

			ResetWeapons(playerid);
		}
		else if(typeitem != 0)
		{
			mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);

			DeleteItems(i);
		}
		else if(typeitem == 0 && item != 0)
		{
			if(count == count_item)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				DeleteItems(i);

				AddWeaponInventory(playerid, item);

				AddItemsLog(playerid, item, 0, -count, "Выбросил предмет [Инвентарь]");
			}
			else if(count < count_item)
			{
				if(item == 279)
			    {
				    mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
				    mysql_query(mysql, query, false);

				    DeleteItems(i);

				    AddItemsLog(playerid, item, 0, -count, "Выбросил предмет [Инвентарь]");
			    }
				else
				{
                    format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d", count_item - count, GetPlayerItem(i, PI_SQL_ID));
				    mysql_query(mysql, query, false);

				    SetPlayerItem(i, PI_COUNT, count_item - count);

				    AddItemsLog(playerid, item, 0, -count, "Выбросил предмет [Инвентарь]");
				}
			}
		}
		else if(typeitem == 0 && item == 0) ModifyCashBalance(playerid, -count, "Выбросил деньги");

		LoadInventory(playerid);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		return 1;
	}
	return 1;
}
stock OnPlayerTakeIteam(playerid)
{
	for(new i; i < MAX_ITEMS; i++)
	{
	    if(items_objs[i] != -1)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2]))
			{
				if(type_item[i] == 0 && item1[i] != 0) DLGF(playerid, DIALOG_TAKE_ITEM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}%s{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", ItemsInfo[item1[i]], item2[i]);

				if(type_item[i] == 0 && item1[i] == 0) DLGF(playerid, DIALOG_TAKE_MONEY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Деньги{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", item2[i]);

				if(type_item[i] == 1) IntfDialogCallRemote(playerid, DIALOG_TAKE_ITEM_NUMBER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Автомобильный номер{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена");

				if(type_item[i] == 2) DLGF(playerid, DIALOG_TAKE_ITEM_ACS, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}%s{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена", ItemsInfo[item3[i]]);

				if(type_item[i] == 3) IntfDialogCallRemote(playerid, DIALOG_TAKE_ITEM_SKIN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Одежда{FFFFFF}' в количестве {"#cGold"}1 ?", "Да", "Отмена");
			
				if(type_item[i] == 4) DLGF(playerid, DIALOG_TAKE_ITEM_GUN, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подобрать предмет", "{FFFFFF} Вы хотите подобрать предмет '{"#cGold"}Оружие{FFFFFF}' в количестве {"#cGold"}%d ?", "Да", "Отмена", item2[i]);
			}
		}
	}
	return 1;
}

public:OnInventoryItemSell(playerid, type, slot)
{
	new kiosk_id = GetNearestKiosk(playerid, 7.0);

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != type) continue;

		new typeitemmm = GetPlayerItem(i, PI_TYPE_ITEM);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);
		new indx = GetPlayerItem(i, PI_INDX);
		new status = GetPlayerItem(i, PI_STATUS);

		if(item_id == 293 || item_id == 359) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);

		SetPVarInt(playerid, "SellItemSlot", slot);
		SetPVarInt(playerid, "SellItemType", type);

		SetPVarInt(playerid, "SellItem", item_id);
		SetPVarInt(playerid, "SellItemIndx", indx);

		if(kiosk_id != -1)
		{
			//if(typeitemmm == 0 && indx != 0) return SCM(playerid, COLOR_GREY, "Данный предмет невозможно продать.");

			OnInventoryDisplayChange(playerid, false);
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 0) if(GetImprovementsStall(playerid) >= 10) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (10/10)");
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 1) if(GetImprovementsStall(playerid) >= 20) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (20/20)");
			if(GetKioskData(kiosk_id, K_IMPROVEMENTS) == 2) if(GetImprovementsStall(playerid) >= 30) return SCM(playerid, 0xADCEEAFF, "Места в этом киоске полностью заняты. (30/30)");

			if(typeitemmm == 2)
			{
				if(status == 1) return SCM(playerid, COLOR_RED, "Сначала снимите данный аксессуар"), OnInventoryDisplayChange(playerid, false);
				DLGF(playerid, DIALOG_SELL_ACS_KIOSK, DIALOG_STYLE_INPUT, "Продажа аксессуара", "{FFFFFF}Вы пытаетесь продать {006400}'Аксессуар'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));
			}
			if(typeitemmm == 0 && item_id != 0)
				DLGF(playerid, DIALOG_SELL_ITEM_KIOSK, DIALOG_STYLE_INPUT, "Продажа предмета", "{FFFFFF}Вы пытаетесь продать {006400}'Предмет'{FFFFFF}.\nУ вас есть: {006400}%d {FFFFFF}шт.\nСколько вы хотите выставить на продажу?", "Далее", "Назад", GetIteamIndx(playerid, item_id, indx));

			if(typeitemmm == 1)
				DLGF(playerid, DIALOG_SELL_NUMBER_KIOSK, DIALOG_STYLE_INPUT, "Продажа автомобильного номера", "{FFFFFF}Вы пытаетесь продать {006400}'Автомобильный номер'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));
			
			if(typeitemmm == 3)
				DLGF(playerid, DIALOG_SELL_SKIN_KIOSK, DIALOG_STYLE_INPUT, "Продажа одежды", "{FFFFFF}Вы пытаетесь продать {006400}'Одежда'{FFFFFF}.\n{FFFFFF}Введите цену за {006400}1 {FFFFFF}шт.\nЦена не должна быть меньше {006400}%d {FFFFFF}руб.", "Далее", "Назад", GetKioskData(kiosk_id, K_MIN_PRICE));
		
			if(typeitemmm == 4) return SCM(playerid, COLOR_GREY, "Нельзя выставить оружие на продажу.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2349.9390,-2138.3171,22.5854))
		{
			if(typeitemmm == 0 && indx != 0) return SCM(playerid, COLOR_GREY, "Данный предмет невозможно продать.");

            player_slot[playerid] = slot;
            player_type[playerid] = type;

            new fmt[148]; 
		    format(fmt, sizeof fmt, "{FFFFFF}Вы действительно хотите продать предмет '%s' за {FF8800}%d руб.", ItemsInfo[item_id][i_item_name], ItemsInfo[item_id][i_item_price]);
		    IntfDialogCallRemote(playerid, DIALOG_SELL_KVARIAT, DIALOG_STYLE_MSGBOX,"Магазин антиквариата", fmt,"Да", "Нет");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 3771.1826,3877.6079,7.9300))
		{
			if(count > 5000)
				return SCM(playerid, COLOR_GREY, "Макимум за раз можно продать 5000 ед.");
			if(item_id == 337)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "65000", count));

				new achiv[32];
				format(achiv, sizeof achiv, "%d", SetIntegerMultiply(playerid, "65000", count));

				GiveIteam(playerid, 337, 0, count, indx);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");

				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"%s\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", Itemindx[indx], count, formatStr(fmt_text));

				if(GetPlayerLevel(playerid) > 4)
                {
                    AddPlayerData(playerid, P_ACHIV_41, +, strval(achiv));
                    UpdatePlayerDatabaseInt(playerid, "achiv_41", GetPlayerData(playerid, P_ACHIV_41));
        
		            if(GetPlayerData(playerid, P_ACHIV_41) >= 100000000 && GetPlayerData(playerid, P_ACHIV_41_COMPLETED) == 0)
		            {
			            GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
                        SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Золотая жатва\"");
			            SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			            SetPlayerData(playerid, P_ACHIV_41_COMPLETED, 1);
                        UpdatePlayerDatabaseInt(playerid, "achiv_41_completed", 1);

					    CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[41, 2, \"Вы получили достижение!\"]");
		            }
				}
			}
			else if(item_id == 171)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "65000", count));

				new achiv[32];
				format(achiv, sizeof achiv, "%d", SetIntegerMultiply(playerid, "65000", count));

				GiveIteam(playerid, 171, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");

				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Помидоры\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			    
				if(GetPlayerLevel(playerid) > 4)
                {
                    AddPlayerData(playerid, P_ACHIV_41, +, strval(achiv));
                    UpdatePlayerDatabaseInt(playerid, "achiv_41", GetPlayerData(playerid, P_ACHIV_41));
        
		            if(GetPlayerData(playerid, P_ACHIV_41) >= 100000000 && GetPlayerData(playerid, P_ACHIV_41_COMPLETED) == 0)
		            {
			            GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
                        SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Золотая жатва\"");
			            SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			            SetPlayerData(playerid, P_ACHIV_41_COMPLETED, 1);
                        UpdatePlayerDatabaseInt(playerid, "achiv_41_completed", 1);

					    CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[41, 2, \"Вы получили достижение!\"]");
		            }
				}
			}
			else if(item_id == 170)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "65000", count));

				new achiv[32];
				format(achiv, sizeof achiv, "%d", SetIntegerMultiply(playerid, "65000", count));

				GiveIteam(playerid, 170, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");

				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Огурцы\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			    
				if(GetPlayerLevel(playerid) > 4)
                {
                    AddPlayerData(playerid, P_ACHIV_41, +, strval(achiv));
                    UpdatePlayerDatabaseInt(playerid, "achiv_41", GetPlayerData(playerid, P_ACHIV_41));
        
		            if(GetPlayerData(playerid, P_ACHIV_41) >= 100000000 && GetPlayerData(playerid, P_ACHIV_41_COMPLETED) == 0)
		            {
			            GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
                        SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Золотая жатва\"");
			            SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			            SetPlayerData(playerid, P_ACHIV_41_COMPLETED, 1);
                        UpdatePlayerDatabaseInt(playerid, "achiv_41_completed", 1);

					    CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[41, 2, \"Вы получили достижение!\"]");
		            }
				}
			}
			else if(item_id == 295)
			{
				GiveIteam(playerid, 295, 0, count, indx);

				if(indx == 0)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "35000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");

					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Плохая)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
				else if(indx == 1)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "67000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");

					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Нормальная)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
				else if(indx == 2)
				{
					new fmt_text[32];
					format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "95000", count));
					GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа шкуры");

					SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Шкура оленя (Превосходная)\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2188.8979,1370.9492,11.4361))
		{
			if(count > 5000)
				return SCM(playerid, COLOR_GREY, "Макимум за раз можно продать 5000 ед.");
			
			if(item_id == 169)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "95000", count));

				GiveIteam(playerid, 169, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа урожая");

				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Марихуанна\" {FAAC58}в количестве {FFFFFF}%d {FAAC58}шт за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 161.7724,406.4196,11.0679))
		{
			if(item_id == 124)
			{
				new fmt_text[32];
				format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "50000", count));

				GiveIteam(playerid, 124, 0, count, 0);
				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа металлолома");

				SCMF(playerid, COLOR_ORANGE, "Вы продали {FFFFFF}\"Металлолом\" {FAAC58}весом {FFFFFF}%d {FAAC58}кг за {FFFFFF}%s {FAAC58}руб", count, formatStr(fmt_text));
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2242.0110,224.8079,24.7780))
		{
			if(count > 5000)
				return SCM(playerid, COLOR_GREY, "Макимум за раз можно продать 5000 ед.");

			if(item_id == 133)
			{
				GiveIteam(playerid, 133, 0, count, indx);

				new fmt_text[32];
				
				if(indx == 0) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "9500", count));
				
				else if(indx == 1) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "11000", count));
				
				else if(indx == 2) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "12365", count));
				
				else if(indx == 3) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "10000", count));
				
				else if(indx == 4) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "17392", count));
				
				else if(indx == 5) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "17981", count));
				
				else if(indx == 6) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "15213", count));
				
				else if(indx == 7) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "16783", count));
				
				else if(indx == 8) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "25000", count));
				
				else if(indx == 9) format(fmt_text, sizeof fmt_text, "%s", SetIntegerMultiply(playerid, "75000", count));

				GivePlayerMoneyStr(playerid, fmt_text, "[ItemSell] Продажа рыбы");

				SCMF(playerid, 0xeb961fFF, "Вы продали \"%s\" весом {FFFFFF}%.2f {eb961f}за {FFFFFF}%s {eb961f}руб.", indxFishType[indx], floatmul(1, count), formatStr(fmt_text));
			}
		}
		else
		{
			SCM(playerid, 0xAFAFAFFF, "Вы не находитесь возле места для продажи.");
			SCM(playerid, 0xAFAFAFFF, "Могут подойти: киоски, антиквариатные лавки, прием металлолома/улова/урожая.");
			SCM(playerid, 0xAFAFAFFF, "Вы можете продать этот предмет на антиквариатной лавке около банка г. Южный.");
		}
		OnInventoryDisplayChange(playerid, false);
		return 1;
	}
	return 1;
}

public: OnInventoryItemTake(playerid, event, slot, count)
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;

		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;


		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new count_inv = GetPlayerItem(i, PI_COUNT);
		new item = GetPlayerItem(i, PI_ITEM);
		new id = GetPlayerItem(i, PI_SQL_ID);

		if(typeitem != 0 && typeitem != 4)
		{
			if(count > 1 || count < 1) return 1;

			new query[148];
			if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, sklad=-1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, shelf=-1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, car_id=0 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "UPDATE items SET slots=%d, type=1, owner_id=%d, plate=-1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), GetPlayerAccountID(playerid), id);
			else format(query, sizeof query, "UPDATE items SET slots=%d, type=1 WHERE id=%d LIMIT 1", GetInventorySlots(playerid), id); 
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_SLOTS, GetInventorySlots(playerid));
			SetPlayerItem(i, PI_TYPE, 1);
			SetPlayerItem(i, PI_OWNER_ID, GetPlayerAccountID(playerid));

		}
		else
		{
			if(typeitem == 0)
			{
				if(item == 279) return 1;

                if(count > 500000 || count < 1) return GameText(playerid, "В таком количестве нет данного предмета", 3000, 0);
        
				if(count > count_inv) return GameText(playerid, "У вас нет данного предмета в таком количестве", 3000, 0);
				
				if(count == count_inv) 
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
					else format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id); 
					mysql_query(mysql, query, false);

					DeleteItems(i);
				}
				else 
				{
					new query[148];
					if(inventory_sklad_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d AND sklad=%d LIMIT 1", count_inv - count, id);
					else if(inventory_shelf_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d AND shelf=%d LIMIT 1", count_inv - count, id);
					else if(inventory_trunk_id[playerid] != 0) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count_inv - count, id);
					else if(inventory_plate_id[playerid] != -1) format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d AND plate=%d LIMIT 1", count_inv - count, id);
					else format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count_inv - count, id); 
					mysql_query(mysql, query, false);

					SetPlayerItem(i, PI_COUNT, count_inv - count);
				}
				new win;

				new query[148];
				for(new idx; idx < MAX_PLAYER_ITEMS; idx++)
				{
					if(GetPlayerItem(idx, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(idx, PI_ITEM) != item) continue;
					if(GetPlayerItem(idx, PI_TYPE_ITEM) != typeitem) continue;
					if(idx == i) continue;

					SetPlayerItem(idx, PI_COUNT, GetPlayerItem(idx, PI_COUNT) + count);

					format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(idx, PI_COUNT), id); 
					mysql_query(mysql, query, false);
					win = 1;
					break;
				}
				if(win == 0) CreateIteam(playerid, item, count);
			}
		}
		//UpdateWeapons(playerid), LoadInventory(playerid);
		break;
	}
	LoadInventory(playerid);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('InventoryNew').setItems([%s])", load_inventory[playerid]);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}

stock GiveWeapon(playerid, weapon_id, patron, status = 1)
{
	UpdateWeapons(playerid);
	
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
		if(GetPlayerItem(i, PI_WEAPON) != weapon_id) continue;
		
		new count = GetPlayerItem(i, PI_PATRON);
		new id = GetPlayerItem(i, PI_SQL_ID);

		if(status == 0)
		{
			if(count - patron != 0)
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", count - patron, id);
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_PATRON, count - patron);

				ResetWeapons(playerid);
				return 1;
			}
			else
			{
				new query[148];
				format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
				mysql_query(mysql, query, false);

				DeleteItems(i);

				ResetWeapons(playerid);
				return 1;
			}
		}
		else if(status == 1)
		{
			new query[264];
			format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", count + patron, id);
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_PATRON, count + patron);

			ResetWeapons(playerid);
			return 1;
		}
	}

	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

	CreateItemsGun(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), -1, -1, 0, 4, weapon_id, patron);

	ResetWeapons(playerid);
	return true;
}
stock ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
		
		new weapon = GetPlayerItem(i, PI_WEAPON);
		new patron = GetPlayerItem(i, PI_PATRON);

		GivePlayerWeapon(playerid, weapon, patron);
	}

	return true;
}

/*public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    new ammoID, currentAmmo, weaponAmmo, usedAmmo;
		
    if(weaponid == 22) ammoID = 362;
    else if(weaponid == 24) ammoID = 363;
    else if(weaponid == 25 || weaponid == 26 || weaponid == 27) ammoID = 365;
    else if(weaponid == 28 || weaponid == 29) ammoID = 366;
    else if(weaponid == 30) ammoID = 368;
    else if(weaponid == 31) ammoID = 367;
	else if(weaponid == 33 || weaponid == 34) ammoID = 364;

    if(ammoID > 0)
    {
        currentAmmo = GetIteam(playerid, ammoID);
        weaponAmmo = GetPlayerAmmo(playerid);

        usedAmmo = (currentAmmo - weaponAmmo);

        if(weaponAmmo == 1 && currentAmmo > 0)
        {
            usedAmmo += 1;
        }

        if(usedAmmo > 0)
        {
            GiveIteam(playerid, ammoID, 0, usedAmmo, 0);
        }
    }
    return 1;
}*/

stock AddWeaponInventory(playerid, item)
{
	if(item == 12 || item == 362)
	{
        if(GetIteam(playerid, 12) < 1 || GetIteam(playerid, 362) < 1)
        {
            SetPlayerAmmo(playerid, 22, 0);
        }
        else if(GetIteam(playerid, 12) > 0)
        {
            if(GetIteam(playerid, 362) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 362);
			GivePlayerWeapon(playerid, 22, ammoCount);
            SetPlayerAmmo(playerid, 22, ammoCount);
        }
	}
	if(item == 19 || item == 363)
	{
        if(GetIteam(playerid, 19) < 1 || GetIteam(playerid, 363) < 1)
        {
            SetPlayerAmmo(playerid, 24, 0);
        }
        else if(GetIteam(playerid, 19) > 0)
        {
            if(GetIteam(playerid, 363) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 363);
			GivePlayerWeapon(playerid, 24, ammoCount);
            SetPlayerAmmo(playerid, 24, ammoCount);
        }
	}
	if(item == 14 || item == 365)
	{
        if(GetIteam(playerid, 14) < 1 || GetIteam(playerid, 365) < 1)
        {
            SetPlayerAmmo(playerid, 25, 0);
        }
        else if(GetIteam(playerid, 14) > 0)
        {
            if(GetIteam(playerid, 365) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 365);
			GivePlayerWeapon(playerid, 25, ammoCount);
            SetPlayerAmmo(playerid, 25, ammoCount);
        }
	}
	if(item == 15 || item == 365)
	{
        if(GetIteam(playerid, 15) < 1 || GetIteam(playerid, 365) < 1)
        {
            SetPlayerAmmo(playerid, 26, 0);
        }
        else if(GetIteam(playerid, 15) > 0)
        {
            if(GetIteam(playerid, 365) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 365);
			GivePlayerWeapon(playerid, 26, ammoCount);
            SetPlayerAmmo(playerid, 26, ammoCount);
        }
	}
    if(item == 16 || item == 365)
	{
        if(GetIteam(playerid, 16) < 1 || GetIteam(playerid, 365) < 1)
        {
            SetPlayerAmmo(playerid, 27, 0);
        }
        else if(GetIteam(playerid, 16) > 0)
        {
            if(GetIteam(playerid, 365) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 365);
			GivePlayerWeapon(playerid, 27, ammoCount);
            SetPlayerAmmo(playerid, 27, ammoCount);
        }
	}
	if(item == 17 || item == 366)
	{
        if(GetIteam(playerid, 17) < 1 || GetIteam(playerid, 366) < 1)
        {
            SetPlayerAmmo(playerid, 28, 0);
        }
        else if(GetIteam(playerid, 17) > 0)
        {
            if(GetIteam(playerid, 366) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 366);
			GivePlayerWeapon(playerid, 28, ammoCount);
            SetPlayerAmmo(playerid, 28, ammoCount);
        }
	}
	if(item == 18 || item == 366)
	{
        if(GetIteam(playerid, 18) < 1 || GetIteam(playerid, 366) < 1)
        {
            SetPlayerAmmo(playerid, 29, 0);
        }
        else if(GetIteam(playerid, 18) > 0)
        {
            if(GetIteam(playerid, 366) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 366);
			GivePlayerWeapon(playerid, 29, ammoCount);
            SetPlayerAmmo(playerid, 29, ammoCount);
        }
	}
	if(item == 21 || item == 368)
	{
        if(GetIteam(playerid, 21) < 1 || GetIteam(playerid, 368) < 1)
        {
            SetPlayerAmmo(playerid, 30, 0);
        }
        else if(GetIteam(playerid, 21) > 0)
        {
            if(GetIteam(playerid, 368) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 368);
			GivePlayerWeapon(playerid, 30, ammoCount);
            SetPlayerAmmo(playerid, 30, ammoCount);
        }
	}
	if(item == 20 || item == 367)
	{
        if(GetIteam(playerid, 20) < 1 || GetIteam(playerid, 367) < 1)
        {
            SetPlayerAmmo(playerid, 31, 0);
        }
        else if(GetIteam(playerid, 20) > 0)
        {
            if(GetIteam(playerid, 367) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 367);
            GivePlayerWeapon(playerid, 31, ammoCount);
			SetPlayerAmmo(playerid, 31, ammoCount);
        }
	}
	if(item == 42 || item == 364)
	{
        if(GetIteam(playerid, 42) < 1 || GetIteam(playerid, 364) < 1)
        {
            SetPlayerAmmo(playerid, 33, 0);
        }
        else if(GetIteam(playerid, 42) > 0)
        {
            if(GetIteam(playerid, 364) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 364);
            GivePlayerWeapon(playerid, 33, ammoCount);
			SetPlayerAmmo(playerid, 33, ammoCount);
        }
	}
	if(item == 22 || item == 364)
	{
        if(GetIteam(playerid, 22) < 1 || GetIteam(playerid, 364) < 1)
        {
            SetPlayerAmmo(playerid, 34, 0);
        }
        else if(GetIteam(playerid, 22) > 0)
        {
            if(GetIteam(playerid, 364) < 1) return 1;
		    new ammoCount = GetIteam(playerid, 364);
            GivePlayerWeapon(playerid, 34, ammoCount);
			SetPlayerAmmo(playerid, 34, ammoCount);
        }
	}
    return 1;
}

stock UpdateWeapons(playerid)
{
	new save_id[13];

	new status;

	for(new idx; idx < 13; idx++)
	{
		new weapon, patron;
		GetPlayerWeaponData(playerid, idx, weapon, patron);

		if(weapon != 0 && patron != 0)
		{
			for(new i; i < MAX_PLAYER_ITEMS; i++)
			{
				if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
				if(GetPlayerItem(i, PI_TYPE) != 1) continue;
				if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;
				if(GetPlayerItem(i, PI_WEAPON) != weapon) continue;

				SetPlayerItem(i, PI_PATRON, patron);

				new query[124];
				format(query, sizeof query, "UPDATE items SET patron=%d WHERE id=%d LIMIT 1", patron, GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				save_id[idx] = i;
			}
		}
	}
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 4) continue;

		status = 0;

		for(new idx; idx < 13; idx++)
		{
			if(save_id[idx] == i) status = 1;
		}
		if(status == 0)
		{
			new query[148];
			format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);

            new item;
			AddWeaponInventory(playerid, item);

			DeleteItems(i);
		}
	}

	return true;
}

stock GetInventorySlots(playerid)
{
	new slot_id = -1;

	for(new i = 1; i < 20; i++)
	{
		if(SelectInventorySlots(playerid, i) != 0) continue;
		slot_id = i;
		return slot_id;
	}
	return slot_id;
}
stock SelectInventorySlots(playerid, slot_id)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot_id) continue;

		count = -1;
		return count;
	}
	return count;
}

stock GetPlayerItemsBag(playerid)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 2) continue;

		count = 1;
		return count;
	}
	return count;
}

stock GetWorkLoadItems(playerid, status)
{
	new weight;
	if(status == 0) // инвентарь
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
			if(GetPlayerItem(i, PI_TYPE) != 1) continue;

			weight++;
		}
	}
	if(status == 1) // рюкзак
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
			if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
			if(GetPlayerItem(i, PI_TYPE) != 2) continue;

			weight++;
		}
	}
	return weight;
}

stock AddItemsLog(playerid, item_id, typeitem, count, text[])
{
	new fmt_text[94];
	if(typeitem == 0) format(fmt_text, sizeof fmt_text, "%s [№%d] (кол-во: %s | остаток: %s)", ItemsInfo[item_id], item_id, formatInt(count), formatInt(GetIteam(playerid, item_id)));
	InsertMysqlItemsLog(playerid, fmt_text, text);
	return true;
}

stock InsertMysqlItemsLog(playerid, items_text[], text[])
{
	new query[348];
	mysql_format(mysql, query, sizeof query, "INSERT INTO items_log (owner_id, items_text, text, time) VALUES (%d, '%s', '%s', NOW())", GetPlayerAccountID(playerid), items_text, text);
	mysql_tquery(mysql, query, "", "");
	return true;
}

new skateboard[MAX_PLAYERS];

stock AY_OnPlayerEdit(playerid, event, slot)
{
	new Float:foffset_x, Float:foffset_y, Float:foffset_z, Float:frot_x, Float:frot_y, Float:frot_z, Float:fscale_x, Float:fscale_y, Float:fscale_z;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SLOTS) != slot) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;

		new type = GetPlayerItem(i, PI_TYPEACS);
		new status = GetPlayerItem(i, PI_STATUS);
		new boneid = GetPlayerItem(i, PI_INDX);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);

		foffset_x = GetPlayerItem(i, PI_FOFFSET_X);
		foffset_y = GetPlayerItem(i, PI_FOFFSET_Y);
		foffset_z = GetPlayerItem(i, PI_FOFFSET_Z);
		frot_x = GetPlayerItem(i, PI_FROT_X);
		frot_y = GetPlayerItem(i, PI_FROT_Y);
		frot_z = GetPlayerItem(i, PI_FROT_Z);
		fscale_x = GetPlayerItem(i, PI_FSCALE_X);
		fscale_y = GetPlayerItem(i, PI_FSCALE_Y);
		fscale_z = GetPlayerItem(i, PI_FSCALE_Z);

        if(event != 0) return SCM(playerid, -1, "{CECECE}Настроить аксессуар можно только через хранилище аксессуаров");

	    if(status == 1)
		{
			if(type != 285)
			{
				SetPVarInt(playerid, "EditObjectAcs", 0);
				SetPVarInt(playerid, "EditObjectAcsInv", 1);
				SetPVarInt(playerid, "EditObjectAcsIndex", type);

				if(type == 181 && boneid == 7) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//очки 
				else if(type == 182 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//бандана
				else if(type == 183 && boneid == 1) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//маска
				else if(type == 184 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//берет
				else if(type == 185 && boneid == 3) SetPlayerAttachedObject(playerid, boneid, aks_id, 2, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//шляпа
				else if(type == 219 && boneid == 2) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Сумка
				else if(type == 220 && boneid == 8) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Ремень
				else if(type == 221 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//украшение на руку
				else if(type == 222 && boneid == 0) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Рюкзак
				else if(type == 246 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Украшение на шею
				else if(type == 263 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Плащ
				else if(type == 277 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//бронижелет
				else if(type == 289 && boneid == 4) SetPlayerAttachedObject(playerid, boneid, aks_id, 6, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Посох
				else if(type == 287 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//Крылья
				else if(type == 324 && boneid == 6) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//скейтборд
				else if(type == 275 && boneid == 5) SetPlayerAttachedObject(playerid, boneid, aks_id, 3, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//украшение на левое плечо
				else if(type == 291 && boneid == 9) SetPlayerAttachedObject(playerid, boneid, aks_id, 1, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);//аксессуар на спину	
				else SCM(playerid, 0xFFA500FF, "Данный аксессуар недоступен!");

				EditAttachedObject(playerid, boneid);

				SetPVarInt(playerid, "EditObjectAcsType", event);
				SetPVarInt(playerid, "EditObjectAcsSlots", slot);
			}
		}
		else SendClientMessage(playerid, 0x999999FF, "{CECECE}Этот аксессуар не надет, либо у Вас его нет");
	}
	return 1;
}
stock I_OnPlayerFetchSkateboard(playerid, event)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != event) continue;
		if(GetPlayerItem(i, PI_TYPEACS) != 324) continue;

		new status = GetPlayerItem(i, PI_STATUS);
		new boneid = GetPlayerItem(i, PI_INDX);

		if(status == 0) return GameText(playerid, "Аксессуар должен быть одет на вас", 3000, 0);

		if(status == 1)
		{
			new Float: x,
			Float: y,
			Float: z,
			Float: a;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);

			skateboard[playerid] = CreateVehicle(15644, x, y, z, a, 0, 0, -1, 0, VEHICLE_ACTION_TYPE_SKATEBOARD, 0);
			PutPlayerInVehicle(playerid, skateboard[playerid], 0);

			SetPlayerItem(i, PI_STATUS, 2);
			RemovePlayerAttachedObject(playerid, boneid);
		}
		else if(status == 2)
		{
			SetPlayerItem(i, PI_STATUS, 1);
			if(skateboard[playerid] != INVALID_VEHICLE_ID)
			{
				DestroyVehicle(skateboard[playerid]);
				skateboard[playerid] = INVALID_VEHICLE_ID;
			}
			callcmd::return_acsses(playerid);
		}
		return true;
	}
	return true;
}

stock CreateItemsAcs(owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;

	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, aks_id, typeacs, status, indx, shelf, sklad, car_id, typeitem
	);

	result = mysql_query(mysql, query);

	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_AKS_ID, 		aks_id);
	SetPlayerItem(i, PI_TYPEACS, 		typeacs);
	SetPlayerItem(i, PI_STATUS, 		status);
	SetPlayerItem(i, PI_INDX, 			indx);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);

	return true;
}
stock CreateItemsItem(owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;

	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, item, count, indx, shelf, sklad, car_id, typeitem
	);

	result = mysql_query(mysql, query);

	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_ITEM, 			item);
	SetPlayerItem(i, PI_COUNT, 			count);
	SetPlayerItem(i, PI_INDX, 			indx);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);

	return true;
}
stock CreateItemsCarNumber(owner_id, return_items, type, slots, number[], region[], typenumber, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;

	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, number, region, typenumber, shelf, sklad, car_id, type_item) VALUES (%d, %d, %d, %d, '%s', '%s', %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, number, region, typenumber, shelf, sklad, car_id, typeitem
	);

	result = mysql_query(mysql, query);

	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);

	format(g_player_item[i][PI_NUMBER], 32, "%s", number);
	format(g_player_item[i][PI_REGION], 32, "%s", region);

	SetPlayerItem(i, PI_TYPENUMBER, 	typenumber);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);

	return true;
}
stock CreateItemsSkin(owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, typeitem)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;

	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, type_item, skin_active) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, 0)",
		owner_id, return_items, type, slots, skin_id, skin_iznos, shelf, sklad, car_id, typeitem
	);

	result = mysql_query(mysql, query);

	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_SKIN_ID, 		skin_id);
	SetPlayerItem(i, PI_SKIN_IZNOS, 	skin_iznos);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	SetPlayerItem(i, PI_SKIN_ACTIVE, 	0);

	return true;
}

stock CreateItemsGun(owner_id, return_items, type, slots, shelf, sklad, car_id, typeitem, weapon, patron)
{
	new query[360],
		i = GetFreeItemsID(),
	 	Cache: result;

	format
	(
		query, sizeof query, 
		"INSERT INTO items (owner_id, return_items, type, slots, shelf, sklad, car_id, type_item, weapon, patron) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
		owner_id, return_items, type, slots, shelf, sklad, car_id, typeitem, weapon, patron
	);

	result = mysql_query(mysql, query);

	SetPlayerItem(i, PI_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	SetPlayerItem(i, PI_OWNER_ID, 		owner_id);
	SetPlayerItem(i, PI_RETURN_ITEMS, 	return_items);
	SetPlayerItem(i, PI_TYPE, 			type);
	SetPlayerItem(i, PI_SLOTS, 			slots);
	SetPlayerItem(i, PI_SHELF, 			shelf);
	SetPlayerItem(i, PI_SKLAD, 			sklad);
	SetPlayerItem(i, PI_CAR_ID, 		car_id);
	SetPlayerItem(i, PI_TYPE_ITEM, 		typeitem);
	SetPlayerItem(i, PI_WEAPON, 		weapon);
	SetPlayerItem(i, PI_PATRON, 		patron);

	return true;
}

stock DestroyItemsMysql(items_id)
{
	new query[148];
	format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1",GetPlayerItem(items_id, PI_SQL_ID));
	mysql_query(mysql, query, false);

	DeleteItems(items_id);

	return true;
}
#define MAX_COUNT_TRADE 12

enum E_PLAYER_TRADE_STRUCT
{
	PT_ITEM_ID[MAX_COUNT_TRADE],
	PT_STATUS[MAX_COUNT_TRADE],
	PT_COUNT[MAX_COUNT_TRADE],
}
new g_player_trade[MAX_PLAYERS][E_PLAYER_TRADE_STRUCT];


new g_player_trade_offer_id[MAX_PLAYERS];
new g_player_trade_status[MAX_PLAYERS];
new g_player_trade_owner[MAX_PLAYERS];
new g_player_trade_price[MAX_PLAYERS];

stock DestroyitemsTrade(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) 
			continue;

		if(GetPlayerItem(i, PI_TYPE) != 1) 
			continue;

		SetPlayerItem(i, PI_TRADE_TYPE, 0);
		SetPlayerItem(i, PI_TRADE_COUNT, 0);
		SetPlayerItem(i, PI_TRADE_SLOT, -1);
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		g_player_trade[playerid][PT_ITEM_ID][idx] = 0;
		g_player_trade[playerid][PT_STATUS][idx] = 0;
		g_player_trade[playerid][PT_COUNT][idx] = 0;
	}

	return true;
}

stock Trade_StartTradeItem(playerid)
{
	new to_player = g_player_trade_offer_id[playerid];

	if(g_player_trade_price[playerid] > 0)
	{
		ModifyCashBalance(to_player, g_player_trade_price[playerid], "Получил доплату с обмена предметами");
		ModifyCashBalance(playerid, -g_player_trade_price[playerid], "Оплатил доплату с обмена предметами");
	}

	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[playerid][PT_STATUS][idx] == 0) continue;

		new i = g_player_trade[playerid][PT_ITEM_ID][idx];

		if(GetPlayerItem(i, PI_TYPE_ITEM) == 0)
		{
			if(g_player_trade[playerid][PT_COUNT][idx] == GetPlayerItem(i, PI_COUNT))
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET slots=%d, owner_id=%d WHERE id=%d LIMIT 1", GetInventorySlots(to_player), GetPlayerAccountID(to_player), GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_SLOTS, 		GetInventorySlots(to_player));
				SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(to_player));
			}
			else if(g_player_trade[playerid][PT_COUNT][idx] != GetPlayerItem(i, PI_COUNT))
			{
				new query[148];
				format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", GetPlayerItem(i, PI_COUNT) - g_player_trade[playerid][PT_COUNT][idx], GetPlayerItem(i, PI_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerItem(i, PI_COUNT, 		GetPlayerItem(i, PI_COUNT) - g_player_trade[playerid][PT_COUNT][idx]);

				GiveIteam(to_player, GetPlayerItem(i, PI_ITEM), 1, g_player_trade[playerid][PT_COUNT][idx], GetPlayerItem(i, PI_INDX), "[Trade] Предмет полученый с обмена");
			}
		}
		if(GetPlayerItem(i, PI_TYPE_ITEM) == 1 || GetPlayerItem(i, PI_TYPE_ITEM) == 2 || GetPlayerItem(i, PI_TYPE_ITEM) == 3)
		{
			new query[148];
			format(query, sizeof query, "UPDATE items SET slots=%d, owner_id=%d WHERE id=%d LIMIT 1", GetInventorySlots(to_player), GetPlayerAccountID(to_player), GetPlayerItem(i, PI_SQL_ID));
			mysql_query(mysql, query, false);

			SetPlayerItem(i, PI_SLOTS, 		GetInventorySlots(to_player));
			SetPlayerItem(i, PI_OWNER_ID, 	GetPlayerAccountID(to_player));
		}
	}
	GameText(playerid, "Обмен успешно завершен", 3000, 0);

	CEF_HIDE(playerid, "TradeItems");

	g_player_trade_status[playerid] = 0;
	g_player_trade_owner[playerid] = 0;
	g_player_trade_price[playerid] = 0;
	g_player_trade_offer_id[playerid] = 0;

	status_authorization[playerid] = 1;

	DestroyitemsTrade(playerid);

	return true;
}

public: OnTradeItemsStart(playerid, event)
{
	new to_player = g_player_trade_offer_id[playerid];

	if(g_player_trade_owner[playerid] != 1)
		return GameText(playerid, "Совершить обмен может~n~только тот кто предложил", 3000, 0);

	if(g_player_trade_status[playerid] != 2 || g_player_trade_status[to_player] != 2)
		return GameText(playerid, "Кто то из вас~n~не готов к обмену", 3000, 0);

	if(event < 0)
		return GameText(playerid, "Введите корректную сумму", 3000, 0);

	if(!VerifyIntString(QueryPlayerBalance(to_player), g_player_trade_price[to_player]))
		return GameText(playerid, "У одной из сторон недостаточно~n~денег для доплаты / сделки", 3000, 0);

	if(!VerifyIntString(QueryPlayerBalance(playerid), event))
		return GameText(playerid, "У одной из сторон недостаточно~n~денег для доплаты / сделки", 3000, 0);

	Trade_StartTradeItem(playerid);
	Trade_StartTradeItem(to_player);

	return true;
}

public: OnTradeItemsSetReady(playerid, status, price) // приготовится к обмену
{
	g_player_trade_status[playerid] = status + 1;

	g_player_trade_price[playerid] = price;

	new fmt_text[148];
	format(fmt_text, sizeof fmt_text, "interface('TradeItems').setTargetPlayer('[\"%d\", %d]')", g_player_trade_price[playerid], g_player_trade_status[playerid] - 1);
	CEF_CREATE(g_player_trade_offer_id[playerid], 1, 2, fmt_text);

	return true;
}

public: OnTradeItemsMove(playerid, removed_id, removed_slot, id, slot, count)
{
	new to_player = g_player_trade_offer_id[playerid];

	if(removed_id == 0)
	{
		for(new i; i < MAX_PLAYER_ITEMS; i++)
		{
			if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) 
				continue;

			if(GetPlayerItem(i, PI_TYPE) != 1) 
				continue;

			if(GetPlayerItem(i, PI_SLOTS) != removed_slot) 
				continue;

			new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
			new count_1 = GetPlayerItem(i, PI_COUNT) - GetPlayerItem(i, PI_TRADE_COUNT);
			new item_id = GetPlayerItem(i, PI_ITEM);

			if(count < 1 || count > 1) return LoadTradeItems(playerid, 1);

			if(item_id == 293 || item_id == 359) return GameText(playerid, "Вы не сможете это сделать: данный предмет является временным", 3000, 0);

			if(typeitem == 0 && item_id == 0)
				return GameText(playerid, "Нельзя выставить~n~этот предмет", 3000, 0), LoadTradeItems(playerid, 1);

			if(typeitem == 4)
				return GameText(playerid, "Нельзя выставить~n~этот предмет", 3000, 0), LoadTradeItems(playerid, 1);

			if(count > count_1 && typeitem == 0 && item_id != 0) 
				return GameText(playerid, "В таком количестве~n~нет данного предмета", 3000, 0), LoadTradeItems(playerid, 1);

			if(GetInventorySlots(to_player) == -1) 
				return GameText(playerid, "У игрока недостаточно~n~места в инвентаре", 3000, 0), LoadTradeItems(playerid, 1);

			if(typeitem == 0)
			{
				if(count_1 != count) 
				{
					if(GetPlayerItem(i, PI_TRADE_SLOT) == -1)
						SetPlayerItem(i, PI_TRADE_SLOT, slot);

					SetPlayerItem(i, PI_TRADE_TYPE, 0);
					g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] = g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] + count;
				}
				else 
				{
					if(GetPlayerItem(i, PI_TRADE_SLOT) == -1)
						SetPlayerItem(i, PI_TRADE_SLOT, slot);

					SetPlayerItem(i, PI_TRADE_TYPE, 1);
					g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] = g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)] + count;
				}
				SetPlayerItem(i, PI_TRADE_COUNT, g_player_trade[playerid][PT_COUNT][GetPlayerItem(i, PI_TRADE_SLOT)]);

				g_player_trade[playerid][PT_ITEM_ID][GetPlayerItem(i, PI_TRADE_SLOT)] = i;
				g_player_trade[playerid][PT_STATUS][GetPlayerItem(i, PI_TRADE_SLOT)] = 1;
			}
			else 
			{
				if(typeitem == 3) 
				{
					if(GetPlayerItem(i, PI_SKIN_ID) == GetPlayerData(playerid, P_SKIN))
					{
						SetPlayerSkin(playerid, 252);
						SetPlayerData(playerid, P_SKIN, 252);
						UpdatePlayerDatabaseInt(playerid, "skin", 252);
					}
				}

				SetPlayerItem(i, PI_TRADE_TYPE, 1);

				g_player_trade[playerid][PT_ITEM_ID][slot] = i;
				g_player_trade[playerid][PT_STATUS][slot] = 1;
			}
			break;
		}
	}
	else if(removed_id == 1)
	{
		if(g_player_trade[playerid][PT_STATUS][removed_slot] == 0) 
			return true;

		new item_id = g_player_trade[playerid][PT_ITEM_ID][removed_slot];

		new typeitem = GetPlayerItem(item_id, PI_TYPE_ITEM);

		new count_1 = GetPlayerItem(item_id, PI_TRADE_COUNT);

		if(count > count_1 && typeitem == 0) 
			return GameText(playerid, "В таком количестве~n~нет данного предмета", 3000, 0), LoadTradeItems(playerid, 1);

		if(typeitem == 0)
		{
			if(count == count_1)
			{
				SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
				g_player_trade[playerid][PT_STATUS][removed_slot] = 0;
				g_player_trade[playerid][PT_COUNT][removed_slot] = 0;
				SetPlayerItem(item_id, PI_TRADE_SLOT, -1);
			}
			else
			{
				g_player_trade[playerid][PT_COUNT][removed_slot] = g_player_trade[playerid][PT_COUNT][removed_slot] - count;
				SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
			}
			SetPlayerItem(item_id, PI_TRADE_COUNT, g_player_trade[playerid][PT_COUNT][removed_slot]);
		}
		else
		{
			SetPlayerItem(item_id, PI_TRADE_TYPE, 0);
			g_player_trade[playerid][PT_STATUS][removed_slot] = 0;
		}
	}

	LoadTradeItems(to_player, 1);
	LoadTradeItems(playerid, 1);
	//LoadTradeItems(playerid, 1);
	return true;
}

public: OnTradeInterfaceClose(playerid)
{	
	print("OnTradeInterfaceClose(playerid)");
	return true;
}

public: OnTradeItemsCancel(playerid) //прекратить обмен
{
	if(g_player_trade_status[playerid] == 0)
		return true;

	GameText(playerid, "Обмен был прерван~n~одним из участников", 3000, 2);
	GameText(g_player_trade_offer_id[playerid], "Обмен был прерван~n~одним из участников", 3000, 2);

	CEF_HIDE(playerid, "TradeItems");
	CEF_HIDE(g_player_trade_offer_id[playerid], "TradeItems");

	g_player_trade_status[playerid] = 0;
	g_player_trade_owner[playerid] = 0;
	g_player_trade_price[playerid] = 0;

	g_player_trade_status[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_owner[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_price[g_player_trade_offer_id[playerid]] = 0;
	g_player_trade_offer_id[g_player_trade_offer_id[playerid]] = 0;

	g_player_trade_offer_id[playerid] = 0;
	status_authorization[playerid] = 1;
	status_authorization[g_player_trade_offer_id[playerid]] = 1;

	DestroyitemsTrade(playerid);
	DestroyitemsTrade(g_player_trade_offer_id[playerid]);
	return true;
}

stock ShowPlayerTrade(playerid, to_player)
{
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return 1;

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(to_player, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(to_player, 10.0, X, Y, Z)) 
		return SCM(playerid, 0xFF5533FF, "Вы должны находиться ближе друг к другу!");

	if(g_player_trade_status[playerid] > 0) 
		return SCM(playerid, 0xFF5533FF, "Вы уже обмениваетесь с кем-то.");

	if(g_player_trade_status[to_player] > 0) 
		return SCM(playerid, 0xFF5533FF, "Игрок уже обменивается с кем-то.");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_TRADE);

  	return 1;
}

stock LoadTradeItems(playerid, status = 0)
{
	new to_player = g_player_trade_offer_id[playerid];

	GetPlayerMoneyInventory(playerid);

	new query[148];

	load_inventory[playerid] = "";

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) 
			if(GetPlayerItem(i, PI_TRADE_TYPE) != 0) continue;

		if(GetPlayerItem(i, PI_TYPE_ITEM) == 0) 
			if(GetPlayerItem(i, PI_TRADE_COUNT) == GetPlayerItem(i, PI_COUNT)) continue;

		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = GetPlayerItem(i, PI_SLOTS);

		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[0,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 337) format(query, sizeof query, "[0,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 0) format(query, sizeof query, "[0,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, QueryPlayerBalance(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[0,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[0,%d,%d,%d,\"Превосходная\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[0,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[0,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[0,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
			else if(item_id == 280 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Пиво\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 2) format(query, sizeof query, "[0,%d,%d,%d,\"Вино\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 3) format(query, sizeof query, "[0,%d,%d,%d,\"Водка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 4) format(query, sizeof query, "[0,%d,%d,%d,\"Виски\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 5) format(query, sizeof query, "[0,%d,%d,%d,\"Коньяк\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 6) format(query, sizeof query, "[0,%d,%d,%d,\"Шампанское\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 7) format(query, sizeof query, "[0,%d,%d,%d,\"Чай\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 12) format(query, sizeof query, "[0,%d,%d,0,\"Glock 19\",%d,%d,0.7,1,0],", slots, item_id, slots, count);
			else if(item_id == 14) format(query, sizeof query, "[0,%d,%d,0,\"Remington\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 15) format(query, sizeof query, "[0,%d,%d,0,\"Обрез\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 16) format(query, sizeof query, "[0,%d,%d,0,\"Сайга-12\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 17) format(query, sizeof query, "[0,%d,%d,0,\"ОЦ-14 Гроза\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 18) format(query, sizeof query, "[0,%d,%d,0,\"АКС-74У\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 19) format(query, sizeof query, "[0,%d,%d,0,\"Desert Eagle\",%d,%d,1.7,1,1],", slots, item_id, slots, count);
			else if(item_id == 20) format(query, sizeof query, "[0,%d,%d,0,\"HK416\",%d,%d,1.0,1,5],", slots, item_id, slots, count);
			else if(item_id == 21) format(query, sizeof query, "[0,%d,%d,0,\"АКМ\",%d,%d,1.0,1,6],", slots, item_id, slots, count);
			else if(item_id == 22) format(query, sizeof query, "[0,%d,%d,0,\"AWM\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 42) format(query, sizeof query, "[0,%d,%d,0,\"MSR\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 335 && indx == 0) format(query, sizeof query, "[0,%d,%d,%d,\"Компостное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 335 && indx == 1) format(query, sizeof query, "[0,%d,%d,%d,\"Торфяное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 279) format(query, sizeof query, "[0,%d,%d,%d,\"Общий\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[0,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count - GetPlayerItem(i, PI_TRADE_COUNT));
		}
		if(typeitem == 1) format(query, sizeof query, "[0,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[0,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[0,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);

		strcat(load_inventory[playerid], query);
	}

	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[playerid][PT_STATUS][idx] == 0) continue;

		new i = g_player_trade[playerid][PT_ITEM_ID][idx];

		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_TRADE_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = idx;

		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[1,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[1,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[1,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, QueryPlayerBalance(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[1,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[1,%d,%d,%d,\"Превосходная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[1,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[1,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[1,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Пиво\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 2) format(query, sizeof query, "[1,%d,%d,%d,\"Вино\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 3) format(query, sizeof query, "[1,%d,%d,%d,\"Водка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 4) format(query, sizeof query, "[1,%d,%d,%d,\"Виски\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 5) format(query, sizeof query, "[1,%d,%d,%d,\"Коньяк\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 6) format(query, sizeof query, "[1,%d,%d,%d,\"Шампанское\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 7) format(query, sizeof query, "[1,%d,%d,%d,\"Чай\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 12) format(query, sizeof query, "[1,%d,%d,0,\"Glock 19\",%d,%d,0.7,1,0],", slots, item_id, slots, count);
			else if(item_id == 14) format(query, sizeof query, "[1,%d,%d,0,\"Remington\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 15) format(query, sizeof query, "[1,%d,%d,0,\"Обрез\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 16) format(query, sizeof query, "[1,%d,%d,0,\"Сайга-12\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 17) format(query, sizeof query, "[1,%d,%d,0,\"ОЦ-14 Гроза\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 18) format(query, sizeof query, "[1,%d,%d,0,\"АКС-74У\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 19) format(query, sizeof query, "[1,%d,%d,0,\"Desert Eagle\",%d,%d,1.7,1,1],", slots, item_id, slots, count);
			else if(item_id == 20) format(query, sizeof query, "[1,%d,%d,0,\"HK416\",%d,%d,1.0,1,5],", slots, item_id, slots, count);
			else if(item_id == 21) format(query, sizeof query, "[1,%d,%d,0,\"АКМ\",%d,%d,1.0,1,6],", slots, item_id, slots, count);
			else if(item_id == 22) format(query, sizeof query, "[1,%d,%d,0,\"AWM\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 42) format(query, sizeof query, "[1,%d,%d,0,\"MSR\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 335 && indx == 0) format(query, sizeof query, "[1,%d,%d,%d,\"Компостное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 335 && indx == 1) format(query, sizeof query, "[1,%d,%d,%d,\"Торфяное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 279) format(query, sizeof query, "[1,%d,%d,%d,\"Общий\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[1,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count);

		}
		if(typeitem == 1) format(query, sizeof query, "[1,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[1,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[1,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);

		strcat(load_inventory[playerid], query);
	}
	for(new idx; idx < MAX_COUNT_TRADE; idx++)
	{
		if(g_player_trade[to_player][PT_STATUS][idx] == 0) continue;

		new i = g_player_trade[to_player][PT_ITEM_ID][idx];

		new indx = GetPlayerItem(i, PI_INDX);
		new count = GetPlayerItem(i, PI_TRADE_COUNT);
		new item_id = GetPlayerItem(i, PI_ITEM);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new skin_id = GetPlayerItem(i, PI_SKIN_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new typenumber = GetPlayerItem(i, PI_TYPENUMBER);
		new skin_iznos = GetPlayerItem(i, PI_SKIN_IZNOS);
		new slots = idx;

		if(typeitem == 0) 
		{
			if(item_id == 336) format(query, sizeof query, "[2,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 337) format(query, sizeof query, "[2,%d,%d,%d,\"%s\",%d,%d,1.0],", slots, item_id, indx, Itemindx[indx], slots, count);
			else if(item_id == 0) format(query, sizeof query, "[2,%d,%d,0,\"\",%d,\"%s\",1.0],", slots, item_id, slots, QueryPlayerBalance(playerid));
			else if(item_id == 295 && indx == 0) format(query, sizeof query, "[2,%d,%d,%d,\"Плохая\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Нормальная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 295 && indx == 2) format(query, sizeof query, "[2,%d,%d,%d,\"Превосходная\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 326 || item_id == 325 || item_id == 133) format(query, sizeof query, "[2,%d,%d,%d,\"\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 0) format(query, sizeof query, "[2,%d,%d,%d,\"Поплавочная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Улучшенная удочка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 132 && indx == 2) format(query, sizeof query, "[2,%d,%d,%d,\"Спиннинг\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Пиво\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 2) format(query, sizeof query, "[2,%d,%d,%d,\"Вино\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 3) format(query, sizeof query, "[2,%d,%d,%d,\"Водка\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 4) format(query, sizeof query, "[2,%d,%d,%d,\"Виски\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 5) format(query, sizeof query, "[2,%d,%d,%d,\"Коньяк\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 6) format(query, sizeof query, "[2,%d,%d,%d,\"Шампанское\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 280 && indx == 7) format(query, sizeof query, "[2,%d,%d,%d,\"Чай\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 12) format(query, sizeof query, "[2,%d,%d,0,\"Glock 19\",%d,%d,0.7,1,0],", slots, item_id, slots, count);
			else if(item_id == 14) format(query, sizeof query, "[2,%d,%d,0,\"Remington\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 15) format(query, sizeof query, "[2,%d,%d,0,\"Обрез\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 16) format(query, sizeof query, "[2,%d,%d,0,\"Сайга-12\",%d,%d,1.0,1,3],", slots, item_id, slots, count);
			else if(item_id == 17) format(query, sizeof query, "[2,%d,%d,0,\"ОЦ-14 Гроза\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 18) format(query, sizeof query, "[2,%d,%d,0,\"АКС-74У\",%d,%d,1.0,1,4],", slots, item_id, slots, count);
			else if(item_id == 19) format(query, sizeof query, "[2,%d,%d,0,\"Desert Eagle\",%d,%d,1.7,1,1],", slots, item_id, slots, count);
			else if(item_id == 20) format(query, sizeof query, "[2,%d,%d,0,\"HK416\",%d,%d,1.0,1,5],", slots, item_id, slots, count);
			else if(item_id == 21) format(query, sizeof query, "[2,%d,%d,0,\"АКМ\",%d,%d,1.0,1,6],", slots, item_id, slots, count);
			else if(item_id == 22) format(query, sizeof query, "[2,%d,%d,0,\"AWM\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 42) format(query, sizeof query, "[2,%d,%d,0,\"MSR\",%d,%d,1.0,1,2],", slots, item_id, slots, count);
			else if(item_id == 335 && indx == 0) format(query, sizeof query, "[2,%d,%d,%d,\"Компостное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 335 && indx == 1) format(query, sizeof query, "[2,%d,%d,%d,\"Торфяное\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else if(item_id == 279) format(query, sizeof query, "[2,%d,%d,%d,\"Общий\",%d,%d,1.0],", slots, item_id, indx, slots, count);
			else format(query, sizeof query, "[2,%d,%d,0,\"\",%d,%d,1.0],", slots, item_id, slots, count);
		}
		if(typeitem == 1) format(query, sizeof query, "[2,%d,99,%d,\"%s %s\",%d,1,1.0],", slots, typenumber, GetPlayerItem(i, PI_NUMBER), GetPlayerItem(i, PI_REGION), slots);
		if(typeitem == 2) format(query, sizeof query, "[2,%d,%d,%d,\"\",%d,1,1.0],", slots, typeacs, aks_id, slots);
		if(typeitem == 3) format(query, sizeof query, "[2,%d,100,%d,\"\",%d,1,1.0,%d],", slots, skin_id, slots, skin_iznos);

		strcat(load_inventory[playerid], query);
	}

	strdel(load_inventory[playerid], strlen(load_inventory[playerid]) - 1, strlen(load_inventory[playerid]));

	if(status == 1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TradeItems').setItems([%s])", load_inventory[playerid]);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
	return true;
}

public: DCrs_OnPlayerClose(playerid)
{
	SetCameraBehindPlayer(playerid);
}
public: DCrs_OnPlayerBuy(playerid)
{
	IntfDialogCallRemote(playerid, DIALOG_BUY_DONATE_PACK_1, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы дейстительно хотите приобрести R8 Titan?", "Да", "Нет");

	return 1;
}

public: DCrs_OnPlayerTestDrive(playerid)
{
	IntfDialogCallRemote(playerid, DIALOG_TEST_DRIVE, DIALOG_STYLE_MSGBOX, "Подтверждение", "Подтвердите оплату тест-драйва транспорта:\n\n{FFFFFF} Колекция: {ecf96a} Скоростной призрак\n{FFFFFF} Транспортное средство: {ecf96a} Koenigsegg Agera RS\n{FFFFFF} Цена: {ecf96a} бесплатно", "Подтвердить", "Отмена");

	return 1;
}

public: DonateCar(playerid)
{
	CEF_CREATE(playerid, 2, 4, "DonateItem", "[\"Скоростной призрак\",\"Лимитированная коллекция\",30000,1537368800,9999]");
	
	if(IsPlayerInRangeOfPoint(playerid,2.0, 1919.6163,-1978.6616,31.5505))
	{
		InterpolateCameraPos(playerid, 1923.569335, -1976.937622, 32.588264, 1917.930419, -1974.214111, 32.620456, 50000);
        InterpolateCameraLookAt(playerid, 1919.485229, -1979.773071, 32.058528, 1918.560668, -1979.153808, 32.170543, 50000);
	}

	if(IsPlayerInRangeOfPoint(playerid,2.0, 1867.2754,2803.1130,12.0000))
	{
		InterpolateCameraPos(playerid, 1871.270751, 2801.980468, 13.175240, 1866.878295, 2807.256347, 13.331630, 50000);
        InterpolateCameraLookAt(playerid, 1866.315307, 2801.635742, 12.605648, 1866.693237, 2802.328857, 12.503951, 50000);
	}

	if(IsPlayerInRangeOfPoint(playerid,2.0, -1938.1624,2909.2373,5.9990))
	{
		InterpolateCameraPos(playerid, -1940.589843, 2912.347412, 6.596246, -1940.433471, 2906.186279, 6.580454, 50000);
        InterpolateCameraLookAt(playerid, -1936.685668, 2909.273193, 6.041828, -1936.877075, 2909.653564, 6.006112, 50000);
	}	

	if(IsPlayerInRangeOfPoint(playerid,2.0, -406.0836,746.4778,12.2852))
	{
		InterpolateCameraPos(playerid, -403.884216, 743.631530, 12.707987, -404.794158, 749.722595, 12.650042, 50000);
        InterpolateCameraLookAt(playerid, -408.136322, 746.257812, 12.558269, -407.887207, 745.804809, 12.360100, 50000);
	}

	if(IsPlayerInRangeOfPoint(playerid,2.0, -1912.3154,1917.1980,175.2282))
	{
		InterpolateCameraPos(playerid, -1914.752929, 1915.017578, 175.853271, -1908.990844, 1916.377807, 175.822753, 50000);
        InterpolateCameraLookAt(playerid, -1912.726196, 1919.577880, 175.543319, -1913.007080, 1919.327636, 175.412796, 50000);
	}
}

stock CreateDonatecars()
{
	CreateVehicle(17401,1917.8964,-1981.1783,31.1688,326.0133,0,0,0, -1, VEHICLE_ACTION_TYPE_DONATE);
	CreateVehicle(17401,1864.4069,2801.3320,11.6216,307.2856,0,0,0, -1, VEHICLE_ACTION_TYPE_DONATE);
	CreateVehicle(17401,-409.1071,746.8870,11.9614,264.3993,0,0,0, -1, VEHICLE_ACTION_TYPE_DONATE);
	CreateVehicle(17401,-1935.4844,2908.9067,5.6208,86.1940,0,0,0, -1, VEHICLE_ACTION_TYPE_DONATE);
	CreateVehicle(17401,-1912.1038,1920.1863,174.8579,177.3650,0,0,0, -1, VEHICLE_ACTION_TYPE_DONATE);
}
#define GetVorotaData(%0,%1) 			g_vorota[%0][%1]
#define SetVorotaData(%0,%1,%2) 		g_vorota[%0][%1] = %2

#define MAX_VOROTA 600

//ворота
enum E_VOROTA_STRUCT
{
	V_SQL_ID,
	Float: V_POS_X,
	Float: V_POS_Y,
	Float: V_POS_Z,
	Float: V_POS_RZ,
	V_TYPE,
    V_TYPE_OPEN,
    V_TYPE_OBJECT,
};

new g_vorota[MAX_VOROTA][E_VOROTA_STRUCT];
new g_vorota_loaded;

new VorotaObject[MAX_VOROTA];
new VorotaStatus[MAX_VOROTA];

new array_vorota_data[MAX_VOROTA];

stock GetNearestVorota(playerid, event, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new kiosk_id = -1;
	new Float: my_dist;
	for(new idx; idx < g_vorota_loaded; idx ++)
	{
		if(GetVorotaData(idx, V_TYPE) == event){
			my_dist = GetPlayerDistanceFromPoint(playerid, GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z));
			if(my_dist < dist)
			{
				dist = my_dist,
				kiosk_id = idx;
			}
		}
	}
	return kiosk_id;
}

public: LoadVorota()
{
	new Cache: result, rows;
    result = mysql_query(mysql, "SELECT * FROM vorota", true);
	rows = cache_num_rows();
	if(rows > MAX_VOROTA)
	{
		print("[Vorota]: DB rows > MAX VOROTA");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetVorotaData(idx, V_SQL_ID, 	    cache_get_field_content_int(idx, "id"));
        SetVorotaData(idx, V_TYPE, 		    cache_get_field_content_int(idx, "type"));
		SetVorotaData(idx, V_POS_X,		    cache_get_field_content_float(idx, "x"));
		SetVorotaData(idx, V_POS_Y,		    cache_get_field_content_float(idx, "y"));
		SetVorotaData(idx, V_POS_Z,		    cache_get_field_content_float(idx, "z"));
		SetVorotaData(idx, V_POS_RZ,	    cache_get_field_content_float(idx, "rz"));
        SetVorotaData(idx, V_TYPE_OPEN,	    cache_get_field_content_int(idx, "type_open"));
        SetVorotaData(idx, V_TYPE_OBJECT,	cache_get_field_content_int(idx, "type_object"));

		VorotaStatus[idx] = 0;
        VorotaObject[idx] = CreateDynamicObject(GetVorotaData(idx, V_TYPE_OBJECT), GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z), 0.000000, 0.000000, GetVorotaData(idx, V_POS_RZ));
        array_vorota_data[idx] = CreateDynamicSphere(GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z), 5.5, -1, -1);
    }
	g_vorota_loaded = rows;
	cache_delete(result);
	printf("[Ворота]: Ворот загружено: %d", g_vorota_loaded);
}

public: OpenVorota(playerid)
{
    for(new idx; idx < g_vorota_loaded; idx ++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 6.5, GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z)))
        {
            if(GetVorotaData(idx, V_TYPE_OPEN) == 0 || GetVorotaData(idx, V_TYPE_OPEN) == 1) 
            {
                new houseid = GetNearestHouse(playerid, 46.0);
                if(houseid != -1)
                {
                    if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid) && GetPlayerFamilyHouse(playerid) != houseid) return 1;
                }
            }

            if(GetVorotaData(idx, V_TYPE_OPEN) == 0 || GetVorotaData(idx, V_TYPE_OPEN) == 2 || GetVorotaData(idx, V_TYPE_OPEN) == 3 || GetVorotaData(idx, V_TYPE_OPEN) == 4)
            {
                if(GetNearestVorota(playerid, 1, 6.5) > 0 && GetNearestVorota(playerid, 2, 6.5) > 0)
                {
                    if(VorotaStatus[idx] == 0)
                    {
                        if(GetVorotaData(idx, V_TYPE) == 1)MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)+90);
                        if(GetVorotaData(idx, V_TYPE) == 2)MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)+270);
                        VorotaStatus[idx] = 1;
                    }
                    else
                    {
                        MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z),0.3,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ));
                        VorotaStatus[idx] = 0;
                    }
                }
            }
            if(GetVorotaData(idx, V_TYPE_OPEN) == 1)
            {
                if(VorotaStatus[idx] == 0) MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X)+0.1, GetVorotaData(idx, V_POS_Y)+0.1, GetVorotaData(idx, V_POS_Z)-2.5,0.6,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)), VorotaStatus[idx] = 1;
                else MoveDynamicObject(VorotaObject[idx],GetVorotaData(idx, V_POS_X), GetVorotaData(idx, V_POS_Y), GetVorotaData(idx, V_POS_Z),0.6,0.0000,0.0000, GetVorotaData(idx, V_POS_RZ)), VorotaStatus[idx] = 0;
            }
        }
    }
    return 1;
}

/////////////////////
new vorota_status;
new vorota_mo;
new vorota_mo1;
new vorota_mo2;
new vorota_mo3;
new dver_mo;
new vorota_PRIDE;
new sarzamas1, sarzamas2, sarzamas3, sarzamas4, sarzamas5, sarzamas6;
new ssarzamas1, ssarzamas2, ssarzamas3, ssarzamas4, ssarzamas5, ssarzamas6;
new sssarzamas1, sssarzamas2, sssarzamas3, sssarzamas4, sssarzamas5, sssarzamas6;
new ssssarzamas1, ssssarzamas2, ssssarzamas3, ssssarzamas4, ssssarzamas5, ssssarzamas6;
new vorota_pps;
new dver_status;
new mansiondver1_status = 0;
new mansiondver2_status = 0;
new mansiondver3_status = 0;
new mansiondver4_status = 0;

new vorota_mvd[3];


public: LoadVorotaDef()
{
	dver_mo = CreateDynamicObject(18506, 1294.64, 3264.1, 11.6307, 0.0, 0.0, 0.0);
	vorota_mo = CreateDynamicObject(18470, 1286.40, 3279.37, 12.8, 0.199999, 0.0, 0.0);
    vorota_mo1 = CreateDynamicObject(18470, 1286.40, 3266.8, 12.8, 0.199999, 0.0, 180.0);
    vorota_mo2 = CreateDynamicObject(18470, 1049.48, 3279.25, 12.631, 0.199999, 0.0, 0.0);  
    vorota_mo3 = CreateDynamicObject(18470, 1049.48, 3266.70, 12.6309, 0.199999, 0.0, 180.0); 
    vorota_PRIDE = CreateDynamicObject(19313, 2622.3899, 1792.8700, -1.4200, 0.0000, 90.0000, 0.0000);
    vorota_pps = CreateDynamicObject(14769, 188.696,1405.03,11.2418, 0.00, 0.00, -10.1); //Ворота МВД
	sarzamas1 = CreateDynamicObject(14802, 737.234, 119.325,13.9418, 0.00, -81.5997, 38.9999); //Ворота МВД
	sarzamas2 = CreateDynamicObject(14802, 753.651, 96.4827, 13.9288, 0.00, -82.9999, 36); //Ворота МВД
	sarzamas3 = CreateDynamicObject(14802, 758.445, 135.084, 13.9418, 0.00, -84.9, -143.3); //Ворота МВД
	sarzamas4 = CreateDynamicObject(14802, 774.864, 112.231, 13.9418, 0.00, -84, -144.3); //Ворота МВД
	sarzamas5 = CreateDynamicObject(10594, 744.988, 93.2492, 13.9388, 0, -84, 35.8); //Ворота МВД
	sarzamas6 = CreateDynamicObject(10594, 767.101, 138.302, 13.9312, 0, -84, -144.3); //Ворота МВД
	ssarzamas1 = CreateDynamicObject(14802, -2609.4, -667.615, 29.9688, 0, -84.1, 0); //Ворота МВД
	ssarzamas2 = CreateDynamicObject(14802, -2609.39, -695.748, 29.9652, 0, -84.4, 0); //Ворота МВД
	ssarzamas3 = CreateDynamicObject(14802, -2586.64, -695.605, 29.9666, 0, -85.1, 179.8); //Ворота МВД
	ssarzamas4 = CreateDynamicObject(14802, -2586.65, -667.466, 29.9644, 0, -84.9, -180); //Ворота МВД
	ssarzamas5 = CreateDynamicObject(10594, -2618.31, -693.322, 29.9676, 0, -84, 0); //Ворота МВД
	ssarzamas6 = CreateDynamicObject(10594, -2577.72, -669.894, 29.9666, 0, -84, -179.9); //Ворота МВД
	sssarzamas1 = CreateDynamicObject(14802, 964.054, 2630.17, 12.2925, 0, -85.2, 120.4); //Ворота МВД
	sssarzamas2 = CreateDynamicObject(14802, 988.326, 2644.41, 12.29, 0, -85.3, 121.4); //Ворота МВД
	sssarzamas3 = CreateDynamicObject(14802, 977.417, 2662.74, 12.3003, 0, -85.1, -58.5); //Ворота МВД
	sssarzamas4 = CreateDynamicObject(14802, 953.144, 2648.51, 12.3003, 0, -85, -60); //Ворота МВД
	sssarzamas5 = CreateDynamicObject(10594, 950.738, 2657.42, 12.3, 0, -84, -59.6); //Ворота МВД
	sssarzamas6 = CreateDynamicObject(10594, 990.738, 2635.49, 12.3003, 0, -84, 120.4); //Ворота МВД
	ssssarzamas1 = CreateDynamicObject(14802, 2684.84, -1505.53, 24.1764, 0, -81.2, -49.5); //Ворота МВД
	ssssarzamas2 = CreateDynamicObject(14802, 2663.29, -1523.62, 24.1885, 0, -82.7, -50.2); //Ворота МВД
	ssssarzamas3 = CreateDynamicObject(14802, 2677.38, -1538.89, 24.1764, 0, -83.4, 129.1); //Ворота МВД
	ssssarzamas4 = CreateDynamicObject(14802, 2698.92, -1520.81, 24.1664, 0, -83.4, 131.5); //Ворота МВД
	ssssarzamas5 = CreateDynamicObject(10594, 2702.79, -1529.19, 24.1653, 0, -84, 130.1); //Ворота МВД
	ssssarzamas6 = CreateDynamicObject(10594, 2659.43, -1515.24, 24.1764, 0, -84, -49.9); //Ворота МВД
    vorota_mvd[0] = CreateDynamicObject(11099, 2486.02, 1381.42, 999.03,0,0,0);
    vorota_mvd[1] = CreateDynamicObject(11099, 2491.22, 1381.43, 999.031,0,0,0);
    vorota_mvd[2] = CreateDynamicObject(11099, 2496.44, 1381.39, 999.021,0,0,0);
}
public: OpenVorotaDef(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2487.1697,1381.8058,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[0],2484.69, 1381.41, 999.04,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[0],2486.02, 1381.42, 999.03,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2492.3794,1381.8080,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[1],2490.05, 1381.42, 999.031,0.4,0,0,0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[1],2491.22, 1381.43, 999.031,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2497.5918,1381.8079,1000.0214))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(vorota_mvd[2],2495.23, 1381.39, 999.031,0.4,0,0,0), vorota_status = 1;
        else return MoveDynamicObject(vorota_mvd[2],2496.44, 1381.39, 999.021,0.4,0,0,0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 6.5, 2659.43, -1515.24, 24.1764))// 2.0, 2659.43, -1515.24, 24.1764))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas6,2659.43, -1515.24, 24.1764,0.4,0, 0, -49.9), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas6,2659.43, -1515.25, 24.1765,0.4,0, -84, -49.91), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 737.6868,119.7215,13.6275))// 2.0, 737.6868,119.7215,13.6275))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas1,737.234,119.325,13.9418,0.4, 0.00, 0.00, 38.9999), vorota_status = 1;
        else return MoveDynamicObject(sarzamas1,737.2345,119.326,13.9419,0.4, 0.00, -81.5997, 38.9998), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 754.0997,96.8653,13.6488))// 2.0, 754.0997,96.8653,13.6488))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas2,753.651000, 96.482700, 13.928800,0.4,0.000000, 0.000000, 36.000000), vorota_status = 1;
        else return MoveDynamicObject(sarzamas2,753.651000, 96.482700, 13.928800,0.4,0.000000, -82.999900, 36.000000), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 758.0597,134.5079,13.6377))// 2.0, 758.0597,134.5079,13.6377))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas3,758.445,135.084,13.9418,0.4, 0.00, 0.00, -143.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas3,758.445,135.084,13.9418,0.4, 0.00, -84.9, -143.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 774.4136,111.7526,13.6488))// 2.0, 774.4136,111.7526,13.6488))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas4,774.864,112.231,13.9418,0.4, 0.00, 0.00, -144.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas4,774.864,112.231,13.9418,0.4, 0.00, -84, -144.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 744.988, 93.2492, 13.9388))// 2.0, 744.988, 93.2492, 13.9388))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sarzamas5,744.988, 93.2492, 13.9388,0.4, 0, 0.00, 35.8), vorota_status = 1;
        else return MoveDynamicObject(sarzamas5,744.988, 93.2492, 13.9388,0.4, 0, -84, 35.8), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 767.101, 138.302, 13.9312))// 2.0, 767.101, 138.302, 13.9312))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");	
        if(vorota_status == 0) return MoveDynamicObject(sarzamas6,767.101, 138.302, 13.9312,0.4, 0, 0, -144.3), vorota_status = 1;
        else return MoveDynamicObject(sarzamas6,767.101, 138.302, 13.9312,0.4, 0, -84, -144.3), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2608.7622,-667.2278,29.6697))// 2.0, -2608.7622,-667.2278,29.6697))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas1,-2609.39,-667.614,29.9666,0.05, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas1,-2609.4,-667.615,29.9688,0.05, 0, -84.4, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2608.7651,-695.3596,29.6651))// 2.0, -2608.7651,-695.3596,29.6651))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas2,-2609.39,-695.744,29.9666,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas2,-2609.39,-695.748,29.9652,0.4, 0, -84.4, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2586.6460,-695.2100,29.8966))// 2.0, -2586.6460,-695.2100,29.8966))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas3,-2586.64,-695.609,29.9666,0.4, 0, 0, 179.9), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas3,-2586.64,-695.605,29.9666,0.4, 0, -84.4, 179.8), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2587.2786,-667.8477,29.6792))// 2.0, -2587.2786,-667.8477,29.6792))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas4,-2586.65,-667.465,29.9589,0.4, -0.399999, 0, 180), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas4,-2586.65,-667.466,29.9644,0.4, 0, -84.9, -180), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2618.31, -693.322, 29.9676))// 2.0, -2618.31, -693.322, 29.9676))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas5,-2618.31, -693.322, 29.9676,0.4, 0, 0, 0), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas5,-2618.31, -693.322, 29.9676,0.4, 0, -84, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -2577.72, -669.894, 29.9666))// 2.0, -2577.72, -669.894, 29.9666))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssarzamas6,-2577.72, -669.894, 29.9666,0.4, 0, 0, -179.9), vorota_status = 1;
        else return MoveDynamicObject(ssarzamas6,-2577.72, -669.894, 29.9666,0.4, 0, -84, -179.9), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 963.4028,2630.5281,12.0000))// 2.0, 963.4028,2630.5281,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas1,964.058,2630.17,12.2903,0.4, 0, 0, 120.3), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas1,964.054,2630.17,12.2925,0.4, 0, -85.2, 120.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 987.6611,2644.7566,12.0000))// 2.0, 987.6611,2644.7566,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas2,988.326,2644.41,12.2902,0.4, -0.199999, 0, 121.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas2,988.326,2644.41,12.29,0.4, 0, -85.3, 121.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 977.1450,2662.4414,12.2303))// 2.0, 977.1450,2662.4414,12.2303))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas3,977.413,2662.75,12.3023,0.4, 0.299999, 0, -58.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas3,977.417,2662.74,12.3003,0.4, 0, -85.1, -58.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 953.7897,2648.1458,12.0000))// 2.0, 953.7897,2648.1458,12.0000))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas4,953.139,2648.51,12.3,0.4, 0, 0, -60), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas4,953.144,2648.51,12.3003,0.4, 0, -85, -60), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 950.738, 2657.42, 12.3))// 2.0, 950.738, 2657.42, 12.3))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas5,950.738, 2657.42, 12.3,0.4, 0, 0, -59.6), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas5,950.738, 2657.42, 12.3,0.4, 0, -84, -59.6), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 990.738, 2635.49, 12.3003))// 2.0, 990.738, 2635.49, 12.3003))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(sssarzamas6,990.738, 2635.49, 12.3003,0.4, 0, 0, 120.4), vorota_status = 1;
        else return MoveDynamicObject(sssarzamas6,990.738, 2635.49, 12.3003,0.4, 0, -84, 120.4), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2685.5598,-1505.7780,23.8835))// 2.0, 2685.5598,-1505.7780,23.8835))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas1,2684.85,-1505.53,24.1735,0.4, 0, 0, -49.5), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas1,2684.84,-1505.53,24.1764,0.4, 0, -81.2, -49.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2663.9968,-1523.8726,23.8387))// 2.0, 2663.9968,-1523.8726,23.8387))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas2,2663.3,-1523.62,24.1857,0.4, 0, 0, -50.2), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas2,2663.29,-1523.62,24.1885,0.4, 0, -82.7, -50.2), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2677.5801,-1538.5195,24.1064))// 2.0, 2677.5801,-1538.5195,24.1064))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas3,2677.38,-1538.9,24.1792,0.4, 0, 0, 129.1), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas3,2677.38,-1538.89,24.1764,0.4, 0, -83.4, 129.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2698.3972,-1521.3278,24.1064))// 2.0, 2698.3972,-1521.3278,24.1064))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas4,2698.92,-1520.8,24.1664,0.4,0, 0, 131.5), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas4,2698.92,-1520.81,24.1664,0.4,0, -83.4, 131.5), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2702.79, -1529.19, 24.1653))// 2.0, 2702.79, -1529.19, 24.1653))
    {
        if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, -1, "Вы не сотрудник МВД.");	
        if(vorota_status == 0) return MoveDynamicObject(ssssarzamas5,2702.79, -1529.19, 24.1653,0.4,0, 0, 130.1), vorota_status = 1;
        else return MoveDynamicObject(ssssarzamas5,2702.79, -1529.19, 24.1653,0.4,0, -84, 130.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 6.5, 1286.9939, 3273.2019, 11.3784)) 
	{
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");

        if(vorota_status == 0) 
		{
            MoveDynamicObject(vorota_mo, 1286.40, 3284.37, 12.8, 0.199999);
            MoveDynamicObject(vorota_mo1, 1286.40, 3260.8, 12.8, 0.199999);
            vorota_status = 1;
        } 
		else 
		{
           MoveDynamicObject(vorota_mo, 1286.40, 3279.37, 12.8, 0.199999);
           MoveDynamicObject(vorota_mo1, 1286.40, 3266.8, 12.8, 0.199999);
           vorota_status = 0;
		}
    }
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1295.0034,3263.6531,11.5107)) 
	{
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");

        if(dver_status == 0) 
		{
            MoveDynamicObject(dver_mo, 1294.62, 3264.09, 11.6286, 0.5);
            dver_status = 1;
        } 
		else 
		{
           MoveDynamicObject(dver_mo, 1294.64, 3264.1, 11.6307, 0.5);
           dver_status = 0;
		}
    }
	if(IsPlayerInRangeOfPoint(playerid, 6.5, 1047.8828, 3273.3257, 11.2602)) 
	{
        if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");

        if(vorota_status == 0) 
		{
            MoveDynamicObject(vorota_mo2, 1049.47, 3284.0, 12.631, 0.199999);
            MoveDynamicObject(vorota_mo3, 1049.47, 3261.39, 12.6309, 0.199999);
            vorota_status = 1; 
        } 
		else 
		{
            MoveDynamicObject(vorota_mo2, 1049.48, 3279.25, 12.631, 0.199999);
            MoveDynamicObject(vorota_mo3,  1049.48, 3266.70, 12.6309, 0.199999);
            vorota_status = 0; 
		}
    }
    if(IsPlayerInRangeOfPoint(playerid, 9.5, 188.7192,1404.6619,12.2037))// 9.5, 188.7192,1404.6619,12.2037))
    {
        if(GetPlayerTeamEx(playerid) != TEAM_MVD) return SendClientMessage(playerid, -1, "Вам не доступна данная функция");
        if(vorota_status == 0) return MoveDynamicObject(vorota_pps,179.155,1406.71,11.2418,0.4, 0.00, 0.00, -10.1), vorota_status = 1;
        else return MoveDynamicObject(vorota_pps,188.696,1405.03,11.2418,0.4, 0.00, 0.00, -10.1), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1633.4974,950.1698,112.0641) || IsPlayerInRangeOfPoint(playerid, 2.0, -1633.3749,950.4099,147.9468))// 2.0, -1633.3749,950.4099,147.9468))
    {
        if(vorota_status == 0) return MoveDynamicObject(vetrlift,-1633.41, 950.784, 146.767,0.7, 0.000000, 0.000000, 0), vorota_status = 1;
        else return MoveDynamicObject(vetrlift,-1633.41, 950.819, 110.884,0.7, 0.000000, 0.000000, 0), vorota_status = 0;
    }
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2622.3899, 1792.8700, -1.4200))// 5.0, 2622.3899, 1792.8700, -1.4200))
    {
        if(GetHouseData(GetNearestHouse(playerid, 45.0), H_OWNER_ID) != GetPlayerAccountID(playerid)) return SendClientMessage(playerid, -1, "Вы не владелец этого дома");
        if(vorota_status == 0) return MoveDynamicObject(vorota_PRIDE,2622.3899, 1792.8700, -5.4978,0.5, 0.0000, 90.0000, 0.0000), vorota_status = 1;
        else return MoveDynamicObject(vorota_PRIDE,2622.3899, 1792.8700, -1.4200,0.5, 0.0000, 90.0000, 0.0000), vorota_status = 0;
    }
    return 1;
}

new array_med_bed_data[sizeof g_med_bed_pos];
new array_business_interiors_data[sizeof g_business_interiors];

stock CreateAltHintBusiness()
{
    for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_TYPE) != 37) continue;
        g_azs_alt[i] = CreateDynamicSphere(GetBusinessData(i, B_POS_X), GetBusinessData(i, B_POS_Y), GetBusinessData(i, B_POS_Z), 2.0, -1, -1);
    }
}

stock CreateAltHint()
{
	for(new i; i < sizeof g_med_bed_pos; i++)
    {
		array_med_bed_data[i] = CreateDynamicSphere(g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 1.5, -1, -1);
	}
	for(new i; i < sizeof g_business_interiors; i ++)
	{
		array_business_interiors_data[i] = CreateDynamicSphere(GetBusinessInteriorInfo(i, BT_BUY_POS_X), GetBusinessInteriorInfo(i, BT_BUY_POS_Y), GetBusinessInteriorInfo(i, BT_BUY_POS_Z), 2.0, -1, -1);
	}
	for(new i; i < sizeof g_zavod_finish; i++)
	{
		g_zavod_finish[i] = CreateDynamicSphere(-1602.3871,-630.1390,1016.4700, 2.0, -1, -1);
	}
    for(new i; i < sizeof g_obmenfishki_pos; i++)
	{
       g_obmenfishki_alt[i] = CreateDynamicSphere(g_obmenfishki_pos[i][0], g_obmenfishki_pos[i][1], g_obmenfishki_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_rullet_pos; i++)
	{
       g_rullet_alt[i] = CreateDynamicSphere(g_rullet_pos[i][0], g_rullet_pos[i][1], g_rullet_pos[i][2], 2.0, -1, -1);
    }
    /*for(new i; i < sizeof g_obmenik_alt; i++)
	{
       g_obmenik_alt[i] = CreateDynamicSphere(-3626.5842,3229.5154,317.6395, 2.0, -1, -1);
    }*/
    for(new i; i < sizeof g_blackmarket_alt; i++)
	{
       g_blackmarket_alt[i] = CreateDynamicSphere(-1759.6050,2894.0237,5.9712, 6.0, -1, -1);
    }
    for(new i; i < sizeof g_sto_pos; i++)
	{
       g_sto_alt[i] = CreateDynamicSphere(g_sto_pos[i][0], g_sto_pos[i][1], g_sto_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_bank_pos; i++)
	{
       g_bank_alt[i] = CreateDynamicSphere(g_bank_pos[i][0], g_bank_pos[i][1], g_bank_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_craft_pos; i++)
	{
       g_craft_alt[i] = CreateDynamicSphere(g_craft_pos[i][0], g_craft_pos[i][1], g_craft_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_kolesofortynu_alt; i++)
	{
       g_kolesofortynu_alt[i] = CreateDynamicSphere(214.88200,-276.60931,1012.79022, 6.0, -1, -1);
    }
    for(new i; i < sizeof g_electroazs_pos; i++)
	{
       g_electroazs_alt[i] = CreateDynamicSphere(g_electroazs_pos[i][0], g_electroazs_pos[i][1], g_electroazs_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_woshcar_pos; i++)
	{
       g_woshcar_alt[i] = CreateDynamicSphere(g_woshcar_pos[i][0], g_woshcar_pos[i][1], g_woshcar_pos[i][2], 4.5, -1, -1);
    }
    for(new i; i < sizeof g_worota_org_pos; i++)
	{
       g_worota_org_alt[i] = CreateDynamicSphere(g_worota_org_pos[i][0], g_worota_org_pos[i][1], g_worota_org_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_liftvetr_pos; i++)
	{
       g_liftvetr_alt[i] = CreateDynamicSphere(g_liftvetr_pos[i][0], g_liftvetr_pos[i][1], g_liftvetr_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_diagnostik_alt; i++)
	{
       g_diagnostik_alt[i] = CreateDynamicSphere(-1633.3900,947.4431,147.8163, 1.0, -1, -1);
    }
    for(new i; i < sizeof g_givenomercar_alt; i++)
	{
       g_givenomercar_alt[i] = CreateDynamicSphere(2492.6079, 1394.9854, 1000.0214, 2.0, -1, -1);
    }
    /*for(new i; i < sizeof g_donatecar_pos; i++)
	{
       g_donatecar_alt[i] = CreateDynamicSphere(g_donatecar_pos[i][0], g_donatecar_pos[i][1], g_donatecar_pos[i][2], 2.0, -1, -1);
    }*/
    for(new i; i < sizeof g_zavod_pos; i++)
	{
		g_zavod_alt[i] = CreateDynamicSphere(g_zavod_pos[i][0], g_zavod_pos[i][1], g_zavod_pos[i][2], 2.0, -1, -1);
	}
    for(new i; i < sizeof g_buylic_alt; i++)
	{
       g_buylic_alt[i] = CreateDynamicSphere(-2508.9167,1478.8176,1080.4944, 3.5, -1, -1);
    }
    for(new i; i < sizeof g_dice_pos; i++)
	{
       g_dice_alt[i] = CreateDynamicSphere(g_dice_pos[i][0], g_dice_pos[i][1], g_dice_pos[i][2], 2.5, -1, -1);
    }
    for(new i; i < sizeof g_exithome_pos; i++)
	{
       g_exithome_alt[i] = CreateDynamicSphere(g_exithome_pos[i][0], g_exithome_pos[i][1], g_exithome_pos[i][2], 1.1, -1, -1);
    }
    for(new i; i < sizeof g_createfamily_alt; i++)
	{
       g_createfamily_alt[i] = CreateDynamicSphere(-2503.8015,1479.2994,1080.4944, 3.0, -1, -1);
    }
    for(new i; i < sizeof g_creategang_pos; i++)
	{
       g_creategang_alt[i] = CreateDynamicSphere(g_creategang_pos[i][0], g_creategang_pos[i][1], g_creategang_pos[i][2], 2.0, -1, -1);
    }
    for(new i; i < sizeof g_skyp_alt; i++)
	{
       g_skyp_alt[i] = CreateDynamicSphere(2188.8523,1370.9519,11.4361, 2.0, -1, -1);
    }
    for(new i; i < sizeof g_dedmoroz_alt; i++)
	{
       g_dedmoroz_alt[i] = CreateDynamicSphere(-1162.7946,650.5292,1001.0000, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_lesopilka1_alt; i++)
	{
       g_lesopilka1_alt[i] = CreateDynamicSphere(477.8538,-2438.9785,34.7629, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_lesopilka2_alt; i++)
	{
       g_lesopilka2_alt[i] = CreateDynamicSphere(470.9197,-2371.9192,34.7626, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_lesopilka3_alt; i++)
	{
       g_lesopilka3_alt[i] = CreateDynamicSphere(488.3204,-2383.3347,34.0563, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_lesopilka4_alt; i++)
	{
       g_lesopilka4_alt[i] = CreateDynamicSphere(505.3300,-2376.7664,34.7780, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_sto_enter_alt; i++)
	{
       g_sto_enter_alt[i] = CreateDynamicSphere(-2513.4690,-605.9792,1001.0547, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_mafia_dver_alt; i++)
	{
       g_mafia_dver_alt[i] = CreateDynamicSphere(-2660.35, 2189.84, 1001.67, 2.0, -1, -1);
    }
	for(new i; i < sizeof g_plate_pos; i++)
	{
       g_plate_alt[i] = CreateDynamicSphere(g_plate_pos[i][0], g_plate_pos[i][1], g_plate_pos[i][2], 2.0, -1, -1);
    }
}

public: CarsKey_OnPlayerRequst(playerid, bardiq)
{
	new vehicleid = INVALID_VEHICLE_ID;
	new Float:Distance_ = 250.0;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
 		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
  			new iddx = GetVehicleData(i, V_ACTION_ID);
     		if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
       		{
				new Float:Distance = D_PlayerVehicle(playerid, i);
				if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
				}
			}
		}
	}
	if(Distance_ == 250.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");

	switch(bardiq)
	{
		case 2: // вкл/выкл двигатель
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				if(GetVehicleData(vehicleid, V_FUEL) <= 0.0) return GameText(playerid, "~r~нет бензина", 4000, 2);

				new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
				SetVehicleParam(vehicleid, V_ENGINE, engine);

				if(GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_OFF)
				{
					CEF_CREATE(playerid, 1, 2, "playSound('sounds/car/start_engine_car.wav', 0, 1)");
					GameText(playerid, "~g~ДВИГАТЕЛЬ ЗАВОДИТСЯ...", 1000, 3);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0) SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 3: // безключевой доступ
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new query[512];
                new idx = GetVehicleData(vehicleid, V_ACTION_ID);
				if(GetOwnableCarData(idx, OC_NO_KEY_DOSTUP) == 0)
				{
					GameText(playerid, "Вы ~g~включили ~n~~w~безключевой доступ~w~ на это авто", 4000, 1);

					SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 1);

					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET no_key_dostup=1 WHERE id=%d", GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
				else
				{
					GameText(playerid, "Вы ~r~отключили ~n~~g~безключевой доступ~w~ на это авто", 4000, 1);

					SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 0);

					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET no_key_dostup=0 WHERE id=%d", GetOwnableCarData(idx, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 4: // багажник
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_BOOT);
				if(status == VEHICLE_PARAM_OFF)
				{
					Action(playerid, "открыл багажник личного т/с", _, true);
					GameText(playerid, "~w~Багажник ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BOOT, VEHICLE_PARAM_ON);
				}
				else if(status == VEHICLE_PARAM_ON)
				{
					Action(playerid, "закрыл багажник личного т/с", _, true);
					GameText(playerid, "~w~Багажник ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BOOT, VEHICLE_PARAM_OFF);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 5: // закрыть/открыть
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_LOCK);
				if(status)
				{
					Action(playerid, "открыл личный транспорт", _, true);
					GameText(playerid, "~w~Транспорт ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
					CEF_CREATE(playerid, 1, 2, "window.playSound('car/key_unlock.wav')");
				}
				else
				{
					Action(playerid, "закрыл личный транспорт", _, true);
					GameText(playerid, "~w~Транспорт ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
					CEF_CREATE(playerid, 1, 2, "window.playSound('car/key_lock.wav')");
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}

		}
		case 6: // капот
		{
			if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
			{
				new status = GetVehicleParam(vehicleid, V_BONNET);
				if(status == VEHICLE_PARAM_OFF)
				{
					Action(playerid, "открыл капот личного т/с", _, true);
					GameText(playerid, "~w~Капот ~g~открыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BONNET, VEHICLE_PARAM_ON);
				}
				else if(status == VEHICLE_PARAM_ON)
				{
					Action(playerid, "закрыл капот личного т/с", _, true);
					GameText(playerid, "~w~Капот ~r~закрыт", 4000, 1);
					SetVehicleParam(vehicleid, V_BONNET, VEHICLE_PARAM_OFF);
				}
			}
			else
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
				else
					SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 7: GameText(playerid, "хз", 3000, 1);
	}
	return 1;
}

stock OpenCarsKey(playerid)
{
	new vehicleid = INVALID_VEHICLE_ID;

	new Float:Distance_ = 250.0;

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
 		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
  			new iddx = GetVehicleData(i, V_ACTION_ID);
     		if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
       		{
				new Float:Distance = D_PlayerVehicle(playerid, i);
				if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
				}
			}
		}
	}

	if(Distance_ == 250.0) return 1;

	if(vehicleid != INVALID_VEHICLE_ID && GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetOwnableCarData(index, OC_NO_KEY_DOSTUP) > 0)
		{
			if(GetPVarInt(playerid, "keys") == 0)
			{
				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[[false, \"%s\", \"%s\", %d]]]", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME_MARK), GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME), index);
				CEF_CREATE(playerid, 2, 4, "CarKey", STRING_GLOBAL), SetPVarInt(playerid, "keys", 1);
			}
			else CEF_HIDE(playerid, "CarKey"), DeletePVar(playerid, "keys");
		}
		else GameText(playerid, "На данный транспорт~n~~r~не установлена сигнализация", 3000, 2);
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0) SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");	
		else SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}
	return 1;
}
new gPlayerTuningMenu[MAX_PLAYERS];
new gPlayerTuningMenu_2[MAX_PLAYERS];

#define MAX_TUNING 180
#define MAX_TUNING_MODELS 	25

enum E_VEHICLE_STRUCTS {
	VEH_COMPONENT[MAX_TUNING_MODELS]
}

new g_vehicle[MAX_VEHICLES][E_VEHICLE_STRUCTS];

enum E_VEHICLE_TUNING_STRUCT {
	VT_MODEL[MAX_TUNING_MODELS]
}

enum E_TUNING_MODELS
{
    E_MODEL_ID,
	E_ITEM_ID[MAX_TUNING_MODELS],
	E_ITEM_TYPE[MAX_TUNING_MODELS]
}
new g_tuning_models[MAX_TUNING][E_TUNING_MODELS] =
{
	{402, {5179,5180,5183,5184,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{409, {2874,2875,2876,2877,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{410, {4681,4682,4683,4684,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{411, {1196,1197,1198,1199,1200,1201,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,5,4,5,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{415, {4782,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{419, {6326,6327,6328,6329,6330,6331,6332,6333,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,1,1,0,0,15,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{421, {6010,6011,6012,6013,6142,6143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,1,8,2,0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{429, {5163,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{439, {6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,16,16,5,5,5,4,4,17,17,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{444, {6001,6002,6003,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,3,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{458, {6270,6271,6272,6273,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{467, {5192,5193,5194,5195,5197,5198,5199,5287,5288,5289,5291,5292,5293,5296,5297,5298,5299,-1,-1,-1,-1,-1,-1,-1,-1},{7,12,5,5,5,5,5,4,4,4,14,15,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1}},
	{477, {2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,3834,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,5,5,5,4,4,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{480, {5997,6054,5998,6055,5999,6056,6000,6057,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{489, {6072,6073,6074,6075,6076,6077,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{491, {6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,5,4,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{496, {6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,0,5,5,5,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{503, {5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,4,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{551, {6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{11,0,5,5,5,5,4,4,4,4,18,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{527, {6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,18,18,2,7,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{533, {5116,5117,5118,5119,5120,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{534, {6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,4,0,18,10,3,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{542, {5958,5959,5960,5961,5962,5963,5964,5965,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,3,5,4,17,17,19,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{547, {6261,6262,6263,6264,6265,6266,6267,6268,6269,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,0,5,5,4,4,18,18,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{549, {2712,2713,2714,2715,2716,2717,2718,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,1,1,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{559, {1068,1069,1070,1071,1106,1138,1139,1140,1141,1154,1155,1156,1157,1158,1159,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,4,4,4,3,3,3,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{558, {1088,1089,1090,1091,1092,1093,1094,1095,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,1,1,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{560, {1028,1029,1032,1033,1138,1139,1140,1141,1169,1170,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,8,8,2,2,4,4,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{562, {1034,1035,1036,1037,1038,1039,1040,1041,1146,1147,1148,1149,1171,1172,3874,3875,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,4,4,1,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{565, {1150,1151,1152,1153,5859,5860,5861,5862,1054,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,4,5,5,5,1,1,2,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{567, {1102,1129,1130,1131,1132,1133,1186,1187,1188,1189,6159,6160,6161,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,9,9,14,15,18,2,5,5,5,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{579, {17534,17535,17536,17537,17538,17539,17540,17541,17542,17543,17544,17545,17546,17547,17548,17549,17550,-1,-1,-1,-1,-1,-1},{17,17,17,5,5,5,5,4,4,4,19,19,15,8,15,12,7,-1,-1,-1,-1,-1,-1}},
	{585, {2659,2660,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{589, {4775,4776,4777,4778,4779,4780,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{600, {6310,6311,6312,6313,6314,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{605, {4675,4676,4677,4678,4679,4680,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,23,5,5,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{612, {2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,2,2,2,18,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{613, {1202,1203,1204,2641,2642,2643,2644,6469,6470,6471,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,20,5,4,4,4,6,23,23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{794, {6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,5,1,1,1,4,2,2,2,2,7,-1,-1,-1,-1,-1,-1,-1,-1}},
	{796, {2637,2638,2639,2640,2646,2647,2648,2651,5890,5966,5967,5968,5969,6462,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,5,15,2,7,19,20,23,23,23,5,4,2,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{797, {2811,2812,2813,2814,2815,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{798, {5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,8,2,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{908, {6102,6103,6104,6105,6106,6107,6108,6109,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,1,1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{1326, {5144,5145,5146,5147,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15065, {3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,-1,-1,-1,-1,-1,-1},{6,6,6,6,24,24,24,5,5,5,5,4,4,4,15,15,2,2,2,2,-1,-1,-1,-1,-1}},
	{15066, {6458,6459,6460,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15068, {2883,2884,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,-1,-1,-1,-1,-1,-1},{6,6,6,3,3,3,3,3,5,5,5,4,4,4,15,2,2,2,2,-1,-1,-1,-1,-1,-1}},
	{15072, {2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,4,2,2,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15074, {5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,7,7,5,4,8,14,8,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15077, {6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,1,1,1,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15078, {6429,6430,6431,6432,6433,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15079, {6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,4,4,8,8,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15080, {2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,5854,5855,5856,5857,-1,-1,-1,-1,-1,-1,-1},{1,1,5,5,4,4,4,18,15,15,18,12,2,2,2,5,3,12,-1,-1,-1,-1,-1,-1,-1}},
	{15085, {5995,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15086, {6004,6005,6006,6007,6008,6009,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15087, {6357,6358,6359,6360,6361,6362,6363,6364,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,1,1,15,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15088, {3971,3972,3973,3974,3975,3976,3977,3978,5996,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,2,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15090, {1160,1161,1162,1169,1170,1173,2783,2784,2785,2786,2787,2788,2789,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15093, {4685,4686,4687,4688,4689,4690,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,1,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15104, {6463,6464,6465,6466,6467,6468,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,4,23,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15107, {2667,2668,2669,2670,2671,2672,6132,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,5,4,2,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15115, {2661,2662,2663,2664,2665,2666,2673,2674,2675,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,20,20,8,12,8,7,14,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15116, {6461,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15120, {2707,2708,2709,2710,2711,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15121, {1205,1206,2652,2694,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15124, {1573,1699,2634,2649,2650,2653,2654,2655,2656,2657,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,5,8,5,5,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15125, {1163,1164,1165,1166,2724,2725,2726,2727,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,15,0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15126, {2719,2720,2721,2722,2723,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15128, {2735,2736,2737,2738,2739,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15131, {2790,2791,2792,2793,2794,2795,2795,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15140, {2728,2729,2730,2731,2732,2733,2734,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15141, {2772,2773,2774,2775,2776,2777,6200,6201,6202,6203,6204,6205,6206,6207,6208,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,18,24,2,2,0,5,5,5,4,4,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15142, {2778,2779,2780,2781,2782,6133,6134,6135,6136,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,1,2,2,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15144, {2759,2760,2761,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15145, {2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,7,18,15,5,5,4,4,2,2,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15146, {6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,17,2,2,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15150, {3919,3920,3921,3922,6438,6439,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,5,4,0,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15151, {6434,6435,6436,6437,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15153, {2836,2837,2838,2839,2840,2841,6564,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15157, {3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,-1,-1,-1,-1,-1},{0,0,0,0,5,5,5,4,1,1,24,24,3,24,24,2,2,2,2,2,-1,-1,-1,-1,-1}},
	{15158, {5174,5175,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,0,0,5,5,4,4,2,2,2,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15161, {1178,1179,1180,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15162, {3835,3836,3837,3838,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,6,0,0,5,5,4,4,18,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15163, {3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,-1,-1,-1,-1,-1,-1},{24,24,24,24,24,5,5,5,5,5,4,4,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1}},
	{15164, {4794,4795,4796,4797,4798,4799,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15166, {3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,6,0,0,5,5,4,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15168, {3936,3937,3938,3939,3940,3941,6252,6253,6254,6255,6256,6257,6258,6259,6260,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,4,2,2,2,0,0,0,5,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15171, {6365,6366,6367,6368,6369,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15175, {6124,6125,6126,6127,6128,6129,6130,6131,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,2,6,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15177, {2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,-1,-1,-1,-1,-1,-1,-1},{20,20,20,16,24,16,16,19,4,4,12,12,-1,-1,-1,-1,-1,-1,-1}},
	{15180, {3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4648,4649,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,1,1,4,2,18,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15181, {3953,3954,3955,3956,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15183, {3944,3945,3946,3947,3948,3949,3950,3951,3952,6334,6335,6336,6337,6338,6339,6340,6341,-1,-1,-1,-1,-1,-1,-1,-1},{25,5,5,4,4,4,2,2,2,5,5,4,2,17,17,6,6,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15185, {3968,3969,3970,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15165, {6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,26,5,5,5,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15188, {6014,6015,6016,6017,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15189, {3979,3980,3981,3982,3983,3984,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,4,2,27,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15191, {4784,4785,4786,4787,4788,4789,4790,4791,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15209, {6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,4,4,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15210, {5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,10,2,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15213, {4650,4651,4652,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15217, {4653,4654,4655,4656,4657,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,28,2,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15219, {4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,5,5,5,5,5,5,4,4,2,2,2,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15221, {4672,4673,4674,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,24,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15270, {5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,8,8,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15282, {6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,17,15,2,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15230, {4783,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15231, {4781,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15631, {5994,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15232, {4696,4697,4698,4699,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{30,19,5,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15237, {4757,4758,5157,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15240, {4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,6,3,3,3,5,5,5,5,4,4,8,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15246, {5161,5162,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15247, {5158,5159,5160,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15248, {5152,5153,5154,5155,5156,6615,6616,6617,6618,6619,6620,6622,6623,6624,6625,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,7,0,5,5,5,4,4,2,15,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15260, {5149,5150,5151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15266, {5148,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15273, {5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,5,4,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15274, {5125,5126,5127,5128,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,8,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15275, {5121,5122,5123,5124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{20,31,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15286, {5970,5971,5972,5973,6455,6456,6457,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{17,5,5,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15287, {6425,6426,6427,6428,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15289, {5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,5,4,4,4,2,2,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15290, {6024,6025,6026,6027,6028,6029,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,5,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15602, {5176,5177,5178,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,9,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15603, {5181,5182,5185,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15611, {5189,5190,5191,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15617, {5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,16,16,3,5,4,2,2,2,24,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15618, {5863,5864,5865,5866,5867,5868,5869,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,1,12,8,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15621, {5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,-1,-1,-1,-1,-1,-1},{6,9,9,3,9,5,12,5,4,4,4,4,4,18,18,2,2,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15622, {6162,6163,6164,6165,6166,6167,6168,6274,6275,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15630, {5938,5939,5940,5941,5942,5943,5944,5945,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{9,9,5,5,5,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15634, {17551,17552,17553,17554,17555,17556,17557,17558,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{17,5,9,4,19,15,12,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15640, {6137,6138,6139,6140,6141,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15645, {6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,18,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15648, {6169,6170,6171,6172,6173,6174,6175,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,-1,-1,-1,-1,-1,-1,-1,-1},{3,9,9,9,5,5,5,5,1,1,5,5,2,2,8,18,14,12,-1,-1,-1,-1,-1,-1,-1}},
	{15651, {6276,6277,6278,6279,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15654, {1110,1111,1112,1113,1114,1042,1043,1044,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{1,1,8,2,2,6,5,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15655, {6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,5,4,4,4,4,10,15,2,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15663, {6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{3,9,9,5,5,5,4,4,12,8,15,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15664, {6440,6441,6442,6443,6444,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15675, {6474,6475,6476,6477,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15676, {6484,6485,6486,6487,6488,6489,6490,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15678, {6479,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15680, {1167,1168,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{475, {6507,6508,6509,6510,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{505, {6480,6481,6482,6483,6550,6551,6552,6553,6554,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,15,16,5,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15249, {6565,6566,6567,6568,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15114, {2676,2677,2678,2679,6472,6473,6569,6570,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,0,2,2,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15119, {2695,2697,2698,2699,2700,2701,2702,2704,2706,2969,2968,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{6,0,5,5,4,4,14,15,19,19,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{500, {6516,6517,6518,6519,6520,6521,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,23,0,19,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{554, {6523,6524,6525,6526,6527,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,8,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{508, {6528,6529,6530,6531,6532,6533,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{30,5,5,4,17,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15070, {6511,6512,6513,6514,6515,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{517, {6522,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15089, {6534,6535,6536,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15637, {6209,6210,6211,6212,6537,6538,6539,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,15,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15652, {6540,6541,6542,6543,6544,1134,1135,1136,1137,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{2,0,5,4,2,0,5,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15684, {6545,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15685, {6546,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{451, {6547,6548,6549,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15184, {3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3957,3958,3959,3960,3961,3963,3966,-1,-1,-1,-1,-1,-1,-1},{0,5,5,5,1,4,4,2,2,2,2,3,7,5,5,4,0,2,-1,-1,-1,-1,-1,-1,-1}},
	{15697, {1101,4659,4660,4661,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15679, {1100,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15176, {1115,1116,1117,1118,1119,1120,1121,1122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,5,4,4,2,2,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15686, {1123,1124,1125,1126,1127,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,5,4,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{17400, {1185,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15098, {1190,1191,1192,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{8,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15173, {1193,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15203, {2816,2817,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{540, {6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,5,4,4,4,2,2,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15293, {2771,3942,3943,5152,5153,5154,5155,5156,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,7,7,5,5,4,4,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{17409, {1030,1031,1032,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,7,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{17408, {1026,1027,1028,1029,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,5,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15280, {17524,17525,17526,17527,17528,17529,17530,17531,17532,17533,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,5,5,4,4,2,2,2,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{17412, {17569,17570,17571,17572,17573,17574,17575,17576,17577,17578,17579,17580,17581,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15214, {17563,17564,17565,17566,17567,17568,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{20,20,4,4,14,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15653, {17582,17583,17584,17585,17586,17587,17588,17589,17590,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{0,0,0,5,5,5,4,4,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15696, {4659,4660,4661,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{5,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},
	{15690, {18600,18601,18602,18603,18604,18605,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},{7,16,5,4,4,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}
};
stock GetTuningVehicle(playerid, vehicleid, tuning, status = 0)
{
	for(new idx; idx < sizeof (g_tuning_models); idx++)
	{
		for(new i; i < MAX_TUNING_MODELS; i++)
		{
			if(GetVehicleModel(vehicleid) == g_tuning_models[idx][E_MODEL_ID])
			{
				if(tuning == g_tuning_models[idx][E_ITEM_ID][i])
				{
					PACKET_215(playerid, 17, vehicleid, tuning, "", "", status);
				}
			}
		}
	}
}

enum E_COMPONENT_TYPE_STRUCT
{
	CT_NAME[21],
	Float:CT_POS[3],
	Float:CT_POS_LOOK_AT[3]
}

new g_component_camera_pos[33][E_COMPONENT_TYPE_STRUCT] =
{
   	{"Боковая юбка", {-2502.888427,-601.234802,1001.274719}, {-2498.882080,-598.369506,1000.414550}},
   	{"Система выхлопа", {-2493.299072,-597.512268,1001.173645}, {-2498.242187,-597.533020,1000.421386}},
   	{"Спойлер", {-2493.469726,-597.743896,1003.075073}, {-2497.838867,-597.578125,1000.649475}},
   	{"Фары", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Задний бампер", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
   	{"Передний бампер", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
   	{"Капот", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Накладка на капот", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Накладка на крышу", {-2503.8228, -597.8410, 1004.2870}, {-2498.8254, -597.6748, 1001.1870}},
   	{"Решетка", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Реснички", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Ноздри", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"LED оптика", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
	{"Наклейка", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
   	{"Багажник на крышу", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Спойлер на крышу", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
   	{"Кузов", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
   	{"Накладка на кузов", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
  	{"Дефлектор на стекло", {-2493.469726,-597.743896,1003.075073}, {-2497.838867,-597.578125,1000.649475}},
	{"Запасное колесо", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Кенгурятник", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}},
	{"Кенгурятник задний", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Защита", {-2493.208984, -599.609191, 1001.355590}, {-2497.524414, -597.288146, 1000.361083}},
	{"Кузовной набор", {-2502.888427,-601.234802,1001.274719}, {-2498.882080,-598.369506,1000.414550}},
	{"Крыша", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Кузов и салон", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Рейлинги", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Крыша на багажник", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Мигалки", {-2502.4258, -601.2964, 1004.5900}, {-2498.8938, -597.7574, 1001.0900}},
	{"Камеры и радары", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Тент", {-2493.748291,-600.784484,1003.218872}, {-2497.239746,-597.772705,1001.285095}},
	{"Шноркель", {-2505.430664,-597.823425,1003.610046}, {-2501.039062,-597.817871,1001.219787}},
	{"Мухобойка", {-2504.3772, -596.3834, 1000.3870}, {-2498.8254, -597.6748, 1000.7870}}
};

stock Tuning_OnMenuEvent(playerid, event, category, item)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	new modelid = GetVehicleData(vehicleid, V_MODELID);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new query[148];

	new color;
	if(event == 0)
	{
		if(category == 0) // цвет
		{
  			if(GetPVarInt(playerid, "cl1") != 0)
			{
				color = GetOwnableCarData(vehicleid, OC_COLOR_2);
				if(GetPVarInt(playerid, "color_id1") == -1) ChangeVehicleColor(vehicleid, item, color);
				else ChangeVehicleColor(vehicleid, item, GetPVarInt(playerid, "color_id1"));
				SetPVarInt(playerid, "color_id", item);
			}
	        else
			{
				color = GetOwnableCarData(vehicleid, OC_COLOR_1);
				if(GetPVarInt(playerid, "color_id") == -1) ChangeVehicleColor(vehicleid, color, item);
				else ChangeVehicleColor(vehicleid, GetPVarInt(playerid, "color_id"), item);
				SetPVarInt(playerid, "color_id1", item);
			}
		}
		if(category == 2)
		{
			if(item == 0) RemoveVehicleComponent(vehicleid, 0), SetPVarInt(playerid, "gidra", 0);
			if(item == 1) 
			{
	            if(GetOwnableCarData(index, OC_PNEWMA) == 1) GameText(playerid, "~r~Нельзя установить гидр.подвеска~n~r~Когда Установлена~n~y~Пневматическая", 4000, 0);
				else AddVehicleComponent(vehicleid, 1087), SetPVarInt(playerid, "gidra", 1087);
			}
		}

		if(category == 3)
		{
			for(new idx; idx != sizeof g_tuning_models; idx++)
			{
				if(g_tuning_models[idx][E_MODEL_ID] != modelid) continue;
				if(g_tuning_models[idx][E_ITEM_ID][item] == -1) continue;
				if(g_tuning_models[idx][E_MODEL_ID] == GetVehicleModel(vehicleid))
				{
					if(g_tuning_models[idx][E_ITEM_TYPE][item] != -1)
					{
						if(g_tuning_models[idx][E_ITEM_TYPE][item] != GetPVarInt(playerid, "g_tuning_models_id"))
						{
							SetPVarInt(playerid, "g_tuning_models_id", g_tuning_models[idx][E_ITEM_TYPE][item]);

							new Float:pos_x_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][0];
							new Float:pos_y_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][1];
							new Float:pos_z_1 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS][2];

							new Float:pos_x_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][0];
							new Float:pos_y_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][1];
							new Float:pos_z_2 = g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][item]][CT_POS_LOOK_AT][2];

							SetPlayerCameraPos(playerid, pos_x_1, pos_y_1, pos_z_1);
							SetPlayerCameraLookAt(playerid, pos_x_2, pos_y_2, pos_z_2, CAMERA_MOVE);
						}
					}
					PACKET_215(playerid, 17, vehicleid, g_tuning_models[idx][E_ITEM_ID][item]);
					
					break;
				}
			}
		}
		if(category == 5)
		{
			switch(item)
			{
				case 0..17:
				{
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.playSound('car/horn/sound_%d.mp3')", item);
		            CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
				}
			}
		}
	}

	if(event == 1)
	{
		if(category == 0)
		{
	       	if(!VerifyIntString(QueryPlayerBalance(playerid), 3500)) return GameText(playerid, "Недостаточно средств", 4000, 2);
			
			ModifyCashBalance(playerid, -3500, "цвет", true, true);

			AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 2100, 1);

			if(GetPVarInt(playerid, "color_id") != -1)
			{
				SetOwnableCarData(index, OC_COLOR_1, GetPVarInt(playerid, "color_id"));
				format(query, sizeof query, "UPDATE ownable_cars SET color_1=%d WHERE id=%d", GetPVarInt(playerid, "color_id"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}

			if(GetPVarInt(playerid, "color_id1") != -1)
			{
				SetOwnableCarData(index, OC_COLOR_2, GetPVarInt(playerid, "color_id1"));
				format(query, sizeof query, "UPDATE ownable_cars SET color_2=%d WHERE id=%d", GetPVarInt(playerid, "color_id1"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		if(category == 2)
		{
		    if(item == 0)
		    {
		        if(!VerifyIntString(QueryPlayerBalance(playerid), 10000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		        ModifyCashBalance(playerid, -10000, "Гидравлика", true, true);
	            AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 6000, 1);
		    }
  		    if(item == 1)
		    {
		        if(!VerifyIntString(QueryPlayerBalance(playerid), 500000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		        ModifyCashBalance(playerid, -500000, "Гидравлика", true, true);
	            AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 300000, 1);
		    }
			if(GetPVarInt(playerid, "gidra") != -1)
			{
				SetOwnableCarData(index, OC_GIDRA, GetPVarInt(playerid, "gidra"));
				format(query, sizeof query, "UPDATE ownable_cars SET gidra=%d WHERE id=%d", GetPVarInt(playerid, "gidra"),GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}

		if(category == 3)
		{
            if(!VerifyIntString(QueryPlayerBalance(playerid), 2000000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
            ModifyCashBalance(playerid, -2000000, "обвес", true, true);
            AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 1200000, 1);

			STRING_GLOBAL[0] = EOS;

			for(new idx = 0; idx != sizeof g_tuning_models; idx ++)
			{
				if(g_tuning_models[idx][E_MODEL_ID] == GetVehicleModel(vehicleid)) g_vehicle[vehicleid][VEH_COMPONENT][item] = g_tuning_models[idx][E_ITEM_ID][item];
			}
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d | %d", // РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р…РїС—Р… 17+
			g_vehicle[vehicleid][VEH_COMPONENT][0], g_vehicle[vehicleid][VEH_COMPONENT][1], g_vehicle[vehicleid][VEH_COMPONENT][2], g_vehicle[vehicleid][VEH_COMPONENT][3], g_vehicle[vehicleid][VEH_COMPONENT][4], g_vehicle[vehicleid][VEH_COMPONENT][5],
			g_vehicle[vehicleid][VEH_COMPONENT][6], g_vehicle[vehicleid][VEH_COMPONENT][7], g_vehicle[vehicleid][VEH_COMPONENT][8], g_vehicle[vehicleid][VEH_COMPONENT][9], g_vehicle[vehicleid][VEH_COMPONENT][10], g_vehicle[vehicleid][VEH_COMPONENT][11],
			g_vehicle[vehicleid][VEH_COMPONENT][12], g_vehicle[vehicleid][VEH_COMPONENT][13], g_vehicle[vehicleid][VEH_COMPONENT][14], g_vehicle[vehicleid][VEH_COMPONENT][15], g_vehicle[vehicleid][VEH_COMPONENT][16]);
			if(IsAOwnableCar(vehicleid))
			{
				mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET obves='%s' WHERE id=%d", STRING_GLOBAL, GetOwnableCarData(index, OC_SQL_ID));
				mysql_tquery(mysql, query);
			}
			format(g_ownable_car[index][OC_OBVES], 111, STRING_GLOBAL);
		}

		if(category == 5)
		{
			switch(item)
			{
				case 0:
				{
					if(!VerifyIntString(QueryPlayerBalance(playerid), 1000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		            ModifyCashBalance(playerid, -1000, "Клаксон", true, true);
			        AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 600, 1);
			        SetPVarInt(playerid, "horn", item);
				}
				case 1:
				{
					GameText(playerid, "Недоступно", 4000, 2);
				}
				case 2..10:
				{
					if(!VerifyIntString(QueryPlayerBalance(playerid), 50000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		            ModifyCashBalance(playerid, -50000, "Клаксон", true, true);
			        AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 30000, 1);
			        SetPVarInt(playerid, "horn", item);
				}
				case 11:
				{
					if(!VerifyIntString(QueryPlayerBalance(playerid), 1000000000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		            ModifyCashBalance(playerid, -1000000000, "Клаксон", true, true);
			        AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 20000000, 1);
			        SetPVarInt(playerid, "horn", item);
				}
				case 12..15:
				{
					if(!VerifyIntString(QueryPlayerBalance(playerid), 500000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		            ModifyCashBalance(playerid, -500000, "Клаксон", true, true);
			        AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 300000, 1);
			        SetPVarInt(playerid, "horn", item);
				}
				case 16..17:
				{
					if(!VerifyIntString(QueryPlayerBalance(playerid), 1000000)) return GameText(playerid, "Недостаточно средств", 4000, 2);
		            ModifyCashBalance(playerid, -1000000, "Клаксон", true, true);
			        AddBusinessProfit(playerid, GetPVarInt(playerid, "sto_id"), 600000, 1);
			        SetPVarInt(playerid, "horn", item);
				}
			}
		}
     	if(GetPVarInt(playerid, "horn") != -1){
			horn[vehicleid] =  GetPVarInt(playerid, "horn");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET horn=%d WHERE id=%d", GetPVarInt(playerid, "horn"),GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningMenu').balance = %s", QueryPlayerBalance(playerid));
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		return 1;
	}

	if(event == 2)
	{
		if(category == 0)
		{
			SetPlayerCameraPos(playerid, -2502.4011, -601.2435, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);
		}
		if(category == 1)
		{
			SetPlayerCameraPos(playerid, -2493.1768, -597.2349, 1000.5632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);

			CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[]')");
		}
		if(category == 2)
		{
			SetPlayerCameraPos(playerid, -2502.4226, -601.2938, 1004.2793);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);

			CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[]')");
			CEF_CREATE(playerid,1,2,"interface('TuningMenu').setItems('[[\"Cтоковая гидравливка\", 10000, 0, 0],[\"Гидравлика\", 500000, 0, 0]]')");
		}
		if(category == 3)
		{
			SetPlayerCameraPos(playerid, -2503.8564, -597.7042, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);

	    	CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[]')");

			STRING_GLOBAL = "";
			for(new i = 0; i != MAX_TUNING_MODELS; i ++)
			{
				for(new idx = 0; idx != sizeof g_tuning_models; idx ++)
				{
					if(g_tuning_models[idx][E_MODEL_ID] != GetVehicleModel(vehicleid)) continue;
					if(g_tuning_models[idx][E_ITEM_ID][i] == -1) continue;

                    if(g_tuning_models[idx][E_ITEM_TYPE][i] == -1) strcat(STRING_GLOBAL, "[\"Элемент\", 2000000, 0, 0],");
					else
					{
						format(query, sizeof query, "[\"%s\", 2000000, 0, 0],", g_component_camera_pos[g_tuning_models[idx][E_ITEM_TYPE][i]][CT_NAME]);
						strcat(STRING_GLOBAL, query);
					}   
				}
			}
			new str_len = strlen(STRING_GLOBAL);
			strdel(STRING_GLOBAL, str_len-1, str_len);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningMenu').setItems('[%s]')", STRING_GLOBAL);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		if(category == 4)
		{
			SetPlayerCameraPos(playerid, -2493.3545, -599.2065, 1002.6632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);

			CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[]')");
		}
		if(category == 5)
		{
			SetPlayerCameraPos(playerid, -2502.4011, -601.2435, 1004.4632);
			SetPlayerCameraLookAt(playerid, -2498.8381, -597.7210, 1000.9633, CAMERA_MOVE);

			CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[]')");
			CEF_CREATE(playerid,1,2,"interface('TuningMenu').setItems('[[\"Стоковый Клаксон\", 1000, 0, 0],[\"Клаксон №1\", 1000, 0, 0],[\"Клаксон №2\", 50000, 0, 0],[\"Клаксон №3\", 50000, 0, 0],[\"Клаксон №4\", 50000, 0, 0],[\"Клаксон №5\", 50000, 0, 0],[\"Клаксон №6\", 50000, 0, 0],[\"Клаксон №7\", 50000, 0, 0],[\"Клаксон №8\", 50000, 0, 0],[\"Клаксон №9\", 50000, 0, 0],[\"Клаксон №10\", 50000, 0, 0],[\"Клаксон №11\", 1000000000, 0, 0],[\"Клаксон №12\", 500000, 0, 0],[\"Клаксон №13\", 500000, 0, 0],[\"Клаксон №14\", 500000, 0, 0],[\"Клаксон №15\", 500000, 0, 0],[\"Клаксон №16\", 1000000, 0, 0],[\"Клаксон №17\", 1000000, 0, 0]]')");
		}
	}
	if(event == 3)
	{
        if(gPlayerTuningMenu[playerid] == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			CEF_CREATE(playerid, 1, 2, "closeInterface('TuningMenu')");
		}
	}
	if(event == 4)
	{
     	if(category == 0)
	    {
  			if(GetPVarInt(playerid, "cl1") != 0)
			{
				SetPVarInt(playerid, "cl1", 0);
				GameText(playerid, "~g~Выбран слот №2", 4000, 2);
			}
	        else
			{
				SetPVarInt(playerid, "cl1", 1);
				GameText(playerid, "~g~Выбран слот №1", 4000, 2);
			}
		}
	}
	return 1;
}
new g_player_tinting_price[MAX_PLAYERS];

new const InfoRGB[][3] = {{255,255,255},{0,0,0},{177,177,177},{212,212,212},{36,158,203},{231,99,34},{175,37,129},{234,180,38},{114,201,67}};

stock ClearTintingParams(vehicleid)
{
	if(!IsValidVehicleID(vehicleid)) return 0;
	for(new i; i < 3; i++)
	{
		g_vehicle_data[vehicleid][V_TINTINGS][i] = -1;
		g_vehicle_data[vehicleid][V_TINTINGC][i] = -1;
		g_vehicle_data[vehicleid][V_TINTINGP][i] = -1;
	}
	return 1;
}

stock UpdateTinting(playerid, vehicleid)
{
	new select, color, procent;
	for(new i = 0; i <= 2; i++)
	{
		select = g_vehicle_data[vehicleid][V_TINTINGS][i], color = g_vehicle_data[vehicleid][V_TINTINGC][i], procent = g_vehicle_data[vehicleid][V_TINTINGP][i];
		if(select == -1 || !color || procent == -1 || color > 8) continue;
		if(procent >= 255) g_vehicle_data[vehicleid][V_TINTINGP][i] = 255;

		PACKET_215(playerid, 12, vehicleid, select, "", "", InfoRGB[color][0], InfoRGB[color][1], InfoRGB[color][2], procent);
	}
}

stock DeleteToner(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	for(new i = 0; i < 3; i++)
	{
		PACKET_215(playerid, 12, vehicleid, i, "", "", 0, 0, 0, 101);
	}
}

stock SetTintingParams(carid, select, color, procent)
{
	g_vehicle_data[carid][V_TINTINGS][select] = select;
	g_vehicle_data[carid][V_TINTINGC][select] = color;

    if(procent != 100) g_vehicle_data[carid][V_TINTINGP][select] = 100 + (procent / 2 * 3);
    else g_vehicle_data[carid][V_TINTINGP][select] = 255;
}

stock SaveOwnableTinting(vehicleid)
{
	new carid = GetVehicleData(vehicleid, V_ACTION_ID),index = GetOwnableCarData(carid, OC_SQL_ID);
	new fmt1[100],fmt2[100],fmt3[100];

	for(new i=0; i <= 2; i++)
	{
		format(fmt1, sizeof fmt1, "%s%i,",fmt1,g_vehicle_data[vehicleid][V_TINTINGS][i]);
		format(fmt2, sizeof fmt2, "%s%i,",fmt2,g_vehicle_data[vehicleid][V_TINTINGC][i]);
		format(fmt3, sizeof fmt3, "%s%i,",fmt3,g_vehicle_data[vehicleid][V_TINTINGP][i]);
	}

	new query[365];
	format(query, sizeof query, "UPDATE `ownable_cars` SET `pselect` = '%s', `tcolor` = '%s', `tprocent` = '%s',`tonerinstall` = '1' WHERE `id` = '%d' LIMIT 1",\
	fmt1,fmt2,fmt3, index);
    mysql_tquery(mysql, query);
}

public: OnPlayerTintingParams(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid), glass[9];
	sscanf(params, "P<,,|,,|,,>a<i>[9]",glass);

    if(glass[0] != 0)
    {
        SetTintingParams(carid, 0, glass[1], glass[2]);
    }
    if(glass[3] != 0)
    {
        SetTintingParams(carid, 1, glass[4], glass[5]);
    }
    if(glass[6] != 0)
    {
        SetTintingParams(carid, 2, glass[7], glass[8]);
    }

    new price;

    if(glass[2] != 0 || glass[5] != 0 || glass[8] != 0) price = 1200000;
    if(glass[2] != 0 && glass[5] != 0 || glass[8] != 0) price = 2400000;
    if(glass[2] != 0 || glass[5] != 0 && glass[8] != 0) price = 2400000;
    if(glass[2] != 0 && glass[5] != 0 && glass[8] != 0) price = 4800000;

    if(glass[2] > 80) price = price + (glass[2] * 10000);
    if(glass[5] > 80) price = price + (glass[5] * 10000);
    if(glass[8] > 80) price = price + (glass[8] * 10000);

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TintingOrder').getPrice(%d)", price);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    g_player_tinting_price[playerid] = price;

    UpdateTinting(playerid, carid);
    return 1;
}

public: OnPlayerTintingOrder(playerid, buttons)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new toner_id = GetPlayerInBiz(playerid);

    if(buttons == 1)
    {
        if(g_player_tinting_price[playerid] == 0) return 1;

        string_dialog[0] = EOS;
	    format(string_dialog, 148, "{AFAFAF}Вы хотите приобрести выбранную тонировку за {cc9507}%s руб{AFAFAF}?", formatInt(g_player_tinting_price[playerid]));
	    IntfDialogCallRemote(playerid, DIALOG_TINTING_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Установка тонировки", string_dialog, "Да", "Отмена");
    }
    if(buttons == 2)
    {
        g_player_tinting_price[playerid] = 0;
        ClearTintingParams(vehicleid);
    }
    if(buttons == 3) 
    {
        SetVehiclePos(vehicleid, GetBusinessData(toner_id, B_EXIT_POS_X), GetBusinessData(toner_id, B_EXIT_POS_Y), GetBusinessData(toner_id, B_EXIT_POS_Z));
        SetVehicleZAngle(vehicleid, GetBusinessData(toner_id, B_EXIT_ANGLE));
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        LinkVehicleToInterior(vehicleid, 0);
        SetVehicleVirtualWorld(vehicleid, 0);

        SetPlayerInBiz(playerid, -1);
        TogglePlayerControllable(playerid, true);
        SetCameraBehindPlayer(playerid);

        CEF_HIDE(playerid, "TintingOrder");
        ClearTintingParams(vehicleid);
        CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
    }
    UpdateTinting(playerid, vehicleid);
    return 1;
}

public: OnPlayerTintingSelectGlass(playerid, glass)
{
    if(glass == 1)
    {
        SetPlayerCameraPos(playerid, -3.6452, 498.7973, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 501.9935, 1001.2854);
    }
    if(glass == 2)
    {
        SetPlayerCameraPos(playerid, -3.9640, 506.2433, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 502.4935, 1001.2854);
    }
    if(glass == 3)
    {
        SetPlayerCameraPos(playerid, -5.6099, 507.8572, 1001.8854);
		SetPlayerCameraLookAt(playerid, -6.6452, 502.4935, 1001.2854);
    }
	return 1;
}

#define MAX_FAMILY              (1000) // максимальное кол-во семей

new gangsklads[MAX_FAMILY];

#define GetFamilyCarData(%0,%1)        g_family_car[%0][%1]
#define SetFamilyCarData(%0,%1,%2)     g_family_car[%0][%1] = %2
#define AddFamilyCarData(%0,%1,%2,%3)  g_family_car[%0][%1] %2= %3

#define GetFamilyData(%0,%1)    g_family[%0][%1]
#define SetFamilyData(%0,%1,%2) g_family[%0][%1] = %2
#define AddFamilyData(%0,%1,%2,%3) g_family[%0][%1] %2= %3

#define GetPlayerFamily(%0)	    GetPlayerData(%0, P_FAMILY)
#define GetPlayerRankFamily(%0)	    GetPlayerData(%0, P_FAMILY_RANK)

enum E_WAR_STRUCT
{
	bool: W_STATUS,
	W_ATTACK_TEAM,
	W_PROTECT_TEAM,
	W_ATTACKER_KILLS,
	W_PROTECTOR_KILLS,
	W_TIME,
	W_WAIT_TIME[3],
	W_BIZ
}
new page_fam[MAX_PLAYERS];
new g_war[E_WAR_STRUCT]; // капты для ОПГ
new zone_war_z[MAX_BUSINESS];
new zone_war_a[MAX_BUSINESS];

enum E_FAMILY_STRUCT // структура семьи
{
    F_SQL_ID,       // ид аккаунта
    F_NAME[63 + 1], // название семьи
    F_USER_ID,      // создатель семьи
    F_TIME,         // время создания
    F_COLOR,        // цвет семьи
    F_LEVEL,        // уровень семьи
    F_EXP,          // опыт семьи
    F_RANK1[32],    // ранг 1
    F_RANK2[32],    // ранг 2
    F_RANK3[32],    // ранг 3
    F_RANK4[32],    // ранг 4
    F_RANK5[32],    // ранг 5
    F_RANK6[32],    // ранг 6
    F_RANK7[32],    // ранг 7
    F_RANK8[32],    // ранг 8
    F_RANK9[32],    // ранг 9
    F_RANK10[32],   // ранг 10
    F_MONEY,        // общак: деньги
    F_DRUGS,        // общак: наркотики
    F_TREE,         // общак: дерево
    F_METAL,        // общак: металл
    F_AMMO,         // общак: патроны
    F_HOUSE_ID,      // номер дома
    Float:F_SPAWN_POSITION[4],    // Позиция спавна
    F_SPAWN_IV[2],
    F_TAKE_MONEY,    //ранг доступа взятия денег со склада семьи
	F_TAKE_DRUGS,    //ранг доступа взятия нарко со склада семьи
	F_TAKE_METALL,    //ранг доступа взятия металла со склада семьи
	F_TAKE_AMMO,    //ранг доступа взятия патронов со склада семьи
	F_RANG_INV,
	F_RANG_UNINV,
	F_RANG_MUTE,
	F_RANG_UNMUTE,
	F_RANG_WARN,
	F_RANG_UNWARN,
	F_RANG_GIVER,
	F_FAMILY_CARS,
	F_GANG,
    F_TIME_DAY,
    F_TIME_MOUNTH,
    F_TIME_YEAR,
    F_TIME_HOUR,
    F_TIME_MINUTE,
    F_TIME_SECOND,
    Text3D: F_SKLAD,
    F_SKLAD_ST,
    F_KD,
	F_MAFIA,
	F_CENTRAL_MANSION,
	F_WEST_MANSION,
	F_NORTH_MANSION,
	F_PELA_BASE
};

new g_family[MAX_FAMILY][E_FAMILY_STRUCT];

new F_RANK_MON[MAX_FAMILY][10];
new F_RANK_PAT[MAX_FAMILY][10];

new g_family_loaded;
new g_family_rank[300][5][20];

enum fm
{
	fID,
	fName[32],
	fLeader[32]
};
new FamInfo[300][fm];
new TOTALFAM;

enum E_FAMILY_COLORS
{
	FC_NUMBER[11],
	FC_NAME[32],
	FC_COLOR[7]
}

enum E_FAMILY_CAR_STRUCT
{
    F_CAR_ID,           // Ид авто
    F_SQL_ID,          // ид в базе
    F_OWNER_ID,        // ид владельца
    F_OWNER_NAME[21],  // имя владельца
    F_MODEL_ID,        // модель
    F_COLOR_1,         // цвет 1
    F_COLOR_2,         // цвет 2
    F_RANG,             // С какого ранга
    Float: F_POS_X,    // позиции ТС
    Float: F_POS_Y,    // позиции ТС
    Float: F_POS_Z,    // позиции ТС
    Float: F_ANGLE,    // позиции ТС (угол поворота)
    F_World,
	F_Int,
    OC_KEY_IN,    // вставлен ли ключ
    OC_CREATE,          // время создания
    Float: OC_FUEL      // топливо
};
new g_family_car[MAX_OWNABLE_CARS][E_FAMILY_CAR_STRUCT];

new family_colors[18] =
{
    0xFFFFFFFF, // белый
    0xCD5C5CFF, // багровый
    0xFF0000FF, // красный
    0x8B0000FF, // темно-красный
    0xFFC0CBFF, // светло-розовый
    0xFFA07AFF, // цвет кожи
    0xFFFF00FF, // желтый
    0xFFD700FF, // золотой
    0xEE82EEFF, // фиолетовый
    0x800080FF, // темно-фиолетовый
    0x808080FF, // серый
    0xC0C0C0FF, // серебристый
    0xFF00FFFF, // розовый
    0x8000FFCC, // сиреневый
    0x228B22FF, // лесной
    0x1E90FFFF, // Голубой
    0x00BFFFFF, // цвет неба
    0x0000FFFF, // синий
};

new const family_colors_cef[18][8] =
{
    "#FFFFFF", // белый
    "#CD5C5C", // багровый
    "#FF0000", // красный
    "#8B0000", // темно-красный
    "#FFC0CB", // светло-розовый
    "#FFA07A", // цвет кожи
    "#FFFF00", // желтый
    "#FFD700", // золотой
    "#EE82EE", // фиолетовый
    "#800080", // темно-фиолетовый
    "#808080", // серый
    "#C0C0C0", // серебристый
    "#FF00FF", // розовый
    "#8000FF", // сиреневый
    "#228B22", // лесной
    "#1E90FF", // Голубой
    "#00BFFF", // цвет неба
    "#0000FF" // синий
};

new family_colors_name[18][32] =
{
    {"Белый"},
    {"Багровый"},
    {"Красный"},
    {"Темно-красный"},
    {"Светло-розовый"},
    {"Цвет кожи"},
    {"Желтый"},
    {"Золотой"},
    {"Фиолетовый"},
    {"Темно-фиолетовый"},
    {"Серый"},
    {"Серебристый"},
    {"Розовый"},
    {"Сиреневый"},
    {"Лесной"},
    {"Голубой"},
    {"Цвет неба"},
    {"Синий"}
};

new family_color_car[19][1] =
{
	{1},
	{74},
	{3},
	{78},
	{126},
	{107},
	{6},
	{6},
	{232},
	{233},
	{13},
	{11},
	{226},
	{16},
	{234},
	{2},
	{93},
	{0},
 	{1}
};

enum E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_GANG_ZONE,
	C_ATTACK_TEAM,
	C_PROTECT_TEAM,
	C_ATTACKER_KILLS,
	C_PROTECTOR_KILLS,
	C_TIME,
	C_WAIT_TIME[3]
}
new g_capture[E_CAPTURE_STRUCT]; // капты для ОПГ

stock GetFamilyOwnableCarLast(playerid,famid)
{
	new vehicleid = INVALID_VEHICLE_ID;
	new veh_id = GetPlayerVehicleID(playerid);
	new idx = GetVehicleData(veh_id, V_ACTION_ID);
	if(GetOwnableCarData(idx,OC_OWNER_ID) == famid) vehicleid = veh_id;
	return vehicleid;
}
stock GiveFamilyMoneyEx(fam_id, money)
{
    new fmt_str[185];
    AddFamilyData(fam_id, F_MONEY, +, money);
    format(fmt_str, sizeof fmt_str, "UPDATE family SET money=%d WHERE id=%d LIMIT 1", GetFamilyData(fam_id, F_MONEY), fam_id);
    mysql_query(mysql, fmt_str, false);
    return 1;
}
stock FInvitePlayer(playerid, fam_id, give_rang = 1, bool: save = false)
{
    if(!(1 <= give_rang <= 10)) give_rang = 1;

    SetPlayerData(playerid, P_FAMILY, fam_id);
    SetPlayerData(playerid, P_FAMILY_RANK, give_rang);

    if(save)
    {
        new query[80];
        format(query, sizeof query, "UPDATE accounts_canvasdev SET family=%d,family_rank=%d WHERE id=%d",\
            GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
        mysql_query(mysql, query, false);
    }
    return 1;
}
stock FUnInvite(playerid, to_player, reason[] = "")
{
    if(playerid != to_player)
    {
		new fmt_msg[110];
        format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из семьи \"%s\"", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
        SendClientMessage(to_player, 0xCECECEFF, fmt_msg);

        if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей семьи", GetPlayerNameEx(to_player), to_player);
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }
        else
        {
            format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из семьи \"%s\"", GetPlayerNameEx(to_player), to_player, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
            SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
        }
        format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из семьи %s. Причина: %s",
        GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME), reason);
		DestroyDynamic3DTextLabel(g_player[to_player][P_FAM_LABEL]);
		g_player[to_player][P_FAM_LABEL] = Text3D: -1;
		SetPlayerColorEx(to_player, GetPlayerTeamColor(playerid));
    }
    else
    {
		new fmt_msg[110];
        format(fmt_msg, sizeof fmt_msg, "Покинул семью %s по собственному желанию", GetPlayerTeamName(to_player));
		DestroyDynamic3DTextLabel(g_player[to_player][P_FAM_LABEL]);
		SetPlayerColorEx(to_player, GetPlayerTeamColor(playerid));
		g_player[to_player][P_FAM_LABEL] = Text3D: -1;

    }
    FInvitePlayer(to_player, 0, 0, true);
    return 1;
}
public: LoadFamily()
{
    new idx;
    new Cache: result, rows;

    result = mysql_query(mysql, "SELECT * FROM family", true);
    rows = cache_num_rows();

    for(idx = 0; idx < rows; idx ++)
    {
        SetFamilyData(idx+1, F_SQL_ID,        cache_get_field_content_int(idx, "id"));

        cache_get_field_content(idx, "name", g_family[idx+1][F_NAME], mysql, 64);

        SetFamilyData(idx+1, F_USER_ID,       cache_get_field_content_int(idx, "u_id"));
        SetFamilyData(idx+1, F_TIME,          cache_get_field_content_int(idx, "time"));
        SetFamilyData(idx+1, F_COLOR,         cache_get_field_content_int(idx, "color"));
        SetFamilyData(idx+1, F_LEVEL,         cache_get_field_content_int(idx, "level"));
        SetFamilyData(idx+1, F_EXP,           cache_get_field_content_int(idx, "exp"));

        SetFamilyData(idx+1, F_TIME_DAY,          cache_get_field_content_int(idx, "day"));
        SetFamilyData(idx+1, F_TIME_MOUNTH,          cache_get_field_content_int(idx, "mounth"));
        SetFamilyData(idx+1, F_TIME_YEAR,          cache_get_field_content_int(idx, "year"));

        SetFamilyData(idx+1, F_TIME_HOUR,          cache_get_field_content_int(idx, "hour"));
        SetFamilyData(idx+1, F_TIME_MINUTE,          cache_get_field_content_int(idx, "minute"));
        SetFamilyData(idx+1, F_TIME_SECOND,          cache_get_field_content_int(idx, "second"));

        F_RANK_MON[idx+1][0] = cache_get_field_content_int(idx, "mon_rank1");
        F_RANK_MON[idx+1][1] = cache_get_field_content_int(idx, "mon_rank2");
        F_RANK_MON[idx+1][2] = cache_get_field_content_int(idx, "mon_rank3");
        F_RANK_MON[idx+1][3] = cache_get_field_content_int(idx, "mon_rank4");
        F_RANK_MON[idx+1][4] = cache_get_field_content_int(idx, "mon_rank5");
        F_RANK_MON[idx+1][5] = cache_get_field_content_int(idx, "mon_rank6");
        F_RANK_MON[idx+1][6] = cache_get_field_content_int(idx, "mon_rank7");
        F_RANK_MON[idx+1][7] = cache_get_field_content_int(idx, "mon_rank8");
        F_RANK_MON[idx+1][8] = cache_get_field_content_int(idx, "mon_rank9");
        F_RANK_MON[idx+1][9] = cache_get_field_content_int(idx, "mon_rank10");

        F_RANK_PAT[idx+1][0] = cache_get_field_content_int(idx, "pat_rank1");
        F_RANK_PAT[idx+1][1] = cache_get_field_content_int(idx, "pat_rank2");
        F_RANK_PAT[idx+1][2] = cache_get_field_content_int(idx, "pat_rank3");
        F_RANK_PAT[idx+1][3] = cache_get_field_content_int(idx, "pat_rank4");
        F_RANK_PAT[idx+1][4] = cache_get_field_content_int(idx, "pat_rank5");
        F_RANK_PAT[idx+1][5] = cache_get_field_content_int(idx, "pat_rank6");
        F_RANK_PAT[idx+1][6] = cache_get_field_content_int(idx, "pat_rank7");
        F_RANK_PAT[idx+1][7] = cache_get_field_content_int(idx, "pat_rank8");
        F_RANK_PAT[idx+1][8] = cache_get_field_content_int(idx, "pat_rank9");
        F_RANK_PAT[idx+1][9] = cache_get_field_content_int(idx, "pat_rank10");


        cache_get_field_content(idx, "rank1", g_family[idx+1][F_RANK1], mysql, 32);
        cache_get_field_content(idx, "rank2", g_family[idx+1][F_RANK2], mysql, 32);
        cache_get_field_content(idx, "rank3", g_family[idx+1][F_RANK3], mysql, 32);
        cache_get_field_content(idx, "rank4", g_family[idx+1][F_RANK4], mysql, 32);
        cache_get_field_content(idx, "rank5", g_family[idx+1][F_RANK5], mysql, 32);
        cache_get_field_content(idx, "rank6", g_family[idx+1][F_RANK6], mysql, 32);
        cache_get_field_content(idx, "rank7", g_family[idx+1][F_RANK7], mysql, 32);
        cache_get_field_content(idx, "rank8", g_family[idx+1][F_RANK8], mysql, 32);
        cache_get_field_content(idx, "rank9", g_family[idx+1][F_RANK9], mysql, 32);
        cache_get_field_content(idx, "rank10", g_family[idx+1][F_RANK10], mysql, 32);

        g_family[idx+1][F_SPAWN_POSITION][0] = cache_get_field_content_float(idx, "pos_x");
        g_family[idx+1][F_SPAWN_POSITION][1] = cache_get_field_content_float(idx, "pos_y");
        g_family[idx+1][F_SPAWN_POSITION][2] = cache_get_field_content_float(idx, "pos_z");
        g_family[idx+1][F_SPAWN_POSITION][3] = cache_get_field_content_float(idx, "pos_fa");

        g_family[idx+1][F_SPAWN_IV][0] =    cache_get_field_content_int(idx, "inter");
        g_family[idx+1][F_SPAWN_IV][1] =    cache_get_field_content_int(idx, "world");

        SetFamilyData(idx+1, F_MONEY,         cache_get_field_content_int(idx, "money"));
        SetFamilyData(idx+1, F_DRUGS,         cache_get_field_content_int(idx, "drugs"));
        SetFamilyData(idx+1, F_TREE,          cache_get_field_content_int(idx, "tree"));
        SetFamilyData(idx+1, F_METAL,         cache_get_field_content_int(idx, "metal"));
        SetFamilyData(idx+1, F_AMMO,          cache_get_field_content_int(idx, "ammo"));
        SetFamilyData(idx+1, F_HOUSE_ID,      cache_get_field_content_int(idx, "house_id"));

        SetFamilyData(idx+1, F_TAKE_MONEY,	cache_get_field_content_int(idx, "r_TakeMoney"));
		SetFamilyData(idx+1, F_TAKE_DRUGS,	cache_get_field_content_int(idx, "r_TakeDrugs"));
		SetFamilyData(idx+1, F_TAKE_METALL,	cache_get_field_content_int(idx, "r_TakeMetall"));
		SetFamilyData(idx+1, F_TAKE_AMMO,		cache_get_field_content_int(idx, "r_TakeAmmo"));
		SetFamilyData(idx+1, F_RANG_INV,		cache_get_field_content_int(idx, "r_Inv"));
		SetFamilyData(idx+1, F_RANG_UNINV,		cache_get_field_content_int(idx, "r_UnInv"));
		SetFamilyData(idx+1, F_RANG_MUTE,		cache_get_field_content_int(idx, "r_Mute"));
		SetFamilyData(idx+1, F_RANG_UNMUTE,		cache_get_field_content_int(idx, "r_UnMute"));
		SetFamilyData(idx+1, F_RANG_WARN,		cache_get_field_content_int(idx, "r_Warn"));
		SetFamilyData(idx+1, F_RANG_UNWARN,		cache_get_field_content_int(idx, "r_UnWarn"));
		SetFamilyData(idx+1, F_RANG_GIVER,		cache_get_field_content_int(idx, "r_GiveRang"));
  		SetFamilyData(idx+1, F_GANG,		cache_get_field_content_int(idx, "gang"));
		SetFamilyData(idx+1, F_FAMILY_CARS,		cache_get_field_content_int(idx, "family_cars"));
		SetFamilyData(idx+1, F_SKLAD_ST,		cache_get_field_content_int(idx, "skladst"));
		SetFamilyData(idx+1, F_MAFIA,		cache_get_field_content_int(idx, "mafia"));
		SetFamilyData(idx+1, F_CENTRAL_MANSION,		cache_get_field_content_int(idx, "CentralMansion"));
		SetFamilyData(idx+1, F_WEST_MANSION,		cache_get_field_content_int(idx, "WestMansion"));
		SetFamilyData(idx+1, F_NORTH_MANSION,		cache_get_field_content_int(idx, "NorthMansion"));
		SetFamilyData(idx+1, F_PELA_BASE,		cache_get_field_content_int(idx, "PelaBase"));
		SetFamilyData(idx+1, F_SKLAD, Text3D:-1);
		if(GetFamilyData(idx+1, F_USER_ID) == -1) SetFamilyData(idx+1, F_HOUSE_ID, -1);
        // -------------------------
    }
    g_family_loaded = rows;
    cache_delete(result);
    printf("[Family]: Семьи : %d", g_family_loaded);
    UpdateSklad();
	MansionOwner();
}
public: LoadSkladFamily()
{
    for(new fam_id = 0; fam_id <= g_family_loaded; fam_id++)
	{
        new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
		if(houseid != -1)
		{
	        new type = GetHouseData(houseid, H_TYPE);
			DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
		}
		if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
        {
            DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, -2647.5042, 2188.7842, 1000.9975, -1, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, -2647.5042, 2188.7842, 1000.9975 + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
        }
		if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
        { 
            DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, -2647.5042, 2188.7842, 1000.9975, -1, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, -2647.5042, 2188.7842, 1000.9975 + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
        }
		if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
        {
            DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, -2647.5042, 2188.7842, 1000.9975, -1, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, -2647.5042, 2188.7842, 1000.9975 + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
        }
		if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
        {
            DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
			gangsklads[fam_id] = CreatePickup(1239, 23, -2647.5042, 2188.7842, 1000.9975, 7, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, -2647.5042, 2188.7842, 1000.9975 + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 7, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
		}
	}
}

public: UpdateGangSklad(fam_id)
{
	STRING_GLOBAL[0] = EOS;

    format
	(
		STRING_GLOBAL, sizeof STRING_GLOBAL,
		"{"#cGold"}Склад\n\
		{%06x}%s\n\
		\n\
		{FFFFFF}Наркотики: {FFA500}0 из 2000 г\n\
		{FFFFFF}Патроны: {FFA500}0 из 50000 шт\n\
		{FFFFFF}Материалы: {FFA500}0 из 6000 кг\n\
		{FFFFFF}Деньги: {2a52be}0 руб\n\
		\n\
		%s",

		family_colors[GetFamilyData(fam_id, F_COLOR)] >>> 8,
		GetFamilyData(fam_id, F_NAME),
		GetFamilyData(fam_id, F_SKLAD_ST) ? "{FF6600}Закрыт" : "{33AA33}Открыт"
	);
	UpdateDynamic3DTextLabelText(GetFamilyData(fam_id, F_SKLAD), 0xFFFF00FF, STRING_GLOBAL);
}

stock GetFamilyRang(fam_id, rang_id)
{
    new fmt_rank[32];

    switch(rang_id)
    {
        case 1: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
        case 2: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK2]);
        case 3: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK3]);
        case 4: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK4]);
        case 5: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK5]);
        case 6: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK6]);
        case 7: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK7]);
        case 8: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK8]);
        case 9: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK9]);
        case 10: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK10]);
        default: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
    }

    return fmt_rank;
}

stock ShowPayFamilyDialog(playerid)
{
    IntfDialogCallRemote
    (
        playerid, DIALOG_PAY_FAMILY, DIALOG_STYLE_INPUT,
        "Банк семьи",
        "{FFFFFF} Введите сумму которую хотите снять с банка семьи",
        "Снять", "Назад"
    );
    return 1;
}

stock ShowChangeRangDialog(playerid)
{
    new query[148],
        fam_id = GetPlayerData(playerid, P_FAMILY);

    string_dialog[0] = EOS;

    format(query, sizeof query, "{%s}1. %s\n", !strcmp(g_family[fam_id][F_RANK1], "Пусто") ? ("FFFFFF") : ("32a44b"), g_family[fam_id][F_RANK1]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}2. %s\n", !strcmp(g_family[fam_id][F_RANK2], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK2]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}3. %s\n", !strcmp(g_family[fam_id][F_RANK3], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK3]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}4. %s\n", !strcmp(g_family[fam_id][F_RANK4], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK4]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}5. %s\n", !strcmp(g_family[fam_id][F_RANK5], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK5]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}6. %s\n", !strcmp(g_family[fam_id][F_RANK6], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK6]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}7. %s\n", !strcmp(g_family[fam_id][F_RANK7], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK7]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}8. %s\n", !strcmp(g_family[fam_id][F_RANK8], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK8]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}9. %s\n", !strcmp(g_family[fam_id][F_RANK9], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK9]);
    strcat(string_dialog, query);
    format(query, sizeof query, "{%s}10. %s\n", !strcmp(g_family[fam_id][F_RANK10], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK10]);
    strcat(string_dialog, query);

    IntfDialogCallRemote
    (
        playerid, DIALOG_FAMILY_RANG, DIALOG_STYLE_LIST,
        "Выберите номер ранга",
        string_dialog,
        "Выбрать", "Отмена"
    );
}
stock ShowFamilyInfo(playerid)
{
	new fam_id = GetPlayerFamily(playerid);

    new query[144],name[25],
		Cache: result,
		rows;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE family='%d'", fam_id);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
	    new family_rank = cache_get_field_content_int(i, "family_rank");
	    if(family_rank == 10)
	    {
	    	cache_get_field_content(i, "name", name);
	    }
	}
	cache_delete(result);

	string_dialog[0] = EOS;
    format(string_dialog, sizeof string_dialog,
    "{ffffff}Название:{ffd700} \t\t\t%s\n"\
    "{ffffff}Основатель:{ffd700} \t\t\t%s\n"\
    "{ffffff}Дата создания:{ffd700} \t\t\t%02d.%02d.%d %02d:%02d:%02d\n"\
    "{ffffff}Состав:{ffd700} \t\t\t%d чел.\n\n"\
    "{ffffff}Участие в захвате бизнесов:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Возможность продавать наркотики:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Возможность продавать оружие:{9acd32} \t\t\tРазрешено\n"\
    "{ffffff}Расширенный склад:{9acd32} \t\t\tРазрешено\n\n"\
    "{faac58}Криминальное влияние{ffffff} - это рейтинг который выдается за\n"\
    "{ffffff}совершение криминальных действий, чем больше у вас влияния, тем больше\n"\
    "{ffffff}вы можете получить разрешений от вашей контролирующей мафии, но очки за\n"\
    "{ffffff}каждое действие хранятся всего неделю с момента их начисления\n\n"\
    "{faac58}Рейтинг банды{ffffff} - это криминальное влияние заработанное за все время",
    GetFamilyData(fam_id, F_NAME),
    name,
	GetFamilyData(fam_id, F_TIME_DAY),
    GetFamilyData(fam_id, F_TIME_MOUNTH),
    GetFamilyData(fam_id, F_TIME_YEAR),
    GetFamilyData(fam_id, F_TIME_HOUR),
    GetFamilyData(fam_id, F_TIME_MINUTE),
    GetFamilyData(fam_id, F_TIME_SECOND),
	rows);

    IntfDialogCallRemote(playerid, DIALOG_FAMILY_FFF, DIALOG_STYLE_MSGBOX, "Информация", string_dialog, "Назад", "");

}

CMD:close(playerid, params[])
{
	if(GetPlayerFamily(playerid) != 0 && GetFamilyData(GetPlayerFamily(playerid),F_GANG) == 1)
	{
	    if(GetPlayerRankFamily(playerid) < 9) return SendClientMessage(playerid, 0x999999FF, "Открывать или закрывать склад можно с 9-ого ранга");
	    new fam_id = GetPlayerFamily(playerid);
	    if(GetFamilyData(fam_id, F_SKLAD_ST) == 0) SetFamilyData(fam_id,F_SKLAD_ST,1);
		else SetFamilyData(fam_id,F_SKLAD_ST,0);
	    new query[60];
        format(query, sizeof query, "UPDATE family SET skladst=%d WHERE id=%d LIMIT 1",GetFamilyData(fam_id, F_SKLAD_ST), g_family[fam_id][F_SQL_ID]);
		mysql_query(mysql, query, false);


		format(query, sizeof query, "%s [%d] %s {66CC00}склад банды", GetPlayerNameEx(playerid),playerid,GetFamilyData(fam_id, F_SKLAD_ST) ? "{FF6600}закрыл" : "{33AA33}открыл");

		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			if(!IsPlayerLogged(i)) continue;
			if(GetPlayerData(i, P_FAMILY) == 0) continue;
			if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

			if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

			SendClientMessage(i, 0x66CC00FF, query);
		}

		CallLocalFunction("UpdateGangSklad", "i", fam_id);

	}

	return 1;
}

CMD:fwarn(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_WARN);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы выдавать семейное предупреждение.");

	if(IsPlayerAdminLevel(playerid) < 2) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fwarn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать мут заместителю/лидеру семьи");

	AddPlayerData(to_player, P_FWARN, +, 1);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] выдал предупреждение игроку %s [%d|3]. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), GetPlayerData(to_player, P_FWARN), reason);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_FWARN);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Вы были исключены из семьи. Причина: 3 варна.");

		format(fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET fwarn=0,family=0,family_rank=1 WHERE id=%d", uid);
		mysql_query(mysql, fmt_msg, false);

		SetPlayerData(to_player, P_FWARN, 0);
		SetPlayerData(to_player, P_FAMILY, 0);
	}

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET fwarn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:funwarn(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_UNWARN);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы снимать семейное предупреждение.");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

    if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять варн с самого себя");

	SetPlayerData(to_player, P_FWARN, 		0);
	UpdatePlayerDatabaseInt(to_player, "fwarn", 		0);

	new fmt_msg[128];

    format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] снял все предупреждения с игрока %s. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), reason);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	return 1;
}

CMD:fmute(playerid, params[])
{
	new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
	    rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_MUTE);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы выдавать бан семейного чата.");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fmute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать мут заместителю/лидеру семьи");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_FMUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] поставил затычку игроку %s на %d минут. Причина: %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), mute_time, reason);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	SetPlayerData(to_player, P_FMUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "fmute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата семейного чата: {CCCC00}/time");

	return 1;
}

CMD:funmute(playerid, params[])
{
    new fam_id = fam_id = GetPlayerData(playerid, P_FAMILY),
        rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

    new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_UNMUTE);

    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы снимать бан семейного чата.");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /funmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

    if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	else if(GetPlayerData(to_player, P_FMUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "{%06x}[F] %s %s[%d] снял затычку с игрока %s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player));

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}

	SetPlayerData(to_player, P_FMUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "fmute", 0);

	SendClientMessage(to_player, 0x32a44bFF, "Доступ в чат восстановлен");

	return 1;
}

CMD:finvite(playerid, params[]) callcmd::invite_gang(playerid, params);
CMD:invite_gang(playerid, params[])
{

	if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы приглашать людей в семью.");

	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /invite_gang [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в семье");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xFF6600FF, "У игрока есть предупреждение");
	if(1 <= GetPlayerTeamEx(to_player) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "Игрок состоит в организации");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FINVITE);
	return 1;
}

CMD:funinvite(playerid, params[])
{

	if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы увольнять людей с семьи.");

	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /funinvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	FUnInvite(playerid, to_player, reason);

	return 1;
}

cmd:family_rank(playerid, params[]) callcmd::frang(playerid, params);
CMD:frang(playerid, params[])
{
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	new rank = GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_RANG_GIVER);

	if(GetPlayerData(playerid, P_FAMILY_RANK) < rank) return SCM(playerid, COR_RED, "[Ошибка]:  У вас не достаточно нужный ранг в семье, чтобы изменять ранги в семье.");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /frang [id игрока] [ранг]");
	extract params -> new to_player, give_rang;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");
	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");
	if(1 > give_rang > 9) return SendClientMessage(playerid, 0xCECECEFF, "Ранг от 1 до 9");

	new fmt_msg[144];

	SetPlayerData(to_player, P_FAMILY_RANK, give_rang);
	format(fmt_msg, sizeof fmt_msg, "Ваш ранг в семье был изменен на %d (%s)", GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили ранг %s[%d] до %d (%s)",  GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET family_rank=%d WHERE id=%d", GetPlayerData(to_player, P_FAMILY_RANK), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:fm(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerFMuted(playerid) > 0) return SCM(playerid, -1, "У вас бан семейного чата");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fm [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "{FF9C18}<%s> %s[%d]: %s", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), GetPlayerNameEx(playerid), playerid, params);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0xFFFFFFFF, fmt_msg);
	}
	return 1;
}

CMD:fn(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(IsPlayerFMuted(playerid) > 0) return SCM(playerid, -1, "У вас бан семейного чата");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fn [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( {FF9C18}<%s> %s[%d]: %s {CCCC99}))", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), GetPlayerNameEx(playerid), playerid, params);

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0xCCCC99FF, fmt_msg);
	}
	return 1;
}

stock ShowChangeNameDialog(playerid)
{
	if(QueryPlayerDonationBalance(playerid) < 100) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 100");

	IntfDialogCallRemote
	(
		playerid, DIALOG_FAMILY_NCHANGE, DIALOG_STYLE_INPUT,
		"Смена названия семьи",
		"{FFFFFF}Введите название, которое Вы хотите {ffff00}установить:",
		"Далее", "Отмена"
	);

	return 1;
}

stock ShowFamilyRangSetMenu(playerid)
{
	new fam_id = GetPlayerData(playerid, P_FAMILY);

	string_dialog[0] = EOS;
 	format(string_dialog, sizeof string_dialog,
	"[1]  /finvite | Ранг доступа: %d+\n"\
	"[2]  /funinvite | Ранг доступа: %d+\n"\
	"[3]  /fmute | Ранг доступа: %d+\n"\
	"[4]  /funmute | Ранг доступа: %d+\n"\
	"[5]  /fwarn | Ранг доступа: %d+\n"\
	"[6]  /funwarn | Ранг доступа: %d+\n"\
	"[7]  /frang | Ранг доступа: %d+\n"\
	"[8] Брать деньги со склада | Ранг доступа: %d+\n"\
	"[9] Брать наркотики со склада | Ранг доступа: %d+\n"\
	"[10] Брать металл со склада | Ранг доступа: %d+\n"\
	"[11] Брать патроны со склада | Ранг доступа: %d+",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER),
	GetFamilyData(fam_id, F_TAKE_MONEY),
	GetFamilyData(fam_id, F_TAKE_DRUGS),
	GetFamilyData(fam_id, F_TAKE_METALL),
	GetFamilyData(fam_id, F_TAKE_AMMO));

	IntfDialogCallRemote(playerid, DIALOG_FAMILY_SETRANG_MENU, DIALOG_STYLE_LIST, "Настройка доступа", string_dialog, "Далее", "Закрыть");
}

stock ShowFamilyHelpCommands(playerid)
{
	new fam_id = GetPlayerData(playerid, P_FAMILY);

	string_dialog[0] = EOS;
 	format(string_dialog, sizeof string_dialog,
	"/finvite - принять игрока | Ранг доступа: %d+\n"\
	"/funinvite - выгнать игрока | Ранг доступа: %d+\n"\
    "/fmute - выдать бан чата| Ранг доступа: %d+\n"\
    "/funmute - снять бан чата | Ранг доступа: %d+\n"\
    "/fwarn - выдать предупреждение | Ранг доступа: %d+\n"\
    "/funwarn - снять предупреждение | Ранг доступа: %d+\n"\
	"/frang- сменить игроку ранг | Ранг доступа: %d+\n"\
	"/f - чат семьи\n"\
	"/fn- NonRP чат семьи\n"\
	"/fpark - припарковать сем транспорт\n"\
	"/sellfcar - продать сем транспорт",
	GetFamilyData(fam_id, F_RANG_INV),
	GetFamilyData(fam_id, F_RANG_UNINV),
	GetFamilyData(fam_id, F_RANG_MUTE),
	GetFamilyData(fam_id, F_RANG_UNMUTE),
	GetFamilyData(fam_id, F_RANG_WARN),
	GetFamilyData(fam_id, F_RANG_UNWARN),
	GetFamilyData(fam_id, F_RANG_GIVER));

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Команды семьи", string_dialog, "Закрыть", "");

}

stock DestroyFamilyCar(vehicleid)
{
	if(IsAFamilyCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM family_cars WHERE id=%d", GetFamilyCarData(index, F_SQL_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			g_family_car[index][F_OWNER_ID] = -1;
			g_family_car[index][F_SQL_ID] = 0;

			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);

			SetOwnableCarData(index, OC_CREATE, 0);
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [FamilyCars]: Ошибка удаления семейного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock GetFreeFamilyCarID()
{
    for(new idx; idx < sizeof g_ownable_car; idx ++)
    {
        if(GetOwnableCarData(idx, OC_CREATE)) continue;

        return idx;
    }

    return -1;
}

public: SaveFamilyCar(vehicleid)
{
	if(IsAFamilyCar(vehicleid))
	{

		new Float: veh_health;

		GetVehicleHealth(vehicleid, veh_health);

		new query[512];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		format
		(
			query, sizeof query,
			"UPDATE family_cars SET "\
			"color_1=%d,"\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"diski=%d,"\
			"gidra=%d,"\
			"nitro=%d,"\
			"mileage=%f,"\
			"iznos=%d,"\
			"gryaz=%f,"\
			"fuel=%f,"\
			"health=%f,"\
			"vinil=%d,"\
			"typenumber=%d,"\
			"number='%s',"\
			"region='%s'"\
			" WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetOwnableCarData(index, OC_DISKI),
			GetOwnableCarData(index, OC_GIDRA),
			GetOwnableCarData(index, OC_NITRO),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleData(vehicleid, V_GRYAZ),
			GetVehicleData(vehicleid, V_FUEL),
			veh_health,
			GetOwnableCarData(index, OC_VINIL),
			GetOwnableCarData(index, OC_NUMBERTYPE),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_REGION),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);


	    new fmt_str[148];

	    format(fmt_str, sizeof fmt_str, "UPDATE family_cars SET obves='%s', tonerinstall=%d WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_OBVES),GetOwnableCarData(index, OC_TONERINSTALL), GetOwnableCarData(index, OC_SQL_ID));
	    mysql_query(mysql, fmt_str, false);

		return mysql_errno();
	}
	return -1;
}
stock IsAFamilyCar(vehicleid)
{
    if(IsValidVehicleID(vehicleid))
    {
        if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
        {
            return 1;
        }
    }
    return 0;
}


stock ViewFamilyCar(playerid)
{
    new fmt_text[2640],
            id,
            Cache: result;

    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM family_cars WHERE owner_id='%d'", GetPlayerData(playerid, P_FAMILY));
    result = mysql_query(mysql, fmt_text, true);

    new rows = cache_num_rows();

    if(!rows)
        SendClientMessage(playerid, 0x999999FF, "У Вашей банды нет транспорта");

	else
	{
		new query[160],
			model_id;

		format(fmt_text, sizeof fmt_text, "");
		for(new i = 0; i < rows; i ++)
		{
			id = cache_get_field_content_int(i, "id");
			new rang = cache_get_field_content_int(i, "rang");
			model_id = cache_get_field_content_int(i, "model_id");

			format(query, sizeof query, "{FFFFFF}%d. %s {888888}[%d]<t>Ранг: %d\n", i + 1, GetVehicleInfo(model_id, VI_NAME), model_id + 400,rang);
			strcat(fmt_text, query);
			SetPlayerListitemValue(playerid, i, id);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_FAM_CAR_LIST, DIALOG_STYLE_LIST,
			"{0099FF}Выберите транспорт",
			fmt_text,
			"Выбрать", "Закрыть"
		);
	}
    cache_delete(result);
    return 1;
}

public: LoadFamilyCar(famid, oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ошибка в загрузке. Превышен лимит личного транспорта (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[55],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM family_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));

	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
    SetOwnableCarData(idx, OC_VINIL, 		cache_get_field_content_int(0, "vinil"));
	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));

	cache_get_field_content(0, "number", GetOwnableCarData(idx, OC_NUMBER), mysql, 30);
    cache_get_field_content(0, "region", g_ownable_car[idx][OC_REGION], mysql, 10);
	cache_get_field_content(0, "obves", g_ownable_car[idx][OC_OBVES], mysql, 333);
 	SetOwnableCarData(idx, OC_TONERINSTALL, 		cache_get_field_content_int(0, "tonerinstall"));
	SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(0, "diski"));
	SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(0, "gidra"));
	SetOwnableCarData(idx, OC_NITRO, 		cache_get_field_content_int(0, "nitro"));
	SetOwnableCarData(idx, OC_NUMBERTYPE, 		cache_get_field_content_int(0, "typenumber"));
	SetOwnableCarData(idx, OC_RANG,         cache_get_field_content_int(0, "rang"));
	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));

	// ----------------------------------------------------------------------------------------

	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_FAMILY_CAR,
		idx
	);
	if(GetOwnableCarData(idx, OC_TONERINSTALL) != 0)
	{
		
	}
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		SetVehicleNumberPlate(vehicleid, GetOwnableCarData(idx,OC_NUMBER));
		SetVehicleNumber(vehicleid, GetOwnableCarData(idx, OC_NUMBERTYPE), g_ownable_car[idx][OC_NUMBER], g_ownable_car[idx][OC_REGION]);
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage"));

		SetVehicleData(vehicleid, V_IZNOS, cache_get_field_content_int(0, "iznos"));
		SetVehicleData(vehicleid, V_GRYAZ, cache_get_field_content_float(0, "gryaz"));

		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(0, "fuel"));
		ChangeVehiclePaintjob(vehicleid, GetOwnableCarData(idx, OC_VINIL));

		new color = family_color_car[GetFamilyData(GetOwnableCarData(idx, OC_OWNER_ID), F_COLOR)][0];
		ChangeVehicleColor(vehicleid, color, color);

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());

		if(GetVehicleData(vehicleid, V_IZNOS) > 65)
		{
		    SetVehicleData(vehicleid, V_HEALTH, 500);
		}

	}

	cache_delete(result);

	return 1;
}

stock UnloadFamilyOwnableCar(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);
    SetOwnableCarData(index, OC_OWNER_ID, 0);
	SetOwnableCarData(index, OC_CREATE, 0);
	SaveFamilyCar(vehicleid);
	DestroyVehicleLabel(vehicleid);
	DestroyVehicle(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);


	return 1;
}

public: FamilyOwnableCarInit(famid, idcar)
{
	new index;
	new vehicleid = -1;

	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;

		index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FAMILY_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != famid) continue;
		break;
	}
}

stock ShowOwnableCarFamilyLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);
	if(GetPlayerData(playerid, P_FAMILY_RANK) == 10 || GetPlayerData(playerid, P_FAMILY_RANK) == 9)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_OWNABLE_CAR_FAMILY, DIALOG_STYLE_LIST,
			"{0099FF}Система управления транспортом",
			"1. Отметить транспорт на GPS {FF6600}(300 рублей)\n"\
			"2. Доставить траспорт на парковку {FF6600}(1000 рублей)\n"\
			"3. Выгрузить транспорт\n"\
			"4. Изменить ранг-доступ транспорта",
			"Выбрать", "Закрыть"
		);
  	}
  	else
  	{
 		IntfDialogCallRemote
		(
			playerid, DIALOG_OWNABLE_CAR_FAMILY, DIALOG_STYLE_LIST,
			"{0099FF}Система управления транспортом",
			"1. Отметить транспорт на GPS {FF6600}(300 руб)\n"\
			"2. Доставить траспорт на парковку {FF6600}(1000 руб)",
			"Выбрать", "Закрыть"
		);
  	}

}

stock FamilyLog(playerid = INVALID_PLAYER_ID, desc[])
{
	new query_string[512];
	mysql_format(mysql, query_string, sizeof query_string, "INSERT INTO family_log (fam_id, text) VALUES (%d, '%s')",
	GetPlayerFam(playerid), desc);
	mysql_query(mysql, query_string, false);

	return 1;
}

stock GetPlayerFamilyRang(playerid)
{
	new rang,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT famrank FROM accounts_canvasdev WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		rang = cache_get_row_int(0, 0);

	cache_delete(result);

	return rang;
}

stock GetFamilyCountUsers(f_id)
{
	new count,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE pfam=%d", f_id);
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock GetPlayerFamilyRank(playerid)
{
	new family = GetPlayerFam(playerid);
	return g_family_rank[family][g_player[playerid][P_FAMRANK] - 1];
}


stock SendFamilyMessage(playerid, message[])
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i) || GetPlayerFamily(i) != GetPlayerFamily(playerid)) continue;

		new fmt_str[144];

		format(fmt_str, sizeof fmt_str, "{%s}<%s> %s [%d]: %s", g_family[GetPlayerFamily(playerid)][F_COLOR], g_family[GetPlayerFamily(playerid)][F_NAME], GetPlayerNameEx(playerid), playerid, message);
		SendClientMessage(i, 0xFFFFFFFF, fmt_str);
	}
}

CMD:fmenu(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	if(g_family[GetPlayerFamily(playerid)][F_GANG] == 0)
	{
	    if(GetPlayerData(playerid, P_FAMILY_RANK) != 10)
	    {
			IntfDialogCallRemote
			(
				playerid, DIALOG_FAMILY_MENU, DIALOG_STYLE_LIST,
				"{FFCD00}Меню семьи",
				"1. Состав в игре<n>2. Полный состав<n>3. Информация<n>4. Бюджет<n>",
				"Выбрать", "Закрыть"
			);
		}
		else if(GetPlayerData(playerid, P_FAMILY_RANK) == 10)
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_FAMILY_MENU, DIALOG_STYLE_LIST,
				"{FFCD00}Меню семьи",
				"1. Состав в игре<n>2. Полный состав<n>3. Информация<n>4. Бюджет<n>", //5. Создать банду<n>
				"Выбрать", "Закрыть"
			);
		}
	}
	else
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_GANG_MENU, DIALOG_STYLE_LIST,
			"{FFCD00}Меню банды",
			"1. Состав в игре<n>2. Полный состав<n>3. Информация<n>4. Цвет<n>5. Бизнесы<n>6. Транспорт<n>7. История склада<n>8. Настройка рангов",
			"Выбрать", "Закрыть"
		);
	}
	return 1;
}

CMD:family_leave(playerid, params[])
{
    if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
    if(GetPlayerData(playerid, P_FAMILY_RANK) == 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не можете покинуть семью, так как вы ее лидер!");
    new fmt_text[215];
    format
    (
        fmt_text, sizeof fmt_text,
        "{FFFFFF}Вы состоите в семье.\n"\
        "Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
        "Вы уверены, что хотите покинуть семью?"
    );
    IntfDialogCallRemote(playerid, DIALOG_FAMILY_LEAVE, DIALOG_STYLE_MSGBOX, "Предупреждение", fmt_text, "Да", "Нет");
    return 1;
}
stock PlayerFamilyCreate(playerid)
{
	if(GetPlayerData(playerid, P_LEVEL) < 3) return SendClientMessage(playerid, 0xCECECEFF, "* У вас должен быть 3 лвл");
	if(GetPlayerData(playerid, P_FAMILY) != 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы уже состоите в семье");
    IntfDialogCallRemote
    (
        playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
        "Создание семьи",
        "{999999}- Цена: 50.000.000 рублей<n>\
		{999999}- Только русские и английские символы<n>\
		{999999}- Используйте от 6 до 36 символов<n>\
		{FFFFFF}Введите название Вашей семьи",
        "Создать", "Отмена"
    );
	return 1;
}

public: Gang_OnPlayerCreate(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_GANG_MAFIA, DIALOG_STYLE_LIST,
		"Выберите контролирующую мафию",
		"1. Западная мафия\n"\
		"2. Центральная мафия\n"\
		"3. Северная мафия",
		"Выбрать", ""
	);
}
public: ColorPicker_OnSelect(playerid,list_id)
{
	if(GetPVarInt(playerid,"colortype") == 1)
	{
	    if(VerifyIntString(QueryPlayerBalance(playerid), 50000000))
	    {
			new query[148],
				Cache: result,
				biz_id;

			mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, query, true);

			new rows = cache_num_rows();

			if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

			for(new i = 0; i < rows; i ++)
			{
				biz_id = cache_get_field_content_int(i, "id");
			}
			cache_delete(result);

	        ModifyCashBalance(playerid, -50000000,"создание банды",true,true);
		    new fam_id = GetPlayerData(playerid, P_FAMILY),
				fmt_text[556];

		    SetFamilyData(fam_id, F_COLOR, list_id);
	        SetFamilyData(fam_id, F_GANG, 1);
	        SetFamilyData(fam_id, F_FAMILY_CARS, 10);
			SetFamilyData(fam_id, F_HOUSE_ID, biz_id);

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
				{
					DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
					g_player[i][P_FAM_LABEL] = Text3D: -1;
					SetPlayerColorEx(i, family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)]);
					new text_str[144];
					format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(i)][F_NAME]);
					g_player[i][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, i, INVALID_VEHICLE_ID, 1);
				}
			}
	        new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
	        new type = GetHouseData(houseid, H_TYPE);
			DestroyPickup(gangsklads[fam_id]);
			if(IsValidDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD))) DestroyDynamic3DTextLabel(GetFamilyData(fam_id, F_SKLAD));
	        gangsklads[fam_id] = CreatePickup(1239, 23, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_SKLAD);

			SetFamilyData(fam_id, F_SKLAD, CreateDynamic3DTextLabel("", 0xFFFF00FF, GetHouseTypeInfo(type, HT_SKLAD_POS_X), GetHouseTypeInfo(type, HT_SKLAD_POS_Y), GetHouseTypeInfo(type, HT_SKLAD_POS_Z) + 1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			CallLocalFunction("UpdateGangSklad", "i", fam_id);
			format(fmt_text, sizeof fmt_text, "<%s> Ваша семья стала бандой! База находится в доме №%d", GetFamilyData(fam_id, F_NAME), GetFamilyData(fam_id, F_HOUSE_ID));
			SendClientMessage(playerid, 0xFF9C18FF, fmt_text);
		    SetPVarInt(playerid,"colortype",0);
			
			if(GetPVarInt(playerid,"MafiaType") == 1)
	        {
				SetFamilyData(fam_id, F_MAFIA, 1);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d',gang=1,house_id=%d,mafia=1,family_cars=10 WHERE id='%d' LIMIT 1", list_id,biz_id, fam_id);
			    mysql_query(mysql, fmt_text, false);
				SetPVarInt(playerid,"MafiaType",0);
			}
			if(GetPVarInt(playerid,"MafiaType") == 2)
	        {
				SetFamilyData(fam_id, F_MAFIA, 2);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d',gang=1,house_id=%d,mafia=2,family_cars=10 WHERE id='%d' LIMIT 1", list_id,biz_id, fam_id);
			    mysql_query(mysql, fmt_text, false);
				SetPVarInt(playerid,"MafiaType",0);
			}
			if(GetPVarInt(playerid,"MafiaType") == 3)
	        {
				SetFamilyData(fam_id, F_MAFIA, 3);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d',gang=1,house_id=%d,mafia=3,family_cars=10 WHERE id='%d' LIMIT 1", list_id,biz_id, fam_id);
			    mysql_query(mysql, fmt_text, false);
				SetPVarInt(playerid,"MafiaType",0);
			}
		}
		else SendClientMessage(playerid, 0xFF9C18FF, "Недостаточно средств!");
	}
	if(GetPVarInt(playerid,"colortype") == 2)
	{
	    new fam_id = GetPlayerData(playerid, P_FAMILY),
			fmt_text[556];

	    SetFamilyData(fam_id, F_COLOR, list_id);

        mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d' WHERE id='%d' LIMIT 1", list_id, fam_id);
		mysql_query(mysql, fmt_text, false);
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			if(GetPlayerData(i, P_FAMILY) == GetPlayerData(playerid, P_FAMILY))
			{
				DestroyDynamic3DTextLabel(g_player[i][P_FAM_LABEL]);
				g_player[i][P_FAM_LABEL] = Text3D: -1;
				SetPlayerColorEx(i, family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)]);
				new text_str[144];
				format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(i, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(i)][F_NAME]);
				g_player[i][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, i, INVALID_VEHICLE_ID, 1);
			}
		}
		format(fmt_text, sizeof fmt_text, "Вы успешно изменили цвет семьи {ffff00}%s {1E90FF}на {%06x}%s", GetFamilyData(fam_id, F_NAME), family_colors[list_id] >>> 8, family_colors_name[list_id]);
		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
		SetPVarInt(playerid,"colortype",0);
	}
	return true;
}

stock GetFamilyCars(fam_id)
{
	new count, query[70], Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM family_cars WHERE owner_id='%d'", fam_id);
	result = mysql_query(mysql, query, true);
	count = cache_num_rows();
	cache_delete(result);
	return count;
}
CMD:gang_car(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не состоите в банде");
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вам недоступна данная функция");
	new houseid = g_family[GetPlayerFamily(playerid)][F_HOUSE_ID];
	if(houseid != -1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 40.0, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z)))
	    {
			if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
			{
			    new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			    new vehicleid2 = GetFamilyOwnableCarLast(playerid,GetPlayerData(playerid, P_FAMILY));
				new vehicleid = GetPlayerVehicleID(playerid);
    			if(vehicleid == vehicleid1 && vehicleid1 != INVALID_VEHICLE_ID)
				{
				    new fam_id = GetPlayerData(playerid, P_FAMILY);
				    if(GetFamilyCars(fam_id) >= GetFamilyData(fam_id, F_FAMILY_CARS)) return SendClientMessage(playerid, 0xCECECEFF, "* У Вашей банды максимальное кол-во тс.");

				    IntfDialogCallRemote(playerid, DIALOG_GANG_CAR_ADD, DIALOG_STYLE_MSGBOX, "{FFCD00}Подтверждение", "Вы действительно хотите использовать данный транспорт для своей банды?", "Да", "Нет");
				}
				else if(vehicleid == vehicleid2 && vehicleid2 != INVALID_VEHICLE_ID)
				{
				    IntfDialogCallRemote(playerid, DIALOG_GANG_CAR_DELL, DIALOG_STYLE_MSGBOX, "{FFCD00}Подтверждение", "Вы действительно хотите забрать данный транспорт со своей банды?", "Да", "Нет");
				}
		 	}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "* Вы должны находиться на базе банды");
	}
	return 1;
}
stock PlayerGangCreate(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не состоите в семье");
    if(1 <= GetPlayerTeamEx(playerid) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "* Для того что бы создать банду вам необходимо уволиться из организации");
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вам недоступна данная функция");
    if(GetPlayerData(playerid, P_NAKOLKA) < 6) return SendClientMessage(playerid, 0xCECECEFF, "* Вы должны иметь ранг-наколку 'Пахан' или выше");
    if(GetPlayerHouse(playerid) == -1) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет дома.");
	if(g_family[GetPlayerFamily(playerid)][F_GANG] != 0) return SendClientMessage(playerid, 0xCECECEFF, "У Вас есть уже банда!");

	CEF_CREATE(playerid, 1, 4, "GangCreate");
	CEF_CREATE(playerid, 1, 2, "interface('GangCreate').price = 50000000");
 	return true;
}
CMD:gang_spawn(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не состоите в семье");
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вам недоступна данная функция");
    if(GetPlayerData(playerid, P_NAKOLKA) < 6) return SendClientMessage(playerid, 0xCECECEFF, "* Вы должны иметь ранг-наколку 'Пахан' или выше");
   	
	new fmt_text[2640],
		Cache: result,
		biz_id;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

	new query[256];

	format(fmt_text, sizeof fmt_text, "");
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");

		if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
		else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);

		strcat(fmt_text, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_OWNABLE_HOME_FAMILY, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
 	return 1;
}
CMD:gang_create(playerid)
{
	IntfDialogCallRemote
	(
	    playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
	    "{FFFF00}Банды теперь нужно создавать на базах Мафии",
 		"\t-{ffffff} Русская Мафия находится около Гарели и Анашана\n\
	    \t-{ffffff} Японская Мафия находится на{ffcc00} Барвихе{ffffff}\n\
		\t-{ffffff} Итальянская Мафия находится в Лыткарино",
		"Закрыть", ""
	);
	return true;
}
CMD:family_delete(playerid)
{
    if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не состоите в семье");
	if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "* Вам недоступна данная функция");
	IntfDialogCallRemote(playerid, DIALOG_FAMILY_DELL, DIALOG_STYLE_MSGBOX, "{FFCD00}Подтверждение", "Вы действительно хотите удалить свою семью?", "Да", "Нет");
	return 1;
}
new kapt;
CMD:bizwar(playerid)
{
	if(GetPlayerFamily(playerid) != 0 && GetPlayerRankFamily(playerid) >= 8)
	{
	    if(kapt == 1) return SendClientMessage(playerid, 0xCECECEFF, "* В данный момент идет борьба за бизнес!");
		new businessid = GetNearestBusiness(playerid, 4.0);
		if(businessid != -1)
		{
		    if(GetFamilyFind(GetPlayerFamily(playerid)) < 3) return SendClientMessage(playerid, 0xCECECEFF, "* Для захвата бизнеса, у вашей банды должно быть 3 человека в сети!");
		    if(g_family[GetPlayerFamily(playerid)][F_GANG] == 0) return SendClientMessage(playerid, 0xCECECEFF, "* У вас нет банды, чтобы ее создать подъедьте к одному из особняков мафии");
		    if(g_family[GetPlayerFamily(playerid)][F_KD] == 1) return SendClientMessage(playerid, 0xCECECEFF, "* Недавно у вашей банды был захват бизнеса!");
		    if(GetBusinessData(businessid, B_OWNER_ID) == 0) return SendClientMessage(playerid, 0xCECECEFF, "* Данный бизнес не куплен игроком!");
			if(GetBusinessData(businessid, B_GANG) == GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не можете захватить свой бизнес!");

			if(GetBusinessData(businessid, B_GANG) == 0)
			{
				SetBusinessData(businessid, B_GANG, GetPlayerFamily(playerid));
	            CallLocalFunction("UpdateBusinessLabel", "i", businessid);
				new query[64 + 1];
				format(query, sizeof query, "%s захватили новый бизнес.",g_family[GetPlayerFamily(playerid)][F_NAME]);
				SendFamilysMessage(query);
				format(query, sizeof query, "UPDATE business SET gang=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_GANG), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				SetFamilyData(GetPlayerFamily(playerid), F_KD,1);
				SetTimerEx("FamilyKaptKd", 1800000, false, "i", GetPlayerFamily(playerid));
			}
			else
			{
			    if(GetFamilyFind(GetBusinessData(businessid, B_GANG)) <= 3) return SendClientMessage(playerid, 0xCECECEFF, "* Для захвата бизнеса, у банды бизнеса должно быть 3 человека в сети!");
			    if(g_family[GetBusinessData(businessid, B_GANG)][F_KD] == 1) return SendClientMessage(playerid, 0xCECECEFF, "* У банды у которой, Вы хотите захватить бизнес недавно был захват!");
			    kapt = 1;
				g_war[W_BIZ] = businessid;
				StartWar(playerid, businessid, GetPlayerFamily(playerid), GetBusinessData(businessid, B_GANG));
			}
		}
	}
	return 1;
}
stock StartWar(playerid, businessid, attack_team, protect_team)
{
	if(g_war[W_STATUS]) return 0;

	new fmt_text[128];
	format(fmt_text, sizeof fmt_text, "%s начали захват бизнеса у %s",
	g_family[attack_team][F_NAME], g_family[protect_team][F_NAME]);

	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0)
		{
			STRING_GLOBAL[0] = EOS;
			SetPlayerData(i,P_KILL_CAPT,0);
		    CEF_CREATE(i, 1, 2, "openInterface('Capture')");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.name = '%s'", g_family[attack_team][F_NAME]);
			CEF_CREATE(i, 1, 2, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.name = '%s'", g_family[protect_team][F_NAME]);
			CEF_CREATE(i, 1, 2, STRING_GLOBAL);
		}
	}
	SendFamilysMessage(fmt_text);

	g_war[W_STATUS] = true;
	new str[144];
	format(str, sizeof(str), "%s [%d] инициировал захват бизнеса. У вас есть 10 минут для захвата бизнеса", GetPlayerNameEx(playerid), playerid);
	foreach(new i: Player)
	{

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0xFFFFFFFF, str);
	}
	foreach(new idx: Player)
	{
		if(GetPlayerData(idx, P_FAMILY) == g_war[W_ATTACK_TEAM]) continue;

		EnablePlayerGPS(idx, 56, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Место захвата отмечено у вас на карте жёлтым кружочком");
	}
	foreach(new idx: Player)
	{
		if(GetPlayerData(idx, P_FAMILY) == g_war[W_PROTECT_TEAM]) continue;

		EnablePlayerGPS(idx, 56, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Место захвата отмечено у вас на карте жёлтым кружочком");
	}
	GangZoneFlashForAll(zone_war_z[businessid], gang_zone_colors[3]);

	g_war[W_ATTACK_TEAM] = attack_team;
	g_war[W_PROTECT_TEAM] = protect_team;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Аттака: %d Отпор:%d", g_war[W_ATTACK_TEAM], g_war[W_PROTECT_TEAM]);
	SCM(playerid, -1, STRING_GLOBAL);

	g_war[W_ATTACKER_KILLS] = 0;
	g_war[W_PROTECTOR_KILLS] = 0;

	g_war[W_TIME] = 600;

	UpdateCaptureTextDraw();
	return 1;
}
stock GetFamilyFind(fam_id)
{
	new find;
    foreach(new i: Player)
	{
		if(GetPlayerFamily(i) == fam_id)
		{
		    find++;
		}
	}
	return find;
}
stock SendFamilysMessage(message[])
{
	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0)
		{

			new fmt_str[144];

			format(fmt_str, sizeof fmt_str, "%s", message);
			SendClientMessage(i, COLOR_LIGHTRED, fmt_str);
		}
	}
}
stock EndWar()
{
	if(!g_war[W_STATUS]) return 0;

	new fmt_text[90],
		attack_team = g_war[W_ATTACK_TEAM],
		protect_team = g_war[W_PROTECT_TEAM];

	if(g_war[W_ATTACKER_KILLS] > g_war[W_PROTECTOR_KILLS] || (g_war[W_ATTACKER_KILLS] == 0 && g_war[W_PROTECTOR_KILLS] == 0))
		format(fmt_text, sizeof fmt_text, "%s захватили бизнеса у %s", g_family[attack_team][F_NAME], g_family[protect_team][F_NAME]);

	else
		format(fmt_text, sizeof fmt_text, "Попытка %s захватить бизнеса у %s провалилась", g_family[attack_team][F_NAME],g_family[protect_team][F_NAME]);

	SendFamilysMessage(fmt_text);

	GangZoneStopFlashForAll(zone_war_z[g_war[W_BIZ]]);

	if(g_war[W_ATTACKER_KILLS] > g_war[W_PROTECTOR_KILLS] || (g_war[W_ATTACKER_KILLS] == 0 && g_war[W_PROTECTOR_KILLS] == 0))
	{
		new biz_id = g_war[W_BIZ];
		SetBusinessData(biz_id, B_GANG, g_war[W_ATTACK_TEAM]);
		STRING_GLOBAL[0] = EOS;
		mysql_format(mysql, STRING_GLOBAL, sizeof STRING_GLOBAL, "UPDATE business SET gang = %d WHERE id = %d", GetBusinessData(biz_id, B_GANG), GetBusinessData(biz_id, B_SQL_ID));
		mysql_query(mysql, STRING_GLOBAL, false);
	}
	CallLocalFunction("UpdateBusinessLabel", "i", g_war[W_BIZ]);
	g_war[W_STATUS] = false;
    kapt = 0;
	SetFamilyData(attack_team, F_KD,1);
	SetFamilyData(protect_team, F_KD,1);
	SetTimerEx("FamilyKaptKd", 1800000, false, "i", attack_team);
	SetTimerEx("FamilyKaptKd", 1800000, false, "i", protect_team);
	g_war[W_ATTACK_TEAM] = -1;
	g_war[W_PROTECT_TEAM] = -1;
	g_war[W_ATTACKER_KILLS] = 0;
	g_war[W_PROTECTOR_KILLS] = 0;
	g_war[W_BIZ] = -1;

	g_war[W_TIME] = 0;
	foreach(new i: Player)
	{
		if(GetPlayerFamily(i) != 0) continue; CEF_HIDE(i, "Capture");
	}
	foreach(new idx : Player) RemovePlayerMapIcon(idx, 97);
	return 1;
}
public: FamilyKaptKd(fam_id)
{
    SetFamilyData(fam_id, F_KD,0);
}
stock GetPlayerFamilyHouse(playerid)
{
	new fam_id = GetPlayerFamily(playerid);
	if(GetFamilyData(fam_id,F_HOUSE_ID) != -1)
	{
	    return GetFamilyData(fam_id,F_HOUSE_ID);
	}
	return 0;
}
stock ShowInfoGangSklad(playerid)
{
    page_fam[playerid] = 1;
    new fmt_text[148],id,Cache: result;

    mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM family_log WHERE fam_id='%d'", GetPlayerData(playerid, P_FAMILY));
    result = mysql_query(mysql, fmt_text, true);

    new rows = cache_num_rows();
	new query[160], text[144], name[64];

	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog, "");

	for(new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "text", text);
		cache_get_field_content(i, "name", name);

		format(query, sizeof query, "{FFFFFF}%d. %s \t %s\n", i + 1, name, text);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, id);
	}

	IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"{0099FF}История склада",string_dialog,"","Закрыть");
	
    cache_delete(result);
    return 1;
}
stock GiveFamilyLog(playerid, fam_id, text[])
{
	new querys[333];
	mysql_format(mysql, querys, sizeof querys, "INSERT INTO family_log (fam_id, name, text) VALUES (%d,'%s','%s')", fam_id, GetPlayerNameEx(playerid), text);
	mysql_query(mysql, querys, false);
	return 1;
}

CMD:setbizwar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setbizwar [номер бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

    new query[244];
	format(query, sizeof query, "UPDATE business SET `gang` = '0' WHERE `id` = '%d'", GetBusinessData(biz_id, B_SQL_ID));
	mysql_query(mysql, query, false);
	SetBusinessData(biz_id, B_GANG, 0);
	CallLocalFunction("UpdateBusinessLabel", "i", biz_id);
	SendClientMessage(playerid, 0xCECECEFF, "Вы убрали крышу у данного биза.");
	return 1;
}
stock SetPlayerGravity(playerid, Float: gravity)
{
	if(!IsPlayerConnected(playerid)) return false;

	SPG_PlayerGravity[playerid] = gravity;

	new BitStream:spg_bs = BS_New();

	BS_WriteValue (
		spg_bs,
		PR_FLOAT, gravity
	);

	PR_SendRPC(spg_bs, playerid, 0x02);
	BS_Delete(spg_bs);

	return true;
}

stock SendCreateNPC(playerid, entityid, modelid, Float:x, Float:y, Float:z, Float:rotZ)
{
    new BitStream:bs = BS_New();

    BS_WriteValue(
        bs,
        PR_UINT32, entityid,
        PR_UINT32, modelid,
        PR_FLOAT, x, 
        PR_FLOAT, y,       
        PR_FLOAT, z,
        PR_FLOAT, rotZ,
        PR_FLOAT, 100.0,
        PR_FLOAT, 100.0,
        PR_FLOAT, 0.0,
        PR_FLOAT, 0.0,
        PR_FLOAT, 0.0
    );

    PR_SendRPC(bs, playerid, 221);
    BS_Delete(bs);
	return true;
}

stock SendMoveNPC(playerid, entityid, Float:x, Float:y, Float:z, Float:param1, Float:param2)
{
    new BitStream:bs = BS_New();

    BS_WriteValue(
        bs,
        PR_UINT32, entityid,
        PR_FLOAT, x,
        PR_FLOAT, y,
        PR_FLOAT, z,
        PR_UINT32, 0,
        PR_FLOAT, param1,
        PR_FLOAT, param2
    );

    PR_SendRPC(bs, playerid, 225);
    BS_Delete(bs);
    return true;
}

stock SendDeleteNPC(playerid, id)
{
	new BitStream:bs = BS_New();

    BS_WriteValue(bs, PR_UINT32, id);

    PR_SendRPC(bs, playerid, 222);
    BS_Delete(bs);
    return true;
}

stock SendPacket_Voice_Table(playerid)
{
    new BitStream:bsn = BS_New();

    BS_WriteValue(bsn, PR_UINT8, PACKET);
    BS_WriteValue(bsn, PR_UINT16, 3);
    BS_WriteValue(bsn, PR_UINT32, playerid);
	BS_WriteValue(bsn, PR_UINT32, 1);
	
    PR_SendPacketToPlayerStream(bsn, playerid);
    BS_Delete(bsn);
}

stock SendVoice(playerid, bytes)
{
	new
		BitStream:bsn = BS_New();  

	BS_WriteValue(bsn, PR_UINT8, 215);
	BS_WriteValue(bsn, PR_UINT16, 3);
	BS_WriteValue(bsn, PR_UINT32, playerid);
	BS_WriteValue(bsn, PR_UINT32, bytes);
	BS_WriteValue(bsn, PR_UINT8, 123);
	BS_WriteValue(bsn, PR_UINT8, 133);
	
	PR_SendPacket(bsn, playerid);

	PR_SendPacketToPlayerStream(bsn, playerid);
	
	BS_Delete(bsn);
}

CMD:sendvolume(playerid, params[])
{
	extract params -> new volume;

	new
		BitStream:bsn = BS_New();

	BS_WriteValue(bsn, PR_UINT8, 215);
	BS_WriteValue(bsn, PR_UINT16, 6);
	BS_WriteValue(bsn, PR_UINT8, 100);

	PR_SendPacket(bsn, playerid);
	BS_Delete(bsn);
}
stock SendVolumeVoice(forplayer, index, idx)
{
 	new
		BitStream:bsn = BS_New();

	BS_WriteValue(bsn, PR_UINT8, 215);
	BS_WriteValue(bsn, PR_UINT16, 4);
	BS_WriteValue(bsn, PR_UINT32, forplayer);
	BS_WriteValue(bsn, PR_UINT16, index);
	BS_WriteValue(bsn, PR_UINT16, idx);
	PR_SendPacket(bsn, forplayer);
	//printf("player %d index %d idx %d",forplayer,index,idx);
	PR_SendPacketToPlayerStream(bsn, forplayer);
	BS_Delete(bsn);
}

public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
	switch(packetid) {
		case PACKET: {

			new bytes;

			BS_GetNumberOfBytesUsed(bs, bytes);

			if(bytes < 6) {
			return 0;
			}

			new
			style, types;

			BS_IgnoreBits(bs, 8);
			BS_ReadUint16(bs, style);
			BS_ReadUint32(bs, types);
			
			if(style == 29)
			{
				PACKET_215(playerid, 29, types);
			}
			if(style == 1)
			{
				new hardware[250], 
					test[250], 
						xz;

				BS_ReadUint8(bs, xz);
				BS_ReadString32(bs, hardware);
				BS_ReadString32(bs, test);

				format(g_player[playerid][P_HARDWARE_ID_TEMP], 250, "%s", hardware);

				GetHardwareIDBanned(playerid, hardware);
			}

			if(style == 2) {

				new call[64 + 1];

				BS_ReadString32(bs, call);

	            if(strcmp(call, "EndedInitializeBrowser") == 0) {

					#if defined EndedInitializeBrowser
						EndedInitializeBrowser(playerid);
					#endif
				}else if(strcmp(call, "SDSY_OnPlayerAccept") == 0) {

                    new event;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, event);

					#if defined SDSY_OnPlayerAccept
						SDSY_OnPlayerAccept(playerid, event);
					#endif
				}else if(strcmp(call, "ClickPlayerContainerItemBox") == 0) {

					new
						event;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, event);


					#if defined ClickPlayerContainerItemBox
						ClickPlayerContainerItemBox(playerid, event);
					#endif
				} else if(strcmp(call, "OnContainersChangeBet") == 0) {

	                new
						bet;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, bet);

					#if defined OnContainersChangeBet
						OnContainersChangeBet(playerid, bet);
					#endif
				} else if(strcmp(call, "OnContainersCloseBet") == 0) {

					#if defined OnContainersCloseBet
						OnContainersCloseBet(playerid);
					#endif
				/*} else if(strcmp(call, "OnVoiceChatStartRecord") == 0) {

					#if defined OnVoiceChatStartRecord
						OnVoiceChatStartRecord(playerid);
					#endif
				} else if(strcmp(call, "OnVoiceChatEndRecord") == 0) {

					#if defined OnVoiceChatEndRecord
						OnVoiceChatEndRecord(playerid);
					#endif*/
				} else if(strcmp(call, "PlayerSetting_OnVoiceChange") == 0) {
					new volume;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, volume);
					#if defined PlayerSetting_OnVoiceChange
						PlayerSetting_OnVoiceChange(playerid, volume);
					#endif
                } else if(strcmp(call, "OnInteractionsClick") == 0) {
					new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					#if defined OnInteractionsClick
						OnInteractionsClick(playerid, event);
					#endif
				} else if(strcmp(call, "WeaponAssemb_OnPlayerEnd") == 0) {

					#if defined WeaponAssemb_OnPlayerEnd
						WeaponAssemb_OnPlayerEnd(playerid);
					#endif
                } else if(strcmp(call, "WeaponAssemb_OnCloseInterface") == 0) {

					#if defined WeaponAssemb_OnCloseInterface
						WeaponAssemb_OnCloseInterface(playerid);
					#endif
                } else if(strcmp(call, "WeaponAssemb_OnJoinComponent") == 0) {

					#if defined WeaponAssemb_OnJoinComponent
						WeaponAssemb_OnJoinComponent(playerid);
					#endif
				}else if(strcmp(call, "Lottery_OnShowResult") == 0) {

					#if defined Lottery_OnShowResult
						Lottery_OnShowResult(playerid);
					#endif
                }else if(strcmp(call, "Lottery_OnAcceptResult") == 0) {

					#if defined Lottery_OnAcceptResult
						Lottery_OnAcceptResult(playerid);
					#endif
				}else if(strcmp(call, "HackGame_OnPlayerChange") == 0) {

					#if defined HackGame_OnPlayerChange
						HackGame_OnPlayerChange(playerid);
					#endif
				}else if(strcmp(call, "HackGame_OnCloseInterface") == 0) {

					#if defined HackGame_OnCloseInterface
						HackGame_OnCloseInterface(playerid);
					#endif
				}else if(strcmp(call, "CookDrugs_OnCompleteTask") == 0) {

					#if defined CookDrugs_OnCompleteTask
						CookDrugs_OnCompleteTask(playerid);
					#endif
				} else if(strcmp(call, "DCrs_OnPlayerClose") == 0) {
					#if defined DCrs_OnPlayerClose
						DCrs_OnPlayerClose(playerid);
					#endif

				} else if(strcmp(call, "DCrs_OnPlayerBuy") == 0) {
   					#if defined DCrs_OnPlayerBuy
						DCrs_OnPlayerBuy(playerid);
					#endif
                } else if(strcmp(call, "DCrs_OnPlayerTestDrive") == 0) {
   					#if defined DCrs_OnPlayerTestDrive
						DCrs_OnPlayerTestDrive(playerid);
					#endif
                } else if(strcmp(call, "OnMiniGamePlayerComplete") == 0) {
   					#if defined OnMiniGamePlayerComplete
						OnMiniGamePlayerComplete(playerid);
					#endif
                }else if(strcmp(call, "Market_OnSelect") == 0) {
	                new item;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, item);

					#if defined Market_OnSelect
						Market_OnSelect(playerid, item);
					#endif
                } else if(strcmp(call, "PlayerImprove_OnPlayerBuy") == 0) {
			    	new moderfour;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, moderfour);

   					#if defined PlayerImprove_OnPlayerBuy
						PlayerImprove_OnPlayerBuy(playerid, moderfour);
					#endif
                } else if(strcmp(call, "PlayerSetting_OnPlayerButton") == 0) {
			    	new number_call_event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, number_call_event);

   					#if defined PlayerSetting_OnPlayerButton
						PlayerSetting_OnPlayerButton(playerid, number_call_event);
					#endif
				} else if (strcmp(call, "PlayerSetting_OnPlayerRequest") == 0) {

					new
						event, status;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);

					#if defined PlayerSetting_OnPlayerRequest
						PlayerSetting_OnPlayerRequest(playerid, event, status);
					#endif
				} else if(strcmp(call, "CarsKey_OnPlayerRequst") == 0) {

	                new
						moderfourkey;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, moderfourkey);

					#if defined CarsKey_OnPlayerRequst
						CarsKey_OnPlayerRequst(playerid, moderfourkey);
					#endif
                }else if(strcmp(call, "OnPlayerSlotMachineButton") == 0) {
					new event, betPlus, betMinus;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, betPlus);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, betMinus);

					#if defined OnPlayerSlotMachineButton
						OnPlayerSlotMachineButton(playerid, event, betPlus, betMinus);
					#endif
				}else if(strcmp(call, "JailCamera_OnCameraChange") == 0) {
					new cameraID;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, cameraID);

					#if defined JailCamera_OnCameraChange
						JailCamera_OnCameraChange(playerid, cameraID);
					#endif
				} else if(strcmp(call, "JailCamera_OnPlayerClose") == 0) {

					#if defined JailCamera_OnPlayerClose
						JailCamera_OnPlayerClose(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackBetConfirm") == 0) {

	                new bet;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, bet);

					#if defined OnBlackJackBetConfirm
						OnBlackJackBetConfirm(playerid, bet);
					#endif
				} else if(strcmp(call, "OnBlackJackStop") == 0) {

					#if defined OnBlackJackStop
						OnBlackJackStop(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackSplit") == 0) {

					#if defined OnBlackJackSplit
						OnBlackJackSplit(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackDouble") == 0) {

					#if defined OnBlackJackDouble
						OnBlackJackDouble(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackPlusCard") == 0) {

					#if defined OnBlackJackPlusCard
						OnBlackJackPlusCard(playerid);
					#endif
				} else if(strcmp(call, "OnBlackJackClose") == 0) {

					#if defined OnBlackJackClose
						OnBlackJackClose(playerid);
					#endif
                } else if(strcmp(call, "PressedPlayerJobCard") == 0) {
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined PressedPlayerJobCard
						PressedPlayerJobCard(playerid, event);
					#endif
				}else if (strcmp(call, "OnPlayerStallCloseTrading") == 0) {

					CEF_HIDE(playerid, "Stall");
					SetPVarInt(playerid, "stallmanage", 0);
                } else if(strcmp(call, "OnPlayerStallBuy") == 0) {
				    new id;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);

					#if defined OnPlayerStallBuy
						OnPlayerStallBuy(playerid, id);
					#endif
				}else if(strcmp(call, "OnPlayerSelectFuelClass") == 0) {

	                new event;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);

					#if defined OnPlayerSelectFuelClass
						OnPlayerSelectFuelClass(playerid, event);
					#endif
				}else if(strcmp(call, "OnPlayerFillClose") == 0) {

					#if defined OnPlayerFillClose
						OnPlayerFillClose(playerid);
					#endif
                }else if(strcmp(call, "OnPlayerStallCardEvent") == 0) {
				    new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined OnPlayerStallCardEvent
						OnPlayerStallCardEvent(playerid, event);
					#endif
                }else if(strcmp(call, "OnOffersConfirm") == 0) {
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					switch(event)
					{
						case 0: callcmd::no(playerid, "");
						case 1: callcmd::yes(playerid, "");
					}
	            } else if(strcmp(call, "OnPlayerSelectStallItem") == 0) {
				    new id;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);

					#if defined OnPlayerSelectStallItem
						OnPlayerSelectStallItem(playerid, id);
					#endif
				}else if(strcmp(call, "OnPlayerManageEvent") == 0) {

	                new
						event;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);

					#if defined OnPlayerManageEvent
						OnPlayerManageEvent(playerid, event);
					#endif
	            } else if (strcmp(call, "OnRegistrationCharacter") == 0) {

					new
					    eventid, row, skin;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, eventid);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, row);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, skin);


					#if defined OnRegistrationCharacter
						OnRegistrationCharacter(playerid, eventid, row, skin);
					#endif
				} else if (strcmp(call, "OnRegistrationBonuses") == 0) {

					new name[32];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, name);

					#if defined OnRegistrationBonuses
						OnRegistrationBonuses(playerid, name);
					#endif
                }else if(strcmp(call, "OnPlayerSelectSpawn") == 0){
				    new
						listitem;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, listitem);

					#if defined OnPlayerSelectSpawn
						OnPlayerSelectSpawn(playerid, listitem);
					#endif
 				}else if(strcmp(call, "OnPlayerSelectSpawnClose") == 0){

					#if defined OnPlayerSelectSpawnClose
						OnPlayerSelectSpawnClose(playerid);
					#endif
	            } else if(strcmp(call, "Gang_OnPlayerCreate") == 0) {

	       			#if defined Gang_OnPlayerCreate
						Gang_OnPlayerCreate(playerid);
					#endif
				}else if(strcmp(call, "OnInventoryItemMove") == 0) {

					new
						where, event, from, slot, count_1;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, where);
		            BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, from);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, slot);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, count_1);


					#if defined OnInventoryItemMove
						OnInventoryItemMove(playerid, where, event, from, slot, count_1);
					#endif
				}else if(strcmp(call, "OnItemsInterfaceClose") == 0) {

					#if defined OnItemsInterfaceClose
						OnItemsInterfaceClose(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnChangePage") == 0) {

					#if defined ColorPicker_OnChangePage
						ColorPicker_OnChangePage(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnClose") == 0) {

					#if defined ColorPicker_OnClose
						ColorPicker_OnClose(playerid);
					#endif
                }else if(strcmp(call, "BPd_OnPlayerTakeReward") == 0) {
				    new item, event;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, item);

					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event);

	   				#if defined BPd_OnPlayerTakeReward
						BPd_OnPlayerTakeReward(playerid, item, event);
					#endif
                }else if(strcmp(call, "ActionBot_OnPressButton") == 0){
				    new
						event, id_actor;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, id_actor);
					#if defined ActionBot_OnPressButton
						ActionBot_OnPressButton(playerid, event, id_actor);
					#endif
                }else if(strcmp(call, "BPd_OnPlayerBuyPremium") == 0) {

					#if defined BPd_OnPlayerBuyPremium
						BPd_OnPlayerBuyPremium(playerid);
					#endif
                } else if(strcmp(call, "BPd_OnPlayerSkipTask") == 0) {

					new event;
					    
					BS_IgnoreBits(bs, 40);
                    BS_ReadUint32(bs, event);
					
   					#if defined BPd_OnPlayerSkipTask
						BPd_OnPlayerSkipTask(playerid, event);
					#endif
                } else if(strcmp(call, "BPd_OnPlayerBuyLevel") == 0) {

					new event;

					BS_IgnoreBits(bs, 40);
                    BS_ReadUint32(bs, event);

   					#if defined BPd_OnPlayerBuyLevel
						BPd_OnPlayerBuyLevel(playerid, event);
					#endif
				}else if(strcmp(call, "DS_OnPlayerBuyVIP") == 0) {

                    new viptype, useGameMoney, isYearly;

                    BS_IgnoreBits(bs, 40);
                    BS_ReadUint32(bs, viptype);
                    BS_IgnoreBits(bs, 8);
                    BS_ReadUint32(bs, useGameMoney);
                    BS_IgnoreBits(bs, 8);
                    BS_ReadUint32(bs, isYearly);

                    #if defined DS_OnPlayerBuyVIP
                        DS_OnPlayerBuyVIP(playerid, viptype, useGameMoney, isYearly);
                    #endif
                }else if(strcmp(call, "BonusCode_OnPlayerOpenRewards") == 0) {

                    new
					    listitem;

					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);

					#if defined BonusCode_OnPlayerOpenRewards
						BonusCode_OnPlayerOpenRewards(playerid, listitem);
					#endif
                }else if(strcmp(call, "Promocode_OnPlayerActivate") == 0) {

                    new
						inputtext[250];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);

					#if defined Promocode_OnPlayerActivate
						Promocode_OnPlayerActivate(playerid, inputtext);
					#endif
				}else if(strcmp(call, "BonusCode_OnPlayerActivate") == 0) {

                    new
						inputtext[250];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);

					#if defined BonusCode_OnPlayerActivate
						BonusCode_OnPlayerActivate(playerid, inputtext);
					#endif
				}else if(strcmp(call, "OnProgressBarClick") == 0) {
					OnPlayerProgressBar(playerid);
				}else if(strcmp(call, "OnMiniGamePlayerClose") == 0) {

					#if defined OnMiniGamePlayerClose
						OnMiniGamePlayerClose(playerid);
					#endif
				}else if(strcmp(call, "ColorPicker_OnSelect") == 0) {

	                new
						idx;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, idx);

					#if defined ColorPicker_OnSelect
						ColorPicker_OnSelect(playerid, idx);
					#endif
                }else if(strcmp(call, "CarSH_OnPlayerRequest") == 0) {
				    new app_id, xz, ssss;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, app_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, ssss);

					#if defined CarSH_OnPlayerRequest
						CarSH_OnPlayerRequest(playerid, app_id, xz, ssss);
					#endif
				}else if(strcmp(call, "Employment_OnPlayerApply") == 0) {
				    new type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);

					#if defined Employment_OnPlayerApply
						Employment_OnPlayerApply(playerid, type);
					#endif
                }else if(strcmp(call, "Employment_OnPlayerMark") == 0) {
				    new jobs_type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, jobs_type);

					#if defined Employment_OnPlayerMark
						Employment_OnPlayerMark(playerid, jobs_type);
					#endif
				}else if(strcmp(call, "OnActivateBonusOrPromocode") == 0) {

                    new inputtext[250];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);

					#if defined OnActivateBonusOrPromocode
						OnActivateBonusOrPromocode(playerid, inputtext);
					#endif
				}else if(strcmp(call, "PlayerSetting_OnChangePassword") == 0) {

                    new inputtext[250], inputtext_newpassword[250];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, inputtext_newpassword);

					#if defined PlayerSetting_OnChangePassword
						PlayerSetting_OnChangePassword(playerid, inputtext, inputtext_newpassword);
					#endif
				}else if(strcmp(call, "PlayerSetting_OnPlayerName") == 0) {

                    new inputtext[250];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, inputtext);

					#if defined PlayerSetting_OnPlayerName
						PlayerSetting_OnPlayerName(playerid, inputtext);
					#endif
				}else if(strcmp(call, "Employment_OnPlayerClose") == 0) {
					#if defined Employment_OnPlayerClose
						Employment_OnPlayerClose(playerid);
					#endif
                }else if(strcmp(call, "Employment_OnPlayerQuit") == 0) {
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined Employment_OnPlayerQuit
						Employment_OnPlayerQuit(playerid, event);
					#endif
	 			}else if(strcmp(call, "PaintBall_OnPlayerCreateLobby") == 0) {
				    new gun,price,players,status,code,location,round;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, gun);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, price);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, players);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, code);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, location);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, round);

					#if defined PaintBall_OnPlayerCreateLobby
						PaintBall_OnPlayerCreateLobby(playerid, gun,price,players,status,code,location,round);
					#endif
	 			}else if(strcmp(call, "PaintBall_OnPlayerExitMenu") == 0) {

	                CEF_HIDE(playerid, "Paintball");
	                SetPVarInt(playerid, "paintboll", 0);
				}else if(strcmp(call, "OnTrainingHintsClose") == 0) {

	                CEF_HIDE(playerid, "Tutorial");
	                //if(GetPlayerData(playerid, P_DENBONUS) > 1) return SendClientMessage(playerid, 0xFF000, "Вы недавно забирали ежедневный бонус");
                    //ModifyCashBalance(playerid, 20000000, "Подарок бонус", true, true);
		   			//SetPlayerData(playerid, P_DENBONUS, 86400 +1);
		   			//UpdatePlayerDatabaseInt(playerid, "denbonus", 86400 +1);
		   			//if(GetPlayerData(playerid, P_HELOWEEN_QUEST6) == 2)
		   			{
	   			 	SetCameraBehindPlayer(playerid);
					return 1;
                    //SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}20 конфет /konfets");
                    //SetPlayerData(playerid, P_HELOWEEN_QUEST6, 1);
                    //UpdatePlayerDatabaseInt(playerid, "heloweenquest6", 1);
                    //GivePlayerKonfets(playerid, 20,true, true);
					}
				}else if(strcmp(call, "PaintBall_OnPlayerSelectLobby") == 0) {
				    new lobby_id, status;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, lobby_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);

					#if defined PaintBall_OnPlayerSelectLobby
						PaintBall_OnPlayerSelectLobby(playerid, lobby_id, status);
					#endif
				} else if (strcmp(call, "OnPlayerTicketClick") == 0) {

	                new t;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, t);

	       			#if defined OnPlayerTicketClick
						OnPlayerTicketClick(playerid);
					#endif
  			    }else if(strcmp(call, "OnPlayerStartCharging") == 0) {
				    new fuelmax;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, fuelmax);

		            format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Бензин откладка: %d", fuelmax);

					#if defined OnPlayerStartCharging
						OnPlayerStartCharging(playerid, fuelmax);
					#endif
				}else if(strcmp(call, "OnInventoryItemGive") == 0) {
				    new event, type, count;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, count);

					#if defined OnInventoryItemGive
						OnInventoryItemGive(playerid, event, type, count);
					#endif
		        }else if(strcmp(call, "OnPlayerStopCharging") == 0) {

					#if defined OnPlayerStopCharging
						OnPlayerStopCharging(playerid);
					#endif
				} else if (strcmp(call, "OnRegistrationData") == 0) {

	            	new
						email[64 + 1],

						password_first[64 + 1],
						password_second[64 + 1];

	                BS_IgnoreBits(bs, 40);
	                BS_ReadString32(bs, email);

					BS_IgnoreBits(bs, 8);

					BS_ReadString32(bs, password_first);

					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password_second);

					#if defined OnRegistrationData
						OnRegistrationData(playerid, email, password_first, password_second);
					#endif
					
                } else if(strcmp(call, "ClickPlayerDancingList") == 0) {
		            
		       	    new danceid;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, danceid);
					#if defined ClickPlayerDancingList
						ClickPlayerDancingList(playerid, danceid);
					#endif
			
	            } else if (strcmp(call, "OnPlayerRoulSetBet") == 0) {

					new
					    ty, te;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, ty);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, te);


	                #if defined OnPlayerRoulSetBet
	                    OnPlayerRoulSetBet(playerid, ty, te);
					#endif
	            } else if(strcmp(call, "OnPlayerRoulClose") == 0) {

					#if defined OnPlayerRoulClose
						OnPlayerRoulClose(playerid);
					#endif
				} else if (strcmp(call, "OnPlayerDumpSetBet") == 0) {

					new
					    ta;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, ta);

		            #if defined OnPlayerDumpSetBet
		                OnPlayerDumpSetBet(playerid, ta);
					#endif
		        }else if(strcmp(call, "OnPlayerDumpClose") == 0) {

  					#if defined OnPlayerDumpClose
						OnPlayerDumpClose(playerid);
					#endif
				} else if(strcmp(call, "OnPlayerRoulClickBet") == 0) {

					#if defined OnPlayerRoulClickBet
						OnPlayerRoulClickBet(playerid);
					#endif

	            }else if(strcmp(call, "OnInventoryDisplayChange") == 0) {
						#if defined OnInventoryDisplayChange
							OnInventoryDisplayChange(playerid, inventory_status[playerid]);
						#endif
	            }else if (strcmp(call, "OnAuthorizationStart") == 0) {

	              	new
	            	    password[64 + 1];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, password);

					#if defined OnAuthorizationStart
						OnAuthorizationStart(playerid, password);
					#endif

				}else if(strcmp(call, "OnAuthorizationCode") == 0) {

	              	new code[7];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, code);

					#if defined OnAuthorizationCode
						OnAuthorizationCode(playerid, code);
					#endif

                }else if (strcmp(call, "OnPlayerSelectBillboardItem") == 0) {

	              	new
						id;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);


					#if defined OnPlayerSelectBillboardItem
						OnPlayerSelectBillboardItem(playerid, id);
					#endif
                }else if (strcmp(call, "OnPlayerEventRentCar") == 0) {

	              	new
						id;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);


					#if defined OnPlayerEventRentCar
						OnPlayerEventRentCar(playerid, id);
					#endif
				} else if(strcmp(call, "OnAuctionPlayerSetBet") == 0) {

				    new id, count;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, id);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, count);

					#if defined OnAuctionPlayerSetBet
						OnAuctionPlayerSetBet(playerid, id, count);
					#endif
	            } else if(strcmp(call, "OnAuctionPlayerAction") == 0) {

				    new type, event;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event);

					#if defined OnAuctionPlayerAction
						OnAuctionPlayerAction(playerid, type, event);
					#endif
				}else if(strcmp(call, "OnAuctionPlayerClose") == 0) {

					#if defined OnAuctionPlayerClose
						OnAuctionPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "OnAuctionPlayerCreateLot") == 0) {
					new type, bet, time;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, bet);
					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, time);

					#if defined OnAuctionPlayerCreateLot
						OnAuctionPlayerCreateLot(playerid, type, bet, time);
					#endif
				/////////////////////
				}else if(strcmp(call, "OnDetailingVinylsInstall") == 0) {

					new type;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);

					#if defined OnDetailingVinylsInstall
						OnDetailingVinylsInstall(playerid, type);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsCamera") == 0) {

					#if defined OnDetailingVinylsCamera
						OnDetailingVinylsCamera(playerid);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsChange") == 0) {

					new type;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);

					#if defined OnDetailingVinylsChange
						OnDetailingVinylsChange(playerid, type);
					#endif
				}else if(strcmp(call, "OnDetailingVinylsClose") == 0) {

					#if defined OnDetailingVinylsClose
						OnDetailingVinylsClose(playerid);
					#endif
				///////////////
				}else if(strcmp(call, "Tuning_OnRimItemChange") == 0) {

					new type;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);

					#if defined Tuning_OnRimItemChange
						Tuning_OnRimItemChange(playerid, type);
					#endif
				}else if(strcmp(call, "Tuning_OnRimInstall") == 0) {

					new type;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);

					#if defined Tuning_OnRimInstall
						Tuning_OnRimInstall(playerid, type);
					#endif
				}else if(strcmp(call, "Tuning_OnRimCamera") == 0) {
					#if defined Tuning_OnRimCamera
						Tuning_OnRimCamera(playerid);
					#endif
				}else if(strcmp(call, "Tuning_OnRimClose") == 0) {

					#if defined Tuning_OnRimClose
						Tuning_OnRimClose(playerid);
					#endif
				//////////////////
				} else if (strcmp(call, "OnRaceLobbyEnter") == 0) {

					#if defined OnRaceLobbyEnter
						OnRaceLobbyEnter(playerid);
					#endif
                }else if(strcmp(call, "OnRaceLobbyCreate") == 0) { // гонки

				    new type, bet, members, password[3 + 1], class;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, type);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, bet);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, members);

					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, password);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, class);

					#if defined OnRaceLobbyCreate
						OnRaceLobbyCreate(playerid, type, bet, members, password, class);
					#endif
	            }else if (strcmp(call, "OnPlayerSetupBillboard") == 0) {

	              	new
						id, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id);

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);


					#if defined OnPlayerSetupBillboard
						OnPlayerSetupBillboard(playerid, id, type);
					#endif
				//////////////////////////////////////////////////////////////
				}else if (strcmp(call, "OnDragEditorSelectType") == 0) {

	              	new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined OnDragEditorSelectType
						OnDragEditorSelectType(playerid, event);
					#endif
				}else if (strcmp(call, "OnDragChangePlayerStatus") == 0) {

	              	new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined OnDragChangePlayerStatus
						OnDragChangePlayerStatus(playerid, event);
					#endif
				}else if(strcmp(call, "OnDragEditorClose") == 0) {

					#if defined OnDragEditorClose
						OnDragEditorClose(playerid);
					#endif
				//////////////////////////////////////////////////////////////

	            } else if (strcmp(call, "Tuning_OnMenuEvent") == 0) {

	              	new
						event, category, item;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, category);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, item);


					#if defined Tuning_OnMenuEvent
						Tuning_OnMenuEvent(playerid, event, category, item);
					#endif

	            }else if(strcmp(call, "Tuning_OnTuningPneumaEvent") == 0){
	    			new trf;

					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, trf);


					#if defined Tuning_OnTuningPneumaEvent
						Tuning_OnTuningPneumaEvent(playerid, trf);
					#endif
	            }else if(strcmp(call, "Tuning_OnPlayerPneumaEvent") == 0){
	    			new type, event;

					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, type);

					BS_IgnoreBits(bs, 8);
	    			BS_ReadInt32(bs, event);

					#if defined Tuning_OnPlayerPneumaEvent
						Tuning_OnPlayerPneumaEvent(playerid, type, event);
					#endif
				//
				
				}else if(strcmp(call, "Trailers_CloseShop") == 0) {

   				#if defined Trailers_CloseShop
					Trailers_CloseShop(playerid);
				#endif
    			}else if(strcmp(call, "Trailers_CancelBuy") == 0) {
    			
    			}else if(strcmp(call, "Trailers_CloseShop") == 0) {

   				#if defined Trailers_CloseShop
					Trailers_CloseShop(playerid);
				#endif
    			}else if(strcmp(call, "Trailers_CancelBuy") == 0) {

   				#if defined Trailers_CancelBuy
					Trailers_CancelBuy(playerid);
				#endif
            	}else if(strcmp(call, "Trailers_Buy") == 0) {
			    new tra,d;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, tra);
                BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, d);

   				#if defined Trailers_Buy
					Trailers_Buy(playerid, tra,d);
				#endif
				}else if(strcmp(call, "WeaponShop_OnChangeCategory") == 0) {

                new category;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, category);

				#if defined WeaponShop_OnChangeCategory
					WeaponShop_OnChangeCategory(playerid, category);
				#endif
				}else if(strcmp(call, "WeaponShop_OnSelectItem") == 0) {

                new event, item;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, item);

				#if defined WeaponShop_OnSelectItem
					WeaponShop_OnSelectItem(playerid, event, item);
				#endif
				}else if(strcmp(call, "WeaponShop_OnBuyItem") == 0) {

                new event, item, patrons, w_value, p_value;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
				BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, item);
				BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, patrons);
				BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, w_value);
				BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, p_value);

				#if defined WeaponShop_OnBuyItem
					WeaponShop_OnBuyItem(playerid, event, item, patrons, w_value, p_value);
				#endif
				}else if(strcmp(call, "WeaponShop_OnClose") == 0) {
				#if defined WeaponShop_OnClose
					WeaponShop_OnClose(playerid);
				#endif
				}else if(strcmp(call, "OnPlayerOpenMainMenuPromocodes") == 0) {

				#if defined OnPlayerOpenMainMenuPromocodes
					OnPlayerOpenMainMenuPromocodes(playerid);
	 			#endif
				}else if(strcmp(call, "ItemStoreMenu_OnClose") == 0) {

				#if defined ItemStoreMenu_OnClose
					ItemStoreMenu_OnClose(playerid);
	 			#endif
                }else if(strcmp(call, "ItemStoreMenu_OnCategory") == 0) {

                new
					event;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);

				#if defined ItemStoreMenu_OnCategory
					ItemStoreMenu_OnCategory(playerid, event);
				#endif
				}else if(strcmp(call, "ItemStoreMenu_OnBuy") == 0) {

                new
					event;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);

				#if defined ItemStoreMenu_OnBuy
					ItemStoreMenu_OnBuy(playerid, event);
				#endif
                }else if(strcmp(call, "ItemStoreMenu_OnClick") == 0) {

                new
					event;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);

				#if defined ItemStoreMenu_OnClick
					ItemStoreMenu_OnClick(playerid, event);
				#endif
				}else if(strcmp(call, "ClickPlayerShipMenuButton") == 0) {

                new
					event;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);

				#if defined ClickPlayerShipMenuButton
					ClickPlayerShipMenuButton(playerid, event);
				#endif
				} else if (strcmp(call, "OnMultiDialogClickNavigButton") == 0) {

					new page, prio, dialogid;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, page);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, prio);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, dialogid);

					#if defined OnMultiDialogClickNavigButton
						OnMultiDialogClickNavigButton(playerid, page, dialogid, prio);
					#endif
	            } else if (strcmp(call, "OnDialogResponse") == 0) {

					new
					    dialogid, response, listitem,
						inputtext[256 + 1];

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, dialogid);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, response);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, inputtext);


	                #if defined OnDialogResponse
	                    OnDialogResponse(playerid, dialogid, response, listitem, (isnull(inputtext)) ? ("\1") : (inputtext));
					#endif

	            } else if (strcmp(call, "OnCaptchaGetToken") == 0) {
					CEF_CREATE(playerid, 1, 2, "closeInterface('Captcha')");
					CEF_HIDE(playerid, "Captcha");
					BuyPlayerBusiness(playerid, GetPVarInt(playerid, "buy_biz_id"));
				}else if(strcmp(call, "OnPlayerStartFill") == 0) {
				    new event, fuel;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, fuel);

					#if defined OnPlayerStartFill
						OnPlayerStartFill(playerid, event, fuel);
					#endif
	            }else if(strcmp(call, "OnPlayerShowroomMenu") == 0) {
				    new type, current, vehid;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, current);
	                BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, vehid);

	   				#if defined OnPlayerShowroomMenu
						OnPlayerShowroomMenu(playerid, type, current, vehid);
					#endif
				//
				}else if(strcmp(call, "BlackMarket_OnPlayerSetBet") == 0) {

					new count;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, count);

					#if defined BlackMarket_OnPlayerSetBet
						BlackMarket_OnPlayerSetBet(playerid, count);
					#endif
				}else if(strcmp(call, "BlackMarket_OnPlayerClose") == 0) {

					#if defined BlackMarket_OnPlayerClose
						BlackMarket_OnPlayerClose(playerid);
					#endif
				}else if(strcmp(call, "OnHarvestingPlayerComplete") == 0) {

					#if defined OnHarvestingPlayerComplete
						OnHarvestingPlayerComplete(playerid);
					#endif
				}else if(strcmp(call, "OnHarvestingPlayerClose") == 0) {

					#if defined OnHarvestingPlayerClose
						OnHarvestingPlayerClose(playerid);
					#endif
				
				}else if(strcmp(call, "CasinoDice_OpenCreateGame") == 0) {

	   				#if defined CasinoDice_OpenCreateGame
						CasinoDice_OpenCreateGame(playerid);
					#endif
				}else if(strcmp(call, "CasinoDice_UpdQueriesListPanel") == 0) {

	   				#if defined CasinoDice_UpdQueriesListPanel
						CasinoDice_UpdQueriesListPanel(playerid);
					#endif
	           
	            }else if(strcmp(call, "Trailers_CloseShop") == 0) {

   				#if defined Trailers_CloseShop
						Trailers_CloseShop(playerid);
					#endif
	            }else if(strcmp(call, "Trailers_CancelBuy") == 0) {

   				#if defined Trailers_CancelBuy
						Trailers_CancelBuy(playerid);
					#endif
	            }else if(strcmp(call, "Trailers_Buy") == 0) {
			    new tra,d;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, tra);
                BS_IgnoreBits(bs, 8);
                BS_ReadUint32(bs, d);

   				#if defined Trailers_Buy
					Trailers_Buy(playerid, tra,d);
					#endif
			//
	           
				//
				}else if(strcmp(call, "BS_OnCloseInterface") == 0) {

	   				#if defined BS_OnCloseInterface
						BS_OnCloseInterface(playerid);
					#endif
	            }else if(strcmp(call, "BS_OnChangeCategory") == 0){
	    			new cat;

					BS_IgnoreBits(bs, 40);
	    			BS_ReadInt32(bs, cat);

					#if defined BS_OnChangeCategory
						BS_OnChangeCategory(playerid, cat);
					#endif

				}else if(strcmp(call, "BS_OnPlayerClickItem") == 0){
	   				new item;

					BS_IgnoreBits(bs, 40);
					BS_ReadInt32(bs, item);

					#if defined BS_OnPlayerClickItem
						BS_OnPlayerClickItem(playerid, item);
					#endif
	            }else if(strcmp(call, "OnPlayerTintingSelectGlass") == 0) {
				    new glass;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, glass);

	   				#if defined OnPlayerTintingSelectGlass
						OnPlayerTintingSelectGlass(playerid, glass);
					#endif
	            }else if(strcmp(call, "OnPlayerTintingParams") == 0) {
				    new param[155];
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadString32(bs, param);

	   				#if defined OnPlayerTintingParams
						OnPlayerTintingParams(playerid, param);
					#endif
				//
				}else if(strcmp(call, "OnPlayerGardensMenu") == 0) {
				    new type;

	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, type);

	   				#if defined OnPlayerGardensMenu
						OnPlayerGardensMenu(playerid, type);
					#endif
				}else if(strcmp(call, "Garden_OnPlayerSelectUpgrade") == 0) {
				    new type;

	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, type);

	   				#if defined Garden_OnPlayerSelectUpgrade
						Garden_OnPlayerSelectUpgrade(playerid, type);
					#endif
				}else if(strcmp(call, "OnPlayerFortuneWheelMenu") == 0) {
				    new fortune;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, fortune);

	   				#if defined OnPlayerFortuneWheelMenu
						OnPlayerFortuneWheelMenu(playerid, fortune);
					#endif
				//
	            }else if(strcmp(call, "OnPlayerTintingOrder") == 0) {
				    new poradok;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, poradok);

	   				#if defined OnPlayerTintingOrder
						OnPlayerTintingOrder(playerid, poradok);
					#endif
                }else if(strcmp(call, "Taumetr_OnPlayerSelect") == 0) {
				    new menuitem;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, menuitem);

	   				#if defined Taumetr_OnPlayerSelect
						Taumetr_OnPlayerSelect(playerid, menuitem);
					#endif
				}else if(strcmp(call, "BattlePass_OnClickWelcomeMenu") == 0) {
	   				#if defined BattlePass_OnClickWelcomeMenu
						BattlePass_OnClickWelcomeMenu(playerid);
					#endif
				}else if(strcmp(call, "ESTP_OnPlayerBuyItem") == 0) {
					new event;

					BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);

	   				#if defined ESTP_OnPlayerBuyItem
						ESTP_OnPlayerBuyItem(playerid, event);
					#endif
				}else if(strcmp(call, "SliderInterfaces_OnPlayerClose") == 0) {
	   				#if defined SliderInterfaces_OnPlayerClose
						SliderInterfaces_OnPlayerClose(playerid);
					#endif
    			}else if(strcmp(call, "MainMenu_OnPlayerChangeTab") == 0) {
    			
					new event;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, event);

					#if defined MainMenu_OnPlayerChangeTab
						MainMenu_OnPlayerChangeTab(playerid, event);
					#endif
				}else if(strcmp(call, "MainMenu_OnPlayerRewardOpen") == 0) {
    			
					new index;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, index);

					#if defined MainMenu_OnPlayerRewardOpen
						MainMenu_OnPlayerRewardOpen(playerid, index);
					#endif
				}else if(strcmp(call, "DS_OnPlayerClickItem") == 0) {
					new event;
	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, event);
					#if defined DS_OnPlayerClickItem
						DS_OnPlayerClickItem(playerid, event);
					#endif				
				}else if(strcmp(call, "DS_OnPlayerBuy") == 0) {
                    new index, listitem, name[32];
                    BS_IgnoreBits(bs, 40);
                    BS_ReadUint32(bs, index);
                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, listitem);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs,name);
                    #if defined DS_OnPlayerBuy
                        DS_OnPlayerBuy(playerid, index,listitem,name);
                    #endif

				}else if(strcmp(call, "DonationStore_OnPlayerBuy") == 0) {

					new index, options, output[156];

					BS_IgnoreBits(bs, 40);

					BS_ReadUint32(bs, index);
					BS_IgnoreBits(bs, 8);

					BS_ReadUint32(bs, options);
					BS_IgnoreBits(bs, 8);

					BS_ReadString32(bs, output);

					#if defined DonationStore_OnPlayerBuy
						DonationStore_OnPlayerBuy(playerid, index, options, output);
					#endif
					
				}else if(strcmp(call, "DonationStore_OnPlayerClickItem") == 0) {
				
					new index;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, index);

					#if defined DonationStore_OnPlayerClickItem
						DonationStore_OnPlayerClickItem(playerid, index);
					#endif
					
				}else if(strcmp(call, "OnPlayerShowroomSelectColor") == 0) {
				    new color;
	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, color);

	   				#if defined OnPlayerShowroomSelectColor
						OnPlayerShowroomSelectColor(playerid, color);
					#endif
				}else if(strcmp(call, "P3_OnPlayerChangeVolume") == 0) {
    			
					new volume;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, volume);

					#if defined P3_OnPlayerChangeVolume
						P3_OnPlayerChangeVolume(playerid, volume);
					#endif
				}else if(strcmp(call, "Speed_OnPlayerToggleKey") == 0) {
    			
					new Key;

	                BS_IgnoreBits(bs, 40);

	                BS_ReadUint32(bs, Key);

					#if defined Speed_OnPlayerToggleKey
						Speed_OnPlayerToggleKey(playerid, Key);
					#endif
				}else if(strcmp(call, "MenuInt_OnPlayerKey") == 0) {

					//меню игрока R .
					if(GetPVarInt(playerid, "rmenu") == 0)
					{
						#if defined MenuInt_OnPlayerKey
							MenuInt_OnPlayerKey(playerid);
						#endif
						SetPVarInt(playerid, "rmenu", 1);
					}
					else
					{
					    SetPVarInt(playerid, "rmenu", 0);
						CEF_CREATE(playerid, 1, 2, "window.closeInterface('PlayerInteraction')");
						CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)(false)");
					}
				}else if(strcmp(call, "MenuInt_OnPlayerClickItem") == 0) {
				    new type, event;

	                BS_IgnoreBits(bs, 40);
	                BS_ReadUint32(bs, type);

					BS_IgnoreBits(bs, 8);
	                BS_ReadUint32(bs, event);

	   				#if defined MenuInt_OnPlayerClickItem
						MenuInt_OnPlayerClickItem(playerid, type, event);
					#endif
				}else if(strcmp(call, "GPS_OnPlayerGetDirection") == 0) {
	   				new Float:X, Float:Y;

					BS_IgnoreBits(bs, 40);
	    			BS_ReadFloat(bs, X);
	       			BS_IgnoreBits(bs, 8);
	          		BS_ReadFloat(bs,  Y);

	   				#if defined GPS_OnPlayerGetDirection
						GPS_OnPlayerGetDirection(playerid, X, Y);
					#endif
				}else if(strcmp(call, "OnSelectSpectateMenu") == 0) {
				    new item;

	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, item);

	   				#if defined OnSelectSpectateMenu
						OnSelectSpectateMenu(playerid, item);
					#endif
				}else if(strcmp(call, "OnPlayerClientSideKey") == 0){
				    new key;

	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, key);

	   				#if defined OnPlayerClientSideKey
						OnPlayerClientSideKey(playerid, key);
					#endif
 				}else if(strcmp(call, "OnPlayerQuestEndSound") == 0){
	   				#if defined OnPlayerQuestEndSound
						OnPlayerQuestEndSound(playerid);
					#endif
				}else if(strcmp(call, "OnChangeSpectatePlayer") == 0){
					new item, none; //none - пока хз

	       			BS_IgnoreBits(bs, 40);
	       			BS_ReadUint32(bs, item);
	       			BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, none);

	   				#if defined OnChangeSpectatePlayer
						OnChangeSpectatePlayer(playerid, item, none);
					#endif
				}else if (strcmp(call, "OnGenerateRandomLicensePlate") == 0) {
						new typeplate;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, typeplate);
						#if defined OnGenerateRandomLicensePlate
		                    OnGenerateRandomLicensePlate(playerid, typeplate);
						#endif
				}else if (strcmp(call, "GetRandomUnusedLicensePlate") == 0) {
						new typeplate;
						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, typeplate);
						#if defined GetRandomUnusedLicensePlate
		                    GetRandomUnusedLicensePlate(playerid, typeplate);
						#endif

				}
				else if (strcmp(call, "BuyVehicleLicensePlate") == 0) {
						new
							number[10],

							region[5], type33;

		                BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, type33);
						BS_IgnoreBits(bs, 8);
	                    BS_ReadString32(bs, number);

						BS_IgnoreBits(bs, 8);
	                    BS_ReadString32(bs, region);


						#if defined BuyVehicleLicensePlate
							BuyVehicleLicensePlate(playerid, type33, number, region);
						#endif

				} else if (strcmp(call, "ClothingStore_OnPlayerEvent") == 0) {

					new
						t, e;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, t);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, e);

					#if defined ClothingStore_OnPlayerEvent
						ClothingStore_OnPlayerEvent(playerid, t,e);
					#endif


				}else if(strcmp(call, "OnInventoryItemDrop") == 0) {

					new event, slot, count;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);

		            BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, slot);

					BS_IgnoreBits(bs, 8);
	       			BS_ReadUint32(bs, count);

					#if defined OnInventoryItemDrop
						OnInventoryItemDrop(playerid, event, slot, count);
					#endif
				}else if(strcmp(call, "OnSelectTicket") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined OnSelectTicket
						OnSelectTicket(playerid, event);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerSelectCategory") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined MarktPlc_OnPlayerSelectCategory
						MarktPlc_OnPlayerSelectCategory(playerid, event);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerOpenMyAds") == 0) {
					
					#if defined MarktPlc_OnPlayerOpenMyAds
						MarktPlc_OnPlayerOpenMyAds(playerid);
					#endif
                }else if(strcmp(call, "MarktPlc_OnUploadPhoto") == 0) {
					
					new event, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					
					#if defined MarktPlc_OnUploadPhoto
						MarktPlc_OnUploadPhoto(playerid, event, type);
					#endif
				}else if(strcmp(call, "OnHelloweenBuildComplete") == 0) {
					
					#if defined OnHelloweenBuildComplete
						OnHelloweenBuildComplete(playerid);
					#endif
				}else if(strcmp(call, "OnHelloweenBuildExit") == 0) {
					
					#if defined OnHelloweenBuildExit
						OnHelloweenBuildExit(playerid);
					#endif
				}else if(strcmp(call, "MarktPlc_OnPlayerViewedEntity") == 0) {
					
					new event, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					
					#if defined MarktPlc_OnPlayerViewedEntity
						MarktPlc_OnPlayerViewedEntity(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerAddFavorite") == 0) {
					
					new event, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					
					#if defined MarktPlc_OnPlayerAddFavorite
						MarktPlc_OnPlayerAddFavorite(playerid, event, type);
					#endif
            	}else if(strcmp(call, "MarktPlc_OnPlayerRemoveFavorite") == 0) {
					
					new event, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					
					#if defined MarktPlc_OnPlayerRemoveFavorite
						MarktPlc_OnPlayerRemoveFavorite(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerContact") == 0) {
					
					new event, type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

                    BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);
					
					#if defined MarktPlc_OnPlayerContact
						MarktPlc_OnPlayerContact(playerid, event, type);
					#endif
                }else if(strcmp(call, "MarktPlc_OnCreateAd") == 0) {
					
					new hours, price, description[124], items_id, items_type, name[32];

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, hours);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, price);

					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, description);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, items_id);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, items_type);

					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, name);
					
					#if defined MarktPlc_OnCreateAd
						MarktPlc_OnCreateAd(playerid, hours, price, description, items_id, items_type, name);
					#endif
                }else if(strcmp(call, "MarktPlc_OnPlayerShowItems") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined MarktPlc_OnPlayerShowItems
						MarktPlc_OnPlayerShowItems(playerid, event);
					#endif
                }else if(strcmp(call, "Tablet_OnPlayerCloseApp") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined Tablet_OnPlayerCloseApp
						Tablet_OnPlayerCloseApp(playerid, event);
					#endif
                }else if(strcmp(call, "Tablet_OnPlayerOpenApp") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined Tablet_OnPlayerOpenApp
						Tablet_OnPlayerOpenApp(playerid, event);
					#endif
				}else if(strcmp(call, "FAMTBL_OnPlayerOpenTab") == 0) {
					
					new event;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					
					#if defined FAMTBL_OnPlayerOpenTab
						FAMTBL_OnPlayerOpenTab(playerid, event);
					#endif
                }else if(strcmp(call, "OnInventoryItemUse") == 0) {

					new
						event, slot;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, slot);

					#if defined OnInventoryItemUse
						OnInventoryItemUse(playerid, event, slot);
					#endif
				}else if(strcmp(call, "I_OnPlayerFetchSkateboard") == 0) {

					new
						event;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);

					#if defined I_OnPlayerFetchSkateboard
						I_OnPlayerFetchSkateboard(playerid, event);
					#endif
				}else if(strcmp(call, "AY_OnPlayerEdit") == 0) {

					new
						event, slot;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, slot);

					#if defined AY_OnPlayerEdit
						AY_OnPlayerEdit(playerid, event, slot);
					#endif
				}else if(strcmp(call, "OnInventoryItemTake") == 0) {

					new event, slot, count;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, slot);

					BS_IgnoreBits(bs, 8);
		            BS_ReadUint32(bs, count);

					#if defined OnInventoryItemTake
						OnInventoryItemTake(playerid, event, slot, count);
					#endif
			    }else if(strcmp(call, "OnInventoryItemSell") == 0) {
			    new event, item;

                BS_IgnoreBits(bs, 40);
                BS_ReadUint32(bs, event);
                BS_IgnoreBits(bs, 8);
			 	BS_ReadUint32(bs, item);

   				#if defined OnInventoryItemSell
					OnInventoryItemSell(playerid, event, item);
				#endif
				}else if(strcmp(call, "OnPlayerSellSkinEvent") == 0){
				    new
						status;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, status);

					#if defined OnPlayerSellSkinEvent
						OnPlayerSellSkinEvent(playerid, status);
					#endif
                }else if(strcmp(call, "Cases_OnPlayerInterfaceRequest") == 0){
				    new
						event, type;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, type);

					#if defined Cases_OnPlayerInterfaceRequest
						Cases_OnPlayerInterfaceRequest(playerid, event, type);
					#endif

				}else if(strcmp(call, "Cases_OnPlayerCloseInterface") == 0){
				    new
						type,id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadValue(bs, PR_UINT32, id);

					#if defined Cases_OnPlayerCloseInterface
						Cases_OnPlayerCloseInterface(playerid, type,id);
					#endif
                }else if(strcmp(call, "NewYear_OnPlayerOpenGift") == 0){
	   				#if defined NewYear_OnPlayerOpenGift
						NewYear_OnPlayerOpenGift(playerid);
					#endif
				}else if(strcmp(call, "OnPlayerCraftingSelect") == 0){
					new items;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, items);

					#if defined OnPlayerCraftingSelect
						OnPlayerCraftingSelect(playerid, items);
					#endif
                }else if(strcmp(call, "OnClickQuests") == 0) {
				    new quest_id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, quest_id);

					#if defined OnClickQuests
						OnClickQuests(playerid, quest_id);
					#endif
                }else if(strcmp(call, "PoliceTablet_OnPlayerPage") == 0) {
					new page;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, page);

					PoliceTablet:OnPlayerPage(playerid, page);
				}else if(strcmp(call, "PoliceTablet_OnPlayerRequest") == 0) {
	
					static event, toplayer, name[MAX_PLAYER_NAME];
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, toplayer);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, name);

					PoliceTablet:OnPlayerRequest(playerid, event,toplayer,name);
			    }else if(strcmp(call, "RequestHelp_OnPlayerRespond") == 0) {
					new toplayer;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs,toplayer);

					PoliceTablet:OnPlayerRespond(playerid, toplayer);
		        }else if(strcmp(call, "PoliceTablet_OnPlayerIssueFine") == 0) {
			
					static sum[10], name[MAX_PLAYER_NAME], reason[120];

					sum[0] = EOS;
					name[0] = EOS;
					reason[0] = EOS;

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, sum);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, name);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, reason);

					PoliceTablet:IssueFine(playerid, sum,name,reason);
				}else if(strcmp(call, "Phone_OnOpenAppPhone") == 0) {
				    new app_id, xz;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, app_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);

					#if defined Phone_OnOpenAppPhone
						Phone_OnOpenAppPhone(playerid, app_id, xz);
					#endif

				}else if(strcmp(call, "PhoneMinigame_OnReceivedEvent") == 0) {
				    new type[32], event[32], status;

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, type);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status);

					#if defined PhoneMinigame_OnReceivedEvent
						PhoneMinigame_OnReceivedEvent(playerid, type, event, status);
					#endif
				}else if(strcmp(call, "PhoneCamera_Close") == 0){
					#if defined PhoneCamera_Close
						PhoneCamera_Close(playerid);
					#endif
				}else if(strcmp(call, "Phone_ContactAction") == 0){
					new id_switch, id_xz, number;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, id_switch);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, id_xz);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, number);

					#if defined Phone_ContactAction
						Phone_ContactAction(playerid, id_switch, id_xz, number);
					#endif
				}else if(strcmp(call, "Phone_OnOpenContact") == 0){
					#if defined Phone_OnOpenContact
						Phone_OnOpenContact(playerid);
					#endif
				}else if(strcmp(call, "Delivery_CreateOrder") == 0){
				    new xz, status_id, method;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, method);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, xz);

					#if defined Delivery_CreateOrder
						Delivery_CreateOrder(playerid, method, status_id, xz);
					#endif
				}else if(strcmp(call, "Delivery_OnPlayerAddCart") == 0){
				    new order_id;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, order_id);

					#if defined Delivery_OnPlayerAddCart
						Delivery_OnPlayerAddCart(playerid, order_id);
					#endif
				} else if (strcmp(call, "Tuning_OnStageMenuEvent") == 0) {

				new
				    sss, sss2,sss3;

				BS_IgnoreBits(bs, 40);
				BS_ReadValue(bs, PR_UINT32, sss);
				BS_IgnoreBits(bs, 8);
				BS_ReadValue(bs, PR_UINT32, sss2);
				BS_IgnoreBits(bs, 8);
				BS_ReadValue(bs, PR_UINT32, sss3);

				#if defined Tuning_OnStageMenuEvent
					Tuning_OnStageMenuEvent(playerid, sss, sss2,sss3);
				#endif
				}else if(strcmp(call, "Phone_CreateContact") == 0){
				    new name[40], number[50];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, name);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, number);
				    #if defined Phone_CreateContact
				    	Phone_CreateContact(playerid, name, number);
	                #endif
				}else if(strcmp(call, "Phone_StartCall") == 0){
				    #if defined Phone_StartCall
				    	Phone_StartCall(playerid);
	                #endif
				}else if(strcmp(call, "Phone_CancelCall") == 0){
				    #if defined Phone_CancelCall
				    	Phone_CancelCall(playerid);
	                #endif
				}else if(strcmp(call, "PhoneBlack_Check") == 0){
				    new number, status_id, message[120];

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, number);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, status_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, message);

				    #if defined PhoneBlack_Check
					    	PhoneBlack_Check(playerid, number, status_id, message);
		                #endif
				}else if(strcmp(call, "OnPlayerCreateTicket") == 0) { 
					new status_id, message[150];

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, status_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadString32(bs, message);

				    #if defined OnPlayerCreateTicket
					    	OnPlayerCreateTicket(playerid, status_id, message);
	         		#endif
				}else if(strcmp(call, "Notary_HidePlayerPanel") == 0) { 

					#if defined Notary_HidePlayerPanel
							Notary_HidePlayerPanel(playerid);
					#endif
				}else if(strcmp(call, "Notary_CancelPlayerStatus") == 0) { 

					#if defined Notary_CancelPlayerStatus
							Notary_CancelPlayerStatus(playerid);
					#endif	
				}else if(strcmp(call, "Notary_AcceptExchange") == 0) { 

					#if defined Notary_AcceptExchange
							Notary_AcceptExchange(playerid);
					#endif
				}else if(strcmp(call, "Notary_SetExchangeObject") == 0) { 
					new type;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, type);

					#if defined Notary_SetExchangeObject
							Notary_SetExchangeObject(playerid, type);
					#endif
				}else if(strcmp(call, "Notary_SetAdditionCommission") == 0) { 
					new count;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, count);

					#if defined Notary_SetAdditionCommission
							Notary_SetAdditionCommission(playerid, count);
					#endif
				}else if(strcmp(call, "Notary_SetSurchargeObject") == 0) { 
					new price;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, price);

					#if defined Notary_SetSurchargeObject
							Notary_SetSurchargeObject(playerid, price);
					#endif
				}else if(strcmp(call, "Notary_StartTrade") == 0) { 

					#if defined Notary_StartTrade
							Notary_StartTrade(playerid);
					#endif
				}else if(strcmp(call, "Notary_UpdateAdditionCommission") == 0) { 

					#if defined Notary_UpdateAdditionCommission
							Notary_UpdateAdditionCommission(playerid);
					#endif
                }else if(strcmp(call, "Report_OnPlayerCloseTicket") == 0) { 
				    #if defined Report_OnPlayerCloseTicket
					    	Report_OnPlayerCloseTicket(playerid);
	         		#endif

                }else if(strcmp(call, "OnSendChatMessageTicket") == 0) { 
					new message[120];

					BS_IgnoreBits(bs, 40);
					BS_ReadString32(bs, message);

				    #if defined OnSendChatMessageTicket
					    	OnSendChatMessageTicket(playerid, message);
	         		#endif
	 			}else if(strcmp(call, "OnPlayerClosedTicketInterface") == 0) {
	 			    #if defined OnPlayerClosedTicketInterface
					    	OnPlayerClosedTicketInterface(playerid);
	         		#endif
				}else if(strcmp(call, "CarSiren_OnPlayerBeepEnable") == 0) {
					#if defined CarSiren_OnPlayerBeepEnable
						CarSiren_OnPlayerBeepEnable(playerid);
					#endif
				}else if(strcmp(call, "CarSiren_OnPlayerBeepDisable") == 0) {
					#if defined CarSiren_OnPlayerBeepDisable
						CarSiren_OnPlayerBeepDisable(playerid);
					#endif
				}else if(strcmp(call, "OnCasinoDiceCreateBet") == 0){
					new select_id,  money, players;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, select_id);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, money);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, players);

	 			    #if defined OnCasinoDiceCreateBet
					    	OnCasinoDiceCreateBet(playerid, select_id, money, players);
	         		#endif
				}else if(strcmp(call, "OnCasinoDiceThrow") == 0){
	 			    #if defined OnCasinoDiceThrow
					    	OnCasinoDiceThrow(playerid);
	         		#endif
				}else if(strcmp(call, "OnJoinGameDiceCasino") == 0){
				    new rooms1;

					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, rooms1);

	 			    #if defined OnJoinGameDiceCasino
					    	OnJoinGameDiceCasino(playerid, rooms1);
	         		#endif
				}else if(strcmp(call, "CasinoDice_ClosePanel") == 0){
	 			    #if defined CasinoDice_ClosePanel
					    	CasinoDice_ClosePanel(playerid);
	         		#endif
				}
				else if(strcmp(call, "CasinoDice_LeaveTable") == 0){
	 			    #if defined CasinoDice_LeaveTable
					    	CasinoDice_LeaveTable(playerid);
	         		#endif
                }else if(strcmp(call, "AS_OnPlayerExamAnswer") == 0) {
				    new event;
					BS_IgnoreBits(bs, 40);
					BS_ReadUint32(bs, event);

					#if defined AS_OnPlayerExamAnswer
						AS_OnPlayerExamAnswer(playerid, event);
					#endif

				}else if(strcmp(call, "AS_OnPlayerExamTheoryClose") == 0) {
				    CEF_HIDE(playerid, "DrivingExamTheory");
					IntfDialogCallRemote
					(
						playerid, DIALOG_DRIVING_TUTORIAL_LIST, DIALOG_STYLE_LIST,
						"{FFCD00}Выберите раздел",
						"{FFCD00}[1] {FFFFFF}Управление системами автомобиля<n>{FFCD00}[2] {FFFFFF}Панель индикаторов<n>{FFCD00}[3] {FFFFFF}Заправка и ремонт<n>{FFCD00}[4] {FFFFFF}Правила дорожного движения<n>{FFCD00}[5] {FFFFFF}Дорожные знаки<n>",
						"Далее", "Назад"
					);
					} else if (strcmp(call, "Tuning_OnPlayerEventSpring") == 0) {

					new
					    event, category;

		            BS_IgnoreBits(bs, 40);
		            BS_ReadUint32(bs, event);
					BS_IgnoreBits(bs, 8);
					BS_ReadUint32(bs, category);

		            #if defined Tuning_OnPlayerEventSpring
		                Tuning_OnPlayerEventSpring(playerid, event, category);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerOpenHelp") == 0){

		            #if defined MainMenu_OnPlayerOpenHelp
		                MainMenu_OnPlayerOpenHelp(playerid);
					#endif

					}else if(strcmp(call, "MainMenu_OnPlayerOpen") == 0){

		            #if defined MainMenu_OnPlayerOpen
		                MainMenu_OnPlayerOpen(playerid);
					#endif

					}else if(strcmp(call, "P3_OnPlayerOpenIntefaceMainMenu") == 0){

		            #if defined P3_OnPlayerOpenIntefaceMainMenu
		                P3_OnPlayerOpenIntefaceMainMenu(playerid);
					#endif

					}else if(strcmp(call, "OnPlayerOpenMenuPause") == 0){
                        MainMenuUpdate(playerid);
		            }else if(strcmp(call, "OnBookmakerSelectLeague") == 0){

	   				#if defined OnBookmakerSelectLeague
						OnBookmakerSelectLeague(playerid);
					#endif
					}else if(strcmp(call, "OnBookmakerLoadPage") == 0){
						new type, event;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, type);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);

	   				#if defined OnBookmakerLoadPage
						OnBookmakerLoadPage(playerid, type, event);
					#endif
					}else if(strcmp(call, "OnBookmakerMakeBet") == 0){
						new count, event, event1;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, count);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event1);
						
	   				#if defined OnBookmakerMakeBet
						OnBookmakerMakeBet(playerid, count, event, event1);
					#endif
					}else if(strcmp(call, "Casino_OnPlayerExchange") == 0){
						new type, event;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, type);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event);
						
	   				#if defined Casino_OnPlayerExchange
						Casino_OnPlayerExchange(playerid, type, event);
					#endif
					}else if(strcmp(call, "MainMenu_OnMoreDailyRewards") == 0){

	   				#if defined MainMenu_OnMoreDailyRewards
						MainMenu_OnMoreDailyRewards(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerClickPromoCode") == 0){	
	   				#if defined MainMenu_OnPlayerClickPromoCode
						MainMenu_OnPlayerClickPromoCode(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerClickBonusCode") == 0){	
	   				#if defined MainMenu_OnPlayerClickBonusCode
						MainMenu_OnPlayerClickBonusCode(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerTakeRewards") == 0){
						new event;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event);
						
	   				#if defined MainMenu_OnPlayerTakeRewards
						MainMenu_OnPlayerTakeRewards(playerid, event);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingStart") == 0){
						new event1, event2;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event1);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event2);
						
	   				#if defined OnPlayerCraftingStart
						OnPlayerCraftingStart(playerid, event1, event2);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingFinish") == 0){
						
	   				#if defined OnPlayerCraftingFinish
						OnPlayerCraftingFinish(playerid);
					#endif
					}else if(strcmp(call, "OnPlayerCraftingClose") == 0){
						
	   				#if defined OnPlayerCraftingClose
						OnPlayerCraftingClose(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerRewardPrevPage") == 0){
						
	   				#if defined MainMenu_OnPlayerRewardPrevPage
						MainMenu_OnPlayerRewardPrevPage(playerid);
					#endif
					}else if(strcmp(call, "MainMenu_OnPlayerRewardNextPage") == 0){
						
	   				#if defined MainMenu_OnPlayerRewardNextPage
						MainMenu_OnPlayerRewardNextPage(playerid);
					#endif
					}else if(strcmp(call, "FoodSort_OnSelectCategory") == 0){
						new event, event1, event2, event3;

						BS_IgnoreBits(bs, 40);
	                	BS_ReadUint32(bs, event);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event1);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event2);

						BS_IgnoreBits(bs, 8);
	                	BS_ReadUint32(bs, event3);

	   				#if defined FoodSort_OnSelectCategory
						FoodSort_OnSelectCategory(playerid, event, event1, event2, event3);
					#endif
					}else if(strcmp(call, "OnTradeItemsCancel") == 0) { 

						#if defined OnTradeItemsCancel
								OnTradeItemsCancel(playerid);
						#endif
					}else if(strcmp(call, "OnTradeInterfaceClose") == 0) { 

						#if defined OnTradeInterfaceClose
								OnTradeInterfaceClose(playerid);
						#endif
					}else if(strcmp(call, "OnTradeItemsStart") == 0) { 
						new event;

						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, event);

						#if defined OnTradeItemsStart
								OnTradeItemsStart(playerid, event);
						#endif
					}else if(strcmp(call, "OnTradeItemsSetReady") == 0) { 
						new status, price;

						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, status);

						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, price);

						#if defined OnTradeItemsSetReady
								OnTradeItemsSetReady(playerid, status, price);
						#endif
					}else if(strcmp(call, "OnTradeItemsMove") == 0) { 
						new removed_id, removed_slot, id, slot, count;

						BS_IgnoreBits(bs, 40);
						BS_ReadUint32(bs, removed_id);

						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, removed_slot);

						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, id);

						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, slot);

						BS_IgnoreBits(bs, 8);
						BS_ReadUint32(bs, count);

						#if defined OnTradeItemsMove
								OnTradeItemsMove(playerid, removed_id, removed_slot, id, slot, count);
						#endif
					}else if (strcmp(call, "MUSIC_OnClientSendData") == 0){
						new type,name[64],index,volume;
						BS_IgnoreBits(bs,40);
						BS_ReadValue(bs,PR_UINT32,type);
						BS_IgnoreBits(bs,8);
						BS_ReadString32(bs,name);
						BS_IgnoreBits(bs,8);
						BS_ReadValue(bs,PR_UINT32,index);
						BS_IgnoreBits(bs,8);
						BS_ReadValue(bs,PR_UINT32,volume);
						Music_Start(playerid,type,name,index,volume);
					}else if (strcmp(call, "MUSIC_OnClientGetServerTime") == 0) {
					new fmt_str[100];
					format(fmt_str, sizeof fmt_str, "interface('MusicPlayer').srv_onReceiveData(%d, 1)", gettime());
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
			}
		}
	}
	return 1;
}

enum MainMenuState
{
    MENU_MAIN_MAP,
	MENU_MAIN_STATS,
	MENU_MAIN_IMPROVEMENTS,
	MENU_MAIN_DOCS,
	MENU_MAIN_PROMO,
	MENU_MAIN_ACHIV,
	MENU_MAIN_PROPERTY,
	MENU_MAIN_TASKS,
	MENU_MAIN_PRIZE,
	MENU_MAIN_BATTLEPASS,
	MENU_MAIN_REWARDS,
	MENU_MAIN_STORE,
	MENU_MAIN_SETTINGS,
	MENU_MAIN_REPORT,
	MENU_MAIN_DRAW,
}

new pageprize[MAX_PLAYERS];
new pagemenu[MAX_PLAYERS];
new pageprizenumber[MAX_PLAYERS][2];

new m_player_report_id[MAX_PLAYERS];

#define MAX_BP_TASKS 12

enum S_BATTLEPASS_TASKS_STRUCT
{
	BP_TYPE_TASKS,
    BP_NAME_TASKS[32],
    BP_TASKS[124],
    BP_POINT,
    BP_PRIZE,
    BP_DONATE_PRICE,
	BP_PRIZE_GOLDS,
}
new g_battlepass_tasks[87][S_BATTLEPASS_TASKS_STRUCT] =
{
    {0, "Пора новых ощущений", "Купите транспорт в любом автосалоне 1 раз(а)", 1, 20, 170, 2},
	{1, "Дело мастера боится", "Соберите 54 шт. изделий, работая на заводе по производству продуктов", 54, 30, 170, 3},
	{2, "Игромания", "Выиграть в рулетке поставив на любой сектор 20 раз(а)", 20, 20, 170, 3},
	{3, "Удача на нашей стороне", "Открыть 30 кейсов любого вида", 30, 20, 170, 4},
	{4, "Чувство азарта", "Поучавствуйте в лотерее 20 раз(а)", 20, 20, 170, 2},
	{5, "Филантроп", "Пожертвуйте 110.300.000 руб. в благотворительность", 110300000, 20, 170, 4},
	{6, "Всего лишь пару царапин", "Почините транспорт с помощью рем. комплекта 5 раз", 5, 10, 170, 2},
	{7, "День стиля", "Купите новый аксессуар в магазине аксессуаров 1 раз(а)", 1, 30, 170, 2},
	{8, "Самое время для зарплат", "Получите PayDay 2 раз(а)", 2, 20, 170, 2},
	{9, "Аукцион удачи", "Выиграйте в аукционе контейнеров 15 раз(а)", 15, 20, 170, 3},
	{10, "Нужно делиться", "Передайте любую сумму другому игроку (/pay) 5 раз(а)", 5, 20, 170, 2},
	{11, "Полный бак, пожалуйста", "Заправьте транспорт на АЗС на 32 л. топлива", 32, 20, 170, 2}, 
	{12, "Я каменщик работаю три дня", "Добудьте 117 кг. руды, работая на шахте", 117, 20, 170, 2},
	{13, "Время администрации", "Задайте вопрос администрации 1 раз(а)", 1, 10, 170, 2},
	{14, "Пора бы приодеться", "Купите новую одежду в одном из магазинов одежды", 1, 10, 170, 2},
	{15, "Мастер на все руки", "Соберите рецепт для крафта 1 раз(а)", 1, 20, 170, 4},
	{16, "Ликвидация", "Победите в аукционе на свалке 5 раз(а)", 5, 20, 170, 3},
	{17, "Водитель со стажем", "Отвезите продукты работая Дальнобойщиком 5 раз(а)", 5, 20, 170, 3},
	{18, "Это наш день", "Сыграйте в кости и выиграйте 10 раз(а)", 10, 30, 170, 2},
	{19, "Детектив", "Найдите кейсы разбросаные по всей обл. 5 раз(а)", 5, 40, 170, 2},
	{20, "Не опущена а занижена", "Воспользуйте /spanel 5 раз(а)", 5, 10, 170, 2},
	{21, "Бункер", "Установите тонировку на свой автомобиль 1 раз(а)", 1, 20, 170, 2},
	{22, "Самый быстрый", "Поучаствуйте в драг рейсинге 5 раз(а)", 5, 20, 170, 4},
	{23, "Законопослушный гражданин", "Оплатите штраф в любом банкомате 5 раз(а)", 5, 20, 170, 2},
	{24, "Сезон огородов начался", "Соберите 58 ед. урожая с огорода", 58, 10, 170, 2},
	{25, "Удача любит рисковых", "Откройте кейс `Темные дела` 20 раз(а)", 20, 30, 170, 4},
	{26, "Удача любит рисковых", "Откройте кейс `Велесова ночь` 20 раз(а)", 20, 30, 170, 4},
	{27, "Где моя тачька?", "Заберите автомобиль со штрафстоянки 1 раз", 1, 15, 170, 1},
	{28, "Хай", "Поздоровайтесь с игроками 5 раз(а)", 5, 10, 170, 1},
	{0, "Пора новых ощущений", "Купите транспорт в любом автосалоне 2 раз(а)", 2, 20, 170, 2},
	{1, "Дело мастера боится", "Соберите 78 шт. изделий, работая на заводе по производству продуктов", 78, 35, 170, 3},
	{2, "Игромания", "Выиграть в рулетке поставив на любой сектор 10 раз(а)", 10, 20, 170, 2},
	{3, "Удача на нашей стороне", "Открыть 50 кейсов любого вида", 50, 30, 170, 4},
	{4, "Чувство азарта", "Поучавствуйте в лотерее 30 раз(а)", 30, 20, 170, 3},
	{5, "Филантроп", "Пожертвуйте 160.900.000 руб. в благотворительность", 160900000, 20, 170, 3},
	{6, "Всего лишь пару царапин", "Почините транспорт с помощью рем. комплекта 10 раз", 10, 20, 170, 3},
	{7, "День стиля", "Купите новый аксессуар в магазине аксессуаров 2 раз(а)", 2, 30, 170, 2},
	{8, "Самое время для зарплат", "Получите PayDay 4 раз(а)", 4, 30, 170, 3},
	{9, "Аукцион удачи", "Выиграйте в аукционе контейнеров 30 раз(а)", 30, 30, 170, 4},
	{10, "Нужно делиться", "Передайте любую сумму другому игроку (/pay) 10 раз(а)", 10, 30, 170, 3},
	{11, "Полный бак, пожалуйста", "Заправьте транспорт на АЗС на 64 л. топлива", 64, 30, 170, 2}, 
	{12, "Я каменщик работаю три дня", "Добудьте 145 кг. руды, работая на шахте", 145, 20, 170, 2},
	{13, "Время администрации", "Задайте вопрос администрации 2 раз(а)", 2, 10, 170, 1},
	{14, "Пора бы приодеться", "Купите новую одежду в одном из магазинов одежды", 1, 10, 170, 2},
	{15, "Мастер на все руки", "Соберите рецепт для крафта 2 раз(а)", 2, 20, 170, 4},
	{16, "Ликвидация", "Победите в аукционе на свалке 10 раз(а)", 10, 20, 170, 2},
	{17, "Водитель со стажем", "Отвезите продукты работая Дальнобойщиком 10 раз(а)", 10, 30, 170, 2},
	{18, "Это наш день", "Сыграйте в кости и выиграйте 20 раз(а)", 20, 30, 170, 2},
	{19, "Детектив", "Найдите кейсы разбросаные по всей обл. 10 раз(а)", 10, 40, 170, 3},
	{20, "Не опущена а занижена", "Воспользуйте /spanel 10 раз(а)", 10, 10, 170, 2},
	{21, "Бункер", "Установите тонировку на свой автомобиль 2 раз(а)", 2, 20, 170, 2},
	{22, "Самый быстрый", "Поучаствуйте в драг рейсинге 15 раз(а)", 15, 20, 170, 3},
	{23, "Законопослушный гражданин", "Оплатите штраф в любом банкомате 10 раз(а)", 10, 30, 170, 2},
	{24, "Сезон огородов начался", "Соберите 76 ед. урожая с огорода", 76, 20, 170, 2},
	{25, "Удача любит рисковых", "Откройте кейс `Темные дела` 30 раз(а)", 30, 30, 170, 3},
	{26, "Удача любит рисковых", "Откройте кейс `Велесова ночь` 30 раз(а)", 30, 30, 170, 3},
	{27, "Где моя тачька?", "Заберите автомобиль со штрафстоянки 2 раз(а)", 2, 30, 170, 2},
	{28, "Хай", "Поздоровайтесь с игроками 15 раз(а)", 15, 20, 170, 2},
	{0, "Пора новых ощущений", "Купите транспорт в любом автосалоне 3 раз(а)", 3, 30, 170, 3},
	{1, "Дело мастера боится", "Соберите 114 шт. изделий, работая на заводе по производству продуктов", 114, 40, 170, 3},
	{2, "Игромания", "Выиграть в рулетке поставив на любой сектор 45 раз(а)", 45, 30, 170, 3},
	{3, "Удача на нашей стороне", "Открыть 90 кейсов любого вида", 90, 40, 170, 4},
	{4, "Чувство азарта", "Поучавствуйте в лотерее 40 раз(а)", 40, 40, 170, 3},
	{5, "Филантроп", "Пожертвуйте 209.100.000 руб. в благотворительность", 209100000, 40, 170, 4},
	{6, "Всего лишь пару царапин", "Почините транспорт с помощью рем. комплекта 15 раз", 15, 30, 170, 3},
	{7, "День стиля", "Купите новый аксессуар в магазине аксессуаров 3 раз(а)", 3, 30, 170, 3},
	{8, "Самое время для зарплат", "Получите PayDay 6 раз(а)", 6, 60, 170, 3},
	{9, "Аукцион удачи", "Выиграйте в аукционе контейнеров 50 раз(а)", 50, 40, 170, 3},
	{10, "Нужно делиться", "Передайте любую сумму другому игроку (/pay) 15 раз(а)", 15, 40, 170, 2},
	{11, "Полный бак, пожалуйста", "Заправьте транспорт на АЗС на 128 л. топлива", 128, 40, 170, 2}, 
	{12, "Я каменщик работаю три дня", "Добудьте 210 кг. руды, работая на шахте", 210, 20, 170, 2},
	{13, "Время администрации", "Задайте вопрос администрации 3 раз(а)", 3, 10, 170, 2},
	{14, "Пора бы приодеться", "Купите новую одежду в одном из магазинов одежды", 1, 10, 170, 2},
	{15, "Мастер на все руки", "Соберите рецепт для крафта 3 раз(а)", 3, 30, 170, 3},
	{16, "Ликвидация", "Победите в аукционе на свалке 15 раз(а)", 15, 30, 170, 4},
	{17, "Водитель со стажем", "Отвезите продукты работая Дальнобойщиком 15 раз(а)", 15, 30, 170, 4},
	{18, "Это наш день", "Сыграйте в кости и выиграйте 30 раз(а)", 30, 30, 170, 4},
	{19, "Детектив", "Найдите кейсы разбросаные по всей обл. 15 раз(а)", 15, 40, 170, 4},
	{20, "Не опущена а занижена", "Воспользуйте /spanel 15 раз(а)", 15, 10, 170, 2},
	{21, "Бункер", "Установите тонировку на свой автомобиль 3 раз(а)", 3, 20, 170, 3},
	{22, "Самый быстрый", "Поучаствуйте в драг рейсинге 25 раз(а)", 25, 20, 170, 4},
	{23, "Законопослушный гражданин", "Оплатите штраф в любом банкомате 20 раз(а)", 20, 30, 170, 2},
	{24, "Сезон огородов начался", "Соберите 94 ед. урожая с огорода", 94, 30, 170, 3},
	{25, "Удача любит рисковых", "Откройте кейс `Темные дела` 40 раз(а)", 40, 30, 170, 4},
	{26, "Удача любит рисковых", "Откройте кейс `Велесова ночь` 40 раз(а)", 40, 30, 170, 4},
	{27, "Где моя тачька?", "Заберите автомобиль со штрафстоянки 3 раз(а)", 3, 45, 170, 3},
	{28, "Хай", "Поздоровайтесь с игроками 17 раз(а)", 17, 30, 170, 3}
};	

enum S_BATTLEPASS_PRIZE_STRUCT
{
    BP_PRIZE_ID,
    BP_PRIZE_NAME[32],
    BP_PRIZE_PREMIUM,
    BP_PRIZE_TYPE, //(тип 0 - предмет | тип 1 - Скин | тип 2 донат | тип 3 EXP опыт | тип 4 Аксессуар | тип 5 VIP| тип 6 Car | тип 7 деньги)
    BP_PRIZE_ITEM_ID,
    BP_PRIZE_COUNT,
    BP_PRIZE_INDX,
	BP_PRIZE_EXP
}
new g_battlepass_prize[110][S_BATTLEPASS_PRIZE_STRUCT] =
{
    {0, "Деньги 25.000", 0, 7, 0, 25000, 0, 5},
	{1, "Ключ от кейса", 1, 0, 259, 1, 0, 20},
	{2, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{3, "Деньги 30.000", 1, 7, 0, 30000, 0, 5},
	{4, "Чертеж для Болгарки", 0, 0, 370, 1, 0, 5},
	{5, "Золотой слиток 5 шт.", 1, 9, 0, 5, 0, 15},
	{6, "Аптечка", 0, 0, 2, 1, 0, 3},
	{7, "15 донат-монет", 1, 2, 0, 15, 0, 5},
	{8, "Игральные фишки 30 шт", 0, 0, 293, 30, 0, 5},
	{9, "Танец Астронавт", 1, 10, 1, 0, 0, 20},
	{10, "10 донат-монет", 0, 2, 0, 10, 0, 5},
	{11, "Деньги 35.000", 1, 7, 0, 35000, 0, 5},
	{12, "Фотоаппарат 35 шт", 0, -1, 0, 1, 0, 3},
	{13, "Золотой слиток 10 шт.", 1, 9, 0, 10, 0, 15},
	{14, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{15, "Аксессуар Пляжные очки", 1, 4, 4132, 1, 181, 20},
	{16, "Ремонтный комплект", 0, 0, 44, 1, 0, 5},
	{17, "Золотой слиток 15 шт.", 1, 9, 0, 15, 0, 15},
	{18, "Игральные фишки 35 шт", 0, 0, 293, 35, 0, 5},
	{19, "Открытие кейса Оперской", 1, 8, 4, 1, 0, 10},
	{20, "Аксессуар Подвеска AK-47", 0, 4, 4130, 1, 246, 20},
	{21, "20 донат-монет", 1, 2, 0, 20, 0, 10},
	{22, "Автосигнализация", 0, 0, 256, 1, 0, 5},
	{23, "Деньги 40.000", 1, 7, 0, 40000, 0, 5},
	{24, "Открытие кейса Охотничий", 0, 8, 7, 1, 0, 10},
	{25, "Болгарка", 1, 0, 369, 1, 0, 5},
	{26, "15 донат-монет", 0, 2, 0, 15, 0, 5},
	{27, "Аксессуар Шляпа с зонтиком", 1, 4, 4126, 1, 185, 20},
	{28, "Деньги 45.000", 0, 7, 0, 45000, 0, 5},
	{29, "Золотой слиток 20 шт.", 1, 9, 0, 20, 0, 15},
	{30, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{31, "Открытие кейса Велесова ночь", 1, 8, 3, 1, 0, 10},
	{32, "Анимация Трехочковый", 0, 10, 2, 0, 0, 20},
	{33, "Деньги 50.000", 1, 7, 0, 50000, 0, 5},
	{34, "Ремонтный комплект", 0, 0, 44, 1, 0, 5},
	{35, "25 донат-монет", 1, 2, 0, 25, 0, 10},
	{36, "Аксессуар Хип-хоп кепка", 0, 4, 4125, 1, 185, 20},
	{37, "Золотой слиток 25 шт.", 1, 9, 0, 25, 0, 15},
	{38, "Деньги 55.000", 0, 7, 0, 55000, 0, 5},
	{39, "Открытие кейса Египетская сила", 1, 8, 8, 1, 0, 10},
	{40, "Игральные фишки 40 шт", 0, 0, 293, 40, 0, 5},
	{41, "Запчасти к рулю AMG", 1, 0, 190, 1, 0, 5},
	{42, "Танец Флоу", 0, 10, 3, 0, 0, 20},
	{43, "Аксессуар Рюкзак Уточка", 1, 4, 4127, 1, 222, 20},
	{44, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{45, "Деньги 60.000", 1, 7, 0, 60000, 0, 5},
	{46, "Чертеж для Болгарки", 0, 0, 370, 1, 0, 5},
	{47, "Золотой слиток 30 шт.", 1, 9, 0, 30, 0, 15},
	{48, "Деньги 65.000", 0, 7, 0, 65000, 0, 5},
	{49, "Внешность Гопника", 1, 1, 281, 1, 0, 50},
	{50, "Открытие кейса Черное золото", 0, 8, 6, 1, 0, 10},
	{51, "30 донат-монет", 1, 2, 0, 30, 0, 10},
	{52, "Деньги 70.000", 0, 7, 0, 70000, 0, 5},
	{53, "Аксессуар Колючий нимб", 1, 4, 4127, 1, 246, 20},
	{54, "Бронепластина", 0, 0, 323, 1, 0, 5},
	{55, "Золотой слиток 35 шт.", 1, 9, 0, 35, 0, 15},
	{56, "Ремонтный комплект", 0, 0, 44, 1, 0, 5},
	{57, "Аксессуар Рюкзак акваланг", 1, 4, 4128, 1, 222, 20},
	{58, "Купон личный X2 на 2ч.", 0, -1, 0, 0, 0, 5},
	{59, "Открытие кейса Проклятие", 1, 8, 13, 1, 0, 10},
	{60, "Игральные фишки 45 шт", 0, 0, 293, 45, 0, 5},
	{61, "Аксессуар Шлем три полоски", 1, 4, 4136, 1, 185, 20},
	{62, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{63, "35 донат-монет", 1, 2, 0, 35, 0, 10},
	{64, "Рецепт для пошива", 0, 0, 332, 1, 0, 5},
	{65, "Транспорт BMW M6 E64", 1, 6, 17424, 1, -1, 100},
	{66, "Ремонтный комплект", 0, 0, 44, 1, 0, 5},
	{67, "Золотой слиток 40 шт.", 1, 9, 0, 40, 0, 15},
	{68, "Деньги 75.000", 0, 7, 0, 75000, 0, 5},
	{69, "40 донат-монет", 1, 2, 0, 40, 0, 10},
	{70, "Ключ от кейса", 0, 0, 259, 1, 0, 20},
	{71, "Внешность Опасной девушки", 1, 1, 15338, 1, 0, 50},
	{72, "Игральные фишки 50 шт", 0, 0, 293, 50, 0, 5},
	{73, "Деньги 80.000", 1, 7, 0, 80000, 0, 5},
	{74, "20 донат-монет", 0, 2, 0, 20, 0, 10},
	{75, "Танец Крип-уок", 1, 10, 4, 0, 0, 20},
	{76, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{77, "Аксессуар Рюкзак капибара", 1, 4, 18584, 1, 222, 20},
	{78, "Элексир точности", 0, -1, 0, 0, 0, 5},
	{79, "Золотой слиток 45 шт.", 1, 9, 0, 45, 0, 15},
	{80, "Деньги 85.000", 0, 7, 0, 85000, 0, 5},
	{81, "Аксессуар Нагрудная сумка LV", 1, 4, 4129, 1, 219, 20},
	{82, "Игральные фишки 55 шт", 0, 0, 293, 55, 0, 5},
	{83, "Открытие кейса Египетская сила", 1, 8, 8, 1, 0, 10},
	{84, "Деньги 90.000", 0, 7, 0, 90000, 0, 5},
	{85, "Внешность Бората", 1, 1, 280, 1, 0, 50},
	{86, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{87, "Золотой слиток 50 шт.", 1, 9, 0, 50, 0, 15},
	{88, "25 донат-монет", 0, 2, 0, 25, 0, 10},
	{89, "Аксессуар Бронежилет разгрузка", 1, 4, 4135, 1, 277, 20},
	{90, "Открытие кейса Проклятие", 0, 8, 13, 1, 0, 10},
	{91, "Танец Слайд", 1, 10, 5, 0, 0, 20},
	{92, "Деньги 95.000", 0, 7, 0, 95000, 0, 5},
	{93, "Золотой слиток 55 шт.", 1, 9, 0, 55, 0, 15},
	{94, "Игральные фишки 60 шт", 0, 0, 293, 60, 0, 5},
	{95, "Аксессуар на плечо Шпиониро", 1, 4, 4134, 1, 275, 20},
	{96, "Деньги 100.000", 0, 7, 0, 100000, 0, 5},
	{97, "45 донат-монет", 1, 2, 0, 45, 0, 10},
	{98, "Лотерейный билет", 0, 0, 257, 1, 0, 5},
	{99, "Внешность Серфера", 1, 1, 288, 1, 0, 50},
	{100, "Игральные фишки 65 шт", 0, 0, 293, 65, 0, 5},
	{101, "Золотой слиток 60 шт.", 1, 9, 0, 60, 0, 15},
	{102, "Деньги 105.000", 0, 7, 0, 105000, 0, 5},
	{103, "Аксессуар на транспорт Матрас", 1, 4, 4137, 1, 285, 20},
	{104, "Открытие кейса Путь воина", 0, 8, 11, 1, 0, 10},
	{105, "50 донат-монет", 1, 2, 0, 50, 0, 10},
	{106, "Игральные фишки 70 шт", 0, 0, 293, 70, 0, 5},
	{107, "Аксессуар Железная рука", 1, 4, 4131, 1, 289, 20},
	{108, "Деньги 110.000", 0, 7, 0, 110000, 0, 5},
	{109, "КАМАЗ + Дрифт ВАЗ 2106", 1, 6, 17420, 1, -1, 0}
};

new g_battlepass_level[59] = {0,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115};

new g_battlepass_time_bonus[MAX_PLAYERS];

new g_battlepass_id_tasks[MAX_PLAYERS][MAX_BP_TASKS];
new g_battlepass_id_point[MAX_PLAYERS][MAX_BP_TASKS];

enum S_BATTLEPASS_LEVEL
{
	L_ID,
	L_COUNT,
	L_PRICE,
}

new g_battlepass_buylevel[3][S_BATTLEPASS_LEVEL] =
{
	{0, 5, 2000},
	{1, 15, 5700},
	{2, 35, 12600}
};

enum tatyStruct
{
	tatyPrice,
	tatyName[32],
	tatyid,
}

new g_donate_taty_price[][tatyStruct] =
{
	{0, ""},
	{63, "Мужик", 1},
	{126, "Козёл", 2},
	{189, "Пацан", 3},
	{252, "Бык", 4},
	{315, "Барыга", 5},
	{378, "Вор", 6},
	{441, "Пахан", 7},
	{504, "Блатной", 8},
	{567, "Вор в законе", 9}
};

enum donateStruct
{
	DIndex,
    DPrice,
    DValue[32],
    DValue2,
    DShow,
    DCurrentPrice,
    DSpecialPrice,
    DSpecialCurrentPrice,
    DOfferFactor,
	DXz,
	DXz2
}
new g_donate_data[][donateStruct] =
{
    {0,100,"com.hassle.online.coins.100",0,1,100,8,8,0,0,99},
	{1,300,"com.hassle.online.coins.300",0,1,300,25,25,0,0,99},
	{2,500,"com.hassle.online.coins.500",0,1,500,41,41,0,0,99},
	{3,1000,"com.hassle.online.coins.1000",0,1,1000,83,83,0,0,99},
	{4,3000,"com.hassle.online.coins.3000",0,1,3000,250,250,0,0,99},
	{5,5000,"com.hassle.online.coins.5000",0,1,5000,416,416,0,0,99},
	{6,10000,"com.hassle.online.coins.10000",0,1,10000,833,833,0,0,99},
	{7,2250,"",0,0,2250,187,187,3,0,99},
	{8,5000,"22500000",0,0,5000,416,416,3,0,99},
	{9,1000,"4170000",0,0,1000,83,83,3,0,99},
	{10,500,"1650000",0,0,500,41,41,3,0,99},
	{11,250,"750000",0,0,250,20,20,3,0,99},
	{12,113,"300000",0,0,113,9,9,3,0,99},
	{13,55000,"",0,1,55000,4583,4583,0,800,99},
	{14,57291,"",0,1,57291,4774,4774,0,0,99},
	{15,500,"",0,0,500,41,41,0,0,99},
	{16,375,"",0,0,375,31,31,0,0,99},
	{17,250,"",0,0,250,20,20,0,0,99},
	{18,875,"",0,0,6250000,612,4375000,0,0,99},
	{19,1730,"",0,0,12500000,1211,8750000,0,0,99},
	{20,3365,"",0,0,0,2355,0,0,0,99},
	{21,124,"",0,0,124,10,10,0,0,99},
	{22,63,"",0,0,63,5,5,0,0,99},
	{23,81,"",0,0,81,6,6,0,0,0},
	{24,1875,"",75,0,1875,156,156,0,0,99},
	{25,63,"",0,0,63,5,5,0,0,99},
	{26,5,"",0,0,5,0,0,0,0,11},
	{27,174,"",0,0,174,14,14,0,0,99},
	{28,375,"",0,0,375,31,31,0,0,99},
	{29,63,"",0,0,63,5,5,0,0,99},
	{30,125,"",0,0,125,10,10,0,0,99}
};

enum
{
	DONATE_PRICE_MONEY = 0,
	DONATE_PRICE_NAME,
	DONATE_PRICE_WARNS,
	DONATE_PRICE_DRUGS,
	DONATE_PRICE_LAW_ABIDING,
	DONATE_PRICE_PHONE_NUMBER,
	DONATE_PRICE_SKILLS,
	DONATE_PRICE_CAR_NUMBER,
	DONATE_PRICE_LIC_PACK,
	DONATE_PRICE_PODPISKA
}

enum
{
	DONATE_PRICE_PACK1,
	DONATE_PRICE_PACK2,
	DONATE_PRICE_PACK3,
	DONATE_PRICE_PACK4
}


public: MainMenu_OnPlayerRewardPrevPage(playerid)
{
	pageprize[playerid] = pageprize[playerid] - 1;
	pageprizenumber[playerid][0] = pageprizenumber[playerid][0] - 10;
	pageprizenumber[playerid][1] = pageprizenumber[playerid][1] - 10;
	LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
}

public: MainMenu_OnPlayerRewardNextPage(playerid)
{
	pageprize[playerid] = pageprize[playerid] + 1;
	pageprizenumber[playerid][0] = pageprizenumber[playerid][0] + 10;
	pageprizenumber[playerid][1] = pageprizenumber[playerid][1] + 10;
	LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
}

stock LoadMainPrizeMenu(playerid, event, event1)
{
	new query[348], 
		rowss, 
		name[64],
		Cache: result;

	format(query, sizeof query, "SELECT * FROM prizes WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	STRING_GLOBAL[0] = EOS;
	for(new i; i < rows; i ++)
	{
		rowss = rowss + 1;

		if(event <= rowss <= event1)
		{
			new id = cache_get_field_content_int(i, "id");
			new size = cache_get_field_content_int(i, "size");
			new item = cache_get_field_content_int(i, "item");
			new type = cache_get_field_content_int(i, "type");
			new count = cache_get_field_content_int(i, "count");
			cache_get_field_content(i, "name", name);

			if(count < 2) format(query, sizeof query, "[%d,%d,%d,%d,\"%s\",%d,%d],", size, item, id, id, name, id, type);
			else format(query, sizeof query, "[%d,%d,%d,%d,\"%s (%d шт.)\",%d,%d],", size, item, id, id, name, count, id, type);

			strcat(STRING_GLOBAL, query);
		}
	}
	new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

	cache_delete(result);

	pagemenu[playerid] = rowss / 10 + 1; 

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(9, '[%d,%d,[%s],%d]')", pageprize[playerid], pagemenu[playerid], STRING_GLOBAL, PrizesCount(playerid));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
}

stock PrizesCount(playerid)
{
	new count;
	new query[256];

	format(query, sizeof query, "SELECT * FROM prizes WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	new Cache:result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock ShowMainMenu(playerid)
{
	STRING_GLOBAL[0] = EOS;

	MainMenuUpdate(playerid);

	new day = GetElapsedTime(GetPlayerData(playerid, P_PREMIUM_TIME), gettime(), CONVERT_TIME_TO_DAYS);

    FractionPlayer(playerid);
	PropertyPlayer(playerid);
	JobsEmploymentMainMenu(playerid);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0, 1, [\"%s\",\"%s\",[%d,%d],[%d,%d,%d],[%d,%d,%d],[100,100,%d,\"%s\",%d,%d],%s,[],[[0,%d,5000000,150,2],[1,0,50,25,0],[2,%d,500,25,0]],%s,%s]]",
    GetPlayerNameEx(playerid), GetPlayerGameStatus(playerid), GetPlayerData(playerid, P_PREMIUM), day, 
	GetPlayerLevel(playerid), GetPlayerExp(playerid), GetExpToNextLevel(playerid), GetPlayerCountHouses(playerid), GetPlayerOwnableBiz(playerid), GetPlayerOwnableCars(playerid), 
	GetPlayerData(playerid, P_LAW_ABIDING), nakolka_name[GetPlayerData(playerid, P_NAKOLKA)], GetPlayerPhone(playerid), GetPlayerData(playerid, P_PHONE_BALANCE), string_owned,
    GetPlayerData(playerid, P_ACHIV_1), GetPlayerData(playerid, P_ACHIV_2), org_status, g_jobs_str);
    CEF_CREATE(playerid, 2, 4, "MainMenu", STRING_GLOBAL);
	return 1;
}

stock LoadMainMenu(playerid, MainMenuState:index)
{
    MainMenuUpdate(playerid);

	STRING_GLOBAL[0] = EOS;

	switch(index)
	{
		case MENU_MAIN_MAP:
		{
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').showMapBusiness('[[1,1],[2,1],[3,1],[5,1],[7,1],[9,1],[10,1],[13,1],[14,1],[16,1],[17,1],[21,0],[22,1],[23,1],[24,1],[25,1],[27,1],[28,1],[30,1],[31,1],[35,1],[36,0],[37,1],[38,1],[41,1],[43,1],[44,1],[45,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[58,0],[60,1],[61,1],[65,1],[66,1],[68,0],[69,0],[71,1],[72,1],[75,1],[76,1],[79,0],[80,0],[84,0],[85,0],[86,0],[87,0],[88,0],[89,0],[90,1],[91,0],[92,0],[94,0],[97,1],[98,0],[99,1],[100,1],[102,1],[103,1],[104,1],[105,0],[106,0],[107,0],[110,1],[111,0],[112,0],[113,0],[114,0],[116,0],[117,0],[118,0],[119,0],[120,0],[121,0],[122,0],[126,1],[134,1],[135,1],[137,0],[138,0],[139,0],[140,1],[141,0],[142,0],[143,1],[145,1],[146,1],[147,1],[148,1],[149,1],[153,0],[154,0],[155,1],[157,1],[158,1],[159,1],[160,1],[161,1],[162,1],[163,1],[164,1],[166,1],[167,1],[168,1],[170,1],[171,1],[173,1],[174,1],[175,1],[178,1],[179,1],[181,0],[184,1],[185,1],[192,0],[193,1],[194,0],[195,0],[197,0],[200,0],[201,1]]')");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').addMapPoints('[[129,\"Мини-игра \'Лицом к лицу\'\",[-1955.509399,1566.099975,126.324768]],[131,\"Мини-игра \'Королевские гонки\'\",[1876.938110,-2726.760498,12.130462]],[41,\"Мини-игра \'Гонка вооружений\'\",[2324.412109,1967.013916,15.531250]]]')");
		}
		case MENU_MAIN_STATS:
        {
            new day = GetElapsedTime(GetPlayerData(playerid, P_PREMIUM_TIME), gettime(), CONVERT_TIME_TO_DAYS);

            FractionPlayer(playerid);
			PropertyPlayer(playerid);
			JobsEmploymentMainMenu(playerid);

            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(0, '[\"%s\",\"%s\",[%d,%d],[%d,%d,%d],[%d,%d,%d],[100,100,%d,\"%s\",%d,%d],%s,[],[[0,%d,5000000,150,2],[1,0,50,25,0],[2,%d,500,25,0]],%s,%s]')",
	        GetPlayerNameEx(playerid), GetPlayerGameStatus(playerid), GetPlayerData(playerid, P_PREMIUM), day, 
				GetPlayerLevel(playerid), GetPlayerExp(playerid), GetExpToNextLevel(playerid), GetPlayerCountHouses(playerid), GetPlayerOwnableBiz(playerid), GetPlayerOwnableCars(playerid), 
				GetPlayerData(playerid, P_LAW_ABIDING), nakolka_name[GetPlayerData(playerid, P_NAKOLKA)], GetPlayerPhone(playerid), GetPlayerData(playerid, P_PHONE_BALANCE), string_owned,
                GetPlayerData(playerid, P_ACHIV_1), GetPlayerData(playerid, P_ACHIV_2), org_status, g_jobs_str);
	        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
		case MENU_MAIN_IMPROVEMENTS:
        {
			new improvements = GetPlayerData(playerid, P_IMPROVEMENTS);

            new i1 = (improvements >= 1) ? 1 : 0;
            new i2 = (improvements >= 2) ? 1 : 0;
            new i3 = (improvements >= 3) ? 1 : 0;
            new i4 = (improvements >= 4) ? 1 : 0;

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(15, '[[[%d,5,50000],[%d,8,75000],[%d,11,100000],[%d,15,125000]],\
			[[[\"pistol\",\"Электрошокер\",%d,100],[\"diagle\",\"Desert Eagle\",%d,100],[\"shotgun\",\"Remington 870\",%d,100],[\"mp5\",\"АКС-74У\",%d,100],[\"ak47\",\"AKM\",%d,100],[\"m4\",\"HK416\",%d,100],[\"rifle\",\"AWM\",%d,100]],\
			[[\"collector\",\"Инкассатор\",0,100,1,2,0],[\"bus\",\"Водитель автобуса\",0,600,1,2,0],[\"mechanic\",\"Автомеханик\",0,2000,1,2,0],[\"notary\",\"Нотариус\",0,150,1,2,0],[\"farm\",\"Фермер\",0,500,1,2,0],[\"lifeguard\",\"Спасатель\",0,50,1,2,0],\
			[\"window-cleaner\",\"Мойщик окон\",0,50,1,2,0], [\"plane\",\"Пилот\",0,30,1,2,0],[\"truck\",\"Дальнобойщик\",0,100,1,1,0],[\"forest-man\",\"Лесоруб\",0,70,1,2,0],[\"forest-driver\",\"Водитель пилорамы\",0,30,1,2,0],[\"framer\",\"Рамщик\",0,100,1,2,0],\
			[\"road-repair\",\"Дорожный работник\",0,600,1,2,0],[\"fish-boat\",\"Работник на пирсе\",0,600,1,2,0],[\"trash\",\"Мусоровоз\",0,500,1,2,0]],[[\"unlocker\",\"Взлом\",0,100,1,2,0],[\"computer\",\"Владение компьютером\",0,100,1,2,0],[\"fb-accuracy\",\"Футбольная меткость\",0,100,1,1,0],\
			[\"fb-power\",\"Футбольная сила удара\",0,100,1,1,0],[\"fb-goalkeeper\",\"Вратарь\",0,100,1,1,0],[\"fish\",\"Рыбак\",0,500,1,2,0]]]]')",
	        i1, i2, i3, i4, GetPlayerData(playerid, P_SKILL_SDPISTOL), GetPlayerData(playerid, P_SKILL_DEAGLE), GetPlayerData(playerid, P_SKILL_SHOTGUN), GetPlayerData(playerid, P_SKILL_MP5),
			GetPlayerData(playerid, P_SKILL_AK47), GetPlayerData(playerid, P_SKILL_M4), GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));
	        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case MENU_MAIN_DOCS:
		{
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(2, '[[0,[\"%s\",%d,\"Дом\",%d,1,%d,%d,0,\"\"]],[1,[\"%s\",[%d,%d,%d,0,0,0]]]]')",
			GetPlayerNameEx(playerid), GetPlayerData(playerid, P_SEX) ? 1 : 0, GetPlayerLevel(playerid), GetPlayerSkin(playerid), GetPlayerData(playerid, P_LAW_ABIDING),
		 	GetPlayerNameEx(playerid), GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerData(playerid, P_DRIVING_LIC_PROF), GetPlayerData(playerid, P_WEAPON_LIC));
		    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case MENU_MAIN_ACHIV:
		{
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(5, '[[0,%d,5000000,150,2],[1,50,50,25,0],[2,%d,500,25,0],\
		        [3,%d,1,25,0],[4,%d,1000,25,0],[5,150,150,50,1],[6,%d,200,50,1],[7,100,100,25,0],[8,%d,1,25,0],[9,%d,1,25,0],[10,250,250,120,2],\
		        [11,%d,100,25,0],[12,%d,15,25,0],[13,%d,1000000,25,0],[14,%d,100,50,1],[15,100,100,25,0],[16,%d,1,25,0],[17,%d,10,120,2],[18,%d,100,120,2],[19,%d,1000000,25,0],\
		        [20,%d,3000,25,0],[21,500,500,50,1],[22,%d,500000,25,0],[23,%d,1,120,2],[24,%d,20,120,2],[25,%d,1,120,2],[26,30,30,50,1],[27,12,12,25,0],[28,1,1,50,1],[29,1500,1500,50,1],\
		        [30,1,1,50,1],[31,100,100,25,0],[32,200,200,25,0],[33,%d,20,120,2],[34,%d,1,480,2],[35,250000000,250000000,120,2],[36,250,250,25,0],[37,250,250,25,0],[38,150,150,25,0],[39,50,50,50,1],\
		        [40,%d,250,50,1],[41,%d,100000000,120,2],[42,%d,1,120,2],[43,150,150,50,1],[44,100,100,50,1]]')",
			GetPlayerData(playerid, P_ACHIV_1), GetPlayerData(playerid, P_ACHIV_2), GetPlayerData(playerid, P_ACHIV_3), GetPlayerData(playerid, P_ACHIV_4), GetPlayerData(playerid, P_ACHIV_6), GetPlayerData(playerid, P_ACHIV_8),
			GetPlayerData(playerid, P_ACHIV_9), GetPlayerData(playerid, P_ACHIV_11), GetPlayerData(playerid, P_ACHIV_12), GetPlayerData(playerid, P_ACHIV_13), GetPlayerData(playerid, P_ACHIV_14), GetPlayerData(playerid, P_ACHIV_16),
			GetPlayerData(playerid, P_ACHIV_17), GetPlayerData(playerid, P_ACHIV_18), GetPlayerData(playerid, P_ACHIV_19), GetPlayerData(playerid, P_ACHIV_20), GetPlayerData(playerid, P_ACHIV_22), GetPlayerData(playerid, P_ACHIV_23),
			GetPlayerData(playerid, P_ACHIV_24), GetPlayerData(playerid, P_ACHIV_25), GetPlayerData(playerid, P_ACHIV_33), GetPlayerData(playerid, P_ACHIV_34), GetPlayerData(playerid, P_ACHIV_40), GetPlayerData(playerid, P_ACHIV_41),
			GetPlayerData(playerid, P_ACHIV_42));
		    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case MENU_MAIN_PROPERTY:
		{
			format(STRING_GLOBAL,sizeof STRING_GLOBAL,"interface('MainMenu').onServerResponse(18, '[100,[");
            str_q[0] = EOS;
            new Cache:result;
            mysql_format(mysql,str_q,sizeof str_q,"SELECT model_id,number,region FROM `ownable_cars` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);
            if(cache_num_rows()) {
                new number[32],region[8],model_id;
                model_id = cache_get_row_int(0, 0);
                cache_get_row(0, 1, number);
                cache_get_row(0, 2, region);
                format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[\"%s\",0,\"%s %s\", 0]",STRING_GLOBAL,g_vehicle_info[GetCarId(model_id)][VI_NAME], number, region);
                for(new i = 1; i<cache_num_rows(); i++) {
                    model_id = cache_get_row_int(i, 0);
                    cache_get_row(i, 1, number);
                    cache_get_row(i, 2, region);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s,[\"%s\",%d,\"%s %s\", 0]",STRING_GLOBAL,g_vehicle_info[GetCarId(model_id)][VI_NAME],i, number, region);
                }
            }
            strcat(STRING_GLOBAL, "],");
            cache_delete(result);
            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id,rent_time FROM `houses` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0), rent_time = cache_get_row_int(i, 1);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 30, %d], 0],", STRING_GLOBAL,id, rent_time <= gettime() ? 0 :
                    GetElapsedTime(rent_time, gettime(), CONVERT_TIME_TO_DAYS), rent_time <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL,"],");
            cache_delete(result);

            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT rent_time,name FROM `business` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i; i<cache_num_rows(); i++) {
                    new rent_time = cache_get_row_int(i, 0);
                    new name[32];
                    cache_get_row(i, 1, name);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[\"%s\", 0, [%d, 30, %d]],", STRING_GLOBAL,
                    name, rent_time <= gettime() ? 0 :
                    GetElapsedTime(rent_time, gettime(), CONVERT_TIME_TO_DAYS), rent_time <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
			strcat(STRING_GLOBAL, "],");
            cache_delete(result);

            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id FROM `neftenasos` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 5, %d], 0],", STRING_GLOBAL, id, 
					GetNeftData(id, N_RENT_DATE),
					GetNeftData(id, N_RENT_DATE) <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL, "],");
            cache_delete(result);

            strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id FROM `gardens` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 30, %d], 0],", STRING_GLOBAL, id, 
					GetGardenData(id, G_RENT_DATE),
					GetGardenData(id, G_RENT_DATE) <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL, "],");
            cache_delete(result);

			strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id,rent_time FROM `garage` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0), rent_time = cache_get_row_int(i, 1);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 30, %d], 0],", STRING_GLOBAL, id, rent_time <= gettime() ? 0 :
                    GetElapsedTime(rent_time, gettime(), CONVERT_TIME_TO_DAYS), rent_time <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL,"],");
            cache_delete(result);

			strcat(STRING_GLOBAL,"[");
            mysql_format(mysql,str_q,sizeof str_q,"SELECT id FROM `kiosk` WHERE owner_id = %d", GetPlayerAccountID(playerid));
            result = mysql_query(mysql,str_q,true);

            if(cache_num_rows()) {
                for(new i;i<cache_num_rows(); i++) {
                    new id = cache_get_row_int(i, 0);
                    format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d, [%d, 7, %d], 0],", STRING_GLOBAL, id, 
					GetKioskData(id, K_RENT_DATE), 
					GetKioskData(id, K_RENT_DATE) <= 3 ? 0 : 1);
                }
                strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            }
            strcat(STRING_GLOBAL,"],");
            cache_delete(result);

            strcat(STRING_GLOBAL, "[],[],[],[],[],[],[]]')");
            CEF_CREATE(playerid, 1, 2,STRING_GLOBAL);
		}
		case MENU_MAIN_TASKS:
		{
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(3, '\
			[[[%d,0,0],[%d,0,2500],[%d,0,0],[%d,0,0],[%d,0,2],[%d,0,0],[%d,0,0],[%d,0,3],[%d,0,0]],\
			[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0],[3,0,0]],\
			[[0,0,25],[0,0,25],[0,0,50],[0,0,1],[0,0,500],[0,0,25],[0,0,25],[0,0,5],[0,0,3],[0,0,3],[0,0,1],[0,0,3],[0,0,3],[0,0,5],[0,0,1],[0,0,1],[0,0,1],[0,0,0],[0,0,25],[0,0,5],[0,0,20],[0,0,3],[0,0,5],[0,0,1000],[3,0,5],[3,0,0],[3,0,200],[3,0,0],[3,0,10],[3,0,3]]]')",
			GetPlayerData(playerid, P_QUEST_1_STATS), GetPlayerData(playerid, P_QUEST_2_STATS), GetPlayerData(playerid, P_QUEST_3_STATS), GetPlayerData(playerid, P_QUEST_4_STATS), 
			GetPlayerData(playerid, P_QUEST_5_STATS), GetPlayerData(playerid, P_QUEST_6_STATS), GetPlayerData(playerid, P_QUEST_7_STATS), GetPlayerData(playerid, P_QUEST_8_STATS), 
			GetPlayerData(playerid, P_QUEST_9_STATS));

			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case MENU_MAIN_PRIZE:
		{
			if(GetPlayerData(playerid, P_DAILY_CASE_7_ID) == 0)
			{
				new RandCase = RandomEx(0, 13);

				SetPlayerData(playerid, P_DAILY_CASE_7_ID, RandCase);
				UpdatePlayerDatabaseInt(playerid, "daily_case_7_id", GetPlayerData(playerid, P_DAILY_CASE_7_ID));
			}
			if(GetPlayerData(playerid, P_DAILY_CASE_14_ID) == 0)
			{
				new RandCase = RandomEx(0, 13);

				SetPlayerData(playerid, P_DAILY_CASE_14_ID, RandCase);
				UpdatePlayerDatabaseInt(playerid, "daily_case_14_id", GetPlayerData(playerid, P_DAILY_CASE_14_ID));
			}
			if(GetPlayerData(playerid, P_DAILY_CASE_21_ID) == 0)
			{
				new RandCase = RandomEx(0, 13);

				SetPlayerData(playerid, P_DAILY_CASE_21_ID, RandCase);
				UpdatePlayerDatabaseInt(playerid, "daily_case_21_id", GetPlayerData(playerid, P_DAILY_CASE_21_ID));
			}
			if(GetPlayerData(playerid, P_DAILY_CASE_28_ID) == 0)
			{
				new RandCase = RandomEx(0, 13);

				SetPlayerData(playerid, P_DAILY_CASE_28_ID, RandCase);
				UpdatePlayerDatabaseInt(playerid, "daily_case_28_id", GetPlayerData(playerid, P_DAILY_CASE_28_ID));
			}

			UpdateDaily(playerid);

			pageprize[playerid] = 0;
			pageprizenumber[playerid][0] = 1;
			pageprizenumber[playerid][1] = 10;
			LoadMainPrizeMenu(playerid, pageprizenumber[playerid][0], pageprizenumber[playerid][1]);
		}
		case MENU_MAIN_BATTLEPASS:
		{
			new id_1 = g_battlepass_id_tasks[playerid][0];
			new id_2 = g_battlepass_id_tasks[playerid][1];
			new id_3 = g_battlepass_id_tasks[playerid][2];
			new id_4 = g_battlepass_id_tasks[playerid][3];
			new id_5 = g_battlepass_id_tasks[playerid][4];
			new id_6 = g_battlepass_id_tasks[playerid][5];
			new id_7 = g_battlepass_id_tasks[playerid][6];
			new id_8 = g_battlepass_id_tasks[playerid][7];
			new id_9 = g_battlepass_id_tasks[playerid][8];
			new id_10 = g_battlepass_id_tasks[playerid][9];
			new id_11 = g_battlepass_id_tasks[playerid][10];
			new id_12 = g_battlepass_id_tasks[playerid][11];

			new remaining_time = GetBattlePassRemainingTime();

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(4, '[[%d,4,%d,%d,%d,1500,%d,100,%d,[%d,1749427200],0,20,%d,1691614800,1200,1749564027,[[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0],[\"%s\",\"%s\",%d,%d,[[0,%d],[1,%d]],%d,0,%d,0]],[[5,2000,2000],[15,6000,5700],[35,14000,12600]],%d,17901737]]')",
			OnBattlePass_GetLevel(playerid), GetPlayerData(playerid, P_BP_PREMIUM), GetPlayerData(playerid, P_BP_PRIZE_1), GetPlayerData(playerid, P_BP_PRIZE_2), remaining_time, GetPlayerData(playerid, P_BP_EXP), GetPlayerData(playerid, P_BP_TIME_TASKS), g_battlepass_time_bonus[playerid],
			g_battlepass_tasks[id_1][BP_NAME_TASKS], g_battlepass_tasks[id_1][BP_TASKS], g_battlepass_id_point[playerid][0], g_battlepass_tasks[id_1][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_1), OnBattlePass_GetPrizeGolds(playerid, id_1), g_battlepass_tasks[id_1][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 0),
			g_battlepass_tasks[id_2][BP_NAME_TASKS], g_battlepass_tasks[id_2][BP_TASKS], g_battlepass_id_point[playerid][1], g_battlepass_tasks[id_2][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_2), OnBattlePass_GetPrizeGolds(playerid, id_2), g_battlepass_tasks[id_2][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 1),
			g_battlepass_tasks[id_3][BP_NAME_TASKS], g_battlepass_tasks[id_3][BP_TASKS], g_battlepass_id_point[playerid][2], g_battlepass_tasks[id_3][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_3), OnBattlePass_GetPrizeGolds(playerid, id_3), g_battlepass_tasks[id_3][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 2),
			g_battlepass_tasks[id_4][BP_NAME_TASKS], g_battlepass_tasks[id_4][BP_TASKS], g_battlepass_id_point[playerid][3], g_battlepass_tasks[id_4][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_4), OnBattlePass_GetPrizeGolds(playerid, id_4), g_battlepass_tasks[id_4][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 3),
			g_battlepass_tasks[id_5][BP_NAME_TASKS], g_battlepass_tasks[id_5][BP_TASKS], g_battlepass_id_point[playerid][4], g_battlepass_tasks[id_5][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_5), OnBattlePass_GetPrizeGolds(playerid, id_5), g_battlepass_tasks[id_5][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 4),
			g_battlepass_tasks[id_6][BP_NAME_TASKS], g_battlepass_tasks[id_6][BP_TASKS], g_battlepass_id_point[playerid][5], g_battlepass_tasks[id_6][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_6), OnBattlePass_GetPrizeGolds(playerid, id_6), g_battlepass_tasks[id_6][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 5),
			g_battlepass_tasks[id_7][BP_NAME_TASKS], g_battlepass_tasks[id_7][BP_TASKS], g_battlepass_id_point[playerid][6], g_battlepass_tasks[id_7][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_7), OnBattlePass_GetPrizeGolds(playerid, id_7), g_battlepass_tasks[id_7][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 6),
			g_battlepass_tasks[id_8][BP_NAME_TASKS], g_battlepass_tasks[id_8][BP_TASKS], g_battlepass_id_point[playerid][7], g_battlepass_tasks[id_8][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_8), OnBattlePass_GetPrizeGolds(playerid, id_8), g_battlepass_tasks[id_8][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 7),
			g_battlepass_tasks[id_9][BP_NAME_TASKS], g_battlepass_tasks[id_9][BP_TASKS], g_battlepass_id_point[playerid][8], g_battlepass_tasks[id_9][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_9), OnBattlePass_GetPrizeGolds(playerid, id_9), g_battlepass_tasks[id_9][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 8),
			g_battlepass_tasks[id_10][BP_NAME_TASKS], g_battlepass_tasks[id_10][BP_TASKS], g_battlepass_id_point[playerid][9], g_battlepass_tasks[id_10][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_10), OnBattlePass_GetPrizeGolds(playerid, id_10), g_battlepass_tasks[id_10][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 9),
			g_battlepass_tasks[id_11][BP_NAME_TASKS], g_battlepass_tasks[id_11][BP_TASKS], g_battlepass_id_point[playerid][10], g_battlepass_tasks[id_11][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_11), OnBattlePass_GetPrizeGolds(playerid, id_11), g_battlepass_tasks[id_11][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 10),
			g_battlepass_tasks[id_12][BP_NAME_TASKS], g_battlepass_tasks[id_12][BP_TASKS], g_battlepass_id_point[playerid][11], g_battlepass_tasks[id_12][BP_POINT], OnBattlePass_GetPrizeExp(playerid, id_12), OnBattlePass_GetPrizeGolds(playerid, id_12), g_battlepass_tasks[id_12][BP_DONATE_PRICE],OnBattlePass_TaskStatus(playerid, 11),
			GetPlayerData(playerid, P_BP_GOLDS));

			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case MENU_MAIN_STORE:
		{
			CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").setVipData([[\"Просмотр администрации в сети (/admins)\",1,1,1],[\"Дополнительные слоты для покупки личного транспорта: %d\",2,4,7],[\"Пособие в размере %d рублей каждый PayDay для безработных\",500,1000,2000],[\"Возможность поставить %d дополнительные ставки на аукционе одновременно\",2,3,4],[\"Расширенные слоты в футбольных комнатах\",1,1,1],[\"Дополнительно прибавляет %d ед. опыта каждый 2-й полученный PayDay (до 30-го уровня)\",1,2,2],[\"Ускоренная прокачка навыков работы (/skill)\",1,1,1],[\"Дополнительно прибавляет %d ед. здоровья во время лечения в больнице\",2,3,5],[\"Возможность покупать воздушный транспорт при наличии необходимого имущества\",1,1,1],[\"Пониженная стоимость ежедневной оплаты квартиры/дома в %d раза\",0,2,2],[\"Возможность оценивать RolePlay уровень игроков каждый час (/rp)\",0,1,1],[\"Ускоренная прокачка навыков стрельбы из оружия в тире\",0,1,1],[\"Увеличенное время действия маски (/mask)\",1,1,1],[\"Уменьшенный срок блокировки аккаунта в %d раза\",0,0,2],[\"Пониженная стоимость ежедневной оплаты огорода в %d раза\",0,2,2],[\"Пониженная стоимость ежедневной оплаты гаража в %d раза\",0,2,2],[\"Дополнительно прибавляет %d слот(а) для профессий (/myjobs)\",1,2,4],[\"Ускоренное время прокачки тюремной наколки в %d раза\",0,2,2],[\"Возможность использовать еду для новичков\",0,1,1],[\"Ускоренная прокачка стиля боя в спортзале\",0,1,1],[\"Уменьшенный урон от голода\",0,1,1],[\"Дополнительные %d слота для покупки гаража\",0,2,4],[\"Дополнительные %d слота для покупки дома/квартиры\",0,0,4],[\"Возможность передавать за раз до %d рублей (/pay)\",0,0,15000],[\"Дополнительные %d кг в инвентаре с улучшением `Грузоподъемность`\",0,0,5],[\"Увеличенный опыт в %d раза каждый PayDay (до 30-го уровня)\",0,0,2],[\"Пониженная стоимость оплаты штрафа в %d раза\",0,0,2],[\"Возможность купить и загрузить любой наземный транспорт без необходимого имущества\",0,0,1],[\"Бесплатная доставка транспорта к дому\",0,0,1],[\"Увеличенное количество очков для банды при совершении криминальных действий\",0,0,1],[\"Ослабленное чувство голода\",0,0,1],[\"Пониженная стоимость ежедневной оплаты бизнеса в %d раза\",0,0,2],[\"Дополнительно прибавляет %d ед. законопослушности каждый PayDay\",0,0,1],[\"Уменьшенное время нахождения транспорта в угоне в %d раза\",0,0,2],[\"Ускоренная прокачка стиля танца в танцевальной школе\",1,1,1],[\"Увеличивает максимальное количество слотов личного транспорта до %d\",0,0,21],[\"Уменьшенное время действия предупреждения\",0,0,1],[\"Возможность включать выбранную музыку в бумбоксе\",1,1,1],[\"Возможность выбрать место появления при входе в игру (Только автовокзалы)\",0,1,1],[\"Повышенная зарплата в государственных организациях на %d процентов\",5,10,15],[\"Повышенная зарплата на начальных работах на %d процентов\",10,20,50],[\"Возврат %d процентов от победной ставки на аукционе контейнеров\",0,0,6],[\"Максимальная зарплата %d руб за один PayDay\",150000,400000,700000],[\"Скидка %d процентов на все услуги на маркетплейсе Равито\",0,50,50],[\"Бесплатное продвижение при публикации объявления на Равито\",0,0,1]])");
			
			STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(13, '[");
            for(new i; i < sizeof g_donate_data; i++) 
			{
                format(STRING_GLOBAL,sizeof STRING_GLOBAL,"%s[%d,%d,\"%s\",%d,%d,%d,%d,%d,%d,%d,%d],",STRING_GLOBAL, g_donate_data[i][DIndex], g_donate_data[i][DPrice], g_donate_data[i][DValue], g_donate_data[i][DValue2], g_donate_data[i][DShow], g_donate_data[i][DCurrentPrice], g_donate_data[i][DSpecialPrice], g_donate_data[i][DSpecialCurrentPrice], g_donate_data[i][DOfferFactor], g_donate_data[i][DXz], g_donate_data[i][DXz2]);
            }
            strdel(STRING_GLOBAL,strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));
            strcat(STRING_GLOBAL,"]')");
            CEF_CREATE(playerid, 1, 2,STRING_GLOBAL);

			SetPVarInt(playerid, "buynumbertype", 1);
		}
		case MENU_MAIN_SETTINGS:
        {
			SettingsInterface(playerid);
        }
		case MENU_MAIN_REPORT:
		{
			m_player_report_id[playerid] = -1;
			LoadReportTicket(playerid);
		}
		case MENU_MAIN_DRAW:
		{
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(17, '[1,0,1,0,0,2,[5000000,10000000],0,0,7200,\"https://hassle.online/summer-2025\",5,1,\"https://hassle.fra1.cdn.digitaloceanspaces.com/contest-202506-2/prizes.json\"]')");
		}
	}
	return 1;
}

public: MainMenu_OnPlayerChangeTab(playerid, event)
{
	if(!(0 <= event <= 14)) return 1;
	switch(event){
		case MENU_MAIN_MAP: LoadMainMenu(playerid, MENU_MAIN_MAP);
		case MENU_MAIN_STATS: LoadMainMenu(playerid, MENU_MAIN_STATS);
		case MENU_MAIN_IMPROVEMENTS: LoadMainMenu(playerid, MENU_MAIN_IMPROVEMENTS);
		case MENU_MAIN_DOCS: LoadMainMenu(playerid, MENU_MAIN_DOCS);
		case MENU_MAIN_PROMO: LoadMainMenu(playerid, MENU_MAIN_PROMO);
		case MENU_MAIN_ACHIV: LoadMainMenu(playerid, MENU_MAIN_ACHIV);
		case MENU_MAIN_PROPERTY: LoadMainMenu(playerid, MENU_MAIN_PROPERTY);
		case MENU_MAIN_TASKS: LoadMainMenu(playerid, MENU_MAIN_TASKS);
		case MENU_MAIN_PRIZE: LoadMainMenu(playerid, MENU_MAIN_PRIZE);
		case MENU_MAIN_BATTLEPASS: LoadMainMenu(playerid, MENU_MAIN_BATTLEPASS);
		case MENU_MAIN_REWARDS: LoadMainMenu(playerid, MENU_MAIN_REWARDS);
		case MENU_MAIN_STORE: LoadMainMenu(playerid, MENU_MAIN_STORE);
		case MENU_MAIN_SETTINGS: LoadMainMenu(playerid, MENU_MAIN_SETTINGS);
		case MENU_MAIN_REPORT: LoadMainMenu(playerid, MENU_MAIN_REPORT);
		case MENU_MAIN_DRAW: LoadMainMenu(playerid, MENU_MAIN_DRAW);
	}
	return true;
}

public: PlayerImprove_OnPlayerBuy(playerid, item)
{
	new levelImprove, moneyImprove;

	if(item == 0) levelImprove = 5, moneyImprove = 250000;
	if(item == 1) levelImprove = 8, moneyImprove = 500000;
	if(item == 2) levelImprove = 11, moneyImprove = 750000;
	if(item == 3) levelImprove = 15, moneyImprove = 1000000;

	if(GetPlayerData(playerid, P_LEVEL) < levelImprove) return SendClientMessage(playerid, 0x79cb64FF, "Ваш уровень слишком мал!");
	
	if(GetPlayerData(playerid, P_IMPROVEMENTS) >= 4)
        return 1;

	if(!VerifyIntString(QueryPlayerBalance(playerid), moneyImprove))
		return SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно средств");

	ModifyCashBalance(playerid, -moneyImprove);
	
	AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);
	UpdatePlayerDatabaseInt(playerid, "improvements", GetPlayerData(playerid, P_IMPROVEMENTS));
	LoadMainMenu(playerid, MENU_MAIN_IMPROVEMENTS);
	return 1;
}

stock MainMenu_OnPlayerOpenHelp(playerid) callcmd::help(playerid, "");

stock MainMenu_OnPlayerClickPromoCode(playerid) callcmd::pcode(playerid, "");
stock MainMenu_OnPlayerClickBonusCode(playerid) IntfDialogCallRemote(playerid, DIALOG_BONUSCODE_ACTIVATE, DIALOG_STYLE_INPUT,"Активация бонус кода","Введите ваш бонус код в поле ниже","Далее", "Отмена");

public: MainMenu_OnPlayerTakeRewards(playerid, event)
{
	new id = event,
		query[64],
		name[64],
		Cache: result;

	format(query, sizeof query, "SELECT * FROM prizes WHERE id='%d'", id);
	result = mysql_query(mysql, query, true);

	cache_get_field_content(0, "name", name);

	cache_delete(result);

	SetPVarInt(playerid, "id_priz",id);

    PrizesGive(playerid);
}

stock GivePlayerMyPrizes(playerid, name[], size, item, type, count, indx)
{
	new query[256];
	format(query, sizeof query , "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, '%s', %d, %d, %d, %d, %d)", GetPlayerAccountID(playerid), name, size, item, type, count, indx);
	mysql_tquery(mysql, query, "", "");

    return 1;
}

stock LoadReportMesage(playerid, report_id)
{
	new query[320];
	new	Cache: result;

	format(query, sizeof query, "SELECT * FROM `report_mesage` WHERE `report_id`=%d", report_id);
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	new text[150], name[32];

	STRING_GLOBAL = "";
	for(new i; i < rows; i ++)
	{
		cache_get_field_content(i, "name", name);
		cache_get_field_content(i, "text", text);

		new status = cache_get_field_content_int(i, "status");
		new data = cache_get_field_content_int(i, "data");

   		format(query, sizeof query, "[0, \"%s\", %d, %d, \"%s\"],", text, status, data, name);
		strcat(STRING_GLOBAL, query);
	}
	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	cache_delete(result);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(12, '[%s]')", STRING_GLOBAL);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    STRING_GLOBAL[0] = EOS;

    return true;
}
stock LoadReportTicket(playerid)
{
	new query[320];
	new	Cache: result;

	format(query, sizeof query, "SELECT * FROM `report_ticket` WHERE `owner_id`=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	new text[150], name[32];

	STRING_GLOBAL = "";
	for(new i; i < rows; i ++)
	{
		cache_get_field_content(i, "name", name);
		cache_get_field_content(i, "text", text);

		new lock = cache_get_field_content_int(i, "lock");
		new data = cache_get_field_content_int(i, "data");

   		format(query, sizeof query, "[\"%s\", 0, 1, %d, \"%s\", %d],", name, data, text, lock);
		strcat(STRING_GLOBAL, query);
	}

	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	cache_delete(result);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').onServerResponse(11, '[%s]')", STRING_GLOBAL);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    STRING_GLOBAL[0] = EOS;
    
    return true;
}

stock OnSendChatMessageTicket(playerid, message[])
{
	if(m_player_report_id[playerid] == -1) return GameText(playerid, "Выберите один из запросов", 3000, 0);

    if(strlen(message) < 5 || strlen(message) > 149) 
        return GameText(playerid, "~w~Ответ должен быть от 5 до 149 символов!", 4000, 3);

    if(strfind(message,"|") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1)
        return SCM(playerid, COLOR_RED, "Хуй крашнешь сын потаскухи иди на нубо рп");

    new query[345];

    format(query, sizeof query, "INSERT INTO `report_mesage` (`owner_id`, `report_id`, `name`, `text`, `data`, `status`) VALUES (%d, %d, '%s', '%s', %d, 0)", GetPlayerAccountID(playerid), m_player_report_id[playerid], GetPlayerNameEx(playerid), message, gettime());
    mysql_query(mysql, query, false);

    format(query, sizeof query, "UPDATE `report_ticket` SET `name`='%s', `text`='%s' WHERE id=%d", GetPlayerNameEx(playerid), message, m_player_report_id[playerid]);
    mysql_query(mysql, query, false);

    LoadReportMesage(playerid, m_player_report_id[playerid]), LoadReportTicket(playerid);
	return 1;
}
public: OnSelectTicket(playerid, event)
{
	new query[56],
		Cache: result;

	format(query, sizeof query, "SELECT * FROM `report_ticket` WHERE `owner_id`=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new id = cache_get_field_content_int(event, "id");

    m_player_report_id[playerid] = id;

    cache_delete(result);

    CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(16, '[2, \"Ожидайте ответа администратора\", 0]')");

	LoadReportMesage(playerid, id);

    return true;
}

public: Report_OnPlayerCloseTicket(playerid)
{
    new event = m_player_report_id[playerid],
        query[148],
        Cache: result;

    format(query, sizeof query, "UPDATE `report_ticket` SET `lock`=1 WHERE id=%d", event);
	mysql_query(mysql, query, false);

    format(query, sizeof query, "SELECT * FROM `report_mesage` WHERE `report_id`=%d", event);
    result = mysql_query(mysql, query, true);

	for(new i; i < cache_num_rows(); i ++)
	{
        new id = cache_get_field_content_int(i, "id");

        format(query, sizeof query, "DELETE FROM `report_mesage` WHERE `id`=%d", id);
	    mysql_query(mysql, query, false);
    }

    cache_delete(result);

    CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(16, '[1, \"Вы закрыли запрос\", 0]')");

	LoadReportTicket(playerid);

    m_player_report_id[playerid] = -1;

    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
        else if(!IsPlayerLogged(i)) continue;

        if(GetPlayerData(i, P_ADMIN) == 0) continue;

        LoadAdminsReport(i);
    }

    return true;
}

public: OnPlayerCreateTicket(playerid, status_id, message[])
{
	if(status_id != 0)
	{
		if(strfind(message,"|") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1) return true;

		if(strlen(message) < 5 || strlen(message) > 149) 
            return GameText(playerid, "~w~Ответ должен быть от 5 до 149 символов!", 4000, 3);

        new query[320],
            text[150], 
            name[150],
            Cache: result;

		format(query, sizeof query, "INSERT INTO `report_ticket` (`owner_id`, `name`, `text`, `data`, `lock`) VALUES (%d, '%s', '%s', %d, 0)", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), message, gettime());
		mysql_query(mysql, query, false);

		format(query, sizeof query, "SELECT * FROM `report_ticket` WHERE `owner_id`=%d ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
        result = mysql_query(mysql, query, true);

        cache_get_field_content(0, "name", name);
        cache_get_field_content(0, "text", text);

        new id = cache_get_field_content_int(0, "id");

        cache_delete(result);

        format(query, sizeof query, "INSERT INTO `report_mesage` (`owner_id`, `report_id`, `name`, `text`, `data`, `status`) VALUES (%d, %d, '%s', '%s', %d, 0)", GetPlayerAccountID(playerid), id, name, text, gettime());
        mysql_query(mysql, query, false);

        LoadReportTicket(playerid), LoadReportMesage(playerid, id);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            else if(!IsPlayerLogged(i)) continue;

            if(GetPlayerData(i, P_ADMIN) == 0) continue;

            LoadAdminsReport(i);
        }
	}
	return true;
}
stock LoadAdminsReport(playerid)
{
    new query[32],
        Cache: result;

    result = mysql_query(mysql, "SELECT * FROM `report_ticket` WHERE `lock`=0", true);

    STRING_GLOBAL[0] = EOS;
	for(new i; i < cache_num_rows(); i ++)
	{
        new id = cache_get_field_content_int(i, "id");
        
        format(query, sizeof query, "[%d],", id);
		strcat(STRING_GLOBAL, query);
	}

	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	cache_delete(result);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('UnansweredRequests').setRequests([[%s],[%d]])", STRING_GLOBAL, gettime());
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    return true;
}
//бп
public: BPd_OnPlayerBuyPremium(playerid)
{
    if(QueryPlayerDonationBalance(playerid) < 1080) 
	{
		SendClientMessage(playerid, -1, "{eec702}У вас недостаточно донат валюты для покупки");
		return GameText(playerid, "~r~У вас недостаточно~n~~w~донат валюты для покупки", 4000, 3);
	}

    ProcessPlayerCredit(playerid, -1080, "Покупка battlepass");

    SetPlayerData(playerid, P_BP_PREMIUM, 1);

	AddPlayerAchiv(playerid, 23);

	CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([1, [[]]])");

    UpdatePlayerDatabaseInt(playerid, "bp_premium", GetPlayerData(playerid, P_BP_PREMIUM));
    UpdatePlayerDatabaseInt(playerid, "bp_exp", GetPlayerData(playerid, P_BP_EXP));
    UpdatePlayerDatabaseInt(playerid, "bp_level", GetPlayerData(playerid, P_BP_LEVEL));
    LoadMainMenu(playerid, MENU_MAIN_BATTLEPASS);
    return true;
}
public: BPd_OnPlayerSkipTask(playerid, type)
{
    if(QueryPlayerDonationBalance(playerid) < g_battlepass_tasks[g_battlepass_id_tasks[playerid][type]][BP_DONATE_PRICE])
	{
		SendClientMessage(playerid, -1, "{eec702}У вас недостаточно донат валюты для пропуска задания");
		return GameText(playerid, "~r~У вас недостаточно~n~~w~донат валюты", 4000, 3);
	}

    ProcessPlayerCredit(playerid, -g_battlepass_tasks[g_battlepass_id_tasks[playerid][type]][BP_DONATE_PRICE], "Пропуск задания в battlepass");

    AddPlayerData(playerid, P_BP_EXP, +, OnBattlePass_GetPrizeExp(playerid, g_battlepass_id_tasks[playerid][type]));
	g_battlepass_id_tasks[playerid][type] = random(sizeof g_battlepass_tasks);

    if(type == 0) UpdatePlayerDatabaseInt(playerid, "bp_task_1", g_battlepass_id_tasks[playerid][0]);
    if(type == 1) UpdatePlayerDatabaseInt(playerid, "bp_task_2", g_battlepass_id_tasks[playerid][1]);
    if(type == 2) UpdatePlayerDatabaseInt(playerid, "bp_task_3", g_battlepass_id_tasks[playerid][2]);
    if(type == 3) UpdatePlayerDatabaseInt(playerid, "bp_task_4", g_battlepass_id_tasks[playerid][3]);
    if(type == 4) UpdatePlayerDatabaseInt(playerid, "bp_task_5", g_battlepass_id_tasks[playerid][4]);
    if(type == 5) UpdatePlayerDatabaseInt(playerid, "bp_task_6", g_battlepass_id_tasks[playerid][5]);
	if(type == 6) UpdatePlayerDatabaseInt(playerid, "bp_task_7", g_battlepass_id_tasks[playerid][6]);
	if(type == 7) UpdatePlayerDatabaseInt(playerid, "bp_task_8", g_battlepass_id_tasks[playerid][7]);
	if(type == 8) UpdatePlayerDatabaseInt(playerid, "bp_task_9", g_battlepass_id_tasks[playerid][8]);
	if(type == 9) UpdatePlayerDatabaseInt(playerid, "bp_task_10", g_battlepass_id_tasks[playerid][9]);
	if(type == 10) UpdatePlayerDatabaseInt(playerid, "bp_task_11", g_battlepass_id_tasks[playerid][10]);
	if(type == 11) UpdatePlayerDatabaseInt(playerid, "bp_task_12", g_battlepass_id_tasks[playerid][11]);

    UpdatePlayerDatabaseInt(playerid, "bp_exp", GetPlayerData(playerid, P_BP_EXP));
	
    OnBattlePass_StatusLevel(playerid);
    LoadMainMenu(playerid, MENU_MAIN_BATTLEPASS);
    return true;
}

public: BPd_OnPlayerBuyLevel(playerid, event)
{
	for(new i; i < sizeof(g_battlepass_buylevel); i++)
	{
		if(g_battlepass_buylevel[i][L_ID] != event) continue;
		if(QueryPlayerDonationBalance(playerid) < g_battlepass_buylevel[i][L_PRICE])
		{
			SendClientMessage(playerid, -1, "{eec702}Недостаточно средств для покупки");
			return GameText(playerid, "~r~Недостаточно Средств", 4000, 3);
		} 

		ProcessPlayerCredit(playerid, -g_battlepass_buylevel[i][L_PRICE], "Пропуск задания в battlepass"); 
		GameText(playerid, "~g~Успешно", 4000, 3);
		AddPlayerData(playerid, P_BP_LEVEL, +, g_battlepass_buylevel[i][L_COUNT]);
		OnBattlePass_StatusLevel(playerid);
		UpdatePlayerDatabaseInt(playerid, "bp_level", GetPlayerData(playerid, P_BP_LEVEL));
    	LoadMainMenu(playerid, MENU_MAIN_BATTLEPASS);
	}
	return true;
}
public: BPd_OnPlayerTakeReward(playerid, type, event)
{
	if(GetPlayerData(playerid, P_BP_LEVEL) == 0) return true;

	for(new i; i < sizeof g_battlepass_prize; i++)
	{
		if(g_battlepass_prize[i][BP_PRIZE_ID] != type) continue;

		if(g_battlepass_prize[i][BP_PRIZE_PREMIUM] == 0) AddPlayerData(playerid, P_BP_PRIZE_1, +, 1), UpdatePlayerDatabaseInt(playerid, "bp_prize_1", GetPlayerData(playerid, P_BP_PRIZE_1));
		if(g_battlepass_prize[i][BP_PRIZE_PREMIUM] == 1) AddPlayerData(playerid, P_BP_PRIZE_2, +, 1), UpdatePlayerDatabaseInt(playerid, "bp_prize_2", GetPlayerData(playerid, P_BP_PRIZE_2));

		if(event == 0)
		{
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 0)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 8, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, g_battlepass_prize[i][BP_PRIZE_COUNT], 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 1)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 4, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, 1, 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 2)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 10, 0, 0, g_battlepass_prize[i][BP_PRIZE_COUNT], 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 3)
			{
				AddPlayerData(playerid, P_EXP, +, g_battlepass_prize[i][BP_PRIZE_COUNT]);
				UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 4)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 6, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, 1, g_battlepass_prize[i][BP_PRIZE_INDX]);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 5)
			{
				SetPlayerData(playerid, P_PREMIUM, 2);
				SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + 30 * 86400);

				UpdatePlayerDatabaseInt(playerid, "premium", 2);
				UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + 30 * 86400);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 6)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 3, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, 1, -1);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 7)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 5, 0, 0, g_battlepass_prize[i][BP_PRIZE_COUNT], 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 8)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 21, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, -1, 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 9)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 23, 0, 0, g_battlepass_prize[i][BP_PRIZE_COUNT], 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] == 10)
			{
				GivePlayerMyPrizes(playerid, g_battlepass_prize[i][BP_PRIZE_NAME], 14, g_battlepass_prize[i][BP_PRIZE_ITEM_ID], 0, 1, 0);
			}
			if(g_battlepass_prize[i][BP_PRIZE_TYPE] != 5 && g_battlepass_prize[i][BP_PRIZE_TYPE] != 3) SCMF(playerid, 0xff7627FF, "Приз {FFFFFF}%s {ff7627}успешно был зачислен на ваш аккаунт. Забрать его можно в главном меню -> Награды -> Мои награды", g_battlepass_prize[i][BP_PRIZE_NAME]);
			else SCMF(playerid, 0xff7627FF, "Приз {FFFFFF}%s {ff7627}успешно был зачислен на ваш аккаунт", g_battlepass_prize[i][BP_PRIZE_NAME]);
		}
		else
		{
			AddPlayerData(playerid, P_BP_EXP, +, g_battlepass_prize[i][BP_PRIZE_EXP]);
			UpdatePlayerDatabaseInt(playerid, "bp_exp", GetPlayerData(playerid, P_BP_EXP));
			SCMF(playerid, 0xff7627FF, "Приз {FFFFFF}%s {ff7627}успешно был распылен", g_battlepass_prize[i][BP_PRIZE_NAME]);
			OnBattlePass_StatusLevel(playerid);
		}
		break;
	}
    LoadMainMenu(playerid, MENU_MAIN_BATTLEPASS);
    return true;
}

stock OnBattlePass_Perfomance(playerid, type, count)
{
    new bool:changed = false;

    new current_time = gettime();
    if(bp_timer <= current_time) return 0;

    for(new i; i < MAX_BP_TASKS; i++)
    {
        if(g_battlepass_tasks[g_battlepass_id_tasks[playerid][i]][BP_TYPE_TASKS] != type) continue;
        if(OnBattlePass_TaskStatus(playerid, i) == 1) continue;

        g_battlepass_id_point[playerid][i] += count;
        changed = true;

        if(OnBattlePass_TaskStatus(playerid, i) == 1)
        {
            new prize = OnBattlePass_GetPrizeExp(playerid, g_battlepass_id_tasks[playerid][i]);
            AddPlayerData(playerid, P_BP_EXP, +, prize);
            UpdatePlayerDatabaseInt(playerid, "bp_exp", GetPlayerData(playerid, P_BP_EXP));

            new msg[148];
            format(msg, sizeof msg, "Вы выполнили {FFFFFF}`%s` {ff7627}и получили {FFFFFF}%d оч. {ff7627}У вас теперь {FFFFFF}%d очков.", g_battlepass_tasks[g_battlepass_id_tasks[playerid][i]][BP_NAME_TASKS], prize, GetPlayerData(playerid, P_BP_EXP));
            SCM(playerid, 0xff7627FF, msg);
            GameText(playerid, "~r~Новые очки~n~боевого пропуска", 3000, 2);
        }
    }

    if(changed)
    {
        new query[248];
		mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET bp_point_1=%d,bp_point_2=%d,bp_point_3=%d,bp_point_4=%d,bp_point_5=%d,bp_point_6=%d,bp_point_7=%d,\
			bp_point_8=%d,bp_point_9=%d,bp_point_10=%d,bp_point_11=%d,bp_point_12=%d WHERE id=%d LIMIT 1", 
			g_battlepass_id_point[playerid][0], 
            g_battlepass_id_point[playerid][1], 
            g_battlepass_id_point[playerid][2], 
            g_battlepass_id_point[playerid][3], 
            g_battlepass_id_point[playerid][4], 
            g_battlepass_id_point[playerid][5],
			g_battlepass_id_point[playerid][6],
			g_battlepass_id_point[playerid][7],
			g_battlepass_id_point[playerid][8],
			g_battlepass_id_point[playerid][9],
			g_battlepass_id_point[playerid][10], 
			g_battlepass_id_point[playerid][11],
            GetPlayerAccountID(playerid)
		);
	    mysql_pquery(mysql, query);
    }

    OnBattlePass_StatusLevel(playerid);
    return 1;
}

stock OnBattlePass_TaskStatus(playerid, type)
{
    new status;
    if(g_battlepass_id_point[playerid][type] >= g_battlepass_tasks[g_battlepass_id_tasks[playerid][type]][BP_POINT]) status = 1;

    return status;
}

stock OnBattlePass_StatusLevel(playerid)
{
    if(GetPlayerData(playerid, P_BP_EXP) >= 100)
    {
        AddPlayerData(playerid, P_BP_EXP, -, 100);
        AddPlayerData(playerid, P_BP_LEVEL, +, 1);

        UpdatePlayerDatabaseInt(playerid, "bp_exp", GetPlayerData(playerid, P_BP_EXP));
        UpdatePlayerDatabaseInt(playerid, "bp_level", GetPlayerData(playerid, P_BP_LEVEL));
    }
    return true;
}

stock OnBattlePass_GetLevel(playerid)
{
    if(GetPlayerData(playerid, P_BP_PREMIUM) == 0) 
    {
        return g_battlepass_level[GetPlayerData(playerid, P_BP_LEVEL)];
    }
    else 
    {
        return GetPlayerData(playerid, P_BP_LEVEL);
    }
}

stock OnBattlePass_GetPrizeExp(playerid, type)
{
    if(GetPlayerData(playerid, P_BP_PREMIUM) == 0) 
    {
        return g_battlepass_tasks[type][BP_PRIZE];
    }
    else 
    {
        return g_battlepass_tasks[type][BP_PRIZE] * 2;
    }
}

stock OnBattlePass_GetPrizeGolds(playerid, type)
{
    if(GetPlayerData(playerid, P_BP_PREMIUM) == 0) 
    {
        return g_battlepass_tasks[type][BP_PRIZE_GOLDS];
    }
    else 
    {
        return g_battlepass_tasks[type][BP_PRIZE_GOLDS] * 2;
    }
}

stock OnBattlePass_TimeTasks(playerid)
{
	new current_time = gettime();
    if(bp_timer <= current_time) return 0;

	if(GetPlayerData(playerid, P_BP_TIME_TASKS) < gettime())
	{
		for(new i = 0; i < MAX_BP_TASKS; i++)
    	{
			g_battlepass_id_tasks[playerid][i] = random(sizeof g_battlepass_tasks);
			g_battlepass_id_point[playerid][i] = 0;

			new query[148];
			format(query, sizeof query, "Вы получили новое задание {FFFFFF}`%s` {ff7627}для боевого пропуска. Подробнее в главном меню.", g_battlepass_tasks[g_battlepass_id_tasks[playerid][i]][BP_NAME_TASKS]);
			SCM(playerid, 0xff7627FF, query); 
		}

		GameText(playerid, "~w~Новое задание~n~~r~боевого пропуска", 3000, 3);

		SetPlayerData(playerid, P_BP_TIME_TASKS, gettime() + 86400);

		new query[540];
		mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET bp_point_1=%d, bp_point_2=%d, bp_point_3=%d, bp_point_4=%d, bp_point_5=%d, bp_point_6=%d, \
		bp_point_7=%d, bp_point_8=%d, bp_point_9=%d, bp_point_10=%d, bp_point_11=%d, bp_point_12=%d, \
		bp_task_1=%d, bp_task_2=%d, bp_task_3=%d, bp_task_4=%d, bp_task_5=%d, bp_task_6=%d, bp_task_7=%d, bp_task_8=%d, bp_task_9=%d, bp_task_10=%d, bp_task_11=%d, bp_task_12=%d, \
		bp_time_tasks=%d WHERE id=%d LIMIT 1", 
		g_battlepass_id_point[playerid][0], 
		g_battlepass_id_point[playerid][1], 
		g_battlepass_id_point[playerid][2], 
		g_battlepass_id_point[playerid][3], 
		g_battlepass_id_point[playerid][4], 
		g_battlepass_id_point[playerid][5],
		g_battlepass_id_point[playerid][6],
		g_battlepass_id_point[playerid][7],
		g_battlepass_id_point[playerid][8],
		g_battlepass_id_point[playerid][9],
		g_battlepass_id_point[playerid][10],
		g_battlepass_id_point[playerid][11],
		g_battlepass_id_tasks[playerid][0], 
		g_battlepass_id_tasks[playerid][1], 
		g_battlepass_id_tasks[playerid][2], 
		g_battlepass_id_tasks[playerid][3], 
		g_battlepass_id_tasks[playerid][4], 
		g_battlepass_id_tasks[playerid][5],
		g_battlepass_id_tasks[playerid][6],
		g_battlepass_id_tasks[playerid][7],
		g_battlepass_id_tasks[playerid][8],
		g_battlepass_id_tasks[playerid][9],
		g_battlepass_id_tasks[playerid][10],
		g_battlepass_id_tasks[playerid][11],
		GetPlayerData(playerid, P_BP_TIME_TASKS),
		GetPlayerAccountID(playerid));
		mysql_pquery(mysql, query);
	}
	return 1;
}

#define MAX_PLAYER_DRAG 2

enum E_DRAG_RACING_STRUCT
{
	E_SPHERE,
	E_STATUS,
	E_PLAYER,
	E_STATUS_PLAYER,
	E_BET_PLAYER,
	E_TYPE,
	E_WIN_PLAYER,
	E_BET
}
new g_drag_racing_time;
new g_drag_racing_finish;
new Text3D: g_drag_racing_rating; // текст в ангаре
new g_drag_racing[MAX_PLAYER_DRAG][E_DRAG_RACING_STRUCT];

new g_drag_racing_id[MAX_PLAYERS];
new g_drag_racing_status[MAX_PLAYERS];

new Float: g_drag_racing_pos[3][2][4] =
{
	{
		{1695.3965,1641.6962,16.9935,4.5},
		{1691.1057,1635.8171,16.9948,144.5379}
	},
	{
		{1688.9054,1643.2876,16.9918,4.5},
		{1686.2905,1639.3320,16.9948,143.9645}
	},
	{
		{1580.7694,1744.2955,16.9478,236.0479},
		{1577.0437,1739.3364,16.9530,235.1329}
	}
};

stock LoadDragRacing()
{
	g_drag_racing[0][E_SPHERE] = CreateDynamicSphere(g_drag_racing_pos[0][0][0], g_drag_racing_pos[0][0][1], g_drag_racing_pos[0][0][2], g_drag_racing_pos[0][0][3], -1, -1);
	g_drag_racing[1][E_SPHERE] = CreateDynamicSphere(g_drag_racing_pos[1][0][0], g_drag_racing_pos[1][0][1], g_drag_racing_pos[1][0][2], g_drag_racing_pos[1][0][3], -1, -1);
	g_drag_racing_finish = CreateDynamicSphere(1404.1278,1231.1156,17.0392, 8.5, -1, -1);

	g_drag_racing_rating = CreateDynamic3DTextLabel("", 0x000000FF, 1710.7104,1707.0219,16.8864 + 2.0, 15.0);
	//UpdateRating_DrageRacing();
}

stock UpdateRating_DrageRacing()
{
	new query[148], Cache: result;

	result = mysql_query(mysql, "SELECT * FROM accounts_canvasdev ORDER BY drag_score DESC LIMIT 10", true);

	new count;
	new name[32];
	STRING_GLOBAL[0] = EOS;
	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new drag_score = cache_get_field_content_int(idx, "drag_score");
			if(drag_score < 1) continue;

			count++;

			cache_get_field_content(idx, "name", name);

			format(query, sizeof query, "\n{FFFFFF}%d. {FFD700}%s {FFFFFF}| Всего успешных заездов: {FFD700}%d", count, name, drag_score);
			strcat(STRING_GLOBAL, query);
		}		
	}
	cache_delete(result);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{42aaff}ТОП 10 ДРАГ РЕЙСИНГА\n%s", STRING_GLOBAL);
	UpdateDynamic3DTextLabelText(g_drag_racing_rating, 0x000000FF, STRING_GLOBAL);
}

stock FinishDragRacing()
{
	UpdateRating_DrageRacing();
	for(new i; i < MAX_PLAYER_DRAG; i++)
	{
		g_drag_racing[i][E_STATUS] = 0;
		g_drag_racing[i][E_PLAYER] = 0;
		g_drag_racing[i][E_STATUS_PLAYER] = 0;
		g_drag_racing[i][E_BET_PLAYER] = 0;
		g_drag_racing[i][E_TYPE] = 0;
		g_drag_racing[i][E_WIN_PLAYER] = 0;
		g_drag_racing[i][E_BET] = 0;
	}

	return true;
}

stock OpenDragRacingStart(playerid)
{
	CEF_CREATE(playerid, 2, 4, "DragRacingStart", "[0, [0]]");

	return true;
}

public: OnDragEditorClose(playerid)
{
	CEF_HIDE(playerid, "DragRacingStart");
	return true;
}

public: OnDragEditorSelectType(playerid, event)
{
	if(event == 0) // бесплатный 
	{
		CEF_HIDE(playerid, "DragRacingStart");
		CEF_CREATE(playerid, 2, 4, "DragRacingStart", "[1, [0, [2, 2], 0, 0]]");
		g_drag_racing[g_drag_racing_id[playerid]][E_TYPE] = 0;
	}
	if(event == 1) // платный
	{
		string_dialog[0] = EOS;
		format(string_dialog, sizeof string_dialog, "Деньги (Всего: %s руб)\nФишки (Всего: %s фишек)\nДонат (Всего: %s донат-монет)", formatStr(QueryPlayerBalance(playerid)), formatInt(GetIteam(playerid, 293)), formatInt(QueryPlayerDonationBalance(playerid)));
		
		IntfDialogCallRemote
		(
			playerid, DIALOG_DRAG_RACING, DIALOG_STYLE_LIST, "Выберите валюту", 
			string_dialog,
			"Далее", "Закрыть"
		);
	}
	return true;
}

public: OnDragChangePlayerStatus(playerid, event)
{
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0) if(!VerifyIntString(QueryPlayerBalance(playerid), event)) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1) if(GetIteam(playerid, 293) < event) return GameText(playerid, "~r~Недостаточно~n~фишек", 3000, 2);
	if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2) if(QueryPlayerDonationBalance(playerid) < event) return GameText(playerid, "~r~Недостаточно~n~доната", 3000, 2);
	
	g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] = event;

	if(g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] == 1) g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] = 0;
	else g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER] = 1;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('DragRacingStart').setLobbyData('[%d, [2, 2], %d, %d]')", g_drag_racing[g_drag_racing_id[playerid]][E_TYPE], g_drag_racing[g_drag_racing_id[playerid]][E_STATUS_PLAYER], g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER]);
	CEF_CREATE(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER], 1, 2, STRING_GLOBAL);

	if(g_drag_racing[0][E_STATUS_PLAYER] == 1 && g_drag_racing[1][E_STATUS_PLAYER] == 1)
	{
		CEF_HIDE(g_drag_racing[0][E_PLAYER], "DragRacingStart");
		CEF_HIDE(g_drag_racing[1][E_PLAYER], "DragRacingStart");

		if(g_drag_racing[0][E_BET_PLAYER] != g_drag_racing[1][E_BET_PLAYER] || g_drag_racing[0][E_BET] != g_drag_racing[1][E_BET])
		{
			SCM(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Участники заезда телепортированы на парковку, т.к их ставки или валюта отличаются.");
			SCM(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Участники заезда телепортированы на парковку, т.к их ставки или валюта отличаются.");

			OnBattlePass_Perfomance(g_drag_racing[0][E_PLAYER], 22, 1);
			OnBattlePass_Perfomance(g_drag_racing[1][E_PLAYER], 22, 1);

			new vehicleid_1 = GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]);
			SetVehiclePos(vehicleid_1, g_drag_racing_pos[2][0][0],g_drag_racing_pos[2][0][1],g_drag_racing_pos[2][0][2]);
			SetVehicleZAngle(vehicleid_1, g_drag_racing_pos[2][0][3]);

			new vehicleid_2 = GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]);
			SetVehiclePos(vehicleid_2, g_drag_racing_pos[2][1][0],g_drag_racing_pos[2][1][1],g_drag_racing_pos[2][1][2]);
			SetVehicleZAngle(vehicleid_2, g_drag_racing_pos[2][1][3]);
			return 1;
		}
		if(g_drag_racing[0][E_BET_PLAYER] == g_drag_racing[1][E_BET_PLAYER])
		{
			g_drag_racing[0][E_STATUS] = 2;
			g_drag_racing[1][E_STATUS] = 2;

			new vehicleid_1 = GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]);
			SetVehiclePos(vehicleid_1, g_drag_racing_pos[0][1][0],g_drag_racing_pos[0][1][1],g_drag_racing_pos[0][1][2]);
			SetVehicleZAngle(vehicleid_1, g_drag_racing_pos[0][1][3]);

			new vehicleid_2 = GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]);
			SetVehiclePos(vehicleid_2, g_drag_racing_pos[1][1][0],g_drag_racing_pos[1][1][1],g_drag_racing_pos[1][1][2]);
			SetVehicleZAngle(vehicleid_2, g_drag_racing_pos[1][1][3]);

			if(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] != 0)
			{
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0)
				{
					ModifyCashBalance(g_drag_racing[0][E_PLAYER], -g_drag_racing[0][E_BET_PLAYER], "Заезд драг рейсинг");
					ModifyCashBalance(g_drag_racing[1][E_PLAYER], -g_drag_racing[1][E_BET_PLAYER], "Заезд драг рейсинг");
				}
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1)
				{
					GiveIteam(g_drag_racing[0][E_PLAYER], 293, 0, g_drag_racing[0][E_BET_PLAYER], 0, "Ставка в заезде [Драг рейсинг]");
					GiveIteam(g_drag_racing[1][E_PLAYER], 293, 0, g_drag_racing[1][E_BET_PLAYER], 0, "Ставка в заезде [Драг рейсинг]");

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s фишек", formatInt(g_drag_racing[0][E_BET_PLAYER]));
					GameText(g_drag_racing[0][E_PLAYER], STRING_GLOBAL, 3000, 2);
					GameText(g_drag_racing[1][E_PLAYER], STRING_GLOBAL, 3000, 2);
				}
				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2)
				{
					ProcessPlayerCredit(g_drag_racing[0][E_PLAYER], -g_drag_racing[0][E_BET_PLAYER]);
					ProcessPlayerCredit(g_drag_racing[1][E_PLAYER], -g_drag_racing[1][E_BET_PLAYER]);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s донат-монет", formatInt(g_drag_racing[0][E_BET_PLAYER]));
					GameText(g_drag_racing[0][E_PLAYER], STRING_GLOBAL, 3000, 2);
					GameText(g_drag_racing[1][E_PLAYER], STRING_GLOBAL, 3000, 2);
				}
			}

			SCM(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Вы были телепортированы на участие в заезде.");
			SCM(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Вы были телепортированы на участие в заезде.");

			g_drag_racing_time = 11;
			g_drag_racing_status[g_drag_racing[0][E_PLAYER]] = 1;
			g_drag_racing_status[g_drag_racing[1][E_PLAYER]] = 1;
		}
	}

	//event // ставка
	return true;
}
new g_player_notary_offer_id[MAX_PLAYERS];
new g_player_notary_status[MAX_PLAYERS];
new g_player_notary_owner[MAX_PLAYERS];
new g_player_notary_price[MAX_PLAYERS];

new g_player_notary_type_item[MAX_PLAYERS];
new g_player_notary_item_id[MAX_PLAYERS];


stock Notary_StartTradeItem(playerid)
{
	new type = g_player_notary_type_item[playerid];
	new item_id = g_player_notary_item_id[playerid];

	new to_player = g_player_notary_offer_id[playerid];

	new query[148];

	if(type == 1) // гараж
	{
		SetGarageData(item_id, G_OWNER_ID, GetPlayerAccountID(to_player));

		format(g_garage[item_id][G_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateGarageLabel", "i", item_id);
		UpdateGarage(item_id);

		format(query, sizeof query, "UPDATE garage SET owner_id=%d WHERE id=%d LIMIT 1", GetGarageData(item_id, G_OWNER_ID), GetGarageData(item_id, G_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 2) // бизнес
	{
		SetBusinessData(item_id, B_OWNER_ID, GetPlayerAccountID(to_player));

		format(g_business[item_id][B_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateBusinessLabel", "i", item_id);

		format(query, sizeof query, "UPDATE business SET owner_id=%d WHERE id=%d LIMIT 1", GetBusinessData(item_id, B_OWNER_ID), GetBusinessData(item_id, B_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 3) // транспорт
	{
		new index = GetVehicleData(item_id, V_ACTION_ID);

		SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(to_player));

		format(query, sizeof query, "UPDATE ownable_cars SET owner_id=%d WHERE id=%d", GetOwnableCarData(index, OC_OWNER_ID), GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 4) // дом
	{
		SetHouseData(item_id, H_OWNER_ID, GetPlayerAccountID(to_player));

		format(g_house[item_id][H_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		UpdateHouse(item_id);

		DeleteAcsHome(playerid, to_player);

		mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=%d WHERE id=%d", GetHouseData(item_id, H_OWNER_ID), GetHouseData(item_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 6) // семья
	{

	}
	if(type == 7) // сим-карта
	{
		SetPlayerData(to_player, P_PHONE, item_id);
		UpdatePlayerDatabaseInt(to_player, "phone", GetPlayerData(to_player, P_PHONE));

		SetPlayerData(playerid, P_PHONE, 0);
		UpdatePlayerDatabaseInt(playerid, "phone", GetPlayerData(playerid, P_PHONE));
	}
	if(type == 8) // огород
	{
		SetGardenData(item_id, G_OWNER_ID, GetPlayerAccountID(to_player));

		format(g_garden[item_id][G_OWNER_NAME], 21, GetPlayerNameEx(to_player), 0);
		CallLocalFunction("UpdateGardenLabel", "i", item_id);

		mysql_format(mysql, query, sizeof query, "UPDATE gardens SET owner_id=%d WHERE id=%d LIMIT 1", GetGardenData(item_id, G_OWNER_ID), GetGardenData(item_id, G_SQL_ID));
		mysql_query(mysql, query, false);
	}
	if(type == 9) // киоск
	{
		SetKioskData(item_id, K_OWNER_ID, GetPlayerAccountID(to_player));

		mysql_format(mysql, query, sizeof query, "UPDATE kiosk SET owner_id=%d WHERE id=%d", GetPlayerAccountID(to_player), GetKioskData(item_id, K_SQL_ID));
		mysql_query(mysql, query, false);
	}

	g_player_notary_price[playerid] = 0;
	g_player_notary_owner[playerid] = 0;
	g_player_notary_status[playerid] = 0;
	g_player_notary_item_id[playerid] = 0;
	g_player_notary_type_item[playerid] = 0;

	CEF_HIDE(playerid, "Trade");
	return true;
}

public:Notary_StartTrade(playerid) // совершить обмен
{
	if(g_player_notary_owner[playerid] != 1)
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Совершить обмен может только тот кто предложил");

	new to_player = g_player_notary_offer_id[playerid];

	if(g_player_notary_status[to_player] != 2)
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Ожидайте потверждение второго игрока");
	
	if(g_player_notary_price[playerid] > 0)
	{
		if(!VerifyIntString(QueryPlayerBalance(playerid), g_player_notary_price[playerid])) 
			return SCM(playerid, 0xeb622aFF, "У одной из сторон недостаточно денег для доплаты / сделки");
			
        AddBusinessProfit(playerid, GetPlayerInBiz(playerid), (g_player_notary_price[playerid] / 100) * 25, 1);

		ModifyCashBalance(to_player, g_player_notary_price[playerid], "Получил доплату с обмена в нотариусе");
		ModifyCashBalance(playerid, -g_player_notary_price[playerid], "Оплатил доплату с обмена в нотариусе");
	}

	if(g_player_notary_price[to_player] > 0)
	{
		if(!VerifyIntString(QueryPlayerBalance(to_player), g_player_notary_price[to_player])) 
			return SCM(playerid, 0xeb622aFF, "У одной из сторон недостаточно денег для доплаты / сделки");
			
        AddBusinessProfit(playerid, GetPlayerInBiz(playerid), (g_player_notary_price[to_player] / 100) * 25, 1);

		ModifyCashBalance(playerid, g_player_notary_price[to_player], "Получил доплату с обмена в нотариусе");
		ModifyCashBalance(to_player, -g_player_notary_price[to_player], "Оплатил доплату с обмена в нотариусе");
	}

	if(g_player_notary_price[to_player] != 0 && g_player_notary_price[playerid] != 0)
	{
		new fmt_text[148];

		format(fmt_text, sizeof fmt_text, "~g~+%s руб~n~~r~-%s руб", formatInt(g_player_notary_price[to_player]), formatInt(g_player_notary_price[playerid]));
		GameText(playerid, fmt_text, 3000, 2);

		format(fmt_text, sizeof fmt_text, "~g~+%s руб~n~~r~-%s руб", formatInt(g_player_notary_price[playerid]), formatInt(g_player_notary_price[to_player]));
		GameText(to_player, fmt_text, 3000, 2);
	}
	
	Notary_StartTradeItem(playerid);
	Notary_StartTradeItem(to_player);
	
	return true;
}

public:Notary_SetSurchargeObject(playerid, price)
{
	if(price < 1000 || price > 100000000)
		return SCM(playerid, COLOR_GREY, "Выставить доплату можно от 1.000 до 100.000.000 руб");

	if(!VerifyIntString(QueryPlayerBalance(playerid), price)) 
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Недостаточно средств для доплаты / сделки");

	SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Сумма доплаты с вашей стороны успешно установлена");

	new fmt_text[148];
	format(fmt_text, sizeof fmt_text, "interface('Trade').player1.itemSurcharge = %d", price);
	CEF_CREATE(playerid, 1, 2, fmt_text);

	format(fmt_text, sizeof fmt_text, "interface('Trade').player2.itemSurcharge = %d", price);
	CEF_CREATE(g_player_notary_offer_id[playerid], 1, 2, fmt_text);

	g_player_notary_price[playerid] = price;
	return true;
}

public:Notary_SetExchangeObject(playerid, type) // выбор что ты хочешь обменять
{
	if(type == 1) // гараж
	{
		new query[124],
			Cache: result;

		format(query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного гаража во владении.");

		string_dialog = "";
		for(new i = 0; i < rows; i ++)
		{
			new biz_id = cache_get_field_content_int(i, "id");

			format(query, sizeof query, "{FFFFFF}-Гараж: %d\n", biz_id);
			strcat(string_dialog, query);

			SetPlayerListitemValue(playerid, i, biz_id-1);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_GARAGE_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите гараж",
			string_dialog,
			"Выбрать", "Закрыть"
		);

		cache_delete(result);
	}
	if(type == 2) // бизнес
	{
		new query[124],
			Cache: result,
			biz_id,
			biz_name[64];

		format(query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного бизнеса во владении.");

		string_dialog = "";
		for(new i = 0; i < rows; i ++)
		{
			biz_id = cache_get_field_content_int(i, "id");
			cache_get_field_content(i, "name", biz_name);

			format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)\n", i + 1, biz_name, biz_id);
			strcat(string_dialog, query);

			SetPlayerListitemValue(playerid, i, biz_id-1);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_BIZ_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите бизнес",
			string_dialog,
			"Выбрать", "Закрыть"
		);

		cache_delete(result);
	}
	if(type == 3) // транспорт
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 15;
		ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
	}
	if(type == 4) // дом
	{
		new query[94],
			Cache: result,
			biz_id;

		mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного дома во владении.");

		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			biz_id = cache_get_field_content_int(i, "id");
			new entrance = cache_get_field_content_int(i, "entrance");

			if(entrance == -1)
			{
				if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
				else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
			}
			else
			{
				if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
				else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
			}
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, biz_id-1);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_HOME_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите дом",
			string_dialog,
			"Выбрать", "Закрыть"
		);

		cache_delete(result);
	}
	if(type == 5) // команда
	{
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Данный вид недоступен для обмена");
	}
	if(type == 6) // семья
	{
		return SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Данный вид недоступен для обмена");
	}
	if(type == 7) // сим-карта
	{
		if(GetPlayerData(playerid, P_PHONE) == 0) 
			return SendClientMessage(playerid, 0xeb622aFF, "У Вас отсутствует сим-карта для обмена");

		new fmt_text[360];
		format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player1\": {\"item\": 6,\"itemName\": \"Сим-карта: %d\",\"itemPrice\": 500,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetPlayerData(playerid, P_PHONE));
		CEF_CREATE(playerid, 1, 2, fmt_text);

		format(fmt_text, sizeof fmt_text, "interface('Trade').updateData('{\"player2\": {\"item\": 6,\"itemName\": \"Сим-карта: %d\",\"itemPrice\": 500,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')", GetPlayerData(playerid, P_PHONE));
		CEF_CREATE(g_player_notary_offer_id[playerid], 1, 2, fmt_text);

		g_player_notary_item_id[playerid] = GetPlayerData(playerid, P_PHONE);
	}
	if(type == 8) // огород
	{
		new query[256],
			Cache: result,
			garden_id;

		mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного огорода во владении.");

		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			garden_id = cache_get_field_content_int(i, "id");

			format(query, sizeof query, "%d.{FFFFFF} Огород №%d\n",i+1, garden_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, garden_id);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_GARDEN_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите огород",
			string_dialog,
			"Выбрать", "Закрыть"
		);

		cache_delete(result);
	}
	if(type == 9) // киоск
	{
		new query[256],
			Cache: result,
			kiosk_id,
			kiosk_name[24];

		mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, query, true);

		new rows = cache_num_rows();

		if(!rows) return SendClientMessage(playerid, 0xeb622aFF, "У вас не одного киоска во владении.");

		vibor_kiosk_atm[playerid] = 1;

		string_dialog[0] = EOS;
		for(new i = 0; i < rows; i ++)
		{
			kiosk_id = cache_get_field_content_int(i, "id");
			cache_get_field_content(i, "name", kiosk_name);
			

			format(query, sizeof query, "{FFFFFF}Киоск %s №%d\n", kiosk_name, kiosk_id);
			strcat(string_dialog, query);
			SetPlayerListitemValue(playerid, i, kiosk_id-1);
		}

		IntfDialogCallRemote
		(
			playerid, DIALOG_KIOSK_LIST_NOTARY, DIALOG_STYLE_LIST,
			"{FFCD00}Выберите киоск",
			string_dialog,
			"Выбрать", "Закрыть"
		);

		cache_delete(result);
	}
	if(type == 10) // деньги
	{
		SCM(playerid, 0xeb622aFF, "Для подтверждения вы должны установить доплату");
		
		CEF_CREATE(playerid, 1, 2, "interface('Trade').updateData('{\"player1\": {\"item\": 9,\"itemName\": \"Деньги\",\"itemPrice\": 0,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')");
		
		CEF_CREATE(g_player_notary_offer_id[playerid], 1, 2, "interface('Trade').updateData('{\"player2\": {\"item\": 9,\"itemName\": \"Деньги\",\"itemPrice\": 0,\"itemSurcharge\": 0,\"state\": 0,\"commission\": 0}}')");
	}

	g_player_notary_type_item[playerid] = type;

	g_player_notary_price[playerid] = 0;
	g_player_notary_status[playerid] = 1;

	return true;
}


public:Notary_AcceptExchange(playerid)
{
	if(g_player_notary_type_item[playerid] == 0) 
		return true;
	
	if(g_player_notary_type_item[playerid] == 10 && g_player_notary_price[playerid] < 1)
		return SCM(playerid, 0xeb622aFF, "Для подтверждения вы должны установить доплату");
	
	g_player_notary_status[playerid] = 2;

	SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Ожидайте подтверждение обмена");

	CEF_CREATE(playerid, 1, 2, "interface('Trade').player1.state = 1");

	CEF_CREATE(g_player_notary_offer_id[playerid], 1, 2, "interface('Trade').player2.state = 1");
	
	return true;
}

public:Notary_CancelPlayerStatus(playerid)
{
	if(g_player_notary_type_item[playerid] == 0) 
		return true;

	g_player_notary_status[playerid] = 1;

	CEF_CREATE(playerid, 1, 2, "interface('Trade').player1.state = 0");

	CEF_CREATE(g_player_notary_offer_id[playerid], 1, 2, "interface('Trade').player2.state = 0");
	return true;
}

public: Notary_HidePlayerPanel(playerid) // закрытие панели игроком
{
	if(g_player_notary_status[playerid] == 0)
		return true;
	
	CEF_HIDE(playerid, "Trade");

	CEF_HIDE(g_player_notary_offer_id[playerid], "Trade");

	SCM(g_player_notary_offer_id[playerid], 0xf9a118FF, "Уведомление: {FFFFFF}Игрок отказался от обмена");

	g_player_notary_price[playerid] = 0;
	g_player_notary_owner[playerid] = 0;
	g_player_notary_status[playerid] = 0;
	g_player_notary_item_id[playerid] = 0;
	g_player_notary_type_item[playerid] = 0;

	g_player_notary_price[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_owner[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_status[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_item_id[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_type_item[g_player_notary_offer_id[playerid]] = 0;
	
	g_player_notary_offer_id[g_player_notary_offer_id[playerid]] = 0;
	g_player_notary_offer_id[playerid] = 0;
	return true;
}
CMD:exchange(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,10.0,503.3536,452.3311,1000.9922)) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использовать: /exchange [id игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите корректный ид покупателя");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(to_player, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z)) 
		return SCM(playerid, 0xFF5533FF, "Вы должны находиться ближе друг к другу!");

	if(g_player_notary_status[playerid] > 0) 
		return SCM(playerid, 0xFF5533FF, "Вы уже обмениваетесь с кем-то.");

	if(g_player_notary_status[to_player] > 0) 
		return SCM(playerid, 0xFF5533FF, "Игрок уже обменивается с кем-то.");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_EXCHANGE);

	SCM(playerid, 0xf9a118FF, "Уведомление: {FFFFFF}Вы согласились на обмен. Ждём подтверждения второго игрока");

  	return 1;
}

CMD:crash(playerid,params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return 1;
    	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");
    
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(sscanf(params,"i",params[0])) return SendClientMessage(playerid, -1, "Используйте: /crash [id игрока]");
	if(IsPlayerAdminLevel(playerid) < IsPlayerAdminLevel(params[0])) return SCM(playerid, -1, "Вы не моежете крашнуть игрока выше вас по рангу");
    ApplyAnimation(params[0], "PAD", "null",6,0,0,0,1,1);
    SendClientMessage(playerid, -1, "Игрок был успешно крашнут.");
    return 1;
}

CMD:yes(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	new offer_type = GetPlayerOfferInfo(playerid, O_INCOMING_TYPE);

	new value_1 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[0];
	new value_2 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[1];
	new value_3 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[2];

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(offer_id) && IsPlayerLogged(offer_id))
		{
			if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
			{
				ClearPlayerOffer(offer_id);
			}
			else offer_type = -1;

			new Float: x, Float: y, Float: z;
			new Float: dist;

			GetPlayerPos(offer_id, x, y, z);

			if(offer_type != OFFER_TYPE_GETHERE && offer_type != OFFER_TYPE_GOTO) dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			else dist = 5.0;

			if(dist <= 10.0)
			{
				new fmt_str[144];

				switch(offer_type)
				{
					case OFFER_TYPE_SHOWDOC:
					{
						if(GetPlayerTeamEx(playerid) != 7)
						{
                            str_q[0] = EOS;
						    format(str_q, sizeof str_q, "[[3,[\"%s\",\"%s\",\"%s\",\"%s\",1,0]]]", GetPlayerTeamName(offer_id), GetPlayerTeamName(offer_id), GetPlayerNameEx(offer_id), GetPlayerJobAndRankName(offer_id));
					        CEF_CREATE(playerid, 2, 4, "Docs", str_q);
						}
						else
						{
							STRING_GLOBAL[0] = EOS;
	                        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\",%d,\"%s\",%d,%d,%d]", GetPlayerNameEx(offer_id), GetPlayerSkin(offer_id), GetPlayerJobAndRankName(offer_id),
			                GetPlayerData(offer_id, P_REG_DATA_FSB), GetPlayerData(offer_id, P_UID_FSB), GetPlayerData(offer_id, P_EXPIRE_DATA_FSB));
	                        CEF_CREATE(playerid, 2, 4, "IdentityCard", STRING_GLOBAL);
						}

						new fmt[87];
						format(fmt, sizeof fmt, "%s показывает свое удостоверение", GetPlayerNameEx(playerid));
						Action(offer_id, fmt, _, false);
					}
            		case OFFER_TYPE_EXCHANGE:
					{
						CEF_CREATE(playerid, 1, 4, "Trade");
					    CEF_CREATE(offer_id, 1, 4, "Trade");

						g_player_notary_offer_id[playerid] = offer_id;
						g_player_notary_offer_id[offer_id] = playerid;

						g_player_notary_status[playerid] = 1;
						g_player_notary_status[offer_id] = 1;

						g_player_notary_owner[offer_id] = 1;

					}
					case OFFER_TYPE_TRADE:
					{
						DestroyitemsTrade(playerid);
						DestroyitemsTrade(offer_id);

					
						g_player_trade_offer_id[playerid] = offer_id;
						g_player_trade_offer_id[offer_id] = playerid;

						g_player_trade_status[playerid] = 1;
						g_player_trade_status[offer_id] = 1;

						g_player_trade_owner[offer_id] = 1;

						g_player_trade_price[playerid] = 0;
						g_player_trade_price[offer_id] = 0;

						status_authorization[playerid] = 0;
						status_authorization[offer_id] = 0;

						LoadTradeItems(playerid);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\",[\"0\",0],[[0,\"inv1\"],[0,\"inv1\"],[0,\"inv1\"]],[%s]]", GetPlayerNameEx(offer_id), load_inventory[playerid]);
						CEF_CREATE(playerid, 2, 4, "TradeItems", STRING_GLOBAL);

						LoadTradeItems(offer_id);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\",[\"0\",0],[[0,\"inv1\"],[0,\"inv1\"],[0,\"inv1\"]],[%s]]", GetPlayerNameEx(playerid), load_inventory[offer_id]);
						CEF_CREATE(offer_id, 2, 4, "TradeItems", STRING_GLOBAL);
					}
					case OFFER_TYPE_TEST_DRIVE:
					{
						new vehicleid = value_1;
						new time = value_2;
						SetPVarInt(playerid, "in_test_drive", 1);
						new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    				if(GetOwnableCarData(index, OC_BY_ID) == 1)
	    				{
	    				    SendClientMessage(playerid, 0x66CC00FF, "Вы согласились на тест-драйв авто");
	    				    SendClientMessage(offer_id, 0x66CC00FF, "Данный игрок согласился на тест-драйв");
	    				    PutPlayerInVehicle(playerid, vehicleid, 0);
					 		SetVehiclePosAc(vehicleid,-1887.4829,1884.3938,175.9259,179.5188);
							LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, playerid + 1);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, playerid + 1);
							SetVehicleParam(vehicleid, V_ENGINE, true);
							timertest[playerid] = SetTimerEx("testdrive", time * 60000, false, "ii", playerid,vehicleid);

	    				}
	    				if(GetOwnableCarData(index, OC_BY_ID) == 3)
	    				{
	    				    SendClientMessage(playerid, 0x66CC00FF, "Вы согласились на тест-драйв авто");
	    				    SendClientMessage(offer_id, 0x66CC00FF, "Данный игрок согласился на тест-драйв");
	    				    PutPlayerInVehicle(playerid, vehicleid, 0);
					 		SetVehiclePosAc(vehicleid,2199.5173,2329.5718,13.5938,161.0550);
							LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, playerid + 1);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, playerid + 1);
							SetVehicleParam(vehicleid, V_ENGINE, true);
							timertest[playerid] = SetTimerEx("testdrive", time * 60000, false, "ii", playerid,vehicleid);

	    				}
	    				if(GetOwnableCarData(index, OC_BY_ID) == 2)
	    				{
	    				    SendClientMessage(playerid, 0x66CC00FF, "Вы согласились на тест-драйв авто");
	    				    SendClientMessage(offer_id, 0x66CC00FF, "Данный игрок согласился на тест-драйв");
	    				    PutPlayerInVehicle(playerid, vehicleid, 0);
					 		SetVehiclePosAc(vehicleid,2735.7239,-2451.2556,21.6890,247.4887);
							LinkVehicleToInterior(vehicleid, 0);
							SetVehicleVirtualWorld(vehicleid, playerid + 1);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, playerid + 1);
							SetVehicleParam(vehicleid, V_ENGINE, true);
							timertest[playerid] = SetTimerEx("testdrive", time * 60000, false, "ii", playerid,vehicleid);

	    				}
					}
					case OFFER_TYPE_SHOW_SKILL:
					{
						ShowPlayerSkills(offer_id, playerid);
						Action(offer_id, "показал свои навыки владения оружием", _, false);
					}
                    case OFFER_TYPE_FINVITE:
                    {
                        new fam_id = GetPlayerData(offer_id, P_FAMILY);

                        FInvitePlayer(playerid, fam_id, 1, true);

                        new fmt_msg[120];
                        format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в семью \"%s\"", GetFamilyData(fam_id, F_NAME));

                        SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
                        SendClientMessage(playerid, 0x1E90FFFF, "Используйте {d8284c}/fmenu > помощь по семье{1E90FF}, чтобы узнать о новых возможностях");

                        format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в семью", GetPlayerNameEx(playerid), value_1);
                        SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);


						if(g_family[fam_id][F_GANG] == 1)
						{
							SetPlayerColorEx(playerid, family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)]);
							new text_str[144];
							format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(fam_id, F_COLOR)] >>> 8, g_family[fam_id][F_NAME]);
							g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
						}
						else
						{
							new text_str[144];
							format(text_str, 144, "{FFB500}%s", g_family[fam_id][F_NAME]);
							g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
						}

                        format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в семью %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));

                    }
					case OFFER_TYPE_INVITE:
					{
						new team_id = GetPlayerTeamEx(offer_id);
						if((1 <= team_id <= 10) || !(1 <= GetPlayerTeamEx(playerid) <= 10))
						{
							InvitePlayer(playerid, team_id, 1, true);

							new fmt_msg[120];
							format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в организацию \"%s\"", GetPlayerTeamName(offer_id));

							SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
							SendClientMessage(playerid, 0x3399FFFF, "Используйте {FFD83D}/menu > Команды сервера{3399FF}, чтобы узнать о новых возможностях");

							format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в организацию", GetPlayerNameEx(playerid), value_1);
							SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

							GameText(offer_id, "~b~~h~ДА", 4000, 3);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При вступлении в организацию произошла ошибка");
					}
					case OFFER_TYPE_SELLSIM:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						new number = GetPlayerPhone(offer_id);

			            SetPlayerData(playerid, P_PHONE, number);
			            UpdatePlayerDatabaseInt(playerid, "phone", number);

						SetPlayerData(offer_id, P_PHONE, GetPlayerAccountID(offer_id) + 1000000);
			            UpdatePlayerDatabaseInt(offer_id, "phone", GetPlayerAccountID(offer_id) + 1000000);

	                    ModifyCashBalance(playerid, -value_1, "Покупка SIM-карты", true, true);
	                    ModifyCashBalance(offer_id, value_1, "Продажа SIM-карты", true, true);

						new str[144];

						format(str, sizeof str, "%s принял Ваше предложение купить SIM-карту", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, COLOR_GOLD, str);

						GameText(offer_id, "~b~~h~ДА", 4000, 3);
					}
					case OFFER_TYPE_FIGHT:
                    {
						SetPlayerPos(playerid, 216.7823,843.7258,1001.6953);
						SetPlayerPos(offer_id, 212.0935,839.2301,1001.6953);
						SetPlayerHealthEx(playerid, 100);
						SetPlayerHealthEx(offer_id, 100);
						SendClientMessage(playerid, 0xFF6600FF, "Вы начали бой. Сдаться /fightloose");
						SendClientMessage(offer_id, 0xFF6600FF, "Вы начали бой. Сдаться /fightloose");
                    }
                    case OFFER_TYPE_KISS:
                    {
                        if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
                        {
                            if(0.5 <= dist <= 1.5)
                            {
                                new Float: to_x, Float: to_y;
                                new Float: angle;

                                GetPlayerPos(playerid, to_x, to_y, z);
                                angle = GetAngleToPoint(x, y, to_x, to_y);

                                SetPlayerFacingAngle(playerid, angle);
                                SetPlayerFacingAngle(offer_id, angle + 180.0);

                                format(fmt_str, sizeof fmt_str, "поцеловался с %s", GetPlayerNameEx(offer_id));
                                Action(playerid, fmt_str, _, false);

                                ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 1, 1, 0, 0, 1);
                                ApplyAnimation(offer_id, "KISSING", "Playa_Kiss_02", 4.1, 0, 1, 1, 0, 0, 1);
                            }
                            else
                            {
                                valstr(fmt_str, offer_id);
                                callcmd::kiss(playerid, fmt_str);
                            }
                        }
                        else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
                    }
					case OFFER_TYPE_GIVE_ITEM:
					{
						if(status_authorization[playerid] != 1) return true;

						UpdateWeapons(playerid), LoadInventory(offer_id), StateCheck(offer_id);

						new Float:health = GetPlayerHealth(offer_id, health), Float:armour = GetPlayerArmour(offer_id, armour);

						STRING_GLOBAL[0] = EOS;
						if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24]],[%s]]", GetPlayerNameEx(offer_id), offer_id, QueryPlayerBalance(offer_id), GetPlayerSkin(offer_id), GetIteam(offer_id, 293), GetPlayerPremium(offer_id), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[offer_id]);
						else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[],[%s]]", GetPlayerNameEx(offer_id), offer_id, QueryPlayerBalance(offer_id), GetPlayerSkin(offer_id), GetIteam(offer_id, 293), GetPlayerPremium(offer_id), GetWorkLoadItems(playerid, 0), load_inventory[offer_id]);
						CEF_CREATE(offer_id, 2, 4, "InventoryNew", STRING_GLOBAL);

						SCM(playerid, COLOR_GREY, "Игрок начал выбирать предмет для передачи");

						SetPVarInt(offer_id, "GiveId", playerid);
					}
                    case OFFER_TYPE_WEDDING:
					{
						new query[100];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET brak='%e' WHERE id=%d LIMIT 1", GetPlayerNameEx(offer_id), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[playerid][P_WIFE_NAME], 61, "%s", GetPlayerNameEx(offer_id));
						}

						mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET brak='%e' WHERE id=%d LIMIT 1", GetPlayerNameEx(playerid), GetPlayerAccountID(offer_id));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[offer_id][P_WIFE_NAME], 61, "%s", GetPlayerNameEx(playerid));
						}

						new str[144];

						format(str, sizeof str, "%s принял Ваше предложение пожениться", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, COLOR_GOLD, str);

						GameText(offer_id, "~b~~h~ДА", 4000, 3);

						AddPlayerAchiv(playerid, 16);

						format(fmt_str, sizeof fmt_str, "%s заключил брачный союз с игроком %s. Поздравляем!", GetPlayerNameEx(offer_id), GetPlayerNameEx(playerid));
						SendClientMessageToAll(COLOR_GOLD, fmt_str);

					}
					case OFFER_TYPE_HANDSHAKE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(offer_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetPlayerNameEx(offer_id));
								Action(playerid, fmt_str, _, false);

								ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								ApplyAnimation(offer_id, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								SetPlayerData(playerid, P_DOSTIJ3, GetPlayerData(playerid, P_DOSTIJ3) + 1);
								UpdatePlayerDatabaseInt(playerid, "dostij3", GetPlayerData(playerid, P_DOSTIJ3) + 1);

								AddPlayerAchiv(playerid, 2);

								OnBattlePass_Perfomance(playerid, 28, 1);
							}
							else
							{
								valstr(fmt_str, offer_id);
								callcmd::hi(playerid, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case OFFER_TYPE_FILL_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new offer_vehicleid = GetPlayerVehicleID(offer_id);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_RERFECT_DRIVER && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if((GetVehicleData(vehicleid, V_FUEL) + float(value_1)) <= 100.0)
								{
									if(VerifyIntString(QueryPlayerBalance(playerid), value_2))
									{
										if(GetPlayerJobLoadItems(offer_id) >= value_1)
										{
											ModifyCashBalance(playerid, -value_2, "Заправка транспорта от механика", true, true);

											SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + float(value_1));
											SetPlayerJobLoadItems(offer_id, GetPlayerJobLoadItems(offer_id) - value_1);

											AddPlayerData(offer_id, P_MECHANIC_FILL_PAY, +, value_2);

											format(fmt_str, sizeof fmt_str, "Автомеханик %s заправил Ваш транспорт на %d л", GetPlayerNameEx(offer_id), value_1);
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "Вы заправили транспорт %s на %d л", GetPlayerNameEx(playerid), value_1);
											SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "~g~+%d рублей", value_2);
											GameText(offer_id, fmt_str, 4000, 2);

											format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{999999}Топливо: %d л", GetPlayerData(offer_id, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(offer_id));
											UpdateVehicleLabel(offer_vehicleid, 0xCC9900FF, fmt_str);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "При заправке произошла ошибка");
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_REPAIR_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_RERFECT_DRIVER && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if(VerifyIntString(QueryPlayerBalance(playerid), value_1))
								{
									ModifyCashBalance(playerid, -value_1, "Починка транспорта от механика", true, true);
									AddPlayerData(offer_id, P_MECHANIC_REPAIR_PAY, +, value_1);

									RepairVehicle(vehicleid);
									if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

									SetPlayerChatBubble(playerid, "Repair", 0x3399FFFF, 10.0, 2000);
									SetPlayerChatBubble(offer_id, "Repair", 0x3399FFFF, 10.0, 2000);

									format(fmt_str, sizeof fmt_str, "Автомеханик %s починил Ваш транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "Вы починили транспорт %s за %d руб", GetPlayerNameEx(playerid), value_1);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "~g~+%d рублей", value_1);
									GameText(offer_id, fmt_str, 4000, 2);
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы заплатить автомеханику");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_SELL_BUSINESS:
					{
						if((GetPlayerOwnableBiz(playerid) + 1) > GetPlayerBizSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество бизнес компаний.");
						if(VerifyIntString(QueryPlayerBalance(playerid), value_2))
						{
							new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
							new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
							new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);

							if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
							{
								format(fmt_str, sizeof fmt_str, "Вы продали свой бизнес игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
								SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

								format(fmt_str, sizeof fmt_str, "%s продал Вам бизнес \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
								SendClientMessage(playerid, 0x66CC00FF, fmt_str);

								SellBusiness(offer_id, playerid, value_2);
								SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с бизнесом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}
					case OFFER_TYPE_BUSINESS_MANAGER:
					{
						SetPVarInt(playerid, "biz_worker", value_1 + 1);

						format(fmt_str, sizeof fmt_str, "Вы приняли предложение от %s", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "%s принял Ваше предложение", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
                    }
					case OFFER_TYPE_SELL_HOME:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
						if((GetPlayerOwnableHouse(playerid) + 1) > GetPlayerHouseSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество домов.");
						if(VerifyIntString(QueryPlayerBalance(playerid), value_2))
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								format(fmt_str, sizeof fmt_str, "Вы продали свой дом игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
								SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

								format(fmt_str, sizeof fmt_str, "%s продал Вам cвой дом за %d руб", GetPlayerNameEx(offer_id), value_2);
								SendClientMessage(playerid, 0x66CC00FF, fmt_str);

								SellHouse(offer_id, playerid, value_2);
								SendClientMessage(playerid, 0xFFCD00FF, "Настоятельно рекомендуем проверить квартплату, при необходимости заплатить за дом в банке");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с домом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}
					case OFFER_TYPE_HOME_RENT_ROOM:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								new free_room = GetHouseFreeRoom(value_1);
								if(free_room != -1)
								{
									AddHouseRenter(value_1, free_room, playerid);

									format(fmt_str, sizeof fmt_str, "Вы поселили %s в своем доме", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s поселил Вас в своем доме", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									GameText(offer_id, "~b~~h~Добро пожаловать", 4000, 2);
								}
								else SendClientMessage(playerid, 0x999999FF, "Все комнаты этого дома уже заняты");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и арендодатель должны находиться рядом с домом в котором хотите снять комнату");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_SELL_OWNABLE_CAR:
					{
						new  Float: car_x, Float: car_y, Float: car_z;
						GetVehiclePos(value_2, car_x, car_y, car_z);

						if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(offer_id, 15.0, car_x, car_y, car_z))
						{
							new SellCarPrice[23];
							GetPVarString(offer_id, "SellCarPrice", SellCarPrice, sizeof(SellCarPrice));

							new SellCarPrice_2[24];
							format(SellCarPrice_2, sizeof SellCarPrice_2, "-%s", SellCarPrice);

							if(GetILPlayerStr(QueryPlayerBalance(playerid), SellCarPrice))
							{
								new index = GetVehicleData(value_2, V_ACTION_ID);

								format(fmt_str, sizeof fmt_str, "UPDATE ownable_cars SET owner_id=%d WHERE id=%d", GetPlayerAccountID(playerid), GetOwnableCarData(index, OC_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									new query[64];
									format(query, sizeof query, "Покупка авто игрока %s[%d]", GetPlayerNameEx(offer_id), offer_id);
									GivePlayerMoneyStr(playerid, SellCarPrice_2, query);

									format(query, sizeof query, "Продажа авто игроку %s[%d]", GetPlayerNameEx(playerid), playerid);
									GivePlayerMoneyStr(offer_id, SellCarPrice, query);
									//SetPlayerVehicleData(offer_id, GetPVarInt(playerid, "lli"), INVALID_VEHICLE_ID);

									SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(playerid));
									//SetPlayerVehicleData(playerid, NoIL(playerid), value_2);
									DestroyVehicleLabel(value_2);
									new str[300], phone_number[15];

				                    valstr(phone_number, GetPlayerPhone(playerid));

									format(str, sizeof str,
									"{FFA500}Модель:{FFFFFF} %s\n"\
									"{FFA500}Продавец:{FFFFFF} %s\n"\
									"{FFA500}Цена:{FFFFFF} Не указана\n"\
									"{FFA500}Телефон:{FFFFFF} %s",
									GetVehicleName(value_2), GetPlayerNameEx(playerid), GetPlayerPhone(playerid) == 0 ? "Нет" : phone_number);
									
									CreateVehicleLabel(value_2, str, 0xFFFFFFFF, 0.0, 0.0, 1.0, 8);
									
									format(fmt_str, sizeof fmt_str, "%s продал Вам свой транспорт за %s руб", GetPlayerNameEx(offer_id), formatStr(SellCarPrice));
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);

									SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы узнать о возможностях");
									SendClientMessage(playerid, 0xFFFFFFFF, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 1");
									
									SendClientMessage(playerid, 0xB0C4DEFF, "Если вы хотите вывезти с авторынка т/с, которое приобрели - подойдите к нему, откройте и нажмите {"#cW"}F");
									SendClientMessage(playerid, 0xB0C4DEFF, "В случае, если вы хотите оставить авто на продаже - укажите новую цену с помощью {"#cW"}/cm_price");
									SendClientMessage(playerid, 0xB0C4DEFF, "Вы так же можете предложить тест-драйв другому игроку {"#cW"}/cm_test_drive");

									format(fmt_str, sizeof fmt_str, "Вы продали свой транспорт игроку %s за %s руб", GetPlayerNameEx(playerid), formatStr(SellCarPrice));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
									
									if(GetPVarInt(playerid, "quest") == 4)
                                    {
		                                SetPVarInt(playerid, "quest", 0);
		                                SetPlayerData(playerid, P_QUEST_6_STATS, 1);
		                                CEF_HIDE(playerid, "QuestsProgressInfo");
	                                    SendClientMessage(playerid, -1, "");
		                                SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}10000 руб {FFA500}и {"#cGold"}3 exp.");
			                            ShowDisplayText(playerid, "Задание выполнено<br><font color=#F1B50C>10000 руб и 3 EXP", 4000);
			                            SendClientMessage(playerid, -1, "");
			                            ModifyCashBalance(playerid, 7500, "выполнение квеста", true, true);
                                        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			                            UpdatePlayerDatabaseInt(playerid, "quest_6_stats", GetPlayerData(playerid, P_QUEST_6_STATS));
			                            AddPlayerData(playerid, P_EXP, +, 1);
										OnClickQuests(playerid, 6);
			                            
                                        if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
			                            {
		                                    SetPlayerData(playerid, P_EXP, 0);
                                            AddPlayerData(playerid, P_LEVEL, +, 1);
				                            SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
				                            SetPlayerLevelInit(playerid);
			                            }
			                        }
								}
								else SendClientMessage(playerid, 0xFF6600FF, "Произошла ошибка в базе данных");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с транспортом который хотите купить");
					}
					case OFFER_TYPE_SELL_NEFTENASOS:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровень для принятия этого предложения");
						if(!VerifyIntString(QueryPlayerBalance(playerid), value_2)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");

						format(fmt_str, sizeof fmt_str, "{FF8000}Вы продали {ffffff}%s {FF8000}нефтяной насос {ffffff}№%d {FF8000}за {ffffff}%s руб.", GetPlayerNameEx(playerid), value_1, formatInt(value_2));
                        SendClientMessage(offer_id, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "{FF8000}Вы купили нефтяной насос {ffffff}№%d {FF8000}у {ffffff}%s {FF8000}за {ffffff}%s руб.", value_1, GetPlayerNameEx(playerid), formatInt(value_2));
                        SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						new query[144];
						format(query, sizeof query, "UPDATE neftenasos SET owner_id=%d, owner_name='%s' WHERE id=%d LIMIT 1",GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), GetNeftData(value_1, N_SQL_ID));
						mysql_query(mysql, query, false);
						format(g_neft[value_1][N_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
						SetNeftData(value_1, N_OWNER_ID, 	GetPlayerAccountID(playerid));
						ModifyCashBalance(playerid, -value_2, "Продажа нефтяного насоса игроку", true, true);
						ModifyCashBalance(offer_id, value_2, "Продажа нефтяного насоса игроку", true, true);
						CallLocalFunction("UpdateNeftLabel", "i", value_1);
						SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
					}
					case OFFER_TYPE_SELL_KIOSK:
					{
                        if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровень для принятия этого предложения");
                        if((GetPlayerOwnableKiosk(playerid) + 1) > GetPlayerKioskSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество киосков.");
						{
							if(VerifyIntString(QueryPlayerBalance(playerid), value_2))
							{
								new Float: g_pos_x = GetKioskData(value_1, K_POS_X);
								new Float: g_pos_y = GetKioskData(value_1, K_POS_Y);
								new Float: g_pos_z = GetKioskData(value_1, K_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 7.0, g_pos_x, g_pos_y, g_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, g_pos_x, g_pos_y, g_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой киоск игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам киоск \"№%d\" за %d руб", GetPlayerNameEx(offer_id), value_1, value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);
                                    new query[144];
                                    format(query, sizeof query, "UPDATE accounts_canvasdev SET kiosk=-1 WHERE id=%d LIMIT 1", GetPlayerAccountID(offer_id));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "UPDATE accounts_canvasdev SET kiosk=%d WHERE id=%d LIMIT 1",value_1, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									format(query, sizeof query, "UPDATE kiosk SET owner_id=%d WHERE id=%d LIMIT 1",GetPlayerAccountID(playerid), GetKioskData(value_1, K_SQL_ID));
									mysql_query(mysql, query, false);
                                    format(g_kiosk[value_1][K_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
                                    SetKioskData(value_1, K_OWNER_ID, 	GetPlayerAccountID(playerid));
									ModifyCashBalance(playerid, -value_2, "Продажа киоску государству", true, true);
									ModifyCashBalance(offer_id, value_2, "Продажа киоска государству", true, true);

									SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с киоском который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
					}
					case OFFER_TYPE_SELL_GARAGE:
					{
                        if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровень для принятия этого предложения");
						if(GetPlayerOwnableGarage(playerid) + 1 > GetPlayerGarageSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество гаражей.");
						
						if(VerifyIntString(QueryPlayerBalance(playerid), value_2))
						{
							new Float: g_pos_x = GetGarageData(value_1, G_POS_X);
							new Float: g_pos_y = GetGarageData(value_1, G_POS_Y);
							new Float: g_pos_z = GetGarageData(value_1, G_POS_Z);

							if(IsPlayerInRangeOfPoint(playerid, 7.0, g_pos_x, g_pos_y, g_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, g_pos_x, g_pos_y, g_pos_z))
							{
								format(fmt_str, sizeof fmt_str, "Вы продали свой гараж игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
								SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

								format(fmt_str, sizeof fmt_str, "%s продал Вам гараж \"№%d\" за %d руб", GetPlayerNameEx(offer_id), GetGarageData(value_1, G_SQL_ID), value_2);
								SendClientMessage(playerid, 0x66CC00FF, fmt_str);

								SellGarage(offer_id, playerid, value_2);
								SendClientMessage(playerid, 0xFFCD00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с гаражом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}
					case OFFER_TYPE_MEDHELP:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(VerifyIntString(QueryPlayerBalance(playerid), value_1))
									{
										ModifyCashBalance(playerid, -value_1, "Курс лечения (купил)", true, true);
										ModifyCashBalance(offer_id, value_1, "Курс лечения (провел)", true, true);

										SetPlayerHealthEx(playerid, 100.0);

										new fmt_msg[128];
										format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s провел курс платного лечения", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Вы провели курс платного лечения у пациента %s", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "[MED] Медицинский работник %s[%d] провел курс платного лечения у %s[%d] за %d руб.", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid, value_1);
										SendMessageToTeam(TEAM_HOSPITAL, fmt_msg, 0x99CC99FF, offer_id);

										ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
										SetPlayerData(playerid, P_HOSPITAL, false);
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_HEAL:
					{
						new vehicleid = GetPlayerVehicleID(offer_id);

						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if((GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ORG_CARS && org_cars_canvasdev[GetVehicleData(vehicleid, V_ACTION_ID)][ORG_CARS_ID] == TEAM_HOSPITAL) && GetPlayerVehicleID(playerid) == vehicleid)
							{
								if(VerifyIntString(QueryPlayerBalance(playerid), value_1))
								{
									ModifyCashBalance(playerid, -value_1, "Курс лечения (купил) [veh]", true, true);
									ModifyCashBalance(offer_id, value_1, "Курс лечения (провел) [veh]", true, true);

									SetPlayerHealthEx(playerid, 100.0);

									new fmt_msg[50];
									format(fmt_msg, sizeof fmt_msg, "Вы вылечились у медицинского работника %s", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Вы вылечили пациента %s", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
								}
								else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег, чтобы оплатить лечение");
							}
							else SendClientMessage(playerid, 0x999999FF, "Вы или медицинский работник находитесь не в машине скорой помощи");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CHANGE_SEX:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
							{
								if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									if(VerifyIntString(QueryPlayerBalance(playerid), value_1))
									{
										ModifyCashBalance(playerid, -value_1, "Смена пола (купил)", true, true);
										ModifyCashBalance(offer_id, value_1, "Смена пола (провел)", true, true);

										SetPlayerData(playerid, P_SEX, GetPlayerData(playerid, P_SEX) ^ 1);
										UpdatePlayerDatabaseInt(playerid, "sex", GetPlayerData(playerid, P_SEX));

										new fmt_msg[70];
										format(fmt_msg, sizeof fmt_msg, "Медработник %s сделал Вам операцию по смене пола", GetPlayerNameEx(offer_id));
										SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

										format(fmt_msg, sizeof fmt_msg, "Операция у пациента %s была проведена успешно", GetPlayerNameEx(playerid));
										SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
									}
									else SendClientMessage(playerid, 0x999999FF, "У Вас недостаточно денег чтобы оплатить операцию");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на стационарном лечении");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					
					case OFFER_TYPE_GETHERE:
					{
						new Float: player_x,
							Float: player_y,
							Float: player_z;

						GetPlayerPos(offer_id, player_x, player_y, player_z);
						SetPlayerPosEx(playerid, player_x + 1, player_y + 1, player_z, 0.0, GetPlayerInterior(offer_id), GetPlayerVirtualWorld(offer_id), false);

						SCMF(playerid, 0x3399FFFF, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(offer_id));
						SCMF(offer_id, 0x3399FFFF, "Вы телепортировали %s к себе", GetPlayerNameEx(playerid));

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);
						SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);
					}
					case OFFER_TYPE_GOTO:
					{
						new Float: player_x,
							Float: player_y,
							Float: player_z;

						GetPlayerPos(playerid, player_x, player_y, player_z);
						SetPlayerPosEx(offer_id, player_x + 1, player_y + 1, player_z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

						SCMF(offer_id, 0x3399FFFF, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(playerid));
						SCMF(playerid, 0x3399FFFF, "Вы телепортировали %s к себе", GetPlayerNameEx(offer_id));

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(offer_id), offer_id);
						SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);
					}
					case OFFER_TYPE_GIVE_CAR_KEY:
					{
						new vehicleid = GetPlayerOwnableCarLast(offer_id);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							new fmt_text[80];

							format(fmt_text, sizeof fmt_text, "%s выдал Вам ключи от своего транспорта", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_text);

							SendClientMessage(playerid, -1, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 4");
							SendClientMessage(playerid, 0xCECECEFF, "После выхода из игры или выгрузки ТС с сервера они пропадут");

							format(fmt_text, sizeof fmt_text, "Вы дали игроку %s ключи от своего транспорта", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_text);

							SetPlayerData(playerid, P_ALLOWED_CAR, vehicleid);
						}
						else
						{
							if(GetPlayerOwnableCars(offer_id) == 0)
								SendClientMessage(playerid, 0x999999FF, "У игрока нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Личный транспорт игрока не загружен на сервер");
						}
					}
					case OFFER_TYPE_GIVE_MIC:
					{
						SetPVarInt(playerid, "radio_mic", 1);

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "%s дал Вам доступ к радио-эфиру", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						SendClientMessage(playerid, -1, "Вам был дан микрофон. Вы имеете доступ к радио-эфиру. Используйте: {BBBB00}/u");

						format(fmt_text, sizeof fmt_text, "Вы дали игроку %s доступ к радио-эфиру", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] подключил %s[%d] к радио-эфиру",
						GetPlayerJobAndRankName(offer_id), GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);

						SendMessageToTeam(GetPlayerTeamEx(offer_id), fmt_text, 0x99CC99FF, offer_id);
					}
					case OFFER_TYPE_GIVE_LIC:
					{
						new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

						new fmt_text[85];

						switch(value_1)
						{
							case 1:
							{
								AddPlayerData(playerid, P_DRIVING_LIC, +, 1);
								UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
							}
							case 2:
							{
								AddPlayerData(playerid, P_DRIVING_LIC_PROF, +, 1);
								UpdatePlayerDatabaseInt(playerid, "driving_lic_prof", GetPlayerData(playerid, P_DRIVING_LIC_PROF));
							}
							case 3:
							{
								SetPlayerData(playerid, P_WEAPON_LIC, 1);
								UpdatePlayerDatabaseInt(playerid, "weapon_lic", 1);
							}
						}

						format(fmt_text, sizeof fmt_text, "%s продал Вам лицензию на %s за %d рублей",
						GetPlayerNameEx(offer_id), lic_names[value_1 - 1], value_2);

						SendClientMessage(playerid, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы продали %s лицензию на %s за %d рублей",
						GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);
						SendClientMessage(offer_id, 0x3399FFFF, "К Вашей зарплате добавлено 10% от стоимости лицензии");

						new wage = value_2 / 10;

						format(fmt_text, sizeof fmt_text, "Покупка лицензии на %s у %s", lic_names[value_1 - 1], GetPlayerNameEx(offer_id));

						ModifyCashBalance(playerid, -value_2, fmt_text, true, true);

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d рублей", wage);
						GameText(offer_id, fmt_text, 4000, 2);
					}
					case OFFER_TYPE_JAIL_FREE:
					{
						new fmt_text[80];

						format(fmt_text, sizeof fmt_text, "%s помог пересмотреть Ваше дело. Вы выпущены на свободу", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы пересмотрели дело %s. Игрок выпущен на свободу", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Стоимость услуги: %d руб. 10% этой суммы добавлено к Вашей зарплате", value_1);
						SendClientMessage(offer_id, 0x3399FFFF, fmt_text);

						ModifyCashBalance(playerid, -value_1, "Оплата адвоката", true, true);

						UnjailPlayer(playerid);

						new wage = value_1 / 10;

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+%d рублей", wage);
						GameText(offer_id, fmt_text, 4000, 2);
					}
					case OFFER_TYPE_SELL_SKIN:
					{
						if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, -1, "У вас должен быть минимум 2-й уровнь для принятия этого предложения");
                        if(VerifyIntString(QueryPlayerBalance(playerid), value_1))
						{
                            new skin_sell = GetPlayerSkinEx(offer_id);

                            ModifyCashBalance(playerid, -value_1, "Продажа скина с рук", false, true);

							ModifyCashBalance(offer_id, value_1, "Продажа скина с рук", true, true);

							if(GetPlayerSex(playerid) == 0)
							{
							    SetPlayerData(offer_id, P_SKIN, 45);
								SetPlayerData(playerid, P_SKIN, skin_sell);
							}
							else
							{
							    SetPlayerData(offer_id, P_SKIN, 75);
								SetPlayerData(playerid, P_SKIN, skin_sell);
							}
							UpdatePlayerDatabaseInt(playerid, "skin", GetPlayerSkinEx(playerid));
							UpdatePlayerDatabaseInt(offer_id, "skin", GetPlayerSkinEx(offer_id));
							SetPlayerSkinInit(offer_id);
							SetPlayerSkinInit(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
					}
					
					case OFFER_TYPE_SHOWPASS:
					{
					    new fmt_text[200];

						format(fmt_text, sizeof fmt_text, "[[0,[\"%s\",%d,\"Дом\",%d,0,%d,%d,%d,\"\"]]]",
						GetPlayerNameEx(offer_id), GetPlayerData(offer_id, P_SEX) ? 1 : 0, GetPlayerLevel(offer_id), GetPlayerSkin(offer_id), GetPlayerData(offer_id, P_LAW_ABIDING), 0);

						CEF_CREATE(playerid, 2, 4, "Docs", fmt_text);

						format(fmt_str, sizeof fmt_str, "показал свой паспорт игроку %s", GetPlayerNameEx(playerid));

						Action(offer_id, fmt_str, _, false);
					}
					case OFFER_TYPE_SHOWLIC:
					{
						new fmt_text[200];

						format(fmt_text, sizeof fmt_text, "[[1,[\"%s\",[%d,%d,%d,1,1]]]]",
						GetPlayerNameEx(offer_id), GetPlayerData(offer_id, P_DRIVING_LIC), GetPlayerData(offer_id, P_DRIVING_LIC_PROF), GetPlayerData(offer_id, P_WEAPON_LIC));

						CEF_CREATE(playerid, 2, 4, "Docs", fmt_text);

						format(fmt_str, sizeof fmt_str, "показал свои лицензии игроку %s", GetPlayerNameEx(playerid));

						Action(offer_id, fmt_str, _, false);
					}
					case OFFER_TYPE_ARENDA_GARDEN:
					{
						if(VerifyIntString(QueryPlayerBalance(playerid), value_3))
						{
							format(fmt_str, sizeof fmt_str, "{FF8000}Вы сдали в аренду {ffffff}%s {FF8000}огород {ffffff}№%d {FF8000}за {ffffff}%s руб.", GetPlayerNameEx(playerid), value_1, formatInt(value_3));
                            SendClientMessage(offer_id, 0x3399FFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "{FF8000}Вы арендовали огород {ffffff}№%d {FF8000}у {ffffff}%s {FF8000}за {ffffff}%s руб.", value_1, GetPlayerNameEx(playerid), formatInt(value_3));
                            SendClientMessage(playerid, 0x3399FFFF, fmt_str);

                            new strafup = RandomEx(5000,25000);

                            new final_rent_price = value_3 + strafup;

							new rent_end_time = gettime() + (value_2 * 3600);

                            SetGardenData(value_1, G_OREND_ID, GetPlayerAccountID(playerid));
							SetGardenData(value_1, G_ARENDA_TIME, rent_end_time);
							SetGardenData(value_1, G_ARENDA_PRICE, final_rent_price);

							new query[263];

	                        format(query, sizeof query, "UPDATE gardens SET orend_id=%d,arenda_time=%d,arenda_price=%d WHERE id=%d", GetGardenData(value_1, G_OREND_ID), GetGardenData(value_1, G_ARENDA_TIME), GetGardenData(value_1, G_ARENDA_PRICE), GetGardenData(value_1, G_SQL_ID));
	                        mysql_query(mysql, query, false);

							ModifyCashBalance(playerid, -value_3, "Аренда гардена", true, true);
							ModifyCashBalance(offer_id, value_3, "Аренда гардена", true, true);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}

					default:
						SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");
				}
			}
			else SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");
		}
		else SendClientMessage(playerid, 0x999999FF, "Игрок вышел из игры");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0x999999FF, "");

	return 1;
}
CMD:no(playerid, params[])
{
	CEF_HIDE(playerid, "Offer");

	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказался от Вашего предложения", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отказались от предложения игрока %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);

			GameText(offer_id, "~r~нет", 4000, 2);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отказались от предложения игрока");
	}
	else SendClientMessage(playerid, 0x999999FF, "В данный момент Вам ничего не предлагают");

	ClearPlayerOffer(playerid);
	return 1;
}
CMD:replace_tire(playerid, params[])
{
	if(!GetPVarInt(playerid, "shinomontach")) return SendClientMessage(playerid, -1, "Вы не работаете в шиномонтаже");
	if(!strlen(params))
		return SendClientMessage(playerid, 0xFFA500FF, "Используйте: /replace_tire [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко от вас");

	new vehicleid3 = GetPlayerOwnableCarLast(to_player);

	if(vehicleid3 != GetPlayerVehicleID(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

	SetPVarInt(playerid, "shinka", GetPlayerVehicleID(to_player));
	SetPVarInt(playerid, "to_player_s", to_player);


	ShowShin(playerid, GetPlayerVehicleID(to_player));

	return 1;
}

CMD:cancel(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отозвали свое предложение для %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы отозвали свое последнее предложение");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет активных предложений");

	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hi [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HANDSHAKE);
	}
	else if(dist < 20.0)
	{
		new fmt_str[35];

		new Float: x, Float: y;
		new Float: angle;

		GetPlayerPos(playerid, x, y, z);
		angle = GetAngleToPoint(to_x, to_y, x, y);

		SetPlayerFacingAngle(playerid, angle);

		format(fmt_str, sizeof fmt_str,"машет рукой %s", GetPlayerNameEx(to_player));
		Action(playerid, fmt_str, _, false);

		ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы находитесь слишком далеко от игрока");
	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /me [текст]");

	return Action(playerid, params);
}

CMD:do(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /do [текст]");


	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xDD90FFFF, 25.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s (%s)", params, GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:try(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SCM(playerid, 0xFF6600FF, !"Вы не можете использовать это");

	if(!strlen(params))
		return SCM(playerid, 0xCECECEFF, !"Используйте: /try [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s %s", GetPlayerNameEx(playerid), params, !random(3) ? ("{66CC00}| Удачно") : ("{FF6600}| Неудачно"));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}
CMD:viplist(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerPremium(playerid) < 1) return 1;

	new fmt_text[100],
		list[sizeof fmt_text * 10 + 50] = "Имя игрока\tСтатус VIP{FFD83D}\n";

	new premium_rank[3][17] =
	{
		"{C0C0C0}Silver",
		"{FFD700}Gold",
		"{E5E4E2}Platinum"
	};

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
        else if(!GetPlayerPremium(i)) continue;

		if(i < 0)
		{
			format(fmt_text, sizeof fmt_text, "В данный момент игроков с VIP нет в сети.", GetPlayerNameEx(i), i, premium_rank[GetPlayerPremium(i) - 1]);
			IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{FFD83D}Игроки с VIP онлайн", fmt_text, "Закрыть", "");
		}
		else
		{
			format(fmt_text, sizeof fmt_text, "%s [%d]\t%s\n", GetPlayerNameEx(i), i, premium_rank[GetPlayerPremium(i) - 1]);
			strcat(list, fmt_text);
			IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{FFD83D}Игроки с VIP онлайн", list, "Закрыть", "");
		}
	}

	return 1;
}

CMD:viphelp(playerid)
{
    IntfDialogCallRemote
	(
		playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
		"{FFD700}Информация",
		"{ffffff}Вы можете приобрести себе VIP статус и получить это:\n\n"\
		"{C0C0C0}SILVER VIP\n"\
		"{FFFFFF}- Просмотр администрации online\n"\
		"{FFFFFF}- Дополнительно {FFA500}+2 слот(ов/а){FFFFFF} для покупки личного транспорта\n"\
		"{FFFFFF}- Возможность починить транспорт без механика (/fix)\n"\
		"{FFFFFF}- Общий игровой чат VIP игроков (/vr)\n"\
		"{FFFFFF}- Возможность посмотреть игроков с VIP online (/viplist)\n\n"\
		"{FFD700}GOLD VIP\n"\
		"{FFFFFF}- Просмотр администрации online\n"\
		"{FFFFFF}- Дополнительно {FFA500}+4 слот(ов/а){FFFFFF} для покупки личного транспорта\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 30 донатных рублей\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 575.000 игровых рублей\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 2 опыта\n\n"\
		"{E5E4E2}PLATINUM VIP\n"\
		"{FFFFFF}- Просмотр администрации online\n"\
		"{FFFFFF}- Дополнительно {FFA500}+7 слот(ов/а){FFFFFF} для покупки личного транспорта\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 75 донатных рублей\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 1.450.000 игровых рублей\n"\
		"{FFFFFF}- Каждый PayDay начисляется по 5 опыта\n",
		"Закрыть", ""
	);
	return 1;
}

CMD:w(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /w [текст]");


	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xACCE90FF, 3.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s шепчет: %s", GetPlayerNameEx(playerid), params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 3.0);

	return 1;
}

CMD:faketext(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(sscanf(params, "us[64]", params[0],params[1])) return SendClientMessage(playerid, 0xFFFFFFF, "Введите: /text [id игрока] [текст]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, 0xFFFFFFF, "[Ошибка] Человек не найден!");
	if(params[0] == INVALID_PLAYER_ID) return true;
	OnPlayerText(params[0], params[1]);
	return 1;
}

CMD:s(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /s [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xFFFFFFFF, 37.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s[%d] крикнул: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xFFFFFFFF, 37.0);

	ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:n(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /n [нон-рп сообщение]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0x999999FF, 30.0, 5000);
	
    if(IsPlayerAdminLevel(playerid) > 1 && GetPVarInt(playerid, "Nick_Active") != 1)
    {
      	format(fmt_str, sizeof fmt_str, "[A] {CCCC99}(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
	    SendMessageInLocal(playerid, fmt_str, 0xFFA500FF, 30.0);
	}
	else 
	{
		format(fmt_str, sizeof fmt_str, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
		SendMessageInLocal(playerid, fmt_str, 0xCCCC99FF, 30.0);
	}

	return 1;
}

CMD:pass(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /pass [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	if(to_player == playerid)
	{
	    new fmt_text[200];

	    format(fmt_text, sizeof fmt_text, "[[0,[\"%s\",%d,\"Дом\",%d,0,%d,%d,%d,\"\"]]]",
		GetPlayerNameEx(playerid), GetPlayerData(playerid, P_SEX) ? 1 : 0, GetPlayerLevel(playerid), GetPlayerSkin(playerid), GetPlayerData(playerid, P_LAW_ABIDING), 0);

		CEF_CREATE(playerid, 2, 4, "Docs", fmt_text);

		Action(playerid, "просмотривает свой паспорт", _, false);
	}
	else
	{
		new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
		if(0.5 <= dist <= 1.5)
		{
			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOWPASS);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");
	}
	return 1;
}

CMD:lic(playerid, params[]) return callcmd::showlic(playerid, params);
CMD:showlic(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /lic [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	if(to_player == playerid)
	{
	    new fmt_text[200];

		format(fmt_text, sizeof fmt_text, "[[1,[\"%s\",[%d,%d,%d,1,1]]]]",
		GetPlayerNameEx(playerid), GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerData(playerid, P_DRIVING_LIC_PROF), GetPlayerData(playerid, P_WEAPON_LIC));

		CEF_CREATE(playerid, 2, 4, "Docs", fmt_text);

		Action(playerid, "просмотривает свои лицензии", _, false);
	}
	else
	{
		new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
		if(0.5 <= dist <= 1.5)
		{
			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOWLIC);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");
	}
	return 1;
}

CMD:admstats(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /admstats [ID админа]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока  нет");

	if(IsPlayerAdminLevel(playerid) < 1) return SendClientMessage(playerid, 0xFF6600FF, "У игрока нет админ прав");
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	if(to_player == playerid)
	{
	    new fmt_text[200];

	    format(fmt_text, sizeof fmt_text, "{"#cW"}Репорты:\t\t%d\nДеморганы:\t\t%d\nБаны:\t\t%d\nКики:\t\t%d\nМуты:\t%d",
		GetPlayerAdmRep(playerid), GetPlayerAdmDm(playerid), GetPlayerAdmBan(playerid), GetPlayerAdmKick(playerid), GetPlayerAdmMute(playerid));
	    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{"#cGold"}Ваша Админ Статистика", fmt_text, "Закрыть", "");

		Action(playerid, "просмотривает свою админ статистику", _, false);
	}
	else
	{
		new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
		if(0.5 <= dist <= 1.5)
		{
			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOWADMSTATS);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");
	}
	return 1;
}

CMD:mn(playerid) return callcmd::menu(playerid);
CMD:mm(playerid) return callcmd::menu(playerid);
CMD:mainmenu(playerid) return callcmd::menu(playerid);
CMD:menu(playerid) 
{
	ShowMainMenu(playerid); return 1;
}

CMD:help(playerid, params[])
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_INFO_HELP, DIALOG_STYLE_LIST,
		"Помощь по игре",
		"1. Информация о проекте\n\
		2. Где заработать денег?\n\
		3. Где получить права на вождение?\n\
		4. Как купить жилье?\n\
		5. Как купить бизнес?\n\
		6. Как купить авто?\n\
		7. Как прокачать уровень?\n\
		8. Как вступить в организацию?\n\
		9. Как стать агентом поддержки/лидером?\n\
		10. Как найти нужное мне место?\n\
		11. Где достать оружие?\n\
		12. Где устроиться на работу?\n\
		13. Как посмотреть команды?\n\
		14. Как добраться до работы?\n\
		15. Где купить телефон и SIM-карту?\n\
		16. Как мне уволиться из фракции?\n\
		17. Как узнать номер телефона игрока?",
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:anim(playerid, params[]) return callcmd::animlist(playerid, params);
CMD:animlist(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Анимации нельзя использовать в транспорте");

	if(!strlen(params))
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_ANIM_LIST, DIALOG_STYLE_LIST,
			"{9966FF}Анимации",
			"{00ff00}Информация\n"\
			"1. Приветствие/Прощание\n"\
			"2. Танцы\n"\
			"3. Положение\n"\
			"4. Передвижение\n"\
			"5. Стойки\n"\
			"6. Действие\n"\
			"7. Любов 18+\n"\
			"8. Жесты\n"\
			"9. Питание\n"\
			"10. Эксклюзивные анимации",
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		extract params -> new category, anim_id;

		if(!SetAnimPlayerNew(playerid, category, anim_id))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте /anim(list) [номер категории] [номер анимации из списка]");
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(g_drag_racing_status[playerid] == 1) return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(GetOwnableCarData(index, OC_KEY_IN) != 1)
			{
			   return GameText(playerid, "~r~КЛЮЧИ НЕ ВСТАВЛЕНЫ", 1200, 6);
			}
			if(GetOwnableCarData(index, OC_BY_ID) != 0)
			{
			    return 1;
			}
		}
		else if(IsAJobCar(vehicleid))
		{
			if(GetPlayerJobCar(playerid) != vehicleid)
			{
				return RemovePlayerFromVehicle(playerid);
			}
		}

		if(GetVehicleData(vehicleid, V_FUEL) <= 0.0)
           return GameText(playerid, "~r~нет бензина", 4000, 2);

		if(GetVehicleData(vehicleid, V_IZNOS) > 99) return GameText(playerid, "~r~Двигатель изношен", 3000, 3);

		new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_ENGINE, engine);

		if(GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_OFF)
		{
			CEF_CREATE(playerid, 1, 2, "playSound('sounds/car/start_engine_car.wav', 0, 1)");
			GameText(playerid, "~g~ДВИГАТЕЛЬ ЗАВОДИТСЯ...", 1000, 3);
		}
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new lights = (GetVehicleParam(vehicleid, V_LIGHTS) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_LIGHTS, lights);
	}
	return 1;
}

CMD:sl(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new limit = (GetVehicleData(vehicleid, V_LIMIT) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_LIMIT, limit);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	if(!IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

	IntfDialogCallRemote
	(
		playerid, DIALOG_OPEN_HOOD_OR_TRUNK, DIALOG_STYLE_MSGBOX,
		" ",
		"\t{CC9900}Управления авто",
		"Капот", "Багажник"
	);
	return 1;
}

CMD:unrentmoto(playerid)
{
	if(GetPlayerData(playerid, P_RENT_MOPED) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "У вас нет арендованного мотоцикла!");
	new veh_id = GetPlayerData(playerid, P_RENT_MOPED);
	{
		DestroyVehicle(veh_id);
	}
	SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
	//SendClientMessage(playerid, -1, "Вы успешно отказались от аренды мотоцикла");
	return 1;
}
CMD:hpall(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new Float:ps;

	if(sscanf(params, "fi", ps)) SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hpall [радиус]");

	if(ps < 20 || ps > 100000) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 100000");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, ps, pos[0], pos[1], pos[2])) continue;
		SetPlayerHealthEx(i, 100);
		SetPlayerData(i, P_HEALTH, 100);
		SendClientMessage(i, COLOR_WHITE, "[Мероприятие] Администратор изменил Вам уровень здоровья");
	}

	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно изменили HP игрокам в радиусе");

	return 1;
}
CMD:alarm(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new alarm = (GetVehicleData(vehicleid, V_ALARM) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_ALARM, alarm);
	}
	return 1;
}

CMD:bank(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 35.0, 300.5571,304.2417,1001.0000) || IsPlayerInRangeOfPoint(playerid, 35.0, 418.3971,572.8312,-36.6100)) ShowPlayerBankDialog(playerid);
	return 1;
}

CMD:time(playerid, params[])
{
	new fmt_msg[144];
	if(GetPlayerData(playerid, P_WARN_TIME) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до снятия предупреждения: %d дней", ((GetPlayerData(playerid, P_WARN_TIME) - gettime()) / 86400) + 1);
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	if(GetPlayerData(playerid, P_MUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до разблокировки чата: %d:%02d", floatround(GetPlayerData(playerid, P_MUTE) / 60), (GetPlayerData(playerid, P_MUTE) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

    if(GetPlayerData(playerid, P_VMUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до разблокировки VIP чата: %d:%02d", floatround(GetPlayerData(playerid, P_VMUTE) / 60), (GetPlayerData(playerid, P_VMUTE) % 60));
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}

	if(GetPlayerData(playerid, P_JAIL) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"} {7CFC00}Время до выхода на свободу: %d:%02d", floatround(GetPlayerData(playerid, P_JAIL) / 60), (GetPlayerData(playerid, P_JAIL) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}
	
	if(GetPlayerData(playerid, P_ARREST) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до конца заключения: %d:%02d", floatround(GetPlayerData(playerid, P_ARREST) / 60), (GetPlayerData(playerid, P_ARREST) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	if(GetPlayerData(playerid, P_RMUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "{"#cW"}Время до разблокировки репорта: %d:%02d", floatround(GetPlayerData(playerid, P_RMUTE) / 60), (GetPlayerData(playerid, P_RMUTE) % 60));
		SendClientMessage(playerid, COLOR_GOLD, fmt_msg);
	}

	return 1;
}

CMD:id(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /id [id или часть имени игрока]");

	new fmt_str[148];
	new count;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;

		if(strfind(GetPlayerNameEx(idx), params, true) != -1)
		{
			count ++;

			format(fmt_str, sizeof fmt_str, "{FFFFFF}%s, ID: {d0cba6}%d{FFFFFF}, LVL: {d0cba6}%d{FFFFFF}, PING: {d0cba6}%d{FFFFFF}, CLIENT: {d0cba6}%s", GetPlayerNameEx(idx), idx, GetPlayerLevel(idx), GetPlayerPing(idx), GetPlayerClientName(idx));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(count >= 5)
			{
				SendClientMessage(playerid, 0x999999FF, "Показаны первые 5 совпадений");
				break;
			}
		}
	}
	if(!count) SendClientMessage(playerid, 0x999999FF, "Совпадений не найдено");

	return 1;
}

CMD:buyf(playerid, params[])
{
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 994.1306, 679.8422, 12.0653))  // для завода
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в отделе доставки завода или заняли не ту линию");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 935.9503, 662.1276, 12.0029))  // для азс
	{
		if(!HasJob(playerid, 15 || modelid != 514))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете развозчиком топлива или заняли не ту линию");
	}
	else
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе");

	new total_litres = GetPlayerJobLoadItems(playerid);

	if(!IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /buyf [кол-во в литрах]");

	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вашего транспорта отсутствует цистерна для топлива");

	extract params -> new load_fuel;

	if(!(1 <= load_fuel <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 8000 л топлива");

	if(factory_fuels < load_fuel)
		return SendClientMessage(playerid, 0x999999FF, "На нефтезаводе нет такого количества топлива");

	if((total_litres + load_fuel) > 8000)
		return SendClientMessage(playerid, 0xCECECEFF, "В цистерну столько не поместится");

	if(!VerifyIntString(QueryPlayerBalance(playerid), load_fuel * 10))
		return SendClientMessage(playerid, 0x999999FF, "Недостаточно денег для покупки такого количества топлива");

	ModifyCashBalance(playerid, -(load_fuel * 10), "Покупка топлива (нефтезавод)", true, false);

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, factory_fuels - load_fuel);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetPlayerJobLoadItems(playerid, total_litres + load_fuel);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d л топлива общей стоимостью %d руб", load_fuel, load_fuel * 10);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "~g~+ %d litres~n~~b~total %d litres", load_fuel, total_litres + load_fuel);
	GameText(playerid, fmt_str, 2000, 6);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres + load_fuel);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:sellf(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в службе доставки завода");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1111.9989, 2169.4163, 38.0353))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада топлива завода");

	new total_litres = GetPlayerJobLoadItems(playerid);

	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /sellf [кол-во в литрах]");

	extract params -> new sell_fuels;

	if(!(1 <= sell_fuels <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "Можно продать от 1 до 8000 л топлива");

	if(vehicleid == INVALID_VEHICLE_ID || !IsTrailerAttachedToVehicle(vehicleid) || total_litres < sell_fuels)
		return SendClientMessage(playerid, 0x999999FF, "В Вашей фуре нет такого количества топлива или цистерна не прицеплена");

	if((factory_fuels + sell_fuels) > 1000000)
		return SendClientMessage(playerid, 0x999999FF, "Склад топлива завода заполнен");

	ModifyCashBalance(playerid, (sell_fuels * 12), "Продажа топлива (завод)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuels + sell_fuels);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);

	SetPlayerJobLoadItems(playerid, total_litres - sell_fuels);
	AddPlayerData(playerid, P_JOB_WAGE, +, sell_fuels * 2);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d л топлива на сумму %d руб", sell_fuels, sell_fuels * 12);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}%d руб", sell_fuels * 2);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres - sell_fuels);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);

	return 1;
}

CMD:buyprod(playerid, params[])
{
	if(!(HasJob(playerid, 15) && IsPlayerInJob(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	extract params -> new buy_prod_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buyprod [кол-во]. Стоимость 1 продукта 24 руб.");

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1046.5460,2203.9644,38.2055))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада исходных материалов завода");

	else if(!IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у склада исходных материалов завода в рабочем транспорте");

	else if(!(1 <= buy_prod_count <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Можно загрузить от 1 до 10000 шт. продуктов");

	else if(GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) < buy_prod_count)
		return SendClientMessage(playerid, 0x999999FF, "На складе исходных материалов нет такого количества продуктов");

	else if((buy_prod_count + GetPlayerJobLoadItems(playerid)) > 10000)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится, максимум 10000 шт.");

	if(!VerifyIntString(QueryPlayerBalance(playerid), buy_prod_count * 24))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества продуктов");

	ModifyCashBalance(playerid, -(buy_prod_count * 24), "Покупка продуктов (разв. продуктов)", true, true);

	SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_prod_count);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) - buy_prod_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);

	new fmt_msg[64];

	format(fmt_msg, sizeof fmt_msg, "Вы купили %d продуктов на сумму %d руб.", buy_prod_count, buy_prod_count * 24);
	SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Текущее кол-во загруженных продуктов: %d из 10000", GetPlayerJobLoadItems(playerid));
	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	return 1;
}

CMD:bizlist(playerid)
{
	if(!HasJob(playerid, 15) && !GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new order_id = GetPlayerData(playerid, P_ORDER);

	if(order_id == -1)
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 8;
		ShowBizlist(playerid, page_cars[playerid]);
	}
	else
	{
		string_dialog[0] = EOS;
		format
		(
			string_dialog, sizeof string_dialog, 
			"{FFFFFF}Название предприятия: {f0c94f}%s\n\
			{FFFFFF}Необходимый товар: {f0e94f}Продукты\n\
			{FFFFFF}Длина пути от места загрузки: {f0c94f}Неизвестно.\n\n\
			{FFFFFF}Необходимое количество: {f0c94f}%d {FFFFFF}ед.\n\
			{FFFFFF}Оплата за всю работу: {aef04f}%s {FFFFFF}руб.\n\n\
			{FFFFFF}Комиссия компании составляет: {ffe36c}25%\n\n\
			{FFFFFF}Примерное количество заездов: {f0c94f}%d {FFFFFF}кр.",
			GetBusinessData(GetOrderData(order_id, O_COMPANY_ID), B_NAME), 
			GetOrderData(order_id, O_AMOUNT),
			formatInt(GetOrderData(order_id, O_PRICE)),
			GetOrderData(order_id, O_AMOUNT) / 2500
		);

		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подробности о взятом заказе", string_dialog, "", "Закрыть");
	}
	return 1;
}

CMD:fuellist(playerid)
{
	if(!HasJob(playerid, 15) && !GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны работать дальнобойщиком");

	new order_id = GetPlayerData(playerid, P_FUELORDER);

	if(order_id == -1)
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 19;
		ShowFuellist(playerid, page_cars[playerid]);
	}
	else
	{
		string_dialog[0] = EOS;
		format
		(
			string_dialog, sizeof string_dialog, 
			"{FFFFFF}Название предприятия: {f0c94f}%s\n\
			{FFFFFF}Необходимый товар: {f0e94f}Топливо\n\
			{FFFFFF}Длина пути от места загрузки: {f0c94f}Неизвестно.\n\n\
			{FFFFFF}Необходимое количество: {f0c94f}%d {FFFFFF}ед.\n\
			{FFFFFF}Оплата за всю работу: {aef04f}%s {FFFFFF}руб.\n\n\
			{FFFFFF}Комиссия компании составляет: {ffe36c}25%\n\n\
			{FFFFFF}Примерное количество заездов: {f0c94f}%d {FFFFFF}кр.",
			GetBusinessData(GetFuelOrderData(order_id, F_COMPANY_ID), B_NAME), 
			GetFuelOrderData(order_id, F_AMOUNT),
			formatInt(GetFuelOrderData(order_id, F_PRICE)),
			GetFuelOrderData(order_id, F_AMOUNT) / 2500
		);

		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подробности о взятом заказе", string_dialog, "", "Закрыть");
	}
	return 1;
}

CMD:o(playerid, params[]) return callcmd::msg(playerid, params);
CMD:msg(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 4) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /msg [А] [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "Администратор %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0xFFCD00FF, fmt_str);

	SendLog(playerid, LOG_TYPE_ADMIN_MSG, params);


	return 1;
}

CMD:amsg(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 5) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /amsg [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "Администрация сервера: %s", params);
	SendClientMessageToAll(0xFFCD00FF, fmt_str);

	SendLog(playerid, LOG_TYPE_ADMIN_MSG, params);

	return 1;
}

CMD:ears(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	g_admin_ears = g_admin_ears ^ true;

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы %s прослушку SMS", g_admin_ears ? "включили" : "выключили");
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s прослушку SMS", GetPlayerNameEx(playerid), playerid, g_admin_ears ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}


	return 1;
}


CMD:nokay(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 4) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(IsPlayerAdminLevel(playerid) >= 4)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /nokay [ID игрока] [причина (необязательно)]");

		extract params -> new to_player;

		new reason[31];
		sscanf(params, "{d}s[30]", reason);

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

		if(!GetPVarInt(to_player, "change_name_status"))
			return SendClientMessage(playerid, 0xFF6600FF, "Игрок не подавал запрос на смену ника");

		new player_name[20 + 1];
		GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

		new fmt_msg[128];
		format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] отменил заявку на смену ника %s [%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

		SendMessageToAdmins(fmt_msg, COLOR_GREY);

		new fmt_text[175];

		format(fmt_text, sizeof fmt_text, "Администратор %s отменил вашу заявку на смену ника", GetPlayerNameEx(playerid));

		if(strlen(reason) > 0)
		format(fmt_text, sizeof fmt_text, "%s. Причина: %s", fmt_text, reason);

		SendClientMessage(to_player, 0xFF6600FF, fmt_text);

		DeletePVar(to_player, "change_name");
		DeletePVar(to_player, "change_name_status");

	}

	return 1;
}

CMD:okay(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используй: /okay [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPVarInt(to_player, "change_name_status"))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не подавал запрос на смену ника");

	new player_name[20 + 1];
	GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

	if(ChangePlayerName(to_player, player_name, true))
	{
		IntfDialogCallRemote
		(
			to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"{FFD83D}Имя изменено",
			"{66FF00}Заявка на изменение имени одобрена, новое имя установлено.\n\n"\
			"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
			"этого нужно изменить его в окне клиента CRMP. Рекомендуем прямо\n"\
			"сейчас свернуть игру и сделать это.",
			"Ок", ""
		);
	}
	else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

	new fmt_text[75];

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] одобрил заявку на смену никнейма", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	DeletePVar(to_player, "change_name");
	DeletePVar(to_player, "change_name_status");

	return 1;
}

CMD:cc(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) > 4)
	{
		if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
		 

		for(new i = 0; i < 25; i++)
		{
			SendClientMessageToAll(-1, "");
			SendClientMessageToAll(-1, "");
			SendClientMessageToAll(-1, "");
			SendClientMessageToAll(-1, "");
		}

		SendClientMessageToAll(0xFFCD00FF, "Чат был очищен администрацией");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] очистил чат", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);
	}
	else
	{
		for(new i = 0; i < 25; i++)
		{
			SendClientMessage(playerid, -1, "");
			SendClientMessage(playerid, -1, "");
			SendClientMessage(playerid, -1, "");
			SendClientMessage(playerid, -1, "");
		}

		SendClientMessage(playerid, 0xFFCD00FF, "Чат был успешно очищен!");
	}
	return 1;
}
CMD:leave(playerid)
{
	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0x999999FF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не состоите в организации");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в организации %s.\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть организацию?",
		GetTeamName(GetPlayerTeamEx(playerid))
	);

	IntfDialogCallRemote(playerid, DIALOG_TEAM_LEAVE, DIALOG_STYLE_MSGBOX, "{FF5533}Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:yt(playerid, params[])
{
	if(GetPlayerYAdminEx(playerid) < 1) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yt [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "[YouTube] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageToYAdmins(fmt_str, 0xBE2D2DFF);

	return 1;
}

cmd:youtubers(playerid, params[]) callcmd::ytubers(playerid, params);
CMD:ytubers(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	new fmt_text[60],
		count;

	SendClientMessage(playerid, 0xffaa00FF, "Ютуберы в сети:");
	foreach(new i: Player)
	{
		new yt_lvl = GetPlayerYAdminEx(i);

		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(yt_lvl < 1 || yt_lvl > 3) continue;

		format(fmt_text, sizeof fmt_text, "%s[%d] (%d уровень)", GetPlayerNameEx(i), i, yt_lvl);

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		SendClientMessage(playerid, 0xffaa00FF, fmt_text);
		count++;
	}
	if(!count) SendClientMessage(playerid, 0xffaa00FF, "Нет ютуберов в сети");

	return 1;
}
cmd:log(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_LOG) == 0) 
	{
		SCM(playerid, COLOR_GREY, "Вы отключили логирование онлайна в чате");
		SCM(playerid, COLOR_GREY, "Для того чтобы вернуть логирование, еще раз пропишите команду /log");

		SetPlayerData(playerid, P_LOG, 1);
	}
	else if(GetPlayerData(playerid, P_LOG) == 1) 
	{
		SCM(playerid, COLOR_GREY, "Вы включили логирование онлайна в чате");
		SCM(playerid, COLOR_GREY, "Для того чтобы отключить логирование, еще раз пропишите команду /log");

		SetPlayerData(playerid, P_LOG, 0);
	}

	return true;
}

enum E_AHELP_COMMANDS_STRUCT
{
	AC_LEVEL,
	AC_TEXT[148]
}

new g_ahelp_commands[][E_AHELP_COMMANDS_STRUCT] =
{
	{1, "/ahelp /log /sp /a /ytadmins /fixcar /photo_screen /pos /uncuff /spoff /awarns /admins /add_tplist /alogin /atinfo /pm /z /tplist"},

	{2, "/viplist /ytubers /offmute /stats /offstats /kick /mute /unmute /jaillist /setfuel /getv /spawn /goto /getcar /plveh /slap"},
	{2, "/hp /afly /down /fly /gotocar /jetpack {"SERVER_COLOR"}/jail /unjail /offjail /offunjail /rmute /unrmute"},

	{3, "/skin /house /biz /spcar /gethere /sethunger /kazna_log /agivevb /findcar /createorders /gotogarden /neft /stall {"SERVER_COLOR"}/alock"},
	{3, "{"SERVER_COLOR"}/vipmute /unvipmute /set_iznos"},

	{4, "/hpall /msg /ears /cc /mp_tp /setleader /auninvite /freeze /unfreeze /templeader /veh /gotogarage /mp_gun /mp_skin /agm /mplist"},
	{4, "/setleaderoff /mp_freeze /mp_unfreeze /removegun /delveh {"SERVER_COLOR"} /changeinfo /nokay /okay /ban /unban /offwarn /warn"},

	{5, "/lip /amsg /settime /setweather /setskills /agivelic /setspeed /bank_log /yrangoff {"SERVER_COLOR"}/adminlist /skick /offban /offunwarn"},
	{5, "{"SERVER_COLOR"}/unwarn"},

	{6, "/getlog /money /inter /world /setprods /givegun /alldelveh /aefir /aedit /at /setfuels /pj /a_atinfo /a_tuning {"SERVER_COLOR"}/arang"},
	{6, "{"SERVER_COLOR"}/setprefix /yrang /unbanip /banip /arangoff /sban /offawarn /awarn /unawarn"},

	{7, "/hangl /svalkaspawn /contspawn /setbizwar /bizinfo /faketext /info_work /give_work /givefstyle /payday /fullprods /spcars"},
	{7, "/getname /money_log /houseinfo {"SERVER_COLOR"}/kiosk_slot /crash /soffban /add_rentveh /setnakolka /setvip /create_x2 /setstats"},
	{7, "{"SERVER_COLOR"}/fullsellall /set_car_market_all /set_car_market /offhardban /hardban /setvipprefix /setmindostup /giveskin"},
	{7, "{"SERVER_COLOR"}/givedonate /giveacs /car_slot /givecar /giveitem /house_slot /garage_slot /biz_slot /givefish /createcode /givemoney"},
	{7, "{"SERVER_COLOR"}/auction_slot /addauctionlot /add_black_market /givecase /givekey /garden_slot"},

	{8, "/setbuyadmin /sellproperty /sellhotels /setexitpos /setcarpos /set_garage_pick /set_garage_exit /set_garage_car /createbillboard"},
	{8, "/gotobillboard /information /info_world /gmx /delownablecar /add_pcar /dellmap /map /gzcolor /addbiz /b_set_pick"},
	{8, "/b_set_exit_pos /b_set_pos /b_set_name /b_set_int /set_pick /zbtplayer /addzbtplayer /delzbtplayer /asellstall /asellgarage"},
	{8, "/get_car_market /addcasesworld /asellhouse /asellbiz /addcarsharing /selldebtorsproperty /setcmd /give_jticket /addhouse"},
	{8, "/setrates /serverconfig /addgarage /deleteaccount /createcoinsitem /givecaseall /asellgarden /addgarden /addneft"}
};
cmd:ahelp(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	string_dialog[0] = EOS;
	new query[248];

	new admin = 1;

	strcat(string_dialog, "{FFFFFF}Команды помеченные {"SERVER_COLOR"}цветом {FFFFFF}недоступны покупным администраторам\n\n");
	for(new i; i < sizeof g_ahelp_commands; i++)
	{
		if(g_ahelp_commands[i][AC_LEVEL] > IsPlayerAdminLevel(playerid)) 
			continue;

		if(admin != g_ahelp_commands[i][AC_LEVEL])
		{
			strcat(string_dialog, "\n");
			admin = g_ahelp_commands[i][AC_LEVEL];
		}

		format(query, sizeof query, "{"SERVER_COLOR"}%d уровень: {FFFFFF}%s\n", g_ahelp_commands[i][AC_LEVEL], g_ahelp_commands[i][AC_TEXT]);
		strcat(string_dialog, query);
	}
	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Доступные команды администратора", string_dialog, "", "Закрыть", 0, 0, "Все команды которые доступны вашему уровню администратора");

	return true;
}

CMD:yhelp(playerid, params[])
{
	if(GetPlayerYAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}Доступные команды для ютуберов:");
	if(GetPlayerYAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}1 уровень: {FFFFFF}/yt /youtubers /goto /fly /delveh");
	if(GetPlayerYAdminEx(playerid) >= 2) SendClientMessage(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}2 уровень: {FFFFFF}/veh /spawn /gethere");
	if(GetPlayerYAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xFFFFFFFF, "{"SERVER_COLOR"}3 уровень: {FFFFFF}/admins");
	return 1;
}

CMD:sp(playerid, params[])
{
    if(GetPlayerData(playerid, P_JAIL) != 0) return SendClientMessage(playerid, 0xCECECEFF, "* Данная функция заблокирована в тюрьме.");
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

    if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
		return SendClientMessage(playerid, 0x999999FF, "За данным игроком следить нельзя");
	
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}
	StartSpectate(playerid, to_player);
	ShowSpectateMenu(playerid, to_player);
	return 1;
}

stock ShowSpectateMenu(playerid, spec_player)
{
	new Float:health; 
	GetPlayerHealth(spec_player, health);
	
	new Float:armours;
	GetPlayerArmour(spec_player, armours);

	new hour, minute, day, month, year;
	gettime(hour, minute);
	getdate(year, month, day);

	new vehicleid = GetPlayerVehicleID(playerid);
	str_2[0] = EOS;
	format
	(
		str_2, sizeof str_2, "[\"%d/%d/%d %d:%02d\",[%d,\"%s\",%d,%d,%.1f,%d,%d,%d,\"%s\",%d,\"%s\",%.1f,\"%s\",\"%d/%d/%d\",%.1f,%.1f,%d,%d,1,%d]]",
		year, month, day, hour, minute,
		spec_player,
		GetPlayerNameEx(spec_player),
		GetPlayerLevel(spec_player),
		GetPlayerExp(spec_player),
		health,
		GetPlayerData(spec_player, P_WARN),
		GetPlayerPing(spec_player),
		GetPlayerPing(spec_player),
		GetPlayerTeamName(spec_player),
		GetPlayerJob(spec_player),
		g_family[GetPlayerFamily(spec_player)][F_NAME],
		armours,
		GetWeaponName(GetPlayerWeapon(spec_player)),
		GetPlayerData(spec_player, P_SKILL_DEAGLE),
		GetPlayerData(spec_player, P_SKILL_M4),
		GetPlayerData(spec_player, P_SKILL_AK47),
		GetVehicleData(vehicleid, V_HEALTH),
		GetPlayerSpeed(spec_player),
		GetVehicleParamEx(vehicleid, V_ENGINE),
		GetPlayerData(spec_player, P_MASK),
		GetPlayerData(spec_player, P_NAKOLKA)
	);
	CEF_CREATE(playerid, 2, 4,"AdminSpectate", str_2);
	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 1)");
}
CMD:offmute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offmute [никнейм игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new string: player_name[21], mute_time, string: reason[30];


	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку оффлайн %s на %d мин", GetPlayerNameEx(playerid), player_name, mute_time);
	
	AddPlayerData(playerid, P_ADMMUTE, +, 1);
	UpdatePlayerDatabaseInt(playerid, "admmute", GetPlayerData(playerid, P_ADMMUTE));

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	new query[144],
		Cache: result,
		rows,
		uid,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, last_ip FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET mute%d WHERE id=%d", mute_time * 60,uid);
	mysql_query(mysql, query, false);

	format(fmt_msg, sizeof fmt_msg, "Выдал %s блокировку чата оффлайн на %d мин. Причина: %s", player_name, mute_time, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);
	return 1;
}

CMD:stats(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /stats [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	ShowPlayerStats(to_player, playerid);
	return 1;
}
CMD:offstats(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offstats [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	ShowPlayerStats(user_id, playerid);
	return 1;
}
CMD:a(playerid, params[])
{
	if(CheckAdmin(playerid, 1)) return 1;
 	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");
	 
	{
		if(!strlen(params)) 
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /a [текст]");
		new fmt_str[128];
		if(!g_player[playerid][P_MYPREFIX] && !g_player[playerid][P_MYPREFIX_COLOR])
		{
			format(fmt_str, sizeof fmt_str, "[А] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
			SendMessageToAdmins(fmt_str, 0x99CC00FF);

			//SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
		}
		if(g_player[playerid][P_MYPREFIX] && g_player[playerid][P_MYPREFIX_COLOR])
		{
			format(fmt_str, sizeof fmt_str, "[А] {%s}[%s] {99CC00}%s[%d]: %s", g_player[playerid][P_MYPREFIX_COLOR], g_player[playerid][P_MYPREFIX], GetPlayerNameEx(playerid), playerid, params);
			SendMessageToAdmins(fmt_str, 0x99CC00FF);

			//SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
		}
	}
	return 1;
}

CMD:ytadmins(playerid, params[])
{
	if(GetPlayerYAdminEx(playerid) < 1) return 1;
	 
	new fmt_text[128],
		count;
		
	SendClientMessage(playerid, 0x99CC00FF, !"Админы онлайн:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		new yt_lvl = IsPlayerAdminLevel(i);

		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!(1 <= yt_lvl <= 3)) continue;

		if(g_player[i][P_MYPREFIX] && g_player[i][P_MYPREFIX_COLOR])
		{
			format(fmt_text, sizeof fmt_text, "{%s}[%s] {99CC00}%s [%d] (LVL %d)", g_player[i][P_MYPREFIX_COLOR], g_player[i][P_MYPREFIX], GetPlayerNameEx(i), i, yt_lvl);

			if(IsPlayerAFK(i))
				format(fmt_text, sizeof fmt_text, "{99CC00}%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

			else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
				format(fmt_text, sizeof fmt_text, "{99CC00}%s {00CC00}/sp > %d", fmt_text, GetPlayerSpectateData(i, S_PLAYER));

			SendClientMessage(playerid, -1, fmt_text);
			count++;
		}
		if(!g_player[i][P_MYPREFIX] && !g_player[i][P_MYPREFIX_COLOR])
		{
			format(fmt_text, sizeof fmt_text, "{99CC00}%s [%d] (LVL %d)", GetPlayerNameEx(i), i, yt_lvl);

			if(IsPlayerAFK(i))
				format(fmt_text, sizeof fmt_text, "{99CC00}%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

			else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
				format(fmt_text, sizeof fmt_text, "{99CC00}%s {00CC00}/sp > %d", fmt_text, GetPlayerSpectateData(i, S_PLAYER));

			SendClientMessage(playerid, -1, fmt_text);
			count++;
		 }
	}
	return 1;
}

CMD:get(playerid, params[]) callcmd::changeinfo(playerid, params);
CMD:ci(playerid, params[]) callcmd::changeinfo(playerid, params);
CMD:changeinfo(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /changeinfo [имя игрока]");

	if(!(3 <= strlen(params) <= 20)) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new reg_ip[16],
		last_ip[16],
		reg_date[6],
		login_date[6],
		money[21],
		bank[21],
		reg_time = cache_get_field_content_int(0, "reg_time"),
		last_login = cache_get_field_content_int(0, "last_login"),
		game_for_day = cache_get_field_content_int(0, "game_for_day"),
		game_for_day_prev = cache_get_field_content_int(0, "game_for_day_prev"),
		warn = cache_get_field_content_int(0, "warn"),
		jail = cache_get_field_content_int(0, "jail"),
		car_slots = cache_get_field_content_int(0, "car_slots"),
		garage_slots = cache_get_field_content_int(0, "garage_slots"),
		house_slots = cache_get_field_content_int(0, "house_slots"),
		kiosk_slots = cache_get_field_content_int(0, "kiosk_slots"),
		admin = cache_get_field_content_int(0, "admin"),
		biz_slots = cache_get_field_content_int(0, "biz_slots");

	cache_get_field_content(0, "reg_ip", reg_ip);
	cache_get_field_content(0, "last_ip", last_ip);
	cache_get_field_content(0, "money", money);
	cache_get_field_content(0, "bank", bank);

	timestamp_to_date(reg_time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);
	timestamp_to_date(last_login, login_date[2], login_date[1], login_date[0], login_date[3], login_date[4], login_date[5]);

	string_dialog[0] = EOS;

	format
	(
		string_dialog, sizeof string_dialog,
		"\
		{FFFFFF}Номер аккаунта:\t\t%d\n\
		{FFFFFF}Наличные:\t\t\t%s руб\n\
		{FFFFFF}Осн. банк счет:\t\t%s руб\n\
		{FFFFFF}Баланс [Донат]:\t\t\t\t%s руб (Всего: %s руб)\n\
		{FFFFFF}Уровень:\t\t\t%d\n\
		{FFFFFF}Уровень администратора:\t\t\t%d\n\
		{FFFFFF}IP адрес (регистр.):\t\t%s\n\
		{FFFFFF}IP адрес (послед.):\t\t%s\n\
		{FFFFFF}Дата и время регистрации:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		{FFFFFF}Дата и время последнего входа:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		{FFFFFF}В игре сегодня:\t\t%d ч %d мин\n\
		{FFFFFF}В игре вчера:\t\t\t%d ч %d мин\n\n\
		{FFFFFF}Слоты для транспорта:\t%d\n\
		{FFFFFF}Слоты для дома:\t%d\n\
		{FFFFFF}Слоты для бизнеса:\t%d\n\
		{FFFFFF}Слоты для гаража:\t%d\n\
		{FFFFFF}Слоты для киоска:\t%d\n\n\
		{FAAC58}Наказания:{FFFFFF}\n\
		{FFFFFF}Варны: %d\n\
		{FFFFFF}Деморганы: %d\n\n\
		{FAAC58}Транспорт:{FFFFFF}\
		",
		user_id,
		formatStr(money),
		formatStr(bank),
		formatInt(cache_get_field_content_int(0, "donate_current")),
		formatInt(cache_get_field_content_int(0, "donate_total")),
		cache_get_field_content_int(0, "level"),
		admin,
		reg_ip,
		last_ip,
		reg_date[0], reg_date[1], reg_date[2],
		reg_date[3], reg_date[4], reg_date[5],
		login_date[0], login_date[1], login_date[2],
		login_date[3], login_date[4], login_date[5],
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_MINUTES),
		car_slots,
		house_slots,
		biz_slots,
		garage_slots,
		kiosk_slots,
		warn,
		jail
	);

	cache_delete(result);

	if(IsPlayerAdminLevel(playerid) < admin) 
		return SCM(playerid, COLOR_GREY, "Вы не можете просматривать информацию об аккаунте выше вас по рангу");

	format(query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				modelid = cache_get_field_content_int(idx, "model_id"),
				number[10],
				region[10];

			cache_get_field_content(idx, "number", number);
			cache_get_field_content(idx, "region", region);
			new typenumber = cache_get_field_content_int(idx, "typenumber");

			if(typenumber == 0) format(query, sizeof query, "\n%s [%d]", GetVehicleInfo(modelid, VI_NAME), id);
			else format(query, sizeof query, "\n%s [%d] [%s | %s]", GetVehicleInfo(modelid, VI_NAME), id, number, region);
			strcat(string_dialog, query);
		}
	}
	cache_delete(result);

	strcat(string_dialog, "\n\n{FAAC58}Дома:{FFFFFF}");

	format(query, sizeof query, "SELECT * FROM houses WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id");

			format(query, sizeof query, "\nДом [№%d]", id);
			strcat(string_dialog, query);
		}
	}
	cache_delete(result);

	strcat(string_dialog, "\n\n{FAAC58}Бизнесы:{FFFFFF}");

	format(query, sizeof query, "SELECT * FROM business WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				name_e[30];

			cache_get_field_content(idx, "name", name_e);

			format(query, sizeof query, "\n%s [№%d]", name_e, id);
			strcat(string_dialog, query);
		}
	}
	cache_delete(result);

	strcat(string_dialog, "\n\n{FAAC58}Гаражи:{FFFFFF}");

	format(query, sizeof query, "SELECT * FROM garage WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id");

			format(query, sizeof query, "\nГараж [№%d]", id);
			strcat(string_dialog, query);
		}
	}
	cache_delete(result);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, string_dialog, "Закрыть", "");

	return 1;
}

CMD:money(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /money [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[90];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден"), cache_delete(result);

	new player_cash = cache_get_field_content_int(0, "money"),
		player_bank = cache_get_field_content_int(0, "bank"),
		player_wage = cache_get_field_content_int(0, "wage"),
		player_business = cache_get_field_content_int(0, "business"),
		player_fuel_st = cache_get_field_content_int(0, "fuel_st"),
		bank_accounts_money,
		fmt_text[310];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM bank_accounts WHERE uid='%d'", user_id);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
			bank_accounts_money += cache_get_field_content_int(i, "balance");
	}

	cache_delete(result);

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Наличные деньги:\t\t\t%s руб\n\
		Осн.банковский счёт:\t\t\t%s руб\n\
		Временный З/П счёт:\t\t\t%s руб\n\n\
		На всех доп. банк. счетах:\t\t%s руб\n\n\
		",
		formatInt(player_cash), formatInt(player_bank), formatInt(player_wage), formatInt(bank_accounts_money)
	);

	if(player_business != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM business WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету бизнеса:\t\t\t%d руб\n", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет бизнеса\n");

	if(player_fuel_st != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM fuel_stations WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету АЗС:\t\t\t\t%d руб", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет АЗС");

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");


	return 1;
}

CMD:getlog(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getlog [имя игрока] [идентификатор лога] [кол-во дней]");
		SendClientMessage(playerid, 0xCECECEFF, "Идентификаторы:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Блокировки чата/Снятие блокировок чата");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Ответы на репорты");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Деморганы/Снятие деморганов");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Кики");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Предупреждения/Снятие предупреждений");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Блокировки/Снятие блокировок");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Поставновление и снятие админки/ютуберки");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Поставновление и снятие лидерки");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Общий чат /msg");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Действия главной администрации");

		return 1;
	}

	extract params -> new string:name[21], log_id, time_limit;

	if(!(LOG_TYPE_ADMIN_MUTE <= log_id <= LOG_TYPE_SUPERADMIN_ACTION))
		return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор");

	if(!(0 <= time_limit <= 30))
		return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 30. Используйте 0 для отображения всех действий");

	if(!(3 <= strlen(name) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	new query[144];
	new Cache: result,
		rows,
		user_id,
		admin;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();

	if(rows)
	{
		user_id = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(rows && user_id)
	{
		if(IsPlayerAdminLevel(playerid) >= admin)
		{
			mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d AND type=%d", user_id, log_id);

			new fmt_text[35];

			if(time_limit)
			{
				format(fmt_text, sizeof fmt_text, " AND time >= %d", gettime() - (time_limit * 86400));
				strcat(query, fmt_text);
			}

			result = mysql_query(mysql, query, true);

			rows = cache_num_rows();

			if(rows)
			{
				new log_name[10][41] =
				{
					"Блокировки/Снятие блокировок чата",
					"Ответы на репорты",
					"Деморганы/Снятие деморганов",
					"Кики",
					"Предупреждения/Снятие предупреждений",
					"Блокировки/Снятие блокировок",
					"Поставновление и снятие админки/ютуберки",
					"Поставновление и снятие лидерки",
					"Общий чат /msg",
					"Действия главной администрации"
				};

				format(query, sizeof query, "Найденные записи по параметру %s для игрока %s", log_name[log_id - 1], name);

				if(time_limit)
				{
					format(fmt_text, sizeof fmt_text, " за последние %d дн.", time_limit);
					strcat(query, fmt_text);
				}

				SendClientMessage(playerid, 0x66CC33FF, query);

				for(new idx; idx < rows; idx ++)
				{
					new desc[144],
						time[6],
						uip[17];

					cache_get_field_content(idx, "description", desc);
					cache_get_field_content(idx, "uip", uip);

					timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);

					format
					(
						query, sizeof query,
						"#%d | %02d.%02d.%d в %02d:%02d:%02d | %s | %s",
						cache_get_field_content_int(idx, "id"),
						time[0], time[1], time[2], time[3], time[4], time[5],
						uip, desc
					);

					SendClientMessage(playerid, 0xFFCD00FF, query);
				}

				format(query, sizeof query, "Общее количество записей: %d", rows);
				SendClientMessage(playerid, 0x66CC33FF, query);
			}
			else SendClientMessage(playerid, 0x999999FF, "Записи в базе данных по данным параметрам не найдены");

			cache_delete(result);
		}
		else SendClientMessage(playerid, 0x999999FF, "Вы не можете просматривать логи администратора выше Вас рангом");
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	return 1;
}

CMD:lip(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lip [IP адрес]");

	new query[130],
		fmt_text[2300],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT name, reg_ip FROM accounts_canvasdev WHERE reg_ip = '%e' OR last_ip = '%e'", params, params);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		new l_acc_count;

		format(fmt_text, sizeof fmt_text, "IP: %s\n", params);

		for(new idx; idx < rows; idx ++)
		{
			new name[21],
				ip[17];

			cache_get_row(idx, 0, name);
			cache_get_row(idx, 1, ip);

			new bool: is_reg = false;

			if(!strcmp(ip, params, true))
				is_reg = true;

			else
				l_acc_count ++;

			format
			(
				query, sizeof query,
				"\n{FFFFFF}%d. %s - %s %s",
				idx + 1,
				name,
				is_reg ? "Reg" : "Last",
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}[online]" : "{888888}[offline]"
			);

			strcat(fmt_text, query);
		}

		format(query, sizeof query, "{FF9900}Найдено аккаунтов: %d / %d", l_acc_count, rows);

		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, query, fmt_text, "Закрыть", "");
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный IP адрес не найден в базе данных");

	cache_delete(result);

	return 1;
}

CMD:kick(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kick [id игрока] [причина (необязательно)]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new reason[31];
	sscanf(params, "{d}s[30]", reason);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s кикнул игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	
	AddPlayerData(playerid, P_ADMKICK, +, 1);
	UpdatePlayerDatabaseInt(playerid, "admkick", GetPlayerData(playerid, P_ADMKICK));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Кикнул %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_KICK, fmt_msg);

	Kick(to_player);

	return 1;
}
CMD:window(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

    extract params -> new type; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /window [тип] < Типы: 1 - водительское | 2 - пассажирское (спереди) | 3 - заднее (левое) | 4 - заднее (правое) >");

    new vehicleid = GetPlayerVehicleID(playerid),
        driver,
        passenger,
        backleft,
        backright;

    GetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);

    switch(type)
    {
        case 1: driver = !driver ? (1) : (0);
        case 2: passenger = !passenger ? (1) : (0);
        case 3: backleft = !backleft ? (1) : (0);
        case 4: backright = !backright ? (1) : (0);
    }

    SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);

    return 1;
}

CMD:skick(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
		 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skick [id игрока]");

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new fmt_msg[128];

	if(IsPlayerAdminLevel(playerid) < 6)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] кикнул %s[%d] без лишнего шума", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}

	format(fmt_msg, sizeof fmt_msg, "Без шума кикнул %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_KICK, fmt_msg);

	Kick(to_player);
	return 1;
}
CMD:mute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
 
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= mute_time <= 5760)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 5760 минут");
	if(GetPlayerData(to_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);
	
	AddPlayerData(playerid, P_ADMMUTE, +, 1);
	UpdatePlayerDatabaseInt(playerid, "admmute", GetPlayerData(playerid, P_ADMMUTE));

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_MUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "mute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[%d] блокировку чата на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);
	return 1;
}
CMD:unmute(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 2) return 1;
  			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
     

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял затычку с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_MUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "mute", 0);

	SendClientMessage(to_player, 0x66CC00FF, "Доступ в чат восстановлен");

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку чата у %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);
	return 1;
}
CMD:jaillist(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	new query[115],
		Cache: result,
		rows,
		name[21],
		jail,
		list[sizeof query * 25 + 60] = "   Ник - Время - Причина\n";


	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE jail > 0 ORDER BY jail DESC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		jail = cache_get_field_content_int(i, "jail");

		cache_get_field_content(i, "name", name);

		format
		(
			query, sizeof query,
			"\n%s - %d мин.",
			name,
			jail / 60
		);

		strcat(list, query);
	}

	cache_delete(result);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Игроки в деморгане", list, "Закрыть", "");

	return 1;
}

CMD:jail(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /jail [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, jail_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_JAIL) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s посадил в Тюрьму игрока %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), jail_time);
	
	AddPlayerData(playerid, P_ADMDM, +, 1);
	UpdatePlayerDatabaseInt(playerid, "admdemorgan", GetPlayerData(playerid, P_ADMDM));

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	JailPlayer(to_player, jail_time);

	format(fmt_msg, sizeof fmt_msg, "Посадил в Тюрьму %s[%d] на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), jail_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_JAIL, fmt_msg);

	return 1;
}

CMD:unjail(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unjail [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_JAIL) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выпустил из тюрьмы игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SendClientMessage(to_player, 0x66CC00FF, "Вы были выпущены на свободу");

	UnjailPlayer(to_player);

	format(fmt_msg, sizeof fmt_msg, "Выпустил из тюрьмы %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_JAIL, fmt_msg);

	return 1;
}

CMD:ban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ban [id игрока] [срок в дняй] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string:reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new max_days = IsPlayerAdminLevel(playerid) > 4 ? 365 : 30;

	new fmt_msg[128];

	if(!(1 <= ban_time <= max_days))
	{
		format(fmt_msg, sizeof fmt_msg, "Срок бана может быть от 1 до %d дней", max_days);

		return SendClientMessage(playerid, 0xCECECEFF, fmt_msg);
	}

	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить администратора выше по рангу");
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить самого себя");

	format(fmt_msg, sizeof fmt_msg, "Администратор %s забанил игрока %s на %d дней", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), ban_time);
	
	AddPlayerData(playerid, P_ADMBAN, +, 1);

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	if(!strlen(reason)) reason = "None";

	format(fmt_msg, sizeof fmt_msg, "Забанил %s[%d] на %d дней. Причина %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), reason);

	SendLog(playerid, LOG_TYPE_ADMIN_BAN, fmt_msg);
	SetPlayerData(to_player, P_ADMIN, 0);
	SetPlayerData(to_player, P_MIND, 0);

	UpdatePlayerDatabaseInt(to_player, "admin", 0);
	UpdatePlayerDatabaseInt(to_player, "mind", 0);
	UpdatePlayerDatabaseInt(to_player, "full", 0);
	UpdatePlayerDatabaseInt(to_player, "givefull", 0);

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	//BanEx(to_player, reason);
	Kick(to_player);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unbanip [ip]");

	extract params -> new string:ip[16];

	new query[140];
	format(query, sizeof query, "DELETE FROM banip_list WHERE ip='%s'", ip);
	mysql_query(mysql, query, false);

    format(query, sizeof query, "[A] Администратор %s[%d] разблокировал IP адрес %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageToAdmins(query, 0x3399FFFF);

	return 1;
}

CMD:banip(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6) return 1;
    	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /banip [ip] [причина (необязательно)]");

	extract params -> new string:ip[16], string:reason[32];

	new query[148];
	mysql_format(mysql, query, sizeof query, "INSERT INTO banip_list (time,ip,description,admin) VALUES (NOW(),'%e','%e','%e')", ip, reason, GetPlayerNameEx(playerid));
	mysql_query(mysql, query, false);

	if(strlen(reason) > 0)
		format(query, sizeof query, "Причина: %s", reason);

    format(query, sizeof query, "[A] Администратор %s[%d] заблокировал IP адрес %s навсегда %s", GetPlayerNameEx(playerid), playerid, ip, query);
	SendMessageToAdmins(query, 0x3399FFFF);


	return true;
}

CMD:unban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new string: player_name[21];

	if(!strlen(player_name)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unban [ник игрока]");

	new query[80],
		Cache: result,
		rows,
		uid,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, last_ip FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		cache_get_row(0, 1, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока не заблокирован");

	mysql_format(mysql, query, sizeof query, "DELETE FROM ban_list WHERE user_id=%d", uid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "[A] Администратор %s разбанил игрока %s", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0x999999FF);

	format(query, sizeof query, "Разбанил %s[%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_ADMIN_BAN, query);

	return 1;
}

CMD:offban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offban [ник игрока] [кол-во дней] [причина (необязательно)]");

	extract params -> new string: player_name[21], days, string: reason[30];

	if(!(-1 <= days <= 365)) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 365");
	if(days == 0) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 365");
	if(days == -1 && IsPlayerAdminLevel(playerid) < 5) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 1 до 365");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(IsPlayerAdminLevel(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока уже заблокирован");

	if(days != -1)
	{
		format(query, sizeof query, "Администратор %s забанил оффлайн игрока %s на %d дней", GetPlayerNameEx(playerid), player_name, days);

		if(strlen(reason) > 0)
			format(query, sizeof query, "%s. Причина: %s", query, reason);

		if(!strlen(reason)) reason = "None";

		SendClientMessageToAll(0xFF99AADD, query);

		format(query, sizeof query, "Оффлайн забанил %s[%d] на %d дней. Причина: %s", player_name, uid, days, reason);
		SendLog(playerid, LOG_TYPE_ADMIN_BAN, query);

		format(reason, sizeof reason, "[OFFLINE]%s", reason);

		AddBan(uid, gettime(), days, uip, reason, GetPlayerNameEx(playerid));
	}
	if(days == -1)
	{
	    format(query, sizeof query, "Администратор %s забанил оффлайн навсегда игрока %s", GetPlayerNameEx(playerid), player_name);

		if(strlen(reason) > 0)
			format(query, sizeof query, "%s. Причина: %s", query, reason);

		if(!strlen(reason)) reason = "None";

		SendClientMessageToAll(0xFF0000AA, query);

		format(query, sizeof query, "Оффлайн забанил %s[%d] навсегда. Причина: %s", player_name, uid, reason);
		SendLog(playerid, LOG_TYPE_ADMIN_BAN, query);

		format(reason, sizeof reason, "%s", reason);

		AddBan(uid, gettime(), 999, uip, reason, GetPlayerNameEx(playerid));
	}

	return 1;
}

CMD:offwarn(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offwarn [ник игрока] [причина (необязательно)]");

	extract params -> new string: player_name[21], string: reason[30];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16],
		warn,
		warn_time;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip, warn, warn_time FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
		warn = cache_get_row_int(0, 3);
		warn_time = cache_get_row_int(0, 4);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(IsPlayerAdminLevel(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя дать варн администратору выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока находится в бане.");
	warn++;
	format(query, sizeof query, "Администратор %s оффлайн выдал предупреждение игроку %s [%d|3] ", GetPlayerNameEx(playerid), player_name, warn);

	if(strlen(reason) > 0)
	 format(query, sizeof query, "%s. Причина: %s", query, reason);

	SendClientMessageToAll(0xFF99AADD, query);

	format(query, sizeof query, "Оффлайн заварнил %s[%d]. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_WARN, query);

	if(warn <= 2)
	{
		warn_time = gettime() + (86400 * 10);

		mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET warn=%d,warn_time=%d WHERE id=%d", warn,warn_time,uid);
		mysql_query(mysql, query, false);
	}

	if(warn == 3)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET warn=0,warn_time=0 WHERE id=%d", uid);
		mysql_query(mysql, query, false);
		AddBan(uid, gettime(), 10, uip, "3/3 предупреждений", GetPlayerNameEx(playerid));
	}

	return 1;
}

CMD:offunwarn(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offunwarn [ник игрока]");

	extract params -> new string: player_name[21];


	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		warn;

	mysql_format(mysql, query, sizeof query, "SELECT id, warn FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		warn = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(warn < 1) return SendClientMessage(playerid, 0x999999FF, "У игрока нет предупреждений");
	format(query, sizeof query, "Администратор %s оффлайн снял все предупреждения игроку %s", GetPlayerNameEx(playerid), player_name);

	SendClientMessageToAll(0xFF99AADD, query);

	format(query, sizeof query, "Оффлайн снял все варны %s[%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_ADMIN_WARN, query);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET warn=0,warn_time=0 WHERE id=%d",uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:offjail(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offjail [ник игрока] [время] [причина (необязательно)]");

	extract params -> new string: player_name[30], jail_time, string: reason[30];

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 60 минут");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		jail;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, jail FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		jail = cache_get_row_int(0, 2);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(IsPlayerAdminLevel(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя посадить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(jail > 0) return SendClientMessage(playerid, 0x999999FF, "Игрок уже в тюрьме");
	format(query, sizeof query, "Администратор %s оффлайн посадил игрока %s на %d минут", GetPlayerNameEx(playerid), player_name, jail_time);

	if(strlen(reason) > 0)
	 format(query, sizeof query, "%s. Причина: %s", query, reason);

	SendClientMessageToAll(0xFF99AADD, query);

	format(query, sizeof query, "Оффлайн посадил %s[%d]. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_JAIL, query);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET jail=%d WHERE id=%d", jail_time * 60, uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:offunjail(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offunjail [ник игрока]");

	extract params -> new string: player_name[21], to_player;


	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		jail;

	mysql_format(mysql, query, sizeof query, "SELECT id, jail FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		jail = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);


	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт не найден");
	if(jail < 1) return SendClientMessage(playerid, 0x999999FF, "Игрок не в тюрьме!");
	format(query, sizeof query, "[A] Администратор %s выпустил из тюрьмы игрока %s", GetPlayerNameEx(playerid), player_name);

	SendMessageToAdmins(query, 0x999999FF);

	format(query, sizeof query, "Оффлайн выпустил %s[%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_ADMIN_JAIL, query);


	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET jail=0 WHERE id=%d", uid);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:soffban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /soffban [ник игрока][причина (необязательно)]");

	extract params -> new string: player_name[21], string: reason[30];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	if(IsPlayerAdminLevel(playerid) < admin) return SendClientMessage(playerid, 0x999999FF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0x999999FF, "Аккаунт игрока уже заблокирован");
 	format(query, sizeof query, "[A] Администратор %s забанил оффлайн навсегда игрока %s", GetPlayerNameEx(playerid), player_name);

	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);

	if(!strlen(reason)) reason = "None";

	SendMessageToAdmins(query, 0x6b6b6bFF);

	format(query, sizeof query, "Оффлайн забанил %s[%d] навсегда. Причина: %s", player_name, uid, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_BAN, query);
	format(reason, sizeof reason, "%s", reason);
	AddBan(uid, gettime(), 999, uip, reason, GetPlayerNameEx(playerid));
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new string:name[21], string:reason[30]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delacc [имя игрока] [причина]");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	new query[128],
		Cache: result,
		admin,
		rows;
	mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query, true);


	rows = cache_num_rows();

	if(rows)
	{
		admin = cache_get_row_int(0, 0);

		if(admin && IsPlayerAdminLevel(playerid) < 5)
		{
			SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить аккаунт администратора выше Вас рангом");

			cache_delete(result);

			format(query, sizeof query, "Попытался удалить аккаунт %s", name);
			SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

			return 1;
		}
		mysql_format(mysql, query, sizeof query, "DELETE FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
		mysql_query(mysql, query, false);

		format(query, sizeof query, "Администратор %s удалил аккаунт игрока %s", GetPlayerNameEx(playerid), name);

		if(strlen(reason) > 0)
		{
			new fmt_text[45];

			format(fmt_text, sizeof fmt_text, ". Причина: %s", reason);
			strcat(query, fmt_text);
		}

		SendClientMessageToAll(0xFF99AADD, query);

		format(query, sizeof query, "Удалил аккаунт %s. Причина: %s", name, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");
	cache_delete(result);
	return 1;
}

cmd:setskin(playerid, params[]) callcmd::giveskin(playerid, params);
CMD:giveskin(playerid, params[])
{
	if(GetPlayerData(playerid, P_CMD_giveskin) == 0)
	{
		if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

		if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");
	}
	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /giveskin [id игрока] [скин]");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetInventorySlots(to_player) == -1) return GameText(playerid, "У игрока в инвентаре нет свободного места", 3000, 0);

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s выдал вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "Постоянный" : "Личный");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "Постоянный" : "Личный");
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Выдал %s[%d] постоянный скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendClientMessage(playerid, -1, fmt_text);

	GiveSkin(to_player, skin_id);
	return 1;
}
CMD:skin(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) > 0)
	{
		if(IsPlayerAdminLevel(playerid) < 3) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	}
	else if(GetPlayerYAdminEx(playerid) < 2) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Администратор %s выдал Вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(playerid, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		if(skin_id != -1)
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] временный скин №%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		else
			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] прежний скин", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:house(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /house [номер дома]");

	if(!(0 <= house_id <= g_house_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	new Float: x,
		Float: y,
		Float: z,
		Float: angle;

	if(GetHouseData(house_id, H_ENTRACE) == -1)
	{
		x = GetHouseData(house_id, H_EXIT_POS_X);
		y = GetHouseData(house_id, H_EXIT_POS_Y);
		z = GetHouseData(house_id, H_EXIT_POS_Z);
		angle = GetHouseData(house_id, H_EXIT_ANGLE);
	}
	SetPlayerPosEx(playerid, x, y, z, angle);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к дому №%d", house_id);
	SendClientMessage(playerid, -1, fmt_text);
	return 1;
}

CMD:biz(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");
	 
	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /biz [номер бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE)
	);

	new fmt_text[48];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к бизнесу №%d", biz_id);
	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:inter(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player, interior; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /inter [id игрока] [интерьер]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerInterior(to_player, interior);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] интерьер %d", GetPlayerNameEx(to_player), to_player, interior);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам интерьер %d", GetPlayerNameEx(playerid), playerid, interior);
	SendClientMessage(to_player, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] интерьер №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, interior);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:world(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	extract params -> new to_player, world; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /world [id игрока] [вирт.мир]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerVirtualWorld(to_player, world);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] вирт.мир %d", GetPlayerNameEx(to_player), to_player, world);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам вирт.мир %d", GetPlayerNameEx(playerid), playerid, world);
	SendClientMessage(to_player, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] установил %s[%d] вирт.мир №%d", GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, world);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:warn(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	AddPlayerData(to_player, P_WARN, +, 1);
	SetPlayerData(to_player, P_WARN_TIME, gettime() + (86400 * 10));

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s выдал предупреждение игроку %s [%d|3]", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_WARN));

	if(strlen(reason) > 0)
	format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);
	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	InvitePlayer(to_player, 0, 0, true);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_WARN);
	new warns_time = GetPlayerData(to_player, P_WARN_TIME);

	format(fmt_msg, sizeof fmt_msg, "Выдал варн %s[%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_WARN, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Аккаунт заблокирован на 10 дней");

		warns =
		warns_time = 0;

		AddBan(uid, gettime(), 10, GetPlayerIpEx(to_player), "получено 3 варна", GetPlayerNameEx(playerid));
		BanEx(to_player, "получено 3 варна");
	}
	else Kick:(to_player);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET warn=%d,warn_time=%d WHERE id=%d", warns, warns_time, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:unwarn(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unwarn [id игрока] [причина (необязательно)]");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerData(to_player, P_WARN, 		0);
	SetPlayerData(to_player, P_WARN_TIME, 	0);

	UpdatePlayerDatabaseInt(to_player, "warn", 		0);
	UpdatePlayerDatabaseInt(to_player, "warn_time", 	0);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял все предупреждения с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Снял все варны %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_WARN, fmt_msg);

	return 1;
}

CMD:spawn(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spawn [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerYAdminEx(playerid) >= 2) if(to_player != playerid) return SendClientMessage(playerid, 0xCECECEFF, "Только себе!");

	SpawnPlayer(to_player);
	SetPlayerSpawnPos(to_player);

	new fmt_text[300];

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}
	if(GetPlayerYAdminEx(playerid) >= 2)
	{
		format(fmt_text, sizeof fmt_text, "[Y] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}
	return 1;
}

CMD:spcar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	 

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spcar [id авто]");

	if(IsPlayerInAnyVehicle(playerid) && vehicleid == 0) vehicleid = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(GetVehicleData(vehicleid, V_OWRENT) != 0)
 	{
  		SetVehicleData(vehicleid, V_OWRENT, 0);
    }

	SetVehicleToRespawn(vehicleid);

	new fmt_msg[100];

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] зареспавнил авто [№%d]", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}


	return 1;
}
CMD:tp(playerid)
{
	if(number_mp_player < 1 || mp_status == 2) return SendClientMessage(playerid, 0x808080FF, "В данный момент точки телепорта нету");
    if(GetPlayerData(playerid, P_JAIL) > 0) return SendClientMessage(playerid, 0xFFFFFFAA, "Заключённым нельзя телепортироваться");
	SendClientMessage(playerid, 0x99CC00FF, "[МП] Вы были телепортированы");
	SetPlayerPos(playerid, mpPos[0], mpPos[1], mpPos[2]);
    SetPlayerInterior(playerid, mpWorld[0]);
	SetPlayerVirtualWorld(playerid, mpWorld[1]);
	number_mp_player--;
	SetPVarInt(playerid, "statusMP", 1);
	return 1;
}

CMD:mp_tp(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_number, tp_status; else return SendClientMessage(playerid, 0x808080FF, "Используйте: /mp_tp [количество участников] [1 (открыть) / 2 (закрыть)]");
	if(!(1 <= to_number <= 500)) return SendClientMessage(playerid, 0x808080FF, "Вы указали не правильное кол-во участников [Min - 1] [Max - 500]");
	if(!(1 <= tp_status <= 2)) return SendClientMessage(playerid, 0x808080FF, "Укажите 1 - для открытия телепорта | 2 - закрытие");
	if(mp_status == tp_status) return SendClientMessage(playerid, 0x808080FF, "Телепорт на мероприятие уже открыт!");
	new stringMP[150];
	switch(tp_status)
	{
		case 1:
		{
			SendClientMessage(playerid, 0x3399FFFF, "Точка телепорта установлена");
            format(stringMP, sizeof(stringMP), "{FFFFFF}Максимальное Кол-во игроков %d", to_number);
			number_mp_player = to_number;
			mp_status = 1;
			GetPlayerPos(playerid, mpPos[0], mpPos[1], mpPos[2]);
			mpWorld[0] = GetPlayerInterior(playerid);
			mpWorld[1] = GetPlayerVirtualWorld(playerid);
		}
		case 2:
		{
			format(stringMP, sizeof(stringMP), "{FF4500}Точка телепорта удалена");
			for(new i = 0; i < 3; i++) mpPos[i] = 0;
			for(new i = 0; i < 2; i++) mpWorld[i] = 0;
			number_mp_player = 0;
			mp_status = 2;
			foreach(new i: Player) DeletePVar(i, "statusMP");
		}
		default: Kick(playerid);
	}

	SendClientMessage(playerid, -1, stringMP);
	return 1;
}

alias:goto("g");
CMD:goto(playerid, params[])
{
 	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /goto [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
	{
		SendClientMessage(playerid, 0x66CC33FF, "Вы пытаетесь телепортироваться к администратору Выше рангом, он должен подтвердить Ваше действие");
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GOTO);
	}
	else
	{
		new Float: x, Float: y, Float: z, interior, virtual_world;
		GetPlayerPos(to_player, x, y, z);
		interior = GetPlayerInterior(to_player);
		virtual_world = GetPlayerVirtualWorld(to_player);

		SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world, false);

		SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
		SetPlayerInBiz(playerid, GetPlayerInBiz(to_player));

		SendClientMessage(playerid, -1, "Вы были телепортированы");

		new fmt_msg[105];

		if(IsPlayerAdminLevel(playerid) <= 5)
		{
			format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировался к %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0x999999FF);
		}
		else if(GetPlayerYAdminEx(playerid) >= 1)
		{
			format(fmt_msg, sizeof fmt_msg, "[Y] Ютубер %s[%d] телепортировался к %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0x999999FF);
		}
	}
	return 1;
}

CMD:dellmap(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new name[30];
	if(sscanf(params, "s[30]", name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dellmap [название объекта]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dellmap [название объекта] (1 - 30)");

	if(GetString(name, "None"))
		return 0;

	new
		obj_id = -1;
	for(new i; i < TOTALOBJECTS; i++)
	{
		if(GetString(ObjInfo[i][objName], name))
		{
			obj_id = i;
			break;
		}
	}

	if(obj_id == -1)
		return SendClientMessage(playerid, COLOR_GREY, "Объект под данным именем не найден");

	static const
		fmt_str[] = "Вы успешно удалили объект под именем \"%s\"",
		mysql_str[] = "DELETE FROM `create_objects` WHERE `Name` = '%s'";
	new str[sizeof(mysql_str) + (-4 + 52)];

	format(str, sizeof(str), fmt_str, name);
	SendClientMessage(playerid, 0xCECECEFF, str);

	format(str, sizeof(str), mysql_str, name);
	mysql_query(mysql, str, false);

	DestroyDynamicObject(ObjInfo[obj_id][objID]);
	SetString(ObjInfo[obj_id][objName], "None");
	return 1;
}

CMD:map(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	new model,
	    name[30];
	if(sscanf(params, "is[30]", model, name))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название]");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /map [ID объекта] [название] (1 - 30)");
    //SendClientMessage(playerid, COLOR_GREY, "0");
	if(GetString(name, "None"))
		return 0;
  	//SendClientMessage(playerid, COLOR_GREY, "1");
	if(TOTALOBJECTS + 1 > MAX_CREATE_OBJECTS)
		return SendClientMessage(playerid, COLOR_GREY, "Превышен лимит созданных объектов");
 	//SendClientMessage(playerid, COLOR_GREY, "2");

	static const mysql_str[] = "SELECT * FROM `create_objects` WHERE `Name` = '%s'";
	new str[sizeof(mysql_str) + (-2 + 30)];
 	//SendClientMessage(playerid, COLOR_GREY, "3");

	format(str, sizeof(str), mysql_str, name);
	mysql_query(mysql, str);
 	//SendClientMessage(playerid, COLOR_GREY, "4");
	if(cache_num_rows())
		return SendClientMessage(playerid, COLOR_GREY, "Данное название объекта уже используется!");
  	//SendClientMessage(playerid, COLOR_GREY, "5");
	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	
	EditObjectPlayer[playerid] = CreateDynamicObject(model, x+2, y+2, z, 0, 0, 0);
	EditDynamicObject(playerid, EditObjectPlayer[playerid]);

	SetString(ObjectNamePlayer[playerid], name);
	SetPVarInt(playerid, "obj_edit", 1);
	SetPVarInt(playerid, "obj_model", model);

	return 1;
}
CMD:getcar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	  
	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getcar [id транспорта]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);

	SendClientMessage(playerid, -1, "Вы телепортировали авто к себе");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] телепортировал к себе транспорт: №%d", GetPlayerNameEx(playerid), playerid, vehicleid);
	SendMessageToAdmins(fmt_msg, COLOR_GREY);

	return 1;
}
CMD:getp(playerid, params[]) return callcmd::gethere(playerid, params);
CMD:getplayer(playerid, params[]) return callcmd::gethere(playerid, params);
CMD:gethere(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3 && GetPlayerYAdminEx(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
	{
		SendClientMessage(playerid, 0x66CC33FF, "Вы пытаетесь телепортировать к себе администратора Выше рангом, он должен подтвердить Ваше действие");
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GETHERE);
	}
	else
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

		SetPlayerInHouse(to_player, GetPlayerInHouse(playerid));
		SetPlayerInBiz(to_player, GetPlayerInBiz(playerid));

		new fmt_msg[105];
		format(fmt_msg, sizeof fmt_msg, "Администратор %s телепортивал Вас к себе", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, -1, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "Вы телепортивали %s к себе", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, -1, fmt_msg);

		if(IsPlayerAdminLevel(playerid) <= 5)
		{
			format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0x999999FF);
		}
	}

	return 1;
}

CMD:setfuel(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	extract params -> new vehicleid, fuel; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuel [id транспорта] [кол-во топлива]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(!(0 <= fuel <= 100)) return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 100");

	SetVehicleData(vehicleid, V_FUEL, fuel);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в ТС №%d", fuel, vehicleid);
	SendClientMessage(playerid, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) >= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в ТС №%d", GetPlayerNameEx(playerid), playerid, fuel, vehicleid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:getv(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getv [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(to_player != playerid) return SCM(playerid, 0xCECECEFF, "Только себе!");

	page_cars[playerid] = 1;
	type_page_cars[playerid] = 4;
	SetPVarInt(playerid, "to_player", to_player);
	ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);

	return 1;
}

CMD:fixcar(playerid, params[])
{
	if(GetPlayerData(playerid, P_CMD_fixcar) == 0 && IsPlayerAdminLevel(playerid) < 1 && GetPlayerYAdminEx(playerid) < 1)
	{
    	if(IsPlayerAdminLevel(playerid) < 1 && GetPlayerYAdminEx(playerid) < 1) return SCM(playerid, COLOR_GREY, "Используйте рем.комплект в инвентаре");

		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в транспорте");

		new vehicleid = GetPlayerVehicleID(playerid);

		RepairVehicle(vehicleid);

		if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

		new fmt_text[93];
		format(fmt_text, sizeof fmt_text, "%s[%d] починил транспорт через /fixcar (vehicle №%d)", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
		return 1;
	}
	else
	{
		extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fixcar [id игрока]");

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

		if(!IsPlayerInAnyVehicle(to_player))
			return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться в транспорте");

		new fmt_text[93],
			vehicleid = GetPlayerVehicleID(to_player);

		RepairVehicle(vehicleid);
		if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

		format(fmt_text, sizeof fmt_text, "Вы починили транспорт: №%d", vehicleid);
		SendClientMessage(playerid, -1, fmt_text);

		format(fmt_text, sizeof fmt_text, "Администратор %s починил Ваш транспорт", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, -1, fmt_text);

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
		return 1;
	}
}

CMD:st(playerid, params[]) return callcmd::settime(playerid, params);
CMD:settime(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new time; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settime [время (0-23)]");

	if(!(0 <= time <= 23)) return SendClientMessage(playerid, 0x999999FF, "Время от 0 до 23 часов");

	SetWorldTime(time);

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы установили время %02d:00", time);
	SendClientMessage(playerid, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил время на сервере на %02d:00", GetPlayerNameEx(playerid), playerid, time);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
	return 1;
}
CMD:sw(playerid, params[]) return callcmd::setweather(playerid, params);
CMD:setweather(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new weather; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setweather [погода (0-20)]");

	if(!(-1 <= weather <= 20))
	{
		SendClientMessage(playerid, 0x999999FF, "Погода от 0 до 20 (-1 - случайная смена погоды)");
		SendClientMessage(playerid, 0x999999FF, "Рекомендовано: 1, 3, 8, 9, 18");

		return 1;
	}

	if(weather != -1)
		SetWeather(weather);
	else
		SetRandomWeather();

	new fmt_text[70];

	if(weather != -1)
		format(fmt_text, sizeof fmt_text, "Вы установили погоду %d", weather);
	else
		format(fmt_text, sizeof fmt_text, "Вы установили случайную погоду");

	SendClientMessage(playerid, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		if(weather != -1)
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил погоду на сервере на %d", GetPlayerNameEx(playerid), playerid, weather);
		else
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил случайную погоду на сервере", GetPlayerNameEx(playerid), playerid);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:payday(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	OnPayDay();

	new fmt_text[50];
	SendClientMessage(playerid, -1, "Вы включили PayDay");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал PayDay", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:gzcolor(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new gang_id; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /gzcolor [id банды] (0-Свободная зона, 1-- Тамбовская ОПГ, 2-- Ростовская ОПГ)");

	if(!(0 <= gang_id <= 3))
		return SendClientMessage(playerid, COLOR_WHITE, "Банды: 0 - Свободная зона, 1 - - Тамбовская, 2 - - Ростовская ОПГ");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться на нужной территории");

	SetGangZoneData(gang_zone_id, GZ_GANG, gang_id);
	SaveGangZone(gang_zone_id);

	GangZoneShowForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы изменили банду, владеющую данной территорией");

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] изменил банду у территории №%d на %d", GetPlayerNameEx(playerid), playerid, gang_zone_id, gang_id);
	SendMessageToAdmins(fmt_text, COLOR_GREY);


	return 1;
}

CMD:sellproperty(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	SellDebtorsProperty();

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы инициировали продажу имущества должников");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу имущества должников", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:sellhotels(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	SellDebtorsHotels();

	new fmt_text[90];

	SendClientMessage(playerid, -1, "Вы инициировали продажу номеров с задолженностью в отеле");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал продажу номеров с задолженностью в отеле", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0x999999FF);


	return 1;
}

CMD:setprods(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new biz_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setprods [id бизнеса] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	if(!(0 <= biz_id <= g_business_loaded - 1))
		return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов в бизнесе №%d", amount, biz_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов в бизнесе №%d", GetPlayerNameEx(playerid), playerid, amount, biz_id);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:fullprods(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullprods [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0x999999FF, "Количество продуктов от 0 до 10000");

	for(new biz_id; biz_id < g_business_loaded - 1; biz_id ++)
		SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов во всех бизнесах", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов во всех бизнесах", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:addbiz(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addbiz [тип] [стоимость] [цена аренды]");

	new fmt_text[350];

	if(!(1 <= type <= 37))
	{
	    SendClientMessage(playerid, 0x999999FF,"Типы: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторское Агенство., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино");
		SendClientMessage(playerid, 0x999999FF,"9-Сотовый салон, 11-Магазин оружия,12-Bank,-13 Комп клуб,14-Спортзал");
	    SendClientMessage(playerid, 0x999999FF,"16-Аренда, 17-Новое СТО,18 - ферма, 19 - детейлинг, 20 - бу, 21 - нов бизы, 22- метро, 23 - Шиномонтаж, 24 - Садовод, 25 - Салон Красоты, 26 - Магазин Автозапчастей, 27 - Тир");
   		SendClientMessage(playerid, 0x999999FF,"30 - Прачечная, 31 - Закусочная, 32 - Аптека, 33 - Кондитерская, 36 - Магазин рыболова, 37 - Пес");
		return 1;
	}
	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость бизнеса не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_business_loaded;

	GetPlayerPos(playerid, g_business[idx][B_POS_X], g_business[idx][B_POS_Y], g_business[idx][B_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
	buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

	SetBusinessData(idx, B_CITY,			buffer[0]);
	SetBusinessData(idx, B_ZONE,			buffer[1]);

	SetBusinessData(idx, B_PRICE,			price);
	SetBusinessData(idx, B_RENT_PRICE,		rent_price);
	SetBusinessData(idx, B_TYPE,			type);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO business \
		(city, zone, type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetBusinessData(idx, B_CITY),
		GetBusinessData(idx, B_ZONE),
		type, price, rent_price,
		GetBusinessData(idx, B_POS_X),
		GetBusinessData(idx, B_POS_Y),
		GetBusinessData(idx, B_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetBusinessData(idx, B_SQL_ID, cache_insert_id());

	cache_delete(result);

	g_business_loaded ++;

	CreatePickup(19132, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

	UpdateBusinessLabel(idx);

	STRING_GLOBAL = "";
    format(STRING_GLOBAL, 500, "[A] %s [%d] создал бизнес №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));
	//format(STRING_GLOBAL, 144, "Вы создали бизнес №%d (City / [Zone])", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));
	SendMessageToAdmins(STRING_GLOBAL, 0x66CC33FF);
	return 1;
}

CMD:b_set_pick(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET z=1000 WHERE id=%d",
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:bsx(playerid, params[]) return callcmd::b_set_exit_pos(playerid, params);
CMD:b_set_exit_pos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_EXIT_POS_X], g_business[biz_id][B_EXIT_POS_Y], g_business[biz_id][B_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_business[biz_id][B_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:b_set_pos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_POS_X], g_business[biz_id][B_POS_Y], g_business[biz_id][B_POS_Z]);
	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET x='%f', y='%f', z='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_POS_X),
		GetBusinessData(biz_id, B_POS_Y),
		GetBusinessData(biz_id, B_POS_Z),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты у бизнеса №%d", biz_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:b_set_name(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /b_set_name [id бизнеса][название]");

	extract params -> new biz_id, string: name[30];

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

    SetBusinessData(biz_id, B_NAME, name);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET name='%s' WHERE id=%d",
		GetBusinessData(biz_id, B_NAME),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);
	format(fmt_text, sizeof fmt_text, "Вы успешно изменили название у бизнеса №%d на %s", biz_id, name);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);
	return 1;
}

CMD:b_set_int(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
	{
        SendClientMessage(playerid, 0xCECECEFF, "Используйте: /b_set_int [id бизнеса][инта]");
        SendClientMessage(playerid, 0xCECECEFF, "Типы бизнесов: 1-24/7, 2-Клуб, 3-Управление стат., 4-Риэлторск., 5-Одежда, 6-Отель, 7-Авторынок, 8-Казино, 9-Сотовый салон 11-Оружейный 12-Bank 13 - Комп клуб 14- Спортзал 15- Детелинг");
	}

	extract params -> new biz_id, inta;

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного бизнеса не существует на сервере");

	new inter = inta - 1;

    SetBusinessData(biz_id, B_INTERIOR, inter);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET interior='%d' WHERE id=%d",
		inter,
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили инту у бизнеса №%d на %d", biz_id, inta);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:addhouse(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addhouse [тип] [стоимость] [Ежедневная плата]");

	new fmt_text[300];

	if(!(0 <= type <= sizeof g_house_type - 1))
	{
		SendClientMessage(playerid, 0x999999FF, "Типы домов:");

		for(new i; i < sizeof g_house_type; i ++)
		{
			format(fmt_text, sizeof fmt_text, "%d. %s", i, GetHouseTypeInfo(i, HT_NAME));

			SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		}

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0x999999FF, "Стоимость ежедневной платы не может быть меньше 1");

	new Cache: result,
		idx = g_house_loaded;

	GetPlayerPos(playerid, g_house[idx][H_POS_X], g_house[idx][H_POS_Y], g_house[idx][H_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
	buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

	SetHouseData(idx, H_CITY,			buffer[0]);
	SetHouseData(idx, H_ZONE,			buffer[1]);

	SetHouseData(idx, H_PRICE,			price);
	SetHouseData(idx, H_RENT_PRICE,		rent_price);
	SetHouseData(idx, H_TYPE,			type);

	SetHouseData(idx, H_ENTRACE,		-1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO houses \
		(city, zone, type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetHouseData(idx, H_CITY),
		GetHouseData(idx, H_ZONE),
		type, price, rent_price,
		GetHouseData(idx, H_POS_X),
		GetHouseData(idx, H_POS_Y),
		GetHouseData(idx, H_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetHouseData(idx, H_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_house_loaded ++;

	UpdateHouse(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] создал дом №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetHouseData(idx, H_CITY)), GetZoneName(GetHouseData(idx, H_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);
	SendClientMessage(playerid, 0x999999FF, "Не забудьте поставить координаты выхода: {66CC33} /setexitpos");

	return 1;
}
CMD:set_pick(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setexitpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_EXIT_POS_X], g_house[house_id][H_EXIT_POS_Y], g_house[house_id][H_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET x=1000 WHERE id=%d",
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);
	SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно поставили выход! Не забудьте поставить координаты Т/C:{99ff00} /setcarpos ");

	return 1;
}

CMD:setposhome(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setposhome [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_POS_X], g_house[house_id][H_POS_Y], g_house[house_id][H_POS_Z]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET x='%f', y='%f', z='%f' WHERE id=%d",
		GetHouseData(house_id, H_POS_X),
		GetHouseData(house_id, H_POS_Y),
		GetHouseData(house_id, H_POS_Z),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты дома №%d", house_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}
CMD:setexitpos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setexitpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_EXIT_POS_X], g_house[house_id][H_EXIT_POS_Y], g_house[house_id][H_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_EXIT_POS_X),
		GetHouseData(house_id, H_EXIT_POS_Y),
		GetHouseData(house_id, H_EXIT_POS_Z),
		GetHouseData(house_id, H_EXIT_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);
	SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно поставили выход! Не забудьте поставить координаты Т/C:{99ff00} /setcarpos ");

	return 1;
}
CMD:sc(playerid, params[]) return callcmd::setcarpos(playerid, params);
CMD:setcarpos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setcarpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0x999999FF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_CAR_POS_X], g_house[house_id][H_CAR_POS_Y], g_house[house_id][H_CAR_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_CAR_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET car_x='%f', car_y='%f', car_z='%f', car_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_CAR_POS_X),
		GetHouseData(house_id, H_CAR_POS_Y),
		GetHouseData(house_id, H_CAR_POS_Z),
		GetHouseData(house_id, H_CAR_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты спавна авто у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:getname(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new user_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getname [номер аккаунта]");

	new name[21],
		fmt_text[120];

	format(name, sizeof name, "%s", GetPlayerNameBySqlID(user_id));

	if(strcmp(name, "none", true))
	{
		format(fmt_text, sizeof fmt_text, "Имя: %s / Номер аккаунта: %d", name, user_id);

		SendClientMessage(playerid, 0x3399FFFF, fmt_text);
	}
	else SendClientMessage(playerid, 0x999999FF, "Данный аккаунт не найден в базе данных");

	return 1;
}

CMD:slap(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 			else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, fmt_text[300];
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z + 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);

	format(fmt_text, sizeof fmt_text, "Вы подбросили игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Администратор %s подбросил Вас", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] подбросил игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:hp(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 2) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hp [id игрока] [количество здоровья]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	else if(IsPlayerAdminLevel(playerid) == 1 && to_player != playerid)
		return SendClientMessage(playerid, 0x999999FF, "Администраторам 1-го уровня доступно изменение только своего уровня здоровья");

	else if(!(0 <= health <= 100)) return SendClientMessage(playerid, 0x999999FF, "Уровень здоровья от 0 до 100");

	SetPlayerData(to_player, P_HEALTH, health);
	SetPlayerHealthEx(to_player, health);

	if(GetPlayerData(to_player, P_HOSPITAL))
		SetPlayerData(to_player, P_HOSPITAL, false);

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень здоровья", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили %s уровень здоровья", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] Администратор %s[%d] изменил уровень здоровья %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	return 1;
}

CMD:freeze(playerid,params[])
{
	if(CheckAdmin(playerid, 4)) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /freeze [id игрока]");

    new fmt_msg[105];
    
	extract params -> new to_player;

	TogglePlayerControllable(to_player,false);
	SendClientMessage(to_player, COLOR_WHITE, "Администратор заморозил Вас");

	format(fmt_msg, sizeof fmt_msg, "Вы заморозили игрока %s[%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x999999FF, fmt_msg);

	return 1;
}

CMD:unfreeze(playerid,params[])
{
	if(CheckAdmin(playerid, 4)) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GREY, "Используйте: /unfreeze [id игрока]");

    new fmt_msg[105];
    
	extract params -> new to_player;

	TogglePlayerControllable(to_player,true);
	SendClientMessage(to_player, COLOR_WHITE, "Администратор разморозил Вас");

	format(fmt_msg, sizeof fmt_msg, "Вы разморозили игрока %s[%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x999999FF, fmt_msg);

	return 1;
}
CMD:plveh(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player, modelid, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /plveh [id игрока] [id модели] [цвет 1] [цвет 2]");
	if(!(400 <= modelid <= 614) && (!(699 <= modelid <= 699) && (!(793 <= modelid <= 799) && (!(15065 <= modelid <= 15299) && (!(15600 <= modelid <= 15699) && (!(907 <= modelid <= 909) && (!(965 <= modelid <= 965) && (!(999 <= modelid <= 999) && (!(1326 <= modelid <= 1326) && (!(17400 <= modelid <= 17409) && (!(17410 <= modelid <= 17427)))))))))))) return SCM(playerid, 0xCECECEFF, "Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 15600-15699, 17400-17409, 17410-17427");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(to_player, x, y, z);
	GetPlayerFacingAngle(to_player, a);

	new vehicleid = CreateVehicle(modelid, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, 1);
	PutPlayerInVehicle(to_player, vehicleid, 0);

	SetVehicleNumber(vehicleid, 5, ""SERVER_NUMBER_CARSH"", "");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] создал транспорт для %s[%d] (%d, %d, %d)", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, modelid, color_1, color_2);
	SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);

	SCMF(to_player, 0x999999FF, "Администратор %s[%d] создал транспорт для вас (%d, %d, %d)", GetPlayerNameEx(playerid), playerid, modelid, color_1, color_2);

	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}

CMD:veh(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4 && GetPlayerYAdminEx(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new modelid, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /veh [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");
	if(!(400 <= modelid <= 614) && (!(699 <= modelid <= 699) && (!(793 <= modelid <= 799) && (!(15065 <= modelid <= 15299) && (!(15600 <= modelid <= 15699) && (!(907 <= modelid <= 909) && (!(965 <= modelid <= 965) && (!(999 <= modelid <= 999) && (!(1326 <= modelid <= 1326) && (!(17400 <= modelid <= 17409) && (!(17410 <= modelid <= 17427)))))))))))) return SCM(playerid, 0xCECECEFF, "Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 15600-15699, 17400-17409, 17410-17427");
	new status;

	sscanf(params, "{d}{d}{d}d", status);

	if(!(0 <= status <= 1))
		return SendClientMessage(playerid, 0x999999FF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(modelid, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);

	PutPlayerInVehicle(playerid, vehicleid, 0);

	SetVehicleNumber(vehicleid, 5, ""SERVER_NUMBER_CARSH"", "");

	new fmt_text[100];

	if(IsPlayerAdminLevel(playerid) <= 4)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
		GetPlayerNameEx(playerid), playerid, modelid, color_1, color_2);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}

CMD:add_rentveh(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(GetPVarInt(playerid,"SpawnCar") > gettime()) return SCM(playerid,COLOR_RED,"\
	 			    	[Ошибка] {FFFFFF}Спавнить авто можно раз в 1 минуту!");
	extract params -> new model_id, color_1, color_2, status, id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add_rentveh [id модели] [цвет 1] [цвет 2] [цена] [id аренды]");

	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	SetTimer("CountRentedVehicles", 1000, 0);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0);

	SetVehicleData(vehicleid, V_RENT, id);
	SetVehicleData(vehicleid, V_RENTP, status);
	SetVehicleData(vehicleid, V_OWRENT, 0);

	new fmt_text[100];

	if(IsPlayerAdminLevel(playerid) <= 4)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт (%d, %d, %d)",
		GetPlayerNameEx(playerid), playerid, model_id, color_1, color_2);

		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SetPVarInt(playerid, "SpawnCar", gettime());
	return 1;
}
CMD:setleader(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setleader [id игрока] [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Правительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Воинская часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Городская больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - ТРК «Ритм»");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Министерство внутренних дел");
		SendClientMessage(playerid, 0xCECECEFF, "6 - ФСИН");
		SendClientMessage(playerid, 0xCECECEFF, "7 - ФСБ");
		return 1;
	}
	extract params -> new to_player, org_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= org_id <= 7)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор организации");

	new fmt_msg[155];

	if(!org_id)
	{
	    format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] снял Вас с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял %s[%d] с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendMessageToAdmins(fmt_msg, 0x999999FF);
		return InvitePlayer(to_player, 0, 0, true);
	}

	if(org_id != 7) InvitePlayer(to_player, org_id, 10, true);
	else InvitePlayer(to_player, org_id, 6, true);

	format(fmt_msg, sizeof fmt_msg, "Администратор %s[%d] назначил Вас лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));

	SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));

	SendMessageToAdmins(fmt_msg, 0x999999FF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Назначил %s[acc:%d] лидером %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetTeamName(org_id), org_id);

	else
		format(fmt_msg, sizeof fmt_msg, "Снял %s[acc:%d] с поста лидера", GetPlayerNameEx(to_player), to_player);

	SendLog(playerid, LOG_TYPE_ADMIN_SETLEADER, fmt_msg);
	return 1;
}

CMD:auninvite(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /auninvite [id игрока]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF,"Такого игрока нет");

	if(GetPlayerTeamEx(playerid) == 0) return SendClientMessage(playerid, 0xFF6600FF, "Данный игрок не состоит в организации");

	new fmt_text[200];

	format(fmt_text,sizeof(fmt_text),"[A] %s [%d] уволил игрока %s [%d] из огранизации '%s'", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetTeamName(GetPlayerTeamEx(to_player)));
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	new fmt_msg[128];

	format(fmt_msg, sizeof(fmt_msg), "Администратор %s [%d] уволил Вас из фракции %s", GetPlayerNameEx(playerid), playerid, GetTeamName(GetPlayerTeamEx(to_player)));
	SendClientMessage(to_player, 0xFF6600FF, fmt_msg);

	format(fmt_msg, sizeof(fmt_msg),"Вы уволили из фракции игрока {"#cGold"}%s [%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, -1, fmt_msg);

	UnInvite(playerid, to_player);
	return 1;
}

CMD:givegun(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, 0x999999FF, "Вы не администратор!");

    if(admin_logged[playerid] == false)
        return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

    new to_player, weapon_id, patrons;
    if(sscanf(params, "iii", to_player, weapon_id, patrons))
        return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givegun [id игрока] [id оружия] [количество патрон]]");

    if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
        return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

    if(weapon_id < 1 || weapon_id > 46 || (weapon_id >= 19 && weapon_id <= 21))
        return SendClientMessage(playerid, 0x999999FF, "ID оружия от 1 до 34");

	if(patrons < 1 || patrons > 500)
        return SendClientMessage(playerid, 0x999999FF, "Можно выдать количество патрон от 1 до 500");

    switch(weapon_id)
    {
        case 22:
        {
            GiveIteam(to_player, 12, 1, 1, 0);
            GiveIteam(to_player, 362, 1, patrons, 0);
        }
        case 24:
        {
            GiveIteam(to_player, 19, 1, 1, 0);
            GiveIteam(to_player, 363, 1, patrons, 0);
        }
        case 25:
        {
            GiveIteam(to_player, 14, 1, 1, 0);
            GiveIteam(to_player, 365, 1, patrons, 0);
        }
        case 26:
        {
            GiveIteam(to_player, 15, 1, 1, 0);
            GiveIteam(to_player, 365, 1, patrons, 0);
        }
        case 27:
        {
            GiveIteam(to_player, 16, 1, 1, 0);
            GiveIteam(to_player, 365, 1, patrons, 0);
        }
        case 28:
        {
            GiveIteam(to_player, 17, 1, 1, 0);
            GiveIteam(to_player, 366, 1, patrons, 0);
        }
        case 29:
        {
            GiveIteam(to_player, 18, 1, 1, 0);
            GiveIteam(to_player, 366, 1, patrons, 0);
        }
        case 30:
        {
            GiveIteam(to_player, 21, 1, 1, 0);
            GiveIteam(to_player, 368, 1, patrons, 0);
        }
        case 31:
        {
            GiveIteam(to_player, 20, 1, 1, 0);
            GiveIteam(to_player, 367, 1, patrons, 0);
        }
        case 33:
        {
            GiveIteam(to_player, 42, 1, 1, 0);
            GiveIteam(to_player, 367, 1, patrons, 0);
        }
        case 34:
        {
            GiveIteam(to_player, 22, 1, 1, 0);
            GiveIteam(to_player, 364, 1, patrons, 0);
        }
        default:
        {
            GiveWeapon(to_player, weapon_id, patrons);
        }
    }

    new fmt_text[128];
    format(fmt_text, sizeof fmt_text, "Администратор %s[%d] выдал Вам %s", 
        GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id));
    SendClientMessage(to_player, -1, fmt_text);

    format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s[%d] %s", 
        GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id));
    SendClientMessage(playerid, -1, fmt_text);

    if(IsPlayerAdminLevel(playerid) <= 5)
    {
        format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %s", 
            GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id));
        SendMessageToAdmins(fmt_text, 0x999999FF);
    }
    
    return 1;
}

CMD:get_contraband(playerid)
{
    if(contraband_status != 2) return SCM(playerid, 0xCECECEFF, "В данный момент нет контрабанды!");

    EnablePlayerGPS(playerid, 12, contraband_pos_x, contraband_pos_y, contraband_pos_z, "Местоположение контрабанды отмечено у вас на радаре.");

    return 1;
}

CMD:templeader(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /templeader [id игрока] [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Правительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Воинская часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Городская больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - ТРК «Ритм»");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Министерство внутренних дел");
		SendClientMessage(playerid, 0xCECECEFF, "6 - ФСИН");
		SendClientMessage(playerid, 0xCECECEFF, "7 - ФСБ");
		return 1;
	}
	extract params -> new to_player, org_id;

	new fmt_msg[144];
	if(GetPlayerTeamEx(to_player) > 0)
	{
		SendClientMessage(to_player, 0xFF6600FF, "Вы сняли игрока с временное лидерство");
		format(fmt_msg, sizeof fmt_msg, "[A] %s [%d] снял игрока с временного лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendMessageToAdmins(fmt_msg, COLOR_GREY);
		return InvitePlayer(playerid, 0, 0, true);
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= org_id <= 7)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор организации");

	SetPlayerTeamEx(to_player, org_id);
	if(org_id != 7) SetPlayerData(to_player, P_JOB, 10);
	else SetPlayerData(to_player, P_JOB, 6);

	if(!GetPlayerSex(to_player)) 
	{
        SetPlayerData(to_player, P_OSKIN, g_organization[org_id - 1][O_SKINS][9]);
	}
	else 
	{
		SetPlayerData(to_player, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
	}

	SetPlayerColorEx(to_player, team_colors[org_id]);

	ResetSkin(to_player);

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы взяли временное лидерство организации \"%s\"", GetPlayerTeamName(to_player));
	SendClientMessage(to_player, 0xCECECEFF, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s [%d] поставил игрока на временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
	SendMessageToAdmins(STRING_GLOBAL, COLOR_GREY);

	return 1;
}

CMD:agivelic(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	extract params -> new to_player, license; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_text[144];

	switch(license)
	{
		case 1:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Базового уровня", GetPlayerData(to_player, P_DRIVING_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Базового уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 2:
		{
			SetPlayerData(to_player, P_DRIVING_LIC_PROF, GetPlayerData(to_player, P_DRIVING_LIC_PROF) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_lic_prof", GetPlayerData(to_player, P_DRIVING_LIC_PROF));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC_PROF) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerData(to_player, P_DRIVING_LIC_PROF) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на вождение Профессионального уровня", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC_PROF) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 3:
		{
			SetPlayerData(to_player, P_WEAPON_LIC, GetPlayerData(to_player, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "weapon_lic", GetPlayerData(to_player, P_WEAPON_LIC));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на оружие", GetPlayerData(to_player, P_WEAPON_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] %s %s[%d] лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-Базовый уровень 2-Профессиональный уровень 3-На оружие)");
	}
	return 1;
}

CMD:setnakolka(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, set_code; else return SendClientMessage(playerid, 0xCECECEFF, "Использование: /setnakolka [id игрока] [id наколки]");
    if(!(0 <= set_code <= 9)) return SendClientMessage(playerid, 0x999999FF, "Айди наколки: от 0 до 9");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new query[128];
    SetPlayerData(to_player, P_NAKOLKA, set_code);
	UpdatePlayerDatabaseInt(to_player, "nakolka", set_code);

	format(query, sizeof query, "Администратор %s Вам выдал наколку %s", GetPlayerNameEx(playerid),nakolka_name[set_code]);
	SendClientMessage(to_player, 0x3399FFFF, query);

	format(query, sizeof query, "Вы выдали игроку %s наколку %s", GetPlayerNameEx(to_player),nakolka_name[set_code]);
	SendClientMessage(playerid, 0x66CC00FF, query);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(query, sizeof query, "[A] Администратор %s[%d] выдал %s[%d] наколку %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player,nakolka_name[set_code]);
		SendMessageToAdmins(query, 0x999999FF);
	}
	return 1;
}

CMD:setskills(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 

	extract params -> new to_player, set_code, set_value; else {

	    SendClientMessage(playerid, 0xCECECEFF, "Использование: /setskills [id игрока] [навык] [значение]");
	    SendClientMessage(playerid, 0xCECECEFF, "Коды навыков:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Colt 45");
	    SendClientMessage(playerid, 0xCECECEFF, "2 - SD Pistol");
	    SendClientMessage(playerid, 0xCECECEFF, "3 - Desert Eagle");
	    SendClientMessage(playerid, 0xCECECEFF, "4 - Shotgun");
	    SendClientMessage(playerid, 0xCECECEFF, "5 - MP5");
	    SendClientMessage(playerid, 0xCECECEFF, "6 - AK47");
	    SendClientMessage(playerid, 0xCECECEFF, "7 - M4");
	    SendClientMessage(playerid, 0xCECECEFF, "8 - Sniper Rifle");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Sawnoff");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Combat SG");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Micro Uzi");
	    SendClientMessage(playerid, 0x999999FF, "12 - Сила");
	    return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= set_value <= 100)) return SendClientMessage(playerid, 0x999999FF, "Значение навыка от 0 до 100");

	new tmp_skill_name[32], query[128];

	switch(set_code)
	{
		case 1:
	    {
	        SetPlayerData(to_player, P_SKILL_COLT, set_value);
			tmp_skill_name = "Colt 45";
			UpdatePlayerDatabaseInt(to_player, "skill_colt", set_value);
	    }
	    case 2:
	    {
	        SetPlayerData(to_player, P_SKILL_SDPISTOL, set_value);
			tmp_skill_name = "SD Pistol";
			UpdatePlayerDatabaseInt(to_player, "skill_sdpistol", set_value);
	    }
	    case 3:
	    {
	        SetPlayerData(to_player, P_SKILL_DEAGLE, set_value);
			tmp_skill_name = "Desert Eagle";
			UpdatePlayerDatabaseInt(to_player, "skill_deagle", set_value);
	    }
	    case 4:
	    {
	        SetPlayerData(to_player, P_SKILL_SHOTGUN, set_value);
			tmp_skill_name = "Shotgun";
			UpdatePlayerDatabaseInt(to_player, "skill_shotgun", set_value);
	    }
	    case 5:
	    {
	        SetPlayerData(to_player, P_SKILL_MP5, set_value);
			tmp_skill_name = "MP5";
			UpdatePlayerDatabaseInt(to_player, "skill_mp5", set_value);
	    }
	    case 6:
	    {
	        SetPlayerData(to_player, P_SKILL_AK47, set_value);
			tmp_skill_name = "AK47";
			UpdatePlayerDatabaseInt(to_player, "skill_ak47", set_value);
	    }
	    case 7:
	    {
	        SetPlayerData(to_player, P_SKILL_M4, set_value);
			tmp_skill_name = "M4";
			UpdatePlayerDatabaseInt(to_player, "skill_m4", set_value);
	    }
	    case 8:
	    {
	        SetPlayerData(to_player, P_SKILL_SNIPER_RIFLE, set_value);
			tmp_skill_name = "Sniper Rifle";
			UpdatePlayerDatabaseInt(to_player, "skill_sniper_rifle", set_value);
	    }
		case 9:
	    {
	        SetPlayerData(to_player, P_SKILL_SAWNOFF, set_value);
			tmp_skill_name = "Sawnoff";
			UpdatePlayerDatabaseInt(to_player, "skill_sawnoff", set_value);
	    }
		case 10:
	    {
	        SetPlayerData(to_player, P_SKILL_COMBAT_SG, set_value);
			tmp_skill_name = "Combat SG";
			UpdatePlayerDatabaseInt(to_player, "skill_combat_sg", set_value);
	    }
		case 11:
	    {
	        SetPlayerData(to_player, P_SKILL_MICRO_UZI, set_value);
			tmp_skill_name = "Micro Uzi";
			UpdatePlayerDatabaseInt(to_player, "skill_micro_uzi", set_value);
	    }
	    case 12:
	    {
	        SetPlayerData(to_player, P_POWER, set_value);
			tmp_skill_name = "Сила";
			UpdatePlayerDatabaseInt(to_player, "power", set_value);
	    }
	    default: return SendClientMessage(playerid, 0x999999FF, "Неверно введен код навыка");
	}

	SetPlayerSkillsInit(to_player);

	format(query, sizeof query, "Администратор %s изменил Вам уровень навыка %s на %d", GetPlayerNameEx(playerid), tmp_skill_name, set_value);
	SendClientMessage(to_player, 0x3399FFFF, query);

	format(query, sizeof query, "Вы изменили игроку %s уровень навыка %s на %d", GetPlayerNameEx(to_player), tmp_skill_name, set_value);
	SendClientMessage(playerid, 0x66CC00FF, query);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(query, sizeof query, "[A] Администратор %s[%d] изменил %s[%d] уровень навыка %s на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, tmp_skill_name, set_value);
		SendMessageToAdmins(query, 0x999999FF);
	}


	return 1;
}

CMD:setvip(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, premium, days; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setvip [id игрока] [уровень премиум-аккаунта] [время (в днях)]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(1 <= premium <= 3)) return SendClientMessage(playerid, 0x999999FF, "Уровень премиум-аккаунта от 1 до 3 (чтобы отобрать, используйте кол-во дней: 0)");

	if(!(0 <= days <= 30)) return SendClientMessage(playerid, 0x999999FF, "Количество дней от 0 до 30");

	new fmt_msg[100];

	new premium_rank[3][17] =
	{
		"{C0C0C0}Silver",
		"{FFD700}Gold",
		"{E5E4E2}Platinum"
	};

	SetPlayerData(to_player, P_PREMIUM, premium);
	SetPlayerData(to_player, P_PREMIUM_TIME, gettime() + days * 86400);

	UpdatePlayerDatabaseInt(to_player, "premium", premium);
	UpdatePlayerDatabaseInt(to_player, "premium_time", gettime() + days * 86400);

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам %s {3399FF}премиум-аккаунт на %d дн.", GetPlayerNameEx(playerid), premium_rank[premium - 1], days);
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s %s {3399FF}премиум-аккаунт на %d дн.", GetPlayerNameEx(to_player), premium_rank[premium - 1], days);
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);


	return 1;
}

CMD:arang(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, lvl, type; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arang [id игрока] [уровень] [тип (1 - штатный | 2 - покупной)]");
 	 
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= lvl <= 8)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 8");
	if(lvl >= IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать уровень администратора равный или больше вашего");
	if(IsPlayerAdminLevel(to_player) >= IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя изменить уровень администрирования  человека выше или равному вашему статусу.");

	SetPlayerData(to_player, P_ADMIN, lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", lvl);

	new fmt_text[128];
	if(lvl > 0)
	{
		if(type == 2) 
			SetPlayerData(to_player, P_BUYADMIN, 1);
		else 
			SetPlayerData(to_player, P_BUYADMIN, 0);
		
		UpdatePlayerDatabaseInt(to_player, "buyadmin", GetPlayerData(to_player, P_BUYADMIN));

		if(type != 2) format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %d уровень администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, lvl);

		else format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %d уровень покупного администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, lvl);

		SendMessageToAdmins(fmt_text, 0xFF5533FF);

		format(fmt_text, sizeof fmt_text, "Поставил %s[%d] на пост администратора %d уровня", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), lvl);
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, fmt_text);
	}
	else
	{
		SetPlayerData(to_player, P_BUYADMIN, 0);
		UpdatePlayerDatabaseInt(to_player, "buyadmin", 0);

	    format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(fmt_text, 0xFF5533FF);

		format(fmt_text, sizeof fmt_text, "Снял %s[%d] с поста администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, fmt_text);
	}
	return 1;
}

cmd:offarang(playerid, params[]) callcmd::arangoff(playerid, params);
CMD:arangoff(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arangoff [ник игрока] [уровень]");

	extract params -> new string: name[21], lvl;

	if(!(0 <= lvl <= 8)) return SendClientMessage(playerid, 0xFF6600FF, "Неверный идентификатор. Уровень от 0 до 8");
	if(lvl >= IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать уровень администратора равный или больше вашего");

	new query[400];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] оффлайн назначил игрока %s администратором %d уровня", GetPlayerNameEx(playerid), playerid, name, lvl);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET admin=%d WHERE id=%d LIMIT 1", lvl, user_id);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:setmindostup(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmindostup [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(GetPlayerMinEx(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Игрок уже имеет мин-доступ");

	SetPlayerData(to_player, P_MIND, 1);
	UpdatePlayerDatabaseInt(to_player, "mind", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Основатель %s[%d] выдал вам минимальный доступ", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[F] Основатель %s[%d] выдал %s[%d] минимальный доступ",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Выдал %s[%d] минимальный доступ", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}
CMD:photo_screen(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /photo_screen [0 - Выключить / 1 - Включить]");

	switch(criminalid)
	{
		case 0:
		{
			CEF_CREATE(playerid, 1, 2, "interface('Hud').showTime()");
		}
		case 1:
		{
			CEF_CREATE(playerid, 1, 2, "interface('Hud').hideTime()");
		}
	}
	return 1;
}

CMD:yrang(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yrang [id игрока] [уровень]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
    if(!(0 <= lvl <= 3))
        return SendClientMessage(playerid, 0xCECECEFF, "Вы указали неверный уровень ютуберки. Доступные: 1-3");
	SetPlayerData(to_player, P_YADMIN, lvl);
	UpdatePlayerDatabaseInt(to_player, "yadmin", lvl);

	new fmt_text[128];
 	if(lvl > 0)
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] %d уровень ютуберки",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, lvl);

		SendMessageToAdmins(fmt_text, 0x999999FF);

		format(fmt_text, sizeof fmt_text, "Поставил %s[%d] на пост ютубера %d уровня", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), lvl);
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, fmt_text);
	}
	else
	{
		format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] снял %s[%d] с ютубера",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(fmt_text, 0x999999FF);

		format(fmt_text, sizeof fmt_text, "Снял %s[%d] с поста ютубера", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, fmt_text);
	}
	return 1;
}

CMD:givedonate(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, donate; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givedonate [id игрока] [cумма]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-100000000 <= donate <= 50_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 50.000.000 рублей за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача Доната от админа %s", GetPlayerNameEx(playerid));
	ProcessPlayerCredit(to_player, donate, reason, true, true);

	format(reason, sizeof reason, "{ff8c00}Ваш счет успешно пополнен. С учётом акции, было зачислено {00ff99}%d руб.", donate);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);
	format(reason, sizeof reason, "{ff8c00}Используйте: {ffcc00}/menu > Дополнительно");
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	SCM(playerid, -1, "{ff8c00}Вы успешно выдали донат");
	
	format(reason, sizeof reason, " ["SERVER_NAME"]%s[%d] выдал DCOINS %s[%d] кол-во %d DCOINS, в итоге у игрока %d DCOINS", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, donate, QueryPlayerDonationBalance(to_player));
	SendMessageToAdmins(reason, 0xFF6600FF);
	
	format(reason, sizeof reason, "Выдал %s[%d] %d Донат", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), donate);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);
	return 1;
}
CMD:giveacs(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, aksid, type; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /giveacs [id игрока] [id аксессуара] [тип аксессуара]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	GiveAcs(to_player, aksid, type);
	new reason[144];
	format(reason, sizeof reason, "Администратор %s выдал Вам аксессуар", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал аксессуар %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] аксессуар", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:setstats(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, set_code, set_value; else 
	{
		SendClientMessage(playerid, 0xCECECEFF, "Использование: /setstats [id игрока] [код] [значение]");
		SendClientMessage(playerid, 0xCECECEFF, "Код: 1 - Уровень | 2 - Работа");
		return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	new fmt_msg[128];

	switch(set_code)
	{
		case 1:
		{
			if(set_value > 999) return 1;

			SetPlayerData(to_player, P_LEVEL, set_value);

			SetPlayerScore(to_player, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень на %d", GetPlayerNameEx(playerid), set_value);
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s уровень на %d", GetPlayerNameEx(to_player), set_value);
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		case 2:
		{
			if(!(0 <= set_value <= 9)) return SendClientMessage(playerid, 0xFF6600FF, "Ид работы от 0 до 9");
			SetPlayerData(to_player, P_JOB, set_value);

			format(fmt_msg, sizeof fmt_msg, "Администратор %s установил Вам работу %s", GetPlayerNameEx(playerid), GetPlayerJobAndRankName(to_player));
			SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы установили игроку %s работу %s", GetPlayerNameEx(to_player), GetPlayerJobAndRankName(to_player));
			SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
		}
		default: return SendClientMessage(playerid, 0xFF6600FF, "Ошибка: Неверно введен код");
	}

	mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET level=%d,job=%d WHERE id=%d", GetPlayerLevel(to_player), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:pay(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Передавать деньги можно только с {99ff00}2{CECECE} уровня");
	
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

	if(playerid == to_player) return SendClientMessage(playerid, 0x999999FF, "вы не можете передать себе деньги");

	if(!(1 <= cash <= 4000000)) return SCM(playerid, 0xCECECEFF, "Сумма должна быть от 1 до 4.000.000 рублей");

	if(!VerifyIntString(QueryPlayerBalance(playerid), cash)) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет столько денег");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Передача денег игроку %s[%d]", GetPlayerNameEx(to_player), to_player);
	ModifyCashBalance(playerid, -cash, STRING_GLOBAL, true, true);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "+%d", cash);
	SetPlayerChatBubble(to_player, STRING_GLOBAL, 0x00CC00FF, 10.0, 5000);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "-%d", cash);
	SetPlayerChatBubble(playerid, STRING_GLOBAL, 0xFF6600FF, 10.0, 5000);

	SCMF(to_player, 0x3399FFFF, "%s передал Вам деньги %d руб", GetPlayerNameEx(playerid), cash);
	SCMF(playerid, 0x3399FFFF, "Вы передали игроку %s деньги %d руб", GetPlayerNameEx(to_player), cash);

	Action(playerid, "достал кошелёк и передал деньги", _, false);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Передача денег от игрока %s[%d]", GetPlayerNameEx(playerid), playerid);
	ModifyCashBalance(to_player, cash, STRING_GLOBAL, true, true);

	OnBattlePass_Perfomance(playerid, 10, 1);
	return true;
}

CMD:history(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /history [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[128];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_row_int(0, 0);

	cache_delete(result);

	if(!user_id)
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	format(query, sizeof query, "SELECT name FROM change_names WHERE owner_id=%d ORDER BY id DESC LIMIT 45", user_id);
	mysql_tquery(mysql, query, "ShowChangeNameHistory", "is", playerid, name);

	return 1;
}
cmd:set_xbonus(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 0;

    if(!admin_logged[playerid]) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы. Используйте /alogin для входа.");

    extract params -> new count; else return SendClientMessage(playerid, 0xCECECEFF, "Использование: /set_xbonus [множитель]");

    if(count < 1 || count > 3) return SendClientMessage(playerid, 0xCECECEFF, "Ошибка: множитель может быть только от 1 до 3.");

    g_xbonus = count;

    SendClientMessage(playerid, 0x00FF00FF, "Вы успешно изменили множитель.");

    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
			new system[128];
            format(system, sizeof system, "interface('Hud').setBonus(%d)", g_xbonus);
			CEF_CREATE(i, 1, 2, system);
        }
    }

    SaveServerConfig();

    return 1;
}
CMD:serverconfig(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
    	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	new string[210];
	format(string, sizeof string,
	"Функция\tСтатус\n"\
	"Тест/Тех.Работы\n"\
	"Допущеные до теста\tсписок\n"\
	"Допуск человеку\tдать\n"\
	"Допуск человеку\tзабрать");
	IntfDialogCallRemote(playerid, DIALOG_CONFIG, DIALOG_STYLE_TABLIST_HEADERS, "Настройки сервера", string, "Далее", "Отмена");
	return 1;
}
CMD:zbtplayer(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	new query[128];

	format(query, sizeof query, "SELECT name FROM test_user");
	mysql_tquery(mysql, query, "ShowTestPlayer", "i", playerid);

	return 1;
}
CMD:addzbtplayer(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addzbtplayer [ник]");

	if(!(3 <= strlen(params) <= 21))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM test_user WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		return SendClientMessage(playerid, -1, "У него уже есть доступ!");

	cache_delete(result);

	new str[144];
	format(str, sizeof str, "INSERT INTO `test_user` (`name`) VALUES ('%s')", name);
	mysql_query(mysql, str, false);
	SendClientMessage(playerid, -1, "Добавлено успешно");
	format(query, sizeof query, "[A] %s[%d] дал для %s доступ к тесту", GetPlayerNameEx(playerid), playerid, name);
	SendMessageToAdmins(query, 0x999999FF);
	return 1;
}
CMD:delzbtplayer(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delzbtplayer [ник]");

	if(!(3 <= strlen(params) <= 25))
		return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	extract params -> new string: name[25];
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM test_user WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		mysql_format(mysql, query, sizeof query, "DELETE FROM test_user WHERE name='%s'", name);
		mysql_query(mysql, query, false);
		SendClientMessage(playerid, -1, "Удалено");
	}
	else return SendClientMessage(playerid, -1, "У пользователя нет доступа");
	cache_delete(result);
	if(IsPlayerConnected(GetPlayerID(name)))
	{
		SendClientMessage(GetPlayerID(name), -1, "У вас забрали доступ к тестовому серверу!");
		Kick(GetPlayerID(name));
	}
	format(query, sizeof query, "[A] %s[%d] удалил для %s доступ к тесту", GetPlayerNameEx(playerid), playerid, name);
	SendMessageToAdmins(query, 0x999999FF);
	return 1;
}
CMD:c(playerid, params[]) return callcmd::call(playerid, params);
CMD:call(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0x999999FF, "Закончите текущий разговор");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		new number;
		if(sscanf(params, "d", number))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT,
				"{FFD83D}Наберите номер",
				"{6699CC}Номера государственных служб:\n\n\
				{FFFFFF}Полиция\t\t\t{66CC00}02\n\
				{FFFFFF}Скорая помощь\t\t{66CC00}03\n\
				{FFFFFF}Такси\t\t\t\t{66CC00}555\n\
				{FFFFFF}Механик\t\t\t{66CC00}090\n\
				{FFFFFF}Мэрия\t\t\t\t{66CC00}022\n\
				{FFFFFF}Служба точного времени\t{66CC00}060\n\
				{FFFFFF}Оператор связи\t\t{66CC00}111",
				"Позвонить", "Отмена"
			);
			return 1; // (TODO)
		}

		switch(number)
		{
			case 02: return 1;
			case 03: return 1;
			case 555: return 1;
			case 090: return 1;
			case 022: return 1;

			case 060:
			{
				ShowCurrentTime(playerid);
			}
			case 111:
			{
				new fmt_str[175];
				SetPlayerPhoneUseState(playerid, true);

				format
				(
					fmt_str, sizeof fmt_str,
					"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
					"На счету Вашего мобильного телефона {00FF00}%d руб\n\n"\
					"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
					"Всего доброго!",
					GetPlayerData(playerid, P_PHONE_BALANCE)
				);
				IntfDialogCallRemote(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFD83D}Оператор сотовой связи", fmt_str, "Ок", "Отмена");
			}

			default:
			{
				new subscriber = GetPlayerIDByPhone(number);

				if(number < 1)
					return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

				if(subscriber == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Набранный Вами номер не обслуживается");

				if(subscriber == playerid || GetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(subscriber, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0x999999FF, "Абонент занят");

				if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
					return SendClientMessage(playerid, 0x999999FF, "Телефон абонента вне зоны доступа");

				SetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER, subscriber);
				SetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER, playerid);

				new fmt_str[90];

				format(fmt_str, sizeof fmt_str, "Исходящий звонок | Номер: %d {FFCD00}| Ожидание ответа от %s...", number, GetPlayerNameEx(subscriber));
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "Входящий звонок | Номер: %d {FFCD00}| Вызывает %s", GetPlayerPhone(playerid), GetPlayerNameEx(playerid));
				SendClientMessage(subscriber, 0x3399FFFF, fmt_str);

				SendClientMessage(subscriber, 0xFFFFFFFF, "Используйте {00CC00}/p {FFFFFF}чтобы ответить или {FF6600}/h {FFFFFF}чтобы отклонить вызов");
				SetPlayerPhoneUseState(playerid, true);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}

	return 1;
}

CMD:p(playerid, params[])
{
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1) return 1;

	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	//
	if(caller != INVALID_PLAYER_ID)
	{
		SetPlayerPhoneCall(caller, PC_TIME, 0);
		SetPlayerPhoneCall(playerid, PC_TIME, 0);

		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "Вы ответили на звонок %s", GetPlayerNameEx(caller));
		SendClientMessage(playerid, 0xDD90FFFF, fmt_str);
        //if (caller == GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) && lstream[caller]) SvDetachSpeakerFromStream(lstream[caller], caller);
		format(fmt_str, sizeof fmt_str, "%s ответил на Ваш звонок", GetPlayerNameEx(playerid));
		SendClientMessage(caller, 0xDD90FFFF, fmt_str);

		SetPlayerPhoneUseState(playerid, true, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Нет входящих вызовов");

	return 1;
}

CMD:h(playerid, params[])
{
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

	if(call_to != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(call_to);
			SendClientMessage(call_to, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(call_to, false);
		}
		SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
	}
	else if(caller != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(caller);
			SendClientMessage(caller, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(caller, false);
		}
		if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
		{
			SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
		}
		else SendClientMessage(playerid, 0xFF9944FF, "Вы отклонили входящий вызов");
	}
	else return 1;

	ClearPlayerPhoneCall(playerid);
	SetPlayerPhoneUseState(playerid, false);

	return 1;
}

CMD:sms(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_MUTE)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать данную функцию пока не пройдёт блокировка чата");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sms [номер телефона] [сообщение]");

		extract params -> new number, string:message[66];

		if(number < 550)
			return SendClientMessage(playerid, 0x999999FF, "Данный номер не обслуживается");

		new subscriber = GetPlayerIDByPhone(number);

		if(subscriber != INVALID_PLAYER_ID)
		{
			if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
				return SendClientMessage(playerid, 0x999999FF, "Не удается отправить сообщение. Телефон абонента недоступен");

			if(!strlen(message))
				return SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

			if(strlen(message) > 64)
				return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");

			AddPlayerData(playerid, P_PHONE_BALANCE, -, 5);
			GameText(playerid, "SMS ~n~~y~-5 рублей", 4000, 2);

			new fmt_str[128];

			format(fmt_str, sizeof fmt_str, "SMS: %s | Отправитель: %s [т.%d]", message, GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
			SendClientMessage(subscriber, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(subscriber, "SMS <<", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "SMS: %s | Получатель: %s [т.%d]", message, GetPlayerNameEx(subscriber), GetPlayerPhone(subscriber));
			SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "UPDATE accounts_canvasdev SET phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_PHONE_BALANCE), GetPlayerAccountID(playerid));
			mysql_tquery(mysql, fmt_str, "", "");

			if(g_admin_ears)
			{
				format(fmt_str, sizeof fmt_str, "[A] SMS: %s | от %s[%d] к %s[%d]", message, GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(subscriber), subscriber);
				SendMessageToAdmins(fmt_str, 0xFFFF00FF);
			}

		}
		else
		{
			new query[148],
				Cache: result;

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE phone=%d LIMIT 1", number);
			result = mysql_query(mysql, query);

			new rows = cache_num_rows();

			if(rows)
			{
				new name[21];
				cache_get_field_content(0, "name", name);

				new fmt_str[128];
				format(fmt_str, sizeof fmt_str, "SMS: %s | Получатель: %s [т.%d]", message, name, number);
				SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
				SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);
			}
			else SCM(playerid, COLOR_GREY, "* Данный номер не существует");

			cache_delete(result);
		}
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "Закончите текущий разговор");

	if(GetPlayerPhoneCall(playerid, PC_ENABLED))
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, false);
		SendClientMessage(playerid, 0xFF6600FF, "Телефон отключен");
	}
	else
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, true);
		SendClientMessage(playerid, 0x66CC00FF, "Телефон включен");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0x999999FF, "Вы должны сидеть за рулем транспорта");

	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /eject [id игрока]");

	extract params -> new to_player;

	if(vehicleid != GetPlayerVehicleID(to_player) || playerid == to_player)
		return SendClientMessage(playerid, 0x999999FF, "Игрок должен сидеть в Вашем транспорте");

	RemovePlayerFromVehicle(to_player);

	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%s выкинул Вас из своего транспорта", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Вы выкинули %s из своего транспорта", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	return 1;
}

CMD:book(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	return ShowPlayerPhoneBook(playerid);
}

CMD:add(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add [id игрока] [номер телефона]");

	extract params -> new to_player, string: number[10];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerPhoneBookInit(playerid))
		InitPlayerPhoneBook(playerid);

	if(GetPlayerPhoneBookContacts(playerid) >= MAX_PHONE_BOOK_CONTACTS)
		return SendClientMessage(playerid, 0xCECECEFF, "Записная книжка заполнена. Удалите ненужные контакты");

	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, GetPlayerNameEx(to_player), number);

	SetPVarString(playerid, "add_contact_name", GetPlayerNameEx(to_player));
	new fmt_str[64 + 1];

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", GetPlayerNameEx(to_player));
	return IntfDialogCallRemote(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}Добавление нового контакта", fmt_str, "Добавить", "Отмена");
}

CMD:fill(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_RERFECT_DRIVER)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /fill [id игрока] [кол-во топлива] [стоимость]");

	extract params -> new to_player, fill_fuel_count, fill_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	if(1 <= GetPlayerJobLoadItems(playerid) <= fill_fuel_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества топлива");

	if(!(1 <= fill_price <= 1500))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 1500 рублей");

	if(!VerifyIntString(QueryPlayerBalance(to_player), fill_price))
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FILL_CAR, fill_fuel_count, fill_price);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_RERFECT_DRIVER)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /repair [id игрока] [стоимость]");

	extract params -> new to_player, repair_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Клиент должен находиться за рулем");

	new Float: vehicle_health;
	GetVehicleHealth(GetPlayerVehicleID(to_player), vehicle_health);
	if(vehicle_health < 350.0 && !IsPlayerInRangeOfPoint(playerid, 80.0, 1180.0962,2500.5166,12.4769)) return SendClientMessage(playerid, 0xCECECEFF, "Транспорт клиента очень сильно поврежден, отвезите его на стоянку автомехаников {CCCC00}(/gps)");

	if(!(1 <= repair_price <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 8000 рублей");

	if(!VerifyIntString(QueryPlayerBalance(to_player), repair_price))
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_REPAIR_CAR, repair_price);
	return 1;
}

CMD:business(playerid, params[])
{
	new query[94],
		Cache: result,
		biz_id,
		biz_name[64];

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "name", biz_name);

		format(query, sizeof query, "{FFFFFF}%d. - %s (№%d)<t>Владелец\n", i + 1, biz_name, biz_id);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_OWNABLE_BIZ_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите бизнес",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:buybiz(playerid, params[])
{

    if((GetPlayerOwnableBiz(playerid) + 1) > GetPlayerBizSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество бизнес компаний.");

	new businessid = GetNearestBusiness(playerid, 4.0);
	if(businessid != -1)
	{
		if(GetOwnableAuction(1, GetBusinessData(businessid, B_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный бизнес выставлен на аукцион");

	    SetPVarInt(playerid, "buy_biz_id", businessid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s\n\
			{FFFFFF}Стоимость:\t\t\t{6699FF}%s руб\n\
			{FFFFFF}Плата за аренду:\t\t{6699FF}%s руб в день\n\
			{669966}Вы уверены что хотите купить этот бизнес?",
			GetBusinessData(businessid, B_NAME),
			formatInt(GetBusinessData(businessid, B_PRICE)),
			formatInt(GetBusinessData(businessid, B_RENT_PRICE))
		);
		IntfDialogCallRemote(playerid, DIALOG_BIZ_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}Покупка нового бизнеса", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с бизнесом, который хотите купить");

	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new query[94],
		Cache: result,
		biz_id,
		biz_name[64];

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "name", biz_name);

		format(query, sizeof query, "{FFFFFF} %s [%d]\n", biz_name, biz_id);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_BIZ_SELL_TEST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите бизнес, который хотите продать",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	extract params -> new to_player, price;
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /sellmybiz [ID игрока] [стоимость]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет!");

	if(price < 1)
		return SendClientMessage(playerid, 0xFF6600FF, "Укажите стоимость продажи!");

	if(!VerifyIntString(QueryPlayerBalance(to_player), price))
		return SendClientMessage(playerid, 0xFF6600FF, "У покупателя нет такого количества средств!");

    if((GetPlayerOwnableBiz(to_player) + 1) > GetPlayerBizSlots(to_player))
		return SendClientMessage(playerid, 0x3399FFFF, "Игрок имеет максимальное количество бизнесов!");


	new query[94],
		Cache: result,
		biz_id,
		biz_name[64];

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");

    SetPVarInt(playerid, "sellmybiz_to_player", to_player);
    SetPVarInt(playerid, "sellmybiz_money", price);

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "name", biz_name);

		format(query, sizeof query, "{FFFFFF} %s [%d]\n", biz_name, biz_id);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_BIZ_SELL_MY_BIZ, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите бизнес, который хотите продать",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:bizmusic(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 4)
		{
			new fmt_str[13 + 1];
			new string[(sizeof fmt_str - 1) * (sizeof g_business_sound) + 1];

			string = "1. Отключен\n";
			for(new idx = 1; idx <= sizeof g_business_sound; idx ++)
			{
				format(fmt_str, sizeof fmt_str, "%d. Звук №%d\n", idx + 1, idx);
				strcat(string, fmt_str);
			}
			IntfDialogCallRemote(playerid, DIALOG_BIZ_ENTER_MUSIC, DIALOG_STYLE_LIST, "{FFCD00}Звук при входе в бизнес", string, "Выбрать", "Закрыть");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Для использование этой функции необходим 4 уровень улучшения бизнеса");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:manager(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /manager [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	//SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
	new query[94],
		Cache: result,
		biz_id,
		biz_name[64];

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows)
		return SendClientMessage(playerid, 0x999999FF, "У вас не одного бизнеса во владении.");

    SetPVarInt(playerid, "manager_to_player", to_player);

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "name", biz_name);

		format(query, sizeof query, "{FFFFFF} %s [%d]\n", biz_name, biz_id);
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_BIZ_MANAGER, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите бизнес, который хотите продать",
		string_dialog,
		"Выбрать", "Закрыть"
	);
    cache_delete(result);
	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_SHOP_24_7_APROVED, DIALOG_STYLE_TABLIST_HEADERS,
				"Список товаров",
				"Товар \t Стоимость\n"\
				"Камера \t 875 руб\n"\
				"Цветы \t 187 руб\n"\
				"Топор \t 750 руб\n"\
				"Парашют \t 1000 руб\n"\
				"Лотерейный билет \t -\n"\
				"Маска \t 2812 руб\n"\
				"Огнетушитель \t 12500 руб\n"\
				"Бумбокс \t 6062 руб\n"\
				"Батарейки типа AA \t 187 руб\n"\
				"Металлоискатель BHJ \t 12500 руб\n"\
				"Металлоискатель GA250 \t 32500 руб\n"\
				"Лопата \t 3437 руб\n"\
				"Свисток на уток \t 812 руб\n"\
				"Надувная лодка \t 1875 руб\n"\
				"Болторезы \t 875 руб\n"\
				"Стиральный порошок \t 1250 руб\n"\
				"Рем.комплект для машинки \t 6250 руб\n"\
				"Коробок спичек \t 2500 руб\n"\
				"Гитара \t 37500 руб",
				"Выбор", "Закрыть"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GARDEN))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_SHOP_GARDEN, DIALOG_STYLE_TABLIST_HEADERS,
				"{FFD83D}Список товаров",
				"Товар\tСтоимость\n\
				Семена томата \t875 руб\n\
				Семена огурцов \t875 руб\n\
				Лейка \t1750 руб\n\
				Снегоуборочная машина \t70000 руб\n\
				Известь \t4375 руб\n\
				Гербицид \t7000 руб\n\
				Компостное удобрение \t5250 руб\n\
				Торфяное удобрение \t6125 руб\n\
				Семена картофеля \t3500 руб\n\
				Семена свёклы \t3500 руб\n\
				Семена перца \t3500 руб\n\
				Семена баклажана \t3500 руб\n\
				Семена капусты \t3500 руб\n\
				Семена моркови \t3500 руб\n\
				Лопата \t9625 руб",
				"Выбор", "Закрыть"
			);
		}
 		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_APTEKA))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_SHOP_APTEKA, DIALOG_STYLE_LIST,
				"{FFD83D}Аптека",
				"Аптечка\t\t 10000 руб\n"\
				"Противорвотное\t\t 750 руб",
				"Купить", "Отмена"
			);
		}
 		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_ZAKUS))
        {
            IntfDialogCallRemote
            (
                playerid, DIALOG_BIZ_SHOP_ZAKUS, DIALOG_STYLE_LIST,
                "{FFFFFF}Закусочная",
                "{FFFFFF}1. Стандартный куриный обед<t><t>{FFA500} 10000 руб\n"\
                "{FFFFFF}2. Ассорти из курицы<t><t>{FFA500} 12500 руб\n"\
                "{FFFFFF}3. Королевский обед<t><t>{FFA500} 23120 руб\n"\
                "{FFFFFF}4. Лимонад<t><t>{FFA500} 5768 руб\n"\
                "{FFFFFF}5. Чай<t><t>{FFA500} 4000 руб",
                "Купить", "Закрыть"
            );
        }
 		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_KONDITER))
		{
		    new fmt_str[144];

		    format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}%s",
				GetBusinessData(businessid, B_NAME)
			);
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_SHOP_KONDITER, DIALOG_STYLE_LIST,
				fmt_str,
				"{FFFFFF}1. Маленький десерт<t>{CC9900}630 руб\n"\
				"{FFFFFF}2. Средний десерт<t>{CC9900}1120 руб\n"\
				"{FFFFFF}3. Большой десерт<t>{CC9900}1575 руб\n"\
				"{FFFFFF}4. Напиток\t\t{FFA500} 227 руб",
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_CELL_SALON, DIALOG_STYLE_LIST,
				"{FFD83D}Сотовый салон",
				"1. Мобильный телефон\t{00CC00}7350 руб\n"\
				"2. Часы с белым ремешком\t{00CC00}10500 руб\n"\
				"4. Изменить номер телефона\t{00CC00}1750 руб\n"\
				"5. Изменить цвет телефона\t{00CC00}700 руб\n"\
				"6. Пополнить счёт телефона",
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_AVTOZAP))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BIZ_AVTOZAP_1, DIALOG_STYLE_LIST,
				"{ffcd00}Магазин автозапчастей",
				"{ffffff}1. Моторное масло\t{00CC00}200 руб\n"\
				"{ffffff}2. Воздушный фильтр\t{00CC00}300 руб\n"\
				"{ffffff}3. Масляный фильтр\t{00CC00}100 руб\n"\
				"{ffffff}4. Сабвуфер\t\t{00CC00}30000 руб\n"\
				"{ffffff}5. Автосигнализация\t{00CC00}350000 руб\n"\
				"{ffffff}6. Рем. комплект\t{00CC00}15000 руб\n"\
				"{ffffff}7. Домкрат\t{00CC00}50000 руб",
				"Купить", "Отмена"
			);
		}
	}
	return 1;
}

CMD:healme(playerid, params[])
{
	if(GetIteam(playerid, 2) <= 0)
	return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет с собой аптечки");

	if(GetPlayerHealthEx(playerid) == 100)
	return SendClientMessage(playerid, 0xFF6600FF, "Вы не нуждаетесь в лечении");

	GiveIteam(playerid, 2,0, 1,0);
	SetPlayerHealthEx(playerid, 60.0, true);
	SendClientMessage(playerid, 0x6495EDFF, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");
	GameText(playerid, "~g~+60 ~b~hp", 3000, 2);
	ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:present(playerid, params[])
{
	if(!IsPlayerHaveWeapon(playerid, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет цветов");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /present [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(IsPlayerHaveWeapon(to_player, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть букет цветов");

	new fmt_str[64];

	new Float: angle;
	new Float: to_x, Float: to_y;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerPos(to_player, to_x, to_y, z);

	angle = GetAngleToPoint(to_x, to_y, x, y);

	SetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(to_player, angle + 180.0);

	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(to_player, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);

	format(fmt_str, sizeof fmt_str, "%s получил(а) от Вас цветы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "%s подарил(а) Вам цветы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);

	SetTimerEx("PresentFlowersToPlayer", 1500, false, "ii", playerid, to_player);
	return 1;
}

CMD:mask(playerid, params[])
{
	if(GetIteam(playerid, 255) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой маски");

	if(GetPlayerData(playerid, P_MASK) > 0) return 0;

	SetPlayerData(playerid, P_MASK, 600 + 1);
	SetPlayerColorEx(playerid, 0x00000000);

	format(old_nickname[playerid], 64, "%s", GetPlayerNameEx(playerid));

	new randId = random(900000) + 100000;
	format(g_player[playerid][P_NAME], 21, "Mask_%d", randId);
    SetPlayerName(playerid, g_player[playerid][P_NAME]);

	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 0);
	SetPlayerChatBubble(playerid, "Надевает маску", 0xFF9900FF, 15.0, 5000);

	GameText(playerid, "~b~~h~маска включена", 2500, 3);
	SendClientMessage(playerid, 0x3399FFFF, "Ваше месторасположение на GPS скрыто на 10 минут");

	return 1;
}

cmd:home(playerid)
{
	new query[356],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		new entrance = cache_get_field_content_int(i, "entrance");

		if(entrance == -1)
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
		}
		else
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
		}
		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_OWNABLE_HOME_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}
CMD:sellhome(playerid)
{
	new query[356],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		new entrance = cache_get_field_content_int(i, "entrance");

		if(entrance == -1)
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
		}
		else
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
		}

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_SELL_HOME_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}
cmd:sellmyhome(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyhome [id игрока] [стоимость]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(price < 1)
		return SendClientMessage(playerid, 0xFF6600FF, "Укажите стоимость продажи");
	
	if((GetPlayerOwnableHouse(to_player) + 1) > GetPlayerHouseSlots(to_player)) 
		return SendClientMessage(playerid, 0x3399FFFF, "Игрок уже имеете максимально количество домов.");

	if(!VerifyIntString(QueryPlayerBalance(to_player), price))
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SetPVarInt(playerid, "Sellprice", price);
	SetPVarInt(playerid, "to_player", to_player);

	new query[94],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		new entrance = cache_get_field_content_int(i, "entrance");

		if(entrance == -1)
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
		}
		else
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
		}

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_SELL_MY_HOME_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:live(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		new rooms = GetHouseTypeInfo(type, HT_ROOMS);

		if(GetHouseRentersCount(houseid) >= rooms)
			return SendClientMessage(playerid, 0x999999FF, "Все комнаты Вашего дома уже заняты");

		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /live [id игрока]"); // [кол-во дней] [цена (необязательно)]

		extract params -> new to_player, days, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и арендатор должны находиться около дома который хотите сдать в аренду");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HOME_RENT_ROOM, houseid);
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");

	return 1;
}

CMD:liveout(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
	if(houseid != -1)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_HOUSE_EVICT, DIALOG_STYLE_MSGBOX,
			"{FF9900}Выселение из дома",
			"{FFFFFF}Вы действительно хотите выселиться из дома?",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы нигде не проживаете");

	return 1;
}

CMD:makestore(playerid, params[])
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
		{
			if(GetPlayerInHouse(playerid) == houseid)
			{
				new type = GetHouseData(houseid, H_TYPE);
				if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_HOUSE_MOVE_STORE, DIALOG_STYLE_MSGBOX,
						"{FFCD00}Шкаф",
						"{FFFFFF}Вы хотите разместить шкаф в этом месте?",
						"Да", "Нет"
					);
				}
				else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
			}
			else SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у себя в доме");
		}
		else SendClientMessage(playerid, 0x999999FF, "Необходим 5 уровень улучшений для дома");
	}
	else SendClientMessage(playerid, 0x999999FF, "Функция доступна владельцам недвижимости");

	return 1;
}

CMD:use(playerid, params[])
{
	new house_id = GetPlayerInHouse(playerid);

	if(GetHouseData(house_id, H_IMPROVEMENTS) < 4) return SendClientMessage(playerid, 0xFF6600FF, "Необходим 4 уровень улучшений для дома");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, GetHouseData(house_id, H_STORE_X), GetHouseData(house_id, H_STORE_Y), GetHouseData(house_id, H_STORE_Z))) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться у своего шкафа");

	if(GetHouseData(house_id, H_OWNER_ID) != GetPlayerAccountID(playerid)) return SCM(playerid, COLOR_GREY, "Вы должны находится у шкафа в своем доме");

	if(status_authorization[playerid] != 1) return true;

	inventory_shelf_id[playerid] = house_id;

	UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);

	if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24],[3,\"Шкаф\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
	else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[3,\"Шкаф\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);

	CEF_CREATE(playerid, 2, 4, "InventoryNew", STRING_GLOBAL);
	return 1;
}

CMD:homelock(playerid, params[])
{
	new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(hotel_id != -1)
	{
		if(GetHotelData(hotel_id, room_id, H_STATUS))
		{
			SetHotelData(hotel_id, room_id, H_STATUS, false);

			GameText(playerid, "~g~~h~ОТКРЫТ", 2000, 3);
			SendClientMessage(playerid, 0x66CC00FF, "Номер открыт");
		}
		else
		{
			SetHotelData(hotel_id, room_id, H_STATUS, true);

			GameText(playerid, "~r~~h~ЗАКРЫТ", 2000, 3);
			SendClientMessage(playerid, 0xFF6600FF, "Номер закрыт");
		}

		new query[64];
		format(query, sizeof query, "UPDATE hotels SET status=%d WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_STATUS), GetHotelData(hotel_id, room_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы не снимаете номер в гостинице");

	return 1;
}
CMD:exit(playerid, params[])
{
	if(GetPlayerInHouse(playerid) != -1)
	{
		ExitPlayerFromHouse(playerid, 3.0);
	}
	else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
	{
		ExitPlayerFromHotelRoom(playerid);
	}
	else if(!GetPlayerInterior(playerid))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не в помещении");
	}
	else if(GetPlayerInGarage(playerid) != -1)
	{
	    ExitPlayerFromGarage(playerid, 15.0);
	}

	return 1;
}


CMD:lock(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");

	extract params -> new type;

	new Float: radius = 20.0;
	new vehicleid = INVALID_VEHICLE_ID;

	switch(type)
	{
		case 1:
		{
		    new Float:Distance_ = 5.0;

            for(new i = 0; i < MAX_VEHICLES; i++)
			{
			    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			    {
				    new iddx = GetVehicleData(i, V_ACTION_ID);
			        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
			        {
						new Float:Distance = D_PlayerVehicle(playerid, i);
				    	if(Distance < Distance_)
						{
							Distance_ = Distance;
							vehicleid = i;
			            }
			        }
		        }

			}

			if(Distance_ == 5.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");

		}
		case 2:
		{
			vehicleid = GetPlayerRentCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)	return SendClientMessage(playerid, 0x999999FF, "У Вас нет арендованной машины");
            new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(GetRentCarData(index, R_RENT_OWNER) == playerid) SetRentCarData(index, R_RENT_OWNER, -1);
		}
		case 3:
		{
			vehicleid = GetPlayerJobCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать эту функцию");
		}
		case 4:
		{
			new famid = GetPlayerData(playerid, P_FAMILY);
		    new Float:Distance_ = 5.0;

            for(new i = 0; i < MAX_VEHICLES; i++)
			{
			    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FAMILY_CAR)
			    {
				    new iddx = GetVehicleData(i, V_ACTION_ID);
			        if(GetOwnableCarData(iddx,OC_OWNER_ID) == famid)
			        {
						new Float:Distance = D_PlayerVehicle(playerid, i);
				    	if(Distance < Distance_)
						{
							Distance_ = Distance;
							vehicleid = i;
			            }
			        }
		        }
			}
			if(Distance_ == 5.0)
			{

				vehicleid = GetPlayerAllowedCar(playerid);

				if(vehicleid == INVALID_VEHICLE_ID)
					return SendClientMessage(playerid, 0x999999FF, "У Вас нет доверенного транспорта");
			}
		}
		default:
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");
	}

	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z))
	{
		new status = GetVehicleParam(vehicleid, V_LOCK);
		if(status)
		{
			if(type == 1) Action(playerid, "открыл личный транспорт", _, true);

			if(type == 2) Action(playerid, "открыл арендованый транспорт", _, true);

			if(type == 5) Action(playerid, "открыл семейный транспорт", _, true);

			GameText(playerid, "~w~Транспорт ~g~открыт", 4000, 1);
			SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_OFF);
		}
		else
		{
			if(type == 1) Action(playerid, "закрыл личный транспорт", _, true);
			
			if(type == 2) Action(playerid, "закрыл арендованый транспорт", _, true);

			if(type == 5) Action(playerid, "закрыл семейный транспорт", _, true);

			GameText(playerid, "~w~Транспорт ~r~закрыт", 4000, 1);
		}
		SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_ON);
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы должны стоять рядом с транспортом");

	return 1;
}
CMD:key(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xf49090FF, "Ошибка: {ffffff}Вы должны находиться в транспорте");

	if(IsAOwnableCar(vehicleid))
	{
		vehicleid = GetPlayerOwnableCarLast(playerid);

		if(vehicleid != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
		{
			if(!IsABike(vehicleid))
			{
				if(vehicleid == vehicleid || vehicleid == GetPlayerAllowedCar(playerid))
				{
					new index = GetVehicleData(vehicleid, V_ACTION_ID);

					if(GetOwnableCarData(index, OC_KEY_IN) == 1)
					{
						if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
						{
							SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
						}
						Action(playerid, "вытащил ключ из замка зажигания", _, false);
						GameText(playerid, "~w~Ключ ~r~вытащен", 4000, 1);
						SetOwnableCarData(index, OC_KEY_IN, 0);
						new fmt_text[144];
 
	                    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET key_in=0 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
	                    mysql_query(mysql, fmt_text, false);
					}
					else 
					{
						Action(playerid, "вставил ключ в замок зажигания", _, false);
						GameText(playerid, "~w~Ключ ~r~вставлен", 4000, 1);
						SetOwnableCarData(index, OC_KEY_IN, 1);
						new fmt_text[144];

						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET key_in=1 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
	                    mysql_query(mysql, fmt_text, false);
					}
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном/доверенном транспорте");
			}
		}
		else
		{
			if(GetPlayerOwnableCars(playerid) == 0)
				SendClientMessage(playerid, 0x999999FF, "У Вас нет личного/доверенного транспорта");
			else
				SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
		}
	}
	else if(IsAFamilyCar(vehicleid))
	{
	    new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	    if(g_ownable_car[action_id][OC_OWNER_ID] == GetPlayerData(playerid, P_FAMILY)+1)
	        return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте семьи");

		if(!IsABike(vehicleid))
		{
			if(vehicleid == vehicleid || vehicleid == GetPlayerAllowedCar(playerid))
			{
				new index = GetVehicleData(vehicleid, V_ACTION_ID);

                if(GetOwnableCarData(index, OC_KEY_IN) == 1)
				{
					if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
					{
						SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
					}
					Action(playerid, "вытащил ключ из замка зажигания", _, false);
					SetOwnableCarData(index, OC_KEY_IN, 0);
				}
				else 
				{
					Action(playerid, "вставил ключ в замок зажигания", _, false);
					SetOwnableCarData(index, OC_KEY_IN, 1);
				}
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в семейном транспорте");
		}
	}
	return 1;
}

CMD:getmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(GetPVarInt(playerid, "go_list") == 1)
	{
	    SetPVarInt(playerid, "go_list", 0);

		new idx = GetPVarInt(playerid, "ownablecar_id");
		
		for(new i = 0; i < MAX_VEHICLES; i++)
		{
			if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			{
				new iddx = GetVehicleData(i, V_ACTION_ID);
				if(GetOwnableCarData(iddx,OC_SQL_ID) == idx)
				{
					vehicleid = i;
				}
			}

		}
	}

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new price = 5000;
		new i_have_home = (GetPlayerHouse(playerid, HOUSE_TYPE_HOME) != -1 || GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) != -1);

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(VerifyIntString(QueryPlayerBalance(playerid), price) || VerifyIntString(QueryPlayerBalance(playerid), i_have_home))
			{
				if(!i_have_home)
					ModifyCashBalance(playerid, -price, "Метка ТС на GPS", true, true);

				new Float: x, Float: y, Float: z;
				GetVehiclePos(vehicleid, x, y, z);

				EnablePlayerGPS(playerid, 55, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0x999999FF, "Недостаточно денег");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	return 0;
}

CMD:sellmycar(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Продавать транспорт можно только с {99ff00}2{CECECE} уровня");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmycar [id игрока] [стоимость]");
	if(!IsPlayerInRangeOfPoint(playerid,250,-1633.8027,1025.8977,997.7969) && !IsPlayerInRangeOfPoint(playerid,250,2304.5803,1757.3826,1001.0000) && !IsPlayerInRangeOfPoint(playerid,250,1575.7394,1772.4160,996.5703)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на Б/У рынке");
	extract params -> new to_player, string:price[23];

	if(!IsPlayerConnected(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет свободных слотов для транспорта");

	if(!IsILNumeric(price)) return SCM(playerid, 0xCECECEFF, "Некорректная стоимость");

	if(!GetILPlayerStr(QueryPlayerBalance(to_player), price)) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SetPVarString(playerid, "SellCarPrice", price);
	SetPVarInt(playerid, "SellCarTo_player", to_player);

	page_cars[playerid] = 1;
	type_page_cars[playerid] = 5;
	ShowOwnableCars(playerid, DIALOG_SELL_OWNABLE_CAR, page_cars[playerid]);

	return 1;
}

CMD:allow(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /allow [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[71];

	if(GetPlayerAllowedCar(to_player) == vehicleid)
	{
		format(fmt_text, sizeof fmt_text, "Вы забрали у %s ключи от Вашего личного транспорта", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "%s забрал у Вас ключи от своего личного транспорта", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		SetPlayerData(to_player, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}
	else
	{
		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_CAR_KEY);
	}

	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
	
	new veh_id = GetPlayerVehicleID(playerid);
	if(IsAOwnableCar(veh_id))
	{
		new vehicleid = GetPlayerOwnableCarLast(playerid);
		if(vehicleid == INVALID_VEHICLE_ID)
		{
			if(GetPlayerOwnableCars(playerid) == 0)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
			else
				return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
		}
		if(GetPVarInt(playerid, "in_by") == 1)
		{
			return 1;
		}
		if(vehicleid != GetPlayerVehicleID(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном транспорте");

		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new query[912];

		GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_POS_X), GetOwnableCarData(index, OC_POS_Y), GetOwnableCarData(index, OC_POS_Z));
		GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
		new Float: x, Float: y, Float: z, Float: angle;
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);
		format(query, sizeof query, "UPDATE ownable_cars SET pos_x=%f,pos_y=%f,pos_z=%f,angle=%f,inter=%d,world=%d WHERE id=%d LIMIT 1", x, y, z, angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), GetOwnableCarData(index, OC_SQL_ID));
		mysql_tquery(mysql, query, "", "");

		SaveOwnableCar(vehicleid);
	}
	if(IsAFamilyCar(veh_id))
	{
		if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная команда!");
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	    if(g_ownable_car[action_id][OC_OWNER_ID] == GetPlayerData(playerid, P_FAMILY)+1)
	        return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте семьи");

		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_POS_X), GetOwnableCarData(index, OC_POS_Y), GetOwnableCarData(index, OC_POS_Z));
		GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
		SaveFamilyCar(vehicleid);
	}
	return SendClientMessage(playerid, 0x66CC00FF, "Транспорт припаркован");
}
CMD:car(playerid, params[])
{
	page_cars[playerid] = 1;
	type_page_cars[playerid] = 6;
	ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST, page_cars[playerid]);
	
	return 1;
}

CMD:pos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) == 0) return 1;

	new Float: x, Float: y, Float: z, interior, virtual_world;

	if(sscanf(params, "P<,>fff", x, y, z))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pos [x y z]");

	sscanf(params, "P<,>{fff}dd", interior, virtual_world);

	return SetPlayerPosEx(playerid, x, y, z, interior, virtual_world);
}

CMD:gov(playerid, params[]) return callcmd::gnews(playerid, params);
CMD:gnews(playerid, params[])
{
	if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FSB)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gnews [текст]");


	new fmt_msg[170 + 1];
	format(fmt_msg, sizeof fmt_msg, "Гос.новости: %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
	SendClientMessageToAll(0x4466CCFF,  fmt_msg);

	return 1;
}
CMD:invite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /invite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(1 <= GetPlayerTeamEx(to_player) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в организации");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть предупреждения");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_INVITE);
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninvite [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");


	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(GetPlayerJob(to_player) >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");
	UnInvite(playerid, to_player);

	return 1;
}

CMD:rang(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rang [id игрока] [+/-]");
	extract params -> new to_player, string:give_rang[2];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerJob(to_player) >= 10) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить или понизить лидера организации");

	new current_rang = GetPlayerJob(to_player);

	new fmt_msg[75];
	if(give_rang[0] == '+')
	{
		if((current_rang + 1) >= GetPlayerJob(playerid)) return SendClientMessage(playerid, 0x999999FF, "Нельзя повысить больше своего ранга");

		GetPlayerJob(to_player)++;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был повышен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else if(give_rang[0] == '-')
	{
		if((current_rang - 1) < 1) return SendClientMessage(playerid, 0x999999FF, "Нельзя понизить ниже 1 ранга");

		GetPlayerJob(to_player)--;
		format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был понижен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else return SendClientMessage(playerid, 0xCECECEFF, "Введите действие: '+' чтобы повысить или '-' чтобы понизить");

	if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
		SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(!GetPlayerSex(to_player))
	{
		SetPlayerData(playerid, P_OSKIN, GetTeamData(GetPlayerTeamEx(to_player), O_SKINS)[GetPlayerJob(to_player)-1]);
		ResetSkin(to_player);
	}

	format(fmt_msg, sizeof fmt_msg, "Вы %s ранг %s[%d] до %d (%s)", (give_rang[0] == '+') ? ("повысили") : ("понизили"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts_canvasdev SET org_skin=%d,job=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);
	return 1;
}

CMD:changeskin(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /changeskin [id игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerSex(to_player)) return SendClientMessage(playerid, 0x999999FF, "Нельзя изменить внешность игрокам с женским полом");

	new team_id = GetPlayerTeamEx(playerid);

	new fmt_str[30];
	new query[85];
	new text[(sizeof fmt_str) * 10];
	new old_skin;
	new count;

	SetPVarInt(playerid, "change_team_skin_playerid", to_player);

	format(query, sizeof query, "%s {FFFFFF}начал для вас подбор униформы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, query);

	for(new i; i < 10; i ++)
	{
		if(old_skin == GetTeamData(team_id, O_SKINS)[i]) continue;

		SetPlayerListitemValue(playerid, count, i);
		count ++;

		old_skin = GetTeamData(team_id, O_SKINS)[i];
		format(fmt_str, sizeof fmt_str, "Скин %d (id %d)\n", count, old_skin);
		strcat(text, fmt_str);
	}
	IntfDialogCallRemote(playerid, DIALOG_TEAM_CHANGE_SKIN, DIALOG_STYLE_LIST, "Выберите внешность для игрока:", text, "Ок", "Отмена");

	return 1;
}

CMD:showall(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	new query[75];
	format(query, sizeof query, "SELECT name, level, job FROM accounts_canvasdev WHERE team = %d ORDER BY job DESC", GetPlayerTeamEx(playerid));
	mysql_tquery(mysql, query, "ShowOrgAllPlayers", "i", playerid);
	return 1;
}
CMD:find(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");

	ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
	return 1;
}
CMD:leaders(playerid)
{
	new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

	result = mysql_query(mysql, "SELECT * FROM `accounts_canvasdev` WHERE `admin` = 0 AND `job` = 10 ORDER BY team ASC", true);
	rows = cache_num_rows();

	format(text, sizeof text, "{3399FF}№ фракции\tИмя\t\t\t\tФракция{FFFFFF}");

	for(new i = 0; i < rows; i++)
	{
		new name[21],
			user_id = cache_get_field_content_int(i, "id"),
			team = cache_get_field_content_int(i, "team");

		cache_get_field_content(i, "name", name);

		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s%s\t%s", team, name, strlen(name) > 14 ? "\t" : "\t\t", GetTeamName(team));
		strcat(text, fmt_text);
		SetPlayerListitemValue(playerid, i+1, user_id);
	}

	cache_delete(result);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST, "{FFD83D}Список лидеров", text, "Закрыть", "");
	return 1;
}

CMD:liclist(playerid)
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 6) continue;

		format(fmt_text, sizeof fmt_text, "\nПравительство - Лицензёр - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Лицензёры онлайн", list, "Закрыть", "");

	return 1;
}

CMD:adlist(playerid, params[])
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 7) continue;

		format(fmt_text, sizeof fmt_text, "\nПравительство - Адвокат - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Адвокаты онлайн", list, "Закрыть", "");

	return 1;
}
CMD:debtorsell(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 6) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 6 ранга");

	IntfDialogCallRemote
	(
		playerid, DIALOG_DEBTOR_SELL_LIST, DIALOG_STYLE_LIST,
		"Выберите действие",
		"1. Выселить должника из жилья\n\
		2. Забрать предприятие у должника\n\
		3. Забрать АЗС у должника",
		"Далее", "Закрыть"
	);
	return 1;
}

CMD:debtorlist(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "Функция доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 3) return SendClientMessage(playerid, 0xCECECEFF, "Команда доступна сотрудникам правительства с 3 ранга");

	IntfDialogCallRemote
	(
		playerid, DIALOG_DEBTORLIST, DIALOG_STYLE_LIST,
		"Выберите тип собственности",
		"1. Жилье\n\
		2. Предприятия\n\
		3. Заправочные станции",
		"Выбрать", "Закрыть"
	);
	return 1;
}
CMD:smenu(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return SendClientMessage(playerid, 0x999999FF, "Функция доступна советникам правительства");

	IntfDialogCallRemote
	(
		playerid, DIALOG_ADVISOR_MENU, DIALOG_STYLE_LIST,
		"{33CC66}Меню советника",
		"1. Показать/скрыть бейджик\n\
		2. Показать/скрыть рацию организации\n\
		3. Показать состав организации",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:givelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 6) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только лицензерам");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givelic [id игрока] [идентификатор лицензии] [цена]");
		SendClientMessage(playerid, 0x999999FF, "Индификаторы лицензий: 1 - Вод. права базового уровня | 2 - Вод. права профессионального уровня | 3 - На оружие");
		return 1;
	}

	extract params -> new to_player, lic_id, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!(1 <= lic_id <= 3)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор лицензии");

	switch(lic_id)
	{
		case 1:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC) == 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение базового уровня");
		}
		case 2:
		{
			if(GetPlayerData(to_player, P_DRIVING_LIC_PROF) == 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на вождение профессионального уровня");
		}
		case 3:
		{
			if(GetPlayerData(to_player, P_WEAPON_LIC) == 1)
				return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть лицензия на оружие");
		}
	}

	new lic_price_limits[3][2] =
	{
		{25000000, 	50000000},
		{50000000, 100000000},
		{100000000, 200000000}
	};

	if(!(lic_price_limits[lic_id - 1][0] <= price <= lic_price_limits[lic_id - 1][1]))
	{
		new fmt_text[60];

		format(fmt_text, sizeof fmt_text, "Стоимость лицензии должна быть от %d до %d рублей",
		lic_price_limits[lic_id - 1][0], lic_price_limits[lic_id - 1][1]);

		SendClientMessage(playerid, 0x999999FF, fmt_text);

		return 1;
	}

	if(!VerifyIntString(QueryPlayerBalance(to_player), price))
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет такой суммы денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_LIC, lic_id, price);

	return 1;
}

CMD:free(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 7) return SendClientMessage(playerid, 0x999999FF, "Функция доступна только адвокатам");

	extract params -> new to_player, price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /free [id игрока] [цена]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок слишком далеко");

	if(!GetPlayerData(to_player, P_JAIL))
		return SendClientMessage(playerid, 0x999999FF, "Игрок не находится в тюрьме");

	if(!(500 <= price <= 50000))
		return SendClientMessage(playerid, 0x999999FF, "Стоимость должна быть от 500 до 50.000 рублей");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_JAIL_FREE, price);

	return 1;
}

CMD:medhelp(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	//if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /medhelp [id игрока] [стоимость лечения]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Пациент слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не лежит в больнице");
	if(!(100 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 100 до 5000 рублей");
	if(!VerifyIntString(QueryPlayerBalance(to_player), price)) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_MEDHELP, price);
	return 1;
}

CMD:out(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /out [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Игрок должен находиться на лечении");

	ClearMedBed(to_player, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(to_player, P_HOSPITAL, false);

	SetPlayerChatBubble(to_player, "Выписан", 0x66CC00FF, 10.0, 2000);

	new fmt_msg[60];
	format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s выписал Вас из больницы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выписали %s из больницы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	//if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /heal [id игрока] [цена за лечение]");
	extract params -> new to_player, price;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	//if(!IsPlayerInRangeOfPoint(to_player, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0xCECECEFF, "Вам пациент должег тоже быть в больнице.");
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_ORG_CARS && org_cars_canvasdev[GetVehicleData(vehicleid, V_ACTION_ID)][ORG_CARS_ID] != TEAM_HOSPITAL || GetPlayerVehicleID(to_player) != vehicleid) return SendClientMessage(playerid, 0x999999FF, "Вы или Ваш пациент находитесь не в машине скорой помощи");
	if(!(0 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 0 до 5000 рублей");
	if(!VerifyIntString(QueryPlayerBalance(to_player), price)) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_HEAL, price);
	return 1;
}

CMD:changesex(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /changesex [id игрока] [стоимость операции]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен находиться на стационарном лечении");
	if(!(500000 <= price <= 1000000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость операции должна быть от 500000 до 1000000 рублей");
	if(!VerifyIntString(QueryPlayerBalance(to_player), price)) return SendClientMessage(playerid, 0x999999FF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CHANGE_SEX, price);
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && IsPlayerAdminLevel(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:putpl(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в автомобиле");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0x999999FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:su(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /su [id игрока] [причина]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, criminalid, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(GetPlayerSuspect(criminalid) >= 6) return SendClientMessage(playerid, 0x999999FF, "Игрок имеет максимальный уровень розыска");

	new fmt_text[255];

	AddPlayerData(criminalid, P_SUSPECT, +, 1);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", GetPlayerData(criminalid, P_SUSPECT));

	format(fmt_text, sizeof fmt_text, "%s объявил Вас в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(playerid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы объявили %s в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(criminalid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] объявил %s[%d] в розыск [%d/6], причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid, GetPlayerSuspect(criminalid), message);

	SendMessageToPoliceTeam(fmt_text, 0x3399FFFF, playerid);

	return 1;
}

CMD:clear(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /clear [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(criminalid)) return SendClientMessage(playerid, 0x999999FF, "Игрок не имеет розыска");

	new fmt_text[255];

	SetPlayerData(criminalid, P_SUSPECT, 0);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	format(fmt_text, sizeof fmt_text, "%s удалил Вас из базы разыскиваемых", GetPlayerNameEx(playerid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы удалили %s из базы разыскиваемых", GetPlayerNameEx(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] удалил %s[%d] из базы разыскиваемых людей", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arrest [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerData(criminalid, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "Игрок не в наручниках");

	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 219.7982,1369.9645,12.1993)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться у здания Отделения Полиции");

	ArrestPlayer(criminalid, GetPlayerSuspect(criminalid) * 10);

	new stars = GetPlayerSuspect(criminalid);
    new reward = stars * 500000;

    ModifyCashBalance(playerid, reward);

	SetPlayerData(criminalid, P_SUSPECT, 0);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	SetPlayerSuspectInit(criminalid);

	AddPlayerAchiv(playerid, 40);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Вы задержали преступника %s[%d] и заключили его под стражу", GetPlayerNameEx(criminalid), criminalid);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] задержал Вас и заключил под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid);
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] заключил %s[%d] под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SendClientMessage(criminalid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	SetPlayerSpecialAction(criminalid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(criminalid, A_OBJECT_SLOT_HAND);
	SetPlayerData(criminalid, P_CUFFED, false);

	return 1;
}

CMD:m(playerid, params[])
{
    if(GetPlayerTeamEx(playerid) != TEAM_MVD) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");
    if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /m [текст]");

    STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "<< %s %s[%d]: %s >>", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, STRING_GLOBAL, 0xFFFF00FF, 60.0);

    return 1;
}

CMD:takelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_MVD) return SendClientMessage(playerid, 0x999999FF, "Вы не работник МВД");

	extract params -> new to_player, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takelic [id игрока] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите причину");

	if(!GetPlayerData(to_player, P_DRIVING_LIC) && !GetPlayerData(to_player, P_DRIVING_LIC_PROF))
		return SendClientMessage(playerid, 0x999999FF, "У игрока нет прав");

	new fmt_text[128];
	format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	new licType[16];
	if(GetPlayerData(to_player, P_DRIVING_LIC_PROF))
	{
		SetPlayerData(to_player, P_DRIVING_LIC_PROF, 0);
		UpdatePlayerDatabaseInt(to_player, "driving_lic_prof", 0);
		format(licType, sizeof licType, "проф.");
	}
	else if(GetPlayerData(to_player, P_DRIVING_LIC))
	{
		SetPlayerData(to_player, P_DRIVING_LIC, 0);
		UpdatePlayerDatabaseInt(to_player, "driving_lic", 0);
		format(licType, sizeof licType, "базовые");
	}

	format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] %s права, причина: %s", 
		GetPlayerJobAndRankName(playerid),
		GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player,
		licType,
		message
	);
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	new fmt_text[40];

	string_dialog = "Розыск\tИмя{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!GetPlayerSuspect(i)) continue;
		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s", GetPlayerSuspect(i), GetPlayerNameEx(i));
		strcat(string_dialog, fmt_text);
	}

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{ffcd00}Список разыскиваемых", string_dialog, "Закрыть", "");

	return 1;
}

CMD:setmark(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmark [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPlayerSuspect(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не в розыске");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	EnablePlayerGPS(playerid, 37, x, y, z, "{66cc33}В последний раз преступника видели на отмеченном месте");

	return 1;
}

CMD:delticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_MVD) return SendClientMessage(playerid, 0x999999FF, "Вы не сотрудник МВД");

	extract params -> new ticket_id; else return SendClientMessage(playerid, 0xCECECEFF, "/delticket [номер штрафа]");

	new query[144],
		Cache: result,
		rows,
		uid,
		reason[64],
		player_name[21],
		status,
		amount;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d", ticket_id);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	uid = cache_get_field_content_int(0, "uid");
	status = cache_get_field_content_int(0, "status");
	amount = cache_get_field_content_int(0, "amount");

	cache_get_field_content(0, "description", reason);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT name FROM accounts_canvasdev WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	cache_get_row(0, 0, player_name);

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "Штраф с таким номером не найден");

	if(status) return SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить уже оплаченный штраф");

	mysql_format(mysql, query, sizeof query, "DELETE FROM tickets WHERE id=%d", ticket_id);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы удалили штраф #%d из базы данных МВД", ticket_id);
	SendClientMessage(playerid, 0x66CC33FF, query);

	format(query, sizeof query, "%s %s[%d] удалил штраф #%d (%s,%s,%d руб) из базы данных МВД", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, ticket_id, player_name, reason, amount);

	SendMessageToTeam(GetPlayerTeamEx(playerid), query, 0xFFC000FF, playerid);

	return 1;
}

CMD:mytickets(playerid, params[])
{
	type_page_cars[playerid] = 0;
	page_cars[playerid] = 1;
	ShowOwnableTickets(playerid, page_cars[playerid], 1);
	return 1;
}

CMD:buygarage(playerid, params[])
{
	if(GetPlayerOwnableGarage(playerid) + 1 > GetPlayerGarageSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество гаражей.");

	new garage_id = GetNearestGarage(playerid, 4.0);

	new houseid = GetNearestHouse(playerid, 40.0);
	if(houseid != -1) if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "* Вы не можете купить данный гараж, данный гараж может только купить владелец дома.");

	if(garage_id != -1)
	{
		SetPVarInt(playerid, "buy_garage_id", garage_id);

		new fmt_type[30];
		if(GetGarageData(garage_id, G_TYPE) == 1) format(fmt_type, sizeof fmt_type, "Эконом");
		if(GetGarageData(garage_id, G_TYPE) == 2) format(fmt_type, sizeof fmt_type, "Средний");
		if(GetGarageData(garage_id, G_TYPE) == 3) format(fmt_type, sizeof fmt_type, "Элитный");

		new fmt_str[356];
		format
		(
			fmt_str, sizeof fmt_str,
			"{ffffff}Класс:\t\t\t\t{4C6475}%s\n"\
			"{ffffff}Стоимость:\t\t\t{6A6CAD}%s руб\n"\
			"{ffffff}Плата за аренду:\t\t{6A6CAD}%s руб в день\n\n"\
			"{797B6A}Вы уверены что хотите купить этот гараж?",
			fmt_type,
			formatInt(GetGarageData(garage_id, G_PRICE)),
			formatInt(GetGarageData(garage_id, G_RENT_PRICE))
		);
		IntfDialogCallRemote(playerid, DIALOG_GARAGE_BUY, DIALOG_STYLE_MSGBOX, "{FFD83D}Покупка гаража", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xFF6600FF, "Вы должны быть рядом с гаражем, который хотите купить");

	return 1;
}

CMD:sellgarage(playerid, params[])
{
	new query[94],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного гаража во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");

		format(query, sizeof query, "{FFFFFF}-Гараж: %d\n", biz_id);

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_SELL_GARAGE_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите гараж",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:garage(playerid, params[])
{
	new query[94],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного гаража во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");

		format(query, sizeof query, "{FFFFFF}-Гараж: %d\n", biz_id);

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_INFO_GARAGE_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите гараж",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);

	return 1;
}

CMD:gotogarage(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	 
	extract params -> new garage_id; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /togarage [номер гаража]");

	if(!(0 <= garage_id <= g_garage_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данного гаража не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetGarageData(garage_id, G_EXIT_POS_X),
		GetGarageData(garage_id, G_EXIT_POS_Y),
		GetGarageData(garage_id, G_EXIT_POS_Z),
		GetGarageData(garage_id, G_EXIT_ANGLE)
	);

	new fmt_text[65];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к гаражу {FFD83D}№%d", garage_id);
	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:addgarage(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new price, rent_price, type; else return SendClientMessage(playerid, COLOR_WHITE, "{FFD83D}Используйте:{"#cW"} /addgarage [стоимость] [Ежедневная плата] [тип]");
	new fmt_text[300];

	if(price < 1) return SendClientMessage(playerid, 0xFF6600FF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0xFF6600FF, "Стоимость ежедневной платы не может быть меньше 1");

	if(type < 1 || type > 3) return SendClientMessage(playerid, 0xFF6600FF, "1 - низкий, 2 - средний, 3 - элитный");

	new Cache: result,
		idx = g_garage_loaded;

	GetPlayerPos(playerid, g_garage[idx][G_POS_X], g_garage[idx][G_POS_Y], g_garage[idx][G_POS_Z]);

	SetGarageData(idx, G_PRICE,			price);
	SetGarageData(idx, G_RENT_PRICE,	rent_price);
	SetGarageData(idx, G_TYPE,	type);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO garage \
		(price, rent_price, x, y, z, type)\
		VALUES ('%d', '%d', '%f', '%f', '%f', '%d')",
		price, rent_price,
		GetGarageData(idx, G_POS_X),
		GetGarageData(idx, G_POS_Y),
		GetGarageData(idx, G_POS_Z),
		type
	);

	result = mysql_query(mysql, fmt_text, true);

	SetGarageData(idx, G_SQL_ID,			cache_insert_id());

	cache_delete(result);

	g_garage_loaded ++;

	UpdateGarage(idx);

	SetGarageData(idx, G_LABEL, CreateDynamic3DTextLabel(" - ", 0xFFFF00FF, GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z) + 0.5, 6.50));

	UpdateGarageLabel(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] создал гараж №%d", GetPlayerNameEx(playerid), playerid, idx);

	SendMessageToAdmins(fmt_text, COLOR_GREY);

	SendClientMessage(playerid, -1, "{FFD83D}Используйте {"#cW"}/set_garage_exit, чтобы установить точку выхода с гаража");
	SendClientMessage(playerid, -1, "{FFD83D}Используйте {"#cW"}/set_garage_car, чтобы установить точку выезда в авто с гаража");
	return 1;
}
CMD:set_garage_pick(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new garage_id; else return SendClientMessage(playerid, COLOR_WHITE, "{FFD83D}Используйте:{"#cW"} /set_garage_exit [id гаража]");

	if(!(0 <= garage_id <= g_garage_loaded)) return SendClientMessage(playerid, 0xFF6600FF, "Данного гаража не существует на сервере");

	new garage = garage_id - 1;

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE garage SET x=1000 WHERE id=%d",
		GetGarageData(garage, G_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у гаража {FFD83D}№%d", garage + 1);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:set_garage_exit(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new garage_id; else return SendClientMessage(playerid, COLOR_WHITE, "{FFD83D}Используйте:{"#cW"} /set_garage_exit [id гаража]");

	if(!(0 <= garage_id <= g_garage_loaded)) return SendClientMessage(playerid, 0xFF6600FF, "Данного гаража не существует на сервере");

	new garage = garage_id;

	GetPlayerPos(playerid, g_garage[garage][G_EXIT_POS_X], g_garage[garage][G_EXIT_POS_Y], g_garage[garage][G_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_garage[garage][G_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE garage SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetGarageData(garage, G_EXIT_POS_X),
		GetGarageData(garage, G_EXIT_POS_Y),
		GetGarageData(garage, G_EXIT_POS_Z),
		GetGarageData(garage, G_EXIT_ANGLE),
		GetGarageData(garage, G_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у гаража {FFD83D}№%d", garage);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:set_garage_car(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new garage_id; else return SendClientMessage(playerid, COLOR_WHITE, "{FFD83D}Используйте:{"#cW"} /set_garage_car [id гаража]");

	if(!(0 <= garage_id <= g_garage_loaded)) return SendClientMessage(playerid, 0xFF6600FF, "Данного гаража не существует на сервере");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в транспорте");

	new vehicleid = GetPlayerVehicleID(playerid);

	new garage = garage_id;

	GetVehiclePos(vehicleid, g_garage[garage][G_CAR_POS_X], g_garage[garage][G_CAR_POS_Y], g_garage[garage][G_CAR_POS_Z]);
	GetVehicleZAngle(vehicleid, g_garage[garage][G_CAR_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE garage SET car_x='%f', car_y='%f', car_z='%f', car_angle='%f' WHERE id=%d",
		GetGarageData(garage, G_CAR_POS_X),
		GetGarageData(garage, G_CAR_POS_Y),
		GetGarageData(garage, G_CAR_POS_Z),
		GetGarageData(garage, G_CAR_ANGLE),
		GetGarageData(garage, G_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты спавна авто у гаража {FFD83D}№%d", garage);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:ptickets(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_MVD) return SendClientMessage(playerid, 0x999999FF, "Вы не работник МВД");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ptickets [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(to_player));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xFFCD00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | %d руб | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xFFCD00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:skill(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /skill [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
    
	SetPVarInt(playerid, "to_player", to_player);

	IntfDialogCallRemote(playerid, DIALOG_SKILL_SHOW, DIALOG_STYLE_LIST,"Навыки","{FFFFFF}1. Владение оружием\n{FFFFFF}2. Работа\n{FFFFFF}3. Физические характеристики\n{FFFFFF}4. Другое","Выбрать", "Закрыть");
	return 1;
}

cmd:diagnostics(playerid)
{
	new Float:POS[5];
	new vehicleid = GetNearestVehicleID(playerid, 6.0);
	if(vehicleid == -1)
		return SCM(playerid, 0xCECECEFF, "* Вы должны находится около Т/С");
	
    GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, POS[0], POS[1], POS[2]))
	    return SCM(playerid, 0xCECECEFF, "* Вы должны находится около капота");

	if(GetIteam(playerid, 254) < 1) return SCM(playerid, 0xCECECEFF, "У вас нет набора для диагностики. Он есть в магазине 24/7");

	new fmt_text[512];
	
	new model_id = GetVehicleData(vehicleid, V_MODELID);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	format(fmt_text, sizeof fmt_text, "[\"%s\", \"\", \"Неопределенный\", %d, \"%s\", %d, \"%s\", 3]", GetVehicleInfo(model_id, VI_NAME), formatInt(GetVehicleInfo(model_id, VI_PRICE)), GetPlayerNameBySqlID(GetOwnableCarData(index, OC_OWNER_ID)), GetVehicleData(vehicleid, V_MILEAGE), GetVehicleInfo(model_id , VI_NAME));

	CEF_CREATE(playerid, 2, 4, "Diagnostics", fmt_text);

    //BattlePass_Completingtasks(playerid, 1, 4);

	GiveIteam(playerid, 254, 0, 1, 0);
	SCM(playerid, 0xCECECEFF, "Вы начали диагностику автомобиля. С вас было снято 1 использование набора");

	return 1;
}

CMD:ad(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона, по которому могут с Вами связаться");

	new fmt_text[144];

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		format(fmt_text, sizeof fmt_text, "Ваше объявление уже находится в очереди под {00CC99}номером %d", GetAdvertIndexInQueue(idx));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		return 1;
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ad [текст объявления]");

	if(!VerifyIntString(QueryPlayerBalance(playerid), ADVERT_SEND_PRICE))
		return SendClientMessage(playerid, 0x999999FF, "Для отправки объявления необходимо иметь 2500 руб");

    if(strfind(params,"%s") != -1) return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	if(strfind(params,"%ss") != -1) return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");

	SendAdvert(playerid, params);

	ModifyCashBalance(playerid, -2500, "Отправка объявления", true, true);

	format(fmt_text, sizeof fmt_text, "Текст: %s", params);
	SendClientMessage(playerid, 0x00CC99FF, fmt_text);

	SendClientMessage(playerid, -1, "Ваше объявление было добавлено в очередь для публикации");
	SendClientMessage(playerid, -1, "Оставайтесь на связи, в противном случае объявление будет удалено из очереди");
	return 1;
}

CMD:edit(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_TRK) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	if(GetPlayerData(playerid, P_MUTE)) return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать данную функцию пока не пройдёт блокировка чата");

	if(!g_advert_created) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	new fmt_text[360],
		bool: ad_is_found;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		format
		(
			fmt_text, sizeof fmt_text,
			"{FFFFFF}Отправитель: %s\nТекст: {FFCD00}%s\n\n"\
			"{FFFFFF}Введите новый текст для этого объявления или оставьте поле пустым если редактирование не нужно\n"\
			"Вы также можете отклонить объявление с причиной, или использовать замену слов: [old]=[new]",
			GetPlayerNameEx(GetAdvertData(idx, A_CREATOR)), GetAdvertData(idx, A_TEXT)
		);

		IntfDialogCallRemote(playerid, DIALOG_ADVERT_EDIT, DIALOG_STYLE_INPUT, "{00CC00}Публикация объявления", fmt_text, "Отправить", "Отклонить");

		SetAdvertData(idx, A_EDIT, true);

		SetPVarInt(playerid, "advert_id", idx);

		ad_is_found = true;

		break;
	}

	if(!ad_is_found) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	return 1;
}

CMD:t(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_TRK) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!GetPVarInt(playerid, "efir")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /t [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ТРК «Ритм»] %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:u(playerid, params[])
{
	if(!GetPVarInt(playerid, "radio_mic")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /u [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ТРК «Ритм»] Гость %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:givemic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_TRK) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemic [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!GetPVarInt(to_player, "radio_mic"))
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_MIC);

	else
	{
		new fmt_text[128];

		format(fmt_text, sizeof fmt_text, "%s %s[%d] отключил Вас от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы отключили %s[%d] от радио-эфира", GetPlayerNameEx(to_player), to_player);
		SendClientMessage(playerid, 0x3399FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "[СМИ] %s %s[%d] отключил %s[%d] от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

		SetPVarInt(to_player, "radio_mic", 0);
	}

	return 1;
}

CMD:efir(playerid)
{
    if(GetPlayerTeamEx(playerid) != TEAM_TRK) return SendClientMessage(playerid, 0xFF6600FF, "Вам недоступна данная функция");
    if(!(GetPlayerJob(playerid) > 4)) return SendClientMessage(playerid, 0xFF6600FF, "Функция доступна с 4 ранга");
    switch(GetPVarInt(playerid, "efir"))
    {
        case 0:
        {
            SetPVarInt(playerid, "efir", 1);
            SendClientMessage(playerid, 0x33FF33AA, "Вы успешно подключились к эфиру");
            SendClientMessage(playerid, 0x33FF33AA, "Отправить сообщение в эфире: {"#cW"}/t");
        }
        case 1:
        {
            SetPVarInt(playerid, "efir", 0);
            SendClientMessage(playerid, 0xFF6666FF, "Вы успешно отключились от эфира");
        }
    }

    return 1;
}

CMD:setspeed(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "* Вы не находитесь в транспорте");

	extract params -> new Float: speed; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setspeed [кол-во скорости]");

	new vehicleid = GetPlayerVehicleID(playerid);

	SetVehicleSpeed(vehicleid, speed);

	SendClientMessage(playerid, 0xCECECEFF, "Скорость изменена");

	return 1;
}

CMD:pcode(playerid, params[])
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_PROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"Промокод",
		"{FFFFFF}Чтобы использовать промокод введите его в поле ниже:\n\n"\
		"{888888}Примечание: Используйте команду /plist чтобы посмотреть\n"\
		"сколько осталось отыграть до получения бонуса",
		"Ввести", "Закрыть"
	);
	return 1;
}

CMD:afly(playerid, params[])
{
	if(GetPlayerData(playerid, P_CMD_afly) == 0)
	{
    	if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 2) return 1;
	}
	
	new fmt_text[55],
		bool: fly_status;

	if(StartFly(playerid))
		fly_status = true;

	else
		StopFly(playerid);

	format(fmt_text, sizeof fmt_text, "Вы %s Fly-режим", fly_status ? "включили" : "выключили");
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:mcuff(playerid, params[])
{
    if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}
CMD:muncuff(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:mputpl(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в автомобиле");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0xFF6600FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:down(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /down [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

 	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z - 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);
	return true;
}

CMD:tplist(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    if(GetPlayerInterior(playerid) == 0)
	{
		IntfDialogCallRemote
	    (
		    playerid, DIALOG_TPLIST, DIALOG_STYLE_LIST,
		    "{9966FF}ADMIN TELEPORT",
		    "[1] - Города\n"\
		    "[2] - Казино\n"\
		    "[3] - Работы\n"\
		    "[4] - Автосалоны\n"\
		    "[5] - Остальное\n"\
            "[6] - Посёлки",
		    "Выбрать", "Закрыть"
	    );
	}
	else
	{
		GameText(playerid, "Вы находитесь в интерьере", 4000, 2);
	}
	return 1;
}

cmd:take_number(playerid)
{
	new vehicleid;
   	new Float:Distance_ = 50.0;

    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
	    {
		    new iddx = GetVehicleData(i, V_ACTION_ID);
	        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
	        {
				new Float:Distance = D_PlayerVehicle(playerid, i);
		    	if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
	            }
	        }
        }
	}
	if(Distance_ == 50.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");

	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new Float: POS[5];

	GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BONNET, POS[0], POS[1], POS[2], POS[3], POS[4]);
	if(IsPlayerInRangeOfPoint(playerid, 4.0, POS[0], POS[1], POS[2]))
	{
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

		new fmt_text[505];

		if(!strcmp(g_ownable_car[index][OC_NUMBER], "------")) return SCM(playerid, 0xCECECEFF, "На этом т/с нет номеров");
		
		SCM(playerid, -1, "Вы сняли номера с личного тс");
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

		CreateItemsCarNumber(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_REGION), GetOwnableCarData(index, OC_NUMBERTYPE), -1, -1, 0, 1);

		SetOwnableCarData(index, OC_NUMBERTYPE, 0);
		format(g_ownable_car[index][OC_NUMBER], 10, "------");
		format(g_ownable_car[index][OC_REGION], 10, "0");
		format(g_vehicle_data[vehicleid][V_NUMBER], 10, "------");
		format(g_vehicle_data[vehicleid][V_REGION], 10, "0");

		SetVehicleNumber(vehicleid, 0, "", "");
		PACKET_215(playerid, 32, vehicleid, 0, "", "");

		mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='------', region='0', typenumber=0 WHERE id=%d LIMIT 1",GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, fmt_text, false);
	}
	else return SCM(playerid, -1, "Вы должны быть возле капота");
	return 1;
}

CMD:spoff(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	HideSpecmenuTD(playerid);
    StopSpectate(playerid);
	SendClientMessage(playerid, 0xB0C4DEFF, "Вы покинули режим зрителя");

	return 1;
}

CMD:alldelveh(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new vehicles_count;

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
		{
			DestroyVehicle(i);
		}

	    vehicles_count++;
	}
	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "[A] %s [%d] удалил автомобили созданные администраторами", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, COLOR_GREY);
	return 1;
}
CMD:sban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sban [id игрока] [срок в днях или -1] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!(-1 <= ban_time <= 30) || ban_time == 0) return SendClientMessage(playerid, 0xFF6600FF, "Cрок бана от 1 до 30 или -1");

	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Нельзя забанить администратора выше по рангу");

	new fmt_text[200];

    format(fmt_text, sizeof fmt_text, "[A] %s [%d] забанил игрока %s без лишнего шума. Причина: %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), reason);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	new query[244];

	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET a_sban = a_ban+1 WHERE name = '%e'", GetPlayerNameEx(playerid));
	mysql_query(mysql, query, false);

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	BanEx(to_player, reason);

	return 1;
}
CMD:mp_gun(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new gun, ammo, radius;

	if(sscanf(params, "iii", radius, gun, ammo)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_gun [радиус] [id оружия] [патроны]");
	if(radius < 1 || radius > 200) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 200");

	if(gun < 1 || gun > 46 || gun == 38 || gun == 36 || gun == 35 || gun == 37) return SendClientMessage(playerid, 0xFF6600FF, "Неверный ID оружия");

	if(gun == 27 || gun == 4 || gun == 19
		|| gun == 20 || gun == 21 || gun == 35 || gun == 36 || gun == 39 || gun == 40 || gun == 44 || gun == 45
		|| gun == 38 || gun == 32 || gun == 28 || gun == 18 || gun == 37 || gun == 16 || gun == 9)
	{
		return SendClientMessage(playerid, 0x999999FF, "Данный id оружия запрещен для выдачи!");
	}

	if(ammo < 1 || ammo > 999) return SendClientMessage(playerid, 0xFF6600FF, "Патронов может быть от 1 до 999");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new string[144];
	new players;
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		GiveWeapon(i, gun, ammo);
		format(string, sizeof string, "[MP]: Вы получили оружие %s [%d] и %d пт.", GetWeaponName(gun), gun, ammo);
		SendClientMessage(i, 0xCECECEFF, string);
		players++;
	}
	format(string, sizeof string, "Оружие выдано %i игрокам в радиусе %i метров", players, radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:mp_skin(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new skin_id, radius;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_skin [радиус] [id скина]");
	if(radius < 1 || radius > 200) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 20 до 200");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	new string[144];
	new players;
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		SetPlayerSkin(i, skin_id);
	}
	format(string, sizeof string, "Скин выдан %i игрокам в радиусе %i метров", players + 1, radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
CMD:mp_freeze(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_freeze [радиус]");

	extract params -> new radius;

	if(radius < 1 || radius > 100) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 1 до 100");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		TogglePlayerControllable(i, false);
		SendClientMessage(i, COLOR_WHITE, "Администратор заморозил Вас");
	}
	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно заморозили игроков в радиусе");
	return 1;
}

CMD:mp_unfreeze(playerid,params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mp_unfreeze [радиус]");

	extract params -> new radius;

	if(radius < 1 || radius > 100) return SendClientMessage(playerid, 0xFF6600FF, "Радиус от 1 до 100");

	new Float:pos[3];

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	foreach(new i : Player)
	{
		if(!IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2])) continue;
		TogglePlayerControllable(i, true);
		SendClientMessage(i, COLOR_WHITE, "Администратор разморозил Вас");
	}

	SendClientMessage(playerid, COLOR_WHITE, "Вы успешно разморозили игроков в радиусе");

	return 1;
}
CMD:agm(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
 	if(GetPVarInt(playerid,"agm") == 0)
    {
        SetPVarInt(playerid,"agm", 1);
		SetPVarInt(playerid, "medhelp", 2);
        SetPlayerHealth(playerid, 0x7F800000);
        SendClientMessage(playerid, -1, "{ff8c00}Режим бессмертия активирован");
    }
    else
    {
        SetPVarInt(playerid,"agm", 0);
		SetPVarInt(playerid, "medhelp", 0);
        SetPlayerHealth(playerid, 100.0);
        SendClientMessage(playerid, -1, "{ff8c00}Режим бессмертия деактивирован");
    }
  	return 1;
}
CMD:money_log(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xFF6600FF, "Информация: /money_log [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[1512];

	new description[128];

	format(description, sizeof description, "Последние 20 операций денег игрока %s", name);

	format(fmt_text, sizeof fmt_text, "Дата операции\t\tКоличество\tСколько осталось\tПричина\n");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM money_log WHERE uid=%d LIMIT 20", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new time = cache_get_field_content_int(idx, "time"),
				money = cache_get_field_content_int(idx, "money"),
				last_money = cache_get_field_content_int(idx, "last_money"),
				reg_date[6],
				desc[32];

			cache_get_field_content(idx, "description", desc);

			timestamp_to_date(time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

			format(query, sizeof query, "\n%02d.%02d.%d %02d:%02d:%02d\t%d\t%d\t\t%s", reg_date[0], reg_date[1], reg_date[2], reg_date[3], reg_date[4], reg_date[5], money, last_money, desc);
			strcat(fmt_text, query);
		}
	}
	cache_delete(result);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, description, fmt_text, "Закрыть", "");
	return 1;
}

CMD:flip(playerid)
{
    static const	coin_str0[] = "подбросил монетку, выпал",
                    coin_str1[] = "а {66CCFF}\"решка\".", coin_str2[] = " {66CCFF}\"орёл\".";

	new string [MAX_PLAYER_NAME + (sizeof (coin_str0) - 1) + (sizeof (coin_str1) - 1) + 1];

    strcat(string, coin_str0);
    strcat(string, (random(2)) ? (coin_str1) : (coin_str2));

	Action(playerid, string);
    return 1;
}
CMD:idea(playerid, params[])
{
	extract params -> new string: text[144]; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /idea [текст]");

	SetPlayerChatBubble(playerid, text, 0xcececeFF, 25.0, 7000);

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Мысли от %s[%d]: {ffffff}%s", GetPlayerNameEx(playerid), text);
	SendMessageInLocal(playerid, STRING_GLOBAL, 0xcececeFF, 25.0);

	return 1;
}
CMD:svist(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: {ffffff} /svist [ID игрока]");

	Action(playerid, "свистнул");

	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Игрок %s[%d] свистнул Вам", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xb8e994FF, STRING_GLOBAL);

	return 1;
}

CMD:fight(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,4,216.4738,837.3892,1000.9922)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться возле ринга");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fight [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_FIGHT);
	}
	else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");

	return 1;
}

CMD:fightloose(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid,3.5,214.4493,841.5947,1001.695)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на ринге");

	SetPlayerPos(playerid, 209.7499,844.3637,1001.0000);

	SendClientMessage(playerid, 0xFF6600FF, "Вы приняли поражение.");

	return 1;
}

CMD:kiss(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kiss [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(GetPlayerSex(playerid) == GetPlayerSex(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете поцеловать игрока того же пола как и Вы");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_KISS);
	}
	else SendClientMessage(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");
	return 1;
}
CMD:sellsim(playerid, params[])
{
    if(GetPlayerLevel(playerid) < 2) return SendClientMessage(playerid, 0x999999FF, "Вы должны прожить в области минимум 2 года.");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, -2701.6865,-0.0529,1060.9941)) return SendClientMessage(playerid, 0x999999FF, "Вы должны находиться в сотовом салоне");

	if(!strlen(params)) return SendClientMessage(playerid, COLOR_GOLD, "Команда:{"#cW"} /sellsim [ID игрока] [цена]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(price < 1000 || price > 100000000) return SendClientMessage(playerid, 0xFF6600FF, "Цена от 1.000 до 100.000.000");

	if(GetPlayerMoney(to_player) < price) return SendClientMessage(playerid, 0xFF6600FF, "У игрока недостаточно средств");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELLSIM, price);
	return 1;
}

CMD:rmute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rmute [ID игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(!(1 <= mute_time <= 5760)) return SendClientMessage(playerid, 0xFF6600FF, "Время должно быть не меньше 1 и не больше 5760 минут");
	if(GetPlayerData(to_player, P_RMUTE) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У этого игрока уже блокировка репорта");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s заблокировал репорт игроку %s на %d мин.", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
	format(fmt_msg, sizeof fmt_msg, "%s Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_RMUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "rmute", mute_time * 60);

	SendClientMessage(to_player, 0xFF6600FF, "Время до окончания блокировки репорта: /time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[%d] блокировку репорта на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);
	return 1;
}
CMD:unrmute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unrmute [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_RMUTE) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У этого игрока нет блокировки репорта");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял блокировку репорта с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_RMUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "rmute", 0);

	SendClientMessage(to_player, 0xCECECEFF, "Доступ к репорту восстановлен");

	SetPlayerData(playerid, P_AUNRMUTE, GetPlayerData(playerid, P_AUNRMUTE) + 1);
	UpdatePlayerDatabaseInt(playerid, "a_unrmute", GetPlayerData(playerid, P_AUNRMUTE) + 1);

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку репорта у %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);

	return 1;
}

CMD:fly(playerid,params[])
{
    if(IsPlayerAdminLevel(playerid) < 2 && GetPlayerYAdminEx(playerid) < 1) return 1;
	//else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
		
    SetPVarInt(playerid,"spawn_ac",1);

	if(GetPVarType(playerid, "FlyMode"))
	{
	    new inter, world, Float:X, Float:Y, Float:Z, Float:FA;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, FA);
		inter = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);
		SetPVarFloat(playerid, "SpecX", X);
		SetPVarFloat(playerid, "SpecY", Y);
		SetPVarFloat(playerid, "SpecZ", Z);
		SetPVarFloat(playerid, "SpecFA", FA);
		SetPVarInt(playerid, "SpecInt", inter);
		SetPVarInt(playerid, "SpecWorld", world);

		if(GetPlayerData(playerid, P_SKIN) > 0) SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));

		DeletePVar(playerid, "FlyMode");
		CancelEdit(playerid);
		TogglePlayerSpectating(playerid, false);

		DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
		noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
		SetPlayerPos(playerid, X, Y, Z);
		SetPlayerFacingAngle(playerid, FA);
		SetPlayerVirtualWorld(playerid, world);
		SetPlayerInterior(playerid, inter);
		callcmd::return_acsses(playerid);
		
	}
	else
	{
		SetPVarInt(playerid, "SpecBool", 1);
		FlyMode(playerid);
		SetPlayerSkin(playerid, 78);
  		callcmd::return_acsses(playerid);
	}

	return true;
}
CMD:drugs(playerid, params[])
{
	if(GetIteam(playerid, 25) <= 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет наркотиков");
	if(GetPVarInt(playerid, "DrugsTime") > gettime()) return SendClientMessage(playerid, 0xFF6600FF, "Вы недавно употребляли наркотики.. Подождите немного");
	if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xCECECEFF, "Информация: /drugs [кол-во грамм]");
	new string[128];
	if(params[0] > 5)
	{
	    format(string, sizeof(string), "Количество от 1 до 5, сейчас У Вас %i грамм", GetIteam(playerid, 25));
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}

	new Float:health;
	GetPlayerHealth(playerid, health);

	SetPlayerData(playerid, P_HEALTH, health+params[0]*20);
	SetPlayerHealthEx(playerid, health+params[0]*20);

	GetPlayerHealth(playerid, health);
	if(health > 120) return SendClientMessage(playerid, COLOR_GREY, "Вам плохо от наркотиков, пожалуйста подождите");

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
	format(string, sizeof(string), "Вы употребили %i гр. наркотиков. Ваше здоровье: %3.1f", params[0], health);
	SendClientMessage(playerid, 0xCECECEFF, string);

	GiveIteam(playerid, 25, 0,params[0],0);

	//drug_effect_gone_timer[playerid] = 6;

	SetPVarInt(playerid, "DrugsTime", gettime() + 60);

	new fmt_str[124];

	format(fmt_str, sizeof fmt_str, "%s употребил(a) %i грамм наркотиков", GetPlayerNameEx(playerid), params[0]);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	SetPlayerTime(playerid,17,0);
	SetPlayerDrunkLevel(playerid, 3000);
	SetPlayerWeather(playerid, 0);

	return 1;
}

CMD:removegun(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_RED, "Используйте: /removegun [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

    ResetPlayerWeapons(to_player);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] отобрал оружие у игрока %s [%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	return 1;
}
CMD:carpass(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0xFF6600FF, "Ваш личный транспорт не загружен на сервер");
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /carpass [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	ShowOwnableCarPass(to_player, vehicleid);
	SetPVarInt(to_player, "owenrname", playerid);
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xcececeFF, "Используйте: /gotocar [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, false);

	SendClientMessage(playerid, -1, "Вы были телепортированы к авто");

	return 1;
}

CMD:wedding(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 35.0, -1293.4110, 717.4692, 2002.0000)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в церкви");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xcececeFF, "Используйте: /wedding [ID игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	if(GetPlayerBrakEx(playerid) != 0 || GetPlayerBrakEx(to_player) != 0)
	    return SendClientMessage(playerid, 0xFF6600FF, "Вы уже состоите в браке");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_WEDDING);

	return 1;
}

CMD:divorce(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 35.0, -1293.4110, 717.4692, 2002.0000)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в церкви");

	if(GetPlayerBrakEx(playerid) < 1)
 		return SendClientMessage(playerid, 0xFF6600FF, "Вы не состоите в браке");

	new query[144];

	format(query, sizeof query, "Вы развелись своим супругом (супругой)", GetPlayerBrakEx(playerid));
	SendClientMessage(playerid, 0xCECECEFF, query);

  	if(!mysql_errno())
	{
	format(g_player[playerid][P_WIFE_NAME], 61, "", 0);
	}

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET brak='' WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

CMD:houseinfo(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /homeinfo [id жилья]");

	extract params -> new houseid;

	if(!(0 <= houseid <= g_house_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данного дома не существует на сервере");

	new fmt_str[850];

	new string[44];

	format(string, sizeof string, "{"#cGold"}Дом / Квартирка №%d", houseid);

	format(fmt_str, sizeof fmt_str, "{"#cW"}Тип / название:\t\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));

	format
	(
		fmt_str, sizeof fmt_str,
		"%s{"#cW"}Номер дома:\t\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Город / область:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Район:\t\t\t\t\t{AFAFAF}%s\n",
		fmt_str,
		houseid,
		GetCityName(GetHouseData(houseid, H_CITY)),
		GetZoneName(GetHouseData(houseid, H_ZONE))
	);

	format
	(
		fmt_str, sizeof fmt_str,
		"%s{"#cW"}Стоимость:\t\t\t\t{AFAFAF}%s руб\n"\
		"{"#cW"}Дом оплачен на:\t\t\t{AFAFAF}%d/30 дней\n"\
		"{"#cW"}Количество комнат:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Уровень улучшений:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Квартплата:\t\t\t\t{AFAFAF}%d руб в день\n"\
		"{"#cW"}Тип квартплаты:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Статус:\t\t\t\t\t{AFAFAF}%s",
		fmt_str,
		formatInt(GetHouseData(houseid, H_PRICE)),
		GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
		GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
		GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
		GetHouseData(houseid, H_IMPROVEMENTS),
		GetHouseData(houseid, H_IMPROVEMENTS) < 3 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
		GetHouseData(houseid, H_IMPROVEMENTS) < 3 ? ("Обычная") : ("Пониженная"),
		GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
	);
	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, fmt_str, "Закрыть", "");

	return 1;
}

CMD:bizinfo(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bizinfo [id бизнеса]");

	extract params -> new businessid;

	if(!(0 <= businessid <= g_business_loaded-1)) return SendClientMessage(playerid, 0xFF6600FF, "Данного бизнеса не существует на сервере");

	static const
 	music_name[6][9] = {"Отключен", "Звук 1", "Звук 2", "Звук 3", "Звук 4", "Звук 5"};

	if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
	{
		SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
	}

	new string[144];

	format(string, sizeof string, "{"#cGold"}Бизнес №%d", businessid);

	string_dialog[0] = EOS;
	format
	(
		string_dialog, sizeof string_dialog,
		"{"#cW"}Название:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Номер бизнеса:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Владелец:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Город / область:\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Район:\t\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Плата за вход:\t\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Количество продуктов:\t\t{AFAFAF}%d из %d\n"\
		"{"#cW"}Стоимость 1 продукта:\t\t\t{AFAFAF}%d руб\n"\
		"{"#cW"}Уровень улучшений:\t\t\t{AFAFAF}%d\n"\
		"{"#cW"}Баланс предприятия:\t\t\t{AFAFAF}%s руб\n"\
		"{"#cW"}Бизнес арендован на:\t\t\t{AFAFAF}%d/30 дней\n"\
		"{"#cW"}Звук при входе:\t\t\t{AFAFAF}{%s}%s\n"\
		"{"#cW"}Гос. стоимость:\t\t\t{AFAFAF}%s руб\n"\
		"{"#cW"}Аренда помещения:\t\t\t{AFAFAF}%d руб в день\n"\
		"{"#cW"}Тип аренды:\t\t\t\t{AFAFAF}%s\n"\
		"{"#cW"}Статус:\t\t\t\t\t{AFAFAF}%s",
		GetBusinessData(businessid, B_NAME),
		businessid,
		GetBusinessData(businessid, B_OWNER_NAME),
		GetCityName(GetBusinessData(businessid, B_CITY)),
		GetZoneName(GetBusinessData(businessid, B_ZONE)),
		GetBusinessData(businessid, B_ENTER_PRICE),
		GetBusinessData(businessid, B_PRODS),
		GetBusinessMaxProd(businessid),
		GetBusinessData(businessid, B_PROD_PRICE),
		GetBusinessData(businessid, B_IMPROVEMENTS),
		formatInt(GetBusinessData(businessid, B_BALANCE)),
		GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
		GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
		!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
		music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
		formatInt(GetBusinessData(businessid, B_PRICE)),
		GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
		GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Льготная"),
		GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Бизнес закрыт") : ("{66CC33}Бизнес открыт")
	);
	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, string, string_dialog, "Закрыть", "");

	return 1;
}

CMD:unrent(playerid)
{
	if(GetPlayerData(playerid, P_RENT_CAR) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "У вас нет арендованного авто!");
	new veh_id = GetPlayerData(playerid, P_RENT_CAR);
	{
		SetVehicleData(veh_id, V_OWRENT, 0);
		SetVehicleToRespawn(veh_id);
	}
	SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	SendClientMessage(playerid, -1, "Вы успешно отдали арендованное авто обратно");
	return 1;
}

cmd:phone(playerid)
{
	if(GetPlayerPhone(playerid))
    {
        new hour, minute,
	    day, month, year;

	    gettime(hour, minute);
	    getdate(year, month, day);

	    if(GetPVarInt(playerid, "Phone_open") == 0){
		    CEF_CREATE(playerid, 1, 4, "Phone");
		    STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').showPhone('[\"%d:%02d\",\"%d %s\",100,1,1,[7,10,11,8,10,11,9,10,11]]')", hour,minute, day,GetMonthName(month));
		    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    CEF_CREATE(playerid, 1, 2, "client.setCursorStatus(true)"); // на всякий
		    SetTimerEx("UpdatePhoneTimer", 1000, true, "i", playerid);
		    SetPVarInt(playerid, "Phone_open", 1);
		    SCM(playerid, 0xFAAC58FF, "{FFA500}Чтобы скрыть {FFA500}/{FFA500} показать курсор, используйте ALT; чтобы скрыть телефон, нажмите стрелочку вниз");
	    }
	    else{
		    SetPVarInt(playerid, "Phone_open", 0);
		    callcmd::phonehide(playerid);
		    KillTimer(timecarsh[playerid]);
	    }
	}
	else
	{
		SendClientMessage(playerid, 0x999999FF, "* У Вас нет мобильного телефона");
	}
}

CMD:getmygarage(playerid, params[])
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		new price = 300;

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(VerifyIntString(QueryPlayerBalance(playerid), price))
			{
				ModifyCashBalance(playerid, -price, "Метка гаража на GPS", true, true);

				EnablePlayerGPS(playerid, 55, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z), "Местоположение Вашего гаража отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Недостаточно средств");
		}
		else SendClientMessage(playerid, 0xFF6600FF, "На Вашем GPS уже отмечено место");
	}
	else
	{
		SendClientMessage(playerid, 0xFF6600FF, "У Вас нет гаража");
	}

	return 0;
}

CMD:jetpack(playerid,  params[])
{
	if(IsPlayerAdminLevel(playerid) < 2) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	if(sscanf(params, "d", params[0]))
		return SendClientMessage(playerid, 0xf6e58dAA, "Используйте: {ffffff}Введите: /jetpack [id игрока]");

    SetPlayerSpecialAction(params[0],SPECIAL_ACTION_USEJETPACK);

	SetPVarInt(playerid, "player_have_jetpack", 1);

    return 1;
}

CMD:alock(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /alock [id транспорта]");
	extract params -> new type;

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "Данного транспорта не существует на сервере");

	new status = GetVehicleParam(vehicleid, V_LOCK);
	if(status)
	{
		if(type == 1)
		{
			Action(playerid, "открыл чужой транспорт", _, true);
		}
	}
	else
	{
		if(type == 1)
		{
			Action(playerid, "закрыл чужой транспорт", _, true);
		}
	}
	SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_ON);

	return 1;
}

CMD:delveh(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4 && GetPlayerYAdminEx(playerid) < 1) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /delveh [id авто]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "Данного транспорта не существует на сервере");

	DestroyVehicle(vehicleid);

	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xFF6600FF, "Этим можно пользоваться со 2 уровня");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmygarage [id игрока] [стоимость]");

	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(price < 1)
		return SendClientMessage(playerid, 0xFF6600FF, "Укажите стоимость продажи");
	
	if((GetPlayerOwnableGarage(to_player) + 1) > GetPlayerGarageSlots(to_player)) 
		return SendClientMessage(playerid, 0x3399FFFF, "Игрок уже имеете максимально количество гаражей.");

	if(!VerifyIntString(QueryPlayerBalance(to_player), price))
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SetPVarInt(playerid, "Sellprice", price);
	SetPVarInt(playerid, "to_player", to_player);

	new query[94],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного гаража во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");

		format(query, sizeof query, "{FFFFFF}-Гараж: %d\n", biz_id);

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_SELL_MY_GARAGE_LIST, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите гараж",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}

CMD:return_acsses(playerid)
{
	RemovePlayerAttachedObjects(playerid);

	new Float:foffset_x, Float:foffset_y, Float:foffset_z, Float:frot_x, Float:frot_y, Float:frot_z, Float:fscale_x, Float:fscale_y, Float:fscale_z;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_STATUS) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 2) continue;

		new type;
		new boneid = GetPlayerItem(i, PI_INDX);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
		new typeacs = GetPlayerItem(i, PI_TYPEACS);
			
		foffset_x = GetPlayerItem(i, PI_FOFFSET_X);
		foffset_y = GetPlayerItem(i, PI_FOFFSET_Y);
		foffset_z = GetPlayerItem(i, PI_FOFFSET_Z);
		frot_x = GetPlayerItem(i, PI_FROT_X);
		frot_y = GetPlayerItem(i, PI_FROT_Y);
		frot_z = GetPlayerItem(i, PI_FROT_Z);
		fscale_x = GetPlayerItem(i, PI_FSCALE_X);
		fscale_y = GetPlayerItem(i, PI_FSCALE_Y);
		fscale_z = GetPlayerItem(i, PI_FSCALE_Z);

		if(typeacs == 222 || typeacs == 219 || typeacs == 220 || typeacs == 246 || typeacs == 263 || typeacs == 287 || typeacs == 324 || typeacs == 291 || typeacs == 277) type = 1;
		if(typeacs == 181 || typeacs == 182 || typeacs == 183 || typeacs == 184 || typeacs == 185) type = 2;
		if(typeacs == 221 || typeacs == 289) type = 6;
		if(typeacs == 275) type = 3;

		SetPlayerAttachedObject(playerid, boneid, aks_id, type, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z, fscale_x, fscale_y, fscale_z, 0);
	}

	return 1;
}

stock AcsActorActive(playerid, actorid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_STATUS) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 2) continue;

		new slot = GetPlayerItem(i, PI_INDX);
		new aks_id = GetPlayerItem(i, PI_AKS_ID);
			
		new Float:foffset_x = GetPlayerItem(i, PI_FOFFSET_X);
		new Float:foffset_y = GetPlayerItem(i, PI_FOFFSET_Y);
		new Float:foffset_z = GetPlayerItem(i, PI_FOFFSET_Z);
		new Float:frot_x = GetPlayerItem(i, PI_FROT_X);
		new Float:frot_y = GetPlayerItem(i, PI_FROT_Y);
		new Float:frot_z = GetPlayerItem(i, PI_FROT_Z);

		SetActorAttachedObject(playerid, slot, actorid, aks_id, foffset_x, foffset_y, foffset_z, frot_x, frot_y, frot_z);
	}
	return 1;
}

#define MAX_ATTACHED_OBJECTS 15

new AcsActor[MAX_PLAYERS][MAX_ATTACHED_OBJECTS];

stock SetActorAttachedObject(playerid, slot, actorid, modelid, Float:offset_x, Float:offset_y, Float:offset_z, Float:rot_x, Float:rot_y, Float:rot_z)
{
    if(IsValidDynamicObject(AcsActor[playerid][slot]))
    {
        DestroyDynamicObject(AcsActor[playerid][slot]);
        AcsActor[playerid][slot] = INVALID_OBJECT_ID;
    }

    new Float:x, Float:y, Float:z;
    GetActorPos(actorid, x, y, z);

    new Float:angle;
    GetActorFacingAngle(actorid, angle);

    new Float:dx = offset_x * floatcos(angle, degrees) - offset_y * floatsin(angle, degrees);
    new Float:dy = offset_x * floatsin(angle, degrees) + offset_y * floatcos(angle, degrees);
    new Float:dz = offset_z;

    x += dx;
    y += dy;
    z += dz;

    new acsid = CreateDynamicObject(modelid, x, y, z, rot_x, rot_y, rot_z + angle, 33 + playerid, -1, playerid);
    AcsActor[playerid][slot] = acsid;

    return 1;
}

stock RemoveActorAttachedObject(playerid)
{
    for(new slot = 0; slot < MAX_ATTACHED_OBJECTS; slot++)
	{ 
        if(IsValidDynamicObject(AcsActor[playerid][slot]))
        {
            DestroyDynamicObject(AcsActor[playerid][slot]);
            AcsActor[playerid][slot] = INVALID_OBJECT_ID;
        }
	}
    return 1;
}

CMD:vipmute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");
	 
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vipmute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= mute_time <= 5760)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 5760 минут");
	if(GetPlayerData(to_player, P_VMUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
	if(IsPlayerAdminLevel(to_player) > IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s заблокировал игроку VIP чат %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_VMUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "vmute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана VIP чата: {CCCC00}/time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[%d] блокировку вип чата на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);

	return 1;
}

CMD:unvipmute(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unvipmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_VMUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");

	new fmt_msg[126];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s снял блокировку VIP чата с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF0000AA, fmt_msg);

	SetPlayerData(to_player, P_VMUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "vmute", 0);

	SendClientMessage(to_player, 0x66CC00FF, "Доступ в VIP чат восстановлен");

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку VIP чата у %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_msg);

	return 1;
}

CMD:car_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /car_slot [id игрока] [кол-во слотов]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(!(0 <= slots <= 40)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень слотов от 0 до 15");

	AddPlayerData(to_player, P_CAR_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));

	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Администратор %s[%d] добавил игроку %s[%d] %d слотов", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);

	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Администратор %s[%d] добавил вам %d слотов", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, STRING_GLOBAL);
	return 1;
}

CMD:rem(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid,COLOR_RED,"Вы не в транспортном средстве!");

    if(remen[playerid] == 0)
	{
		Action(playerid, "пристегнул ремень безопасности");
		GameText(playerid, "~g~Ремень безопасности пристегнут", 4000, 1);
		remen[playerid] = 1;
	}
	else if(remen[playerid] == 1)
	{
		Action(playerid, "отстегнул ремень безопасности");
		GameText(playerid, "~r~Ремень безопасности расстегнут", 4000, 1);
     	remen[playerid] = 0;
	}
    return true;
}
CMD:alist(playerid, params[])
{
	new query[100];
	new Cache: result;

	new fmt_text[912];

	format(fmt_text, sizeof fmt_text, "{"#cW"}Наказание\t{"#cW"}Дата\t\t{"#cW"}Выдал\t{"#cW"}Причина\n");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM alogs WHERE acc_id=%d LIMIT 10", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new time = cache_get_field_content_int(idx, "time"),
				reason[32],
				type[32],
				adm_name[32];

 			new year, month, day;
			new hour, minute, second;

			timestamp_to_date(time, year, month, day, hour, minute, second);

			cache_get_field_content(idx, "name_adm", adm_name);
			cache_get_field_content(idx, "type", type);
			cache_get_field_content(idx, "reason", reason);
			format(query, sizeof query, "{"#cW"}%s%s{CECECE}%02d.%02d.%d %02d:%02d:%02d\t\t{"#cW"}%s\t%s\n", type, strlen(type) > 3 ? "\t\t\t" : "\t\t\t\t", year, month, day, hour - 3, minute, second, adm_name, reason);
			strcat(fmt_text, query);
			IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{"#cGold"}Наказания", fmt_text, "Закрыть", "");
		}
	}
	else
	{
		format(query, sizeof query, "\n{"#cW"}Список Ваших наказаний пуст");
		strcat(fmt_text, query);
		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6600}Наказания", fmt_text, "Закрыть", "");
	}

	cache_delete(result);

	return 1;
}
CMD:watch(playerid)
{
 	if(GetPlayerWatch(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "У Вас нет Apple Watch. Их можно купить в сотовом салоне");
	new hour, minute,
		day, month, year;

	gettime(hour, minute);
	getdate(year, month, day);

	CEF_CREATE(playerid, 1, 2, "openInterface('Watch')");
	new fmt_td_text[300];
	format(fmt_td_text, sizeof fmt_td_text, "interface('Watch').time = '%d:%02d'",hour,minute);
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Watch').date = '%d %s'",day,GetMonthName(month));
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Watch').hoursGameTime = '%d мин'",ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES));
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Watch').dayGameTime = '%d ч %d мин'",ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES));
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Watch').yesterdayGameTime = '%d ч %d мин'",ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES));
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 1)");
	SCM(playerid, -1, "{ccccff}Для закрытия часов используйте: {ffffff}/watch_off");
	
	
	//BattlePass_Completingtasks(playerid, 1, 12);
	return 1;
}
CMD:watch_off(playerid)
{
	CEF_CREATE(playerid, 1, 2, "closeInterface('Watch')");
	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
	return 1;
}

CMD:setleaderoff(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /setleaderoff [имя игрока] [ид фракции]");

	extract params -> new string: name[21], org_id;

	if(!(0 <= org_id <= 10)) return SendClientMessage(playerid, 0xFF6600FF, "Неверный идентификатор фракции.");

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] %s [%d] оффлайн назначил лидером фракции %s игрока %s", GetPlayerNameEx(playerid), playerid, GetTeamName(org_id), name);
	SendMessageToAdmins(fmt_text, COLOR_GREY);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET job=%d WHERE id=%d LIMIT 1", 11, user_id);
	mysql_query(mysql, query, false);

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET team=%d WHERE id=%d LIMIT 1", org_id, user_id);
	mysql_query(mysql, query, false);

	return 1;
}
cmd:phonehide(playerid)
{
	CEF_CREATE(playerid, 1, 2, "interface('Phone').hidePhone()");
    CEF_CREATE(playerid, 1, 2, "client.setCursorStatus(false)"); // на всякий
}
CMD:a_tuning(playerid, params[])
{
 	if(IsPlayerAdminLevel(playerid) < 6) return 1;

	extract params -> new component_id; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /a_tuning [ID компонента]");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны быть в транспорте");

	new vid = GetPlayerVehicleID(playerid);

	PACKET_215(playerid, 17, vid, component_id);

	SendClientMessage(playerid, COLOR_GOLD, "Компонент успешно установлен");

	return true;
}
CMD:sethunger(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player, hunger; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sethunger [id игрока] [количество сытости]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	else if(IsPlayerAdminLevel(playerid) == 1 && to_player != playerid)
		return SendClientMessage(playerid, 0x999999FF, "Администраторам 1-го уровня доступно изменение только своего уровня сытости");

	else if(!(0 <= hunger <= 100)) return SendClientMessage(playerid, 0x999999FF, "Уровень сытости от 0 до 100");

	SetPlayerData(to_player, P_EAT, hunger);
	SetFullness(to_player, hunger);

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s изменил Вам уровень сытости", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили %s уровень сытости", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(IsPlayerAdminLevel(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, " Администратор %s[%d] изменил уровень сытости %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, hunger);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	format(fmt_msg, sizeof fmt_msg, "Установил %s[%d] уровень сытости на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), hunger);
	return 1;
}
CMD:addcar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new to_player, modelid, color_1, color_2;

	if(!(400 <= modelid <= 614) && (!(699 <= modelid <= 699) && (!(793 <= modelid <= 799) && (!(15065 <= modelid <= 15299) && (!(15600 <= modelid <= 15699) && (!(907 <= modelid <= 909) && (!(965 <= modelid <= 965) && (!(999 <= modelid <= 999) && (!(1326 <= modelid <= 1326) && (!(17400 <= modelid <= 17409) && (!(17410 <= modelid <= 17427)))))))))))) return SCM(playerid, 0xCECECEFF, "Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 15600-15699, 17400-17409, 17410-17427");

	if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player)) return SendClientMessage(playerid, 0x3399FFFF, "Все слоты для транспорта заняты.");

 	if(modelid < 400) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addcar [id игрока] [id авто] [цвет 1] [цвет 2]");

	if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player)) return SCM(playerid, COLOR_GREY, "У игрока все слоты на транспорт заняты.");
	//if((GetPlayerOwnableCars(to_player)) > 31) return SCM(playerid, COLOR_GREY, "У игрока достигнут лимит транспорта.");

	GiveCar(to_player, modelid, color_1, color_2, -1, -1, 788.8649, 538.6771, 14.9084, 0.0, gettime());

	SendClientMessage(to_player, 0x66CC00FF, "Администратор выдал вам транспорт, для просмотра пропишите - /car");

	STRING_GLOBAL[0] = EOS;

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{F50202}[A] Администратор %s выдал игроку %s машину", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
   	SendMessageToAdmins(STRING_GLOBAL, -1);
	return 1;
}

CMD:asellhouse(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
 	 
    extract params -> new houseid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellhouse [номер дома]");

	if(!(0 <= houseid <= g_house_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");
	new query[256];
	SetHouseData(houseid, H_IMPROVEMENTS,	0);

	SetHouseData(houseid, H_RENT_DATE,		0);
	SetHouseData(houseid, H_LOCK_STATUS,	false);
	SetHouseData(houseid, H_OWNER_ID,	0);
	
	CallLocalFunction("EvictHouseRentersAll", "i", houseid);
	format(query, sizeof query, "UPDATE houses SET owner_id=0 WHERE id = %d", GetHouseData(houseid, H_SQL_ID));
	mysql_query(mysql, query, false);
	
	UpdateHouse(houseid);

	HouseHealthInit(houseid);
	HouseStoreInit(houseid);
	if(houseid != -1)
	{
		CallLocalFunction("EntranceStatusInit", "i", houseid);
	}
	return 1;
}

CMD:asellbiz(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
 	 

    extract params -> new bizid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellbiz [номер бизнеса]");

	if(!(0 <= bizid <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");
	new query[256];

    SetBusinessData(bizid, B_OWNER_ID, 	0);

	SetBusinessData(bizid, B_IMPROVEMENTS, 	0);

	SetBusinessData(bizid, B_PRODS, 			0);
	SetBusinessData(bizid, B_PROD_PRICE,		0);

	SetBusinessData(bizid, B_BALANCE,			0);
	SetBusinessData(bizid, B_RENT_DATE,		0);
	SetBusinessData(bizid, B_ENTER_MUSIC,		0);
	SetBusinessData(bizid, B_LOCK_STATUS,	false);

	format(query, sizeof query, "UPDATE accounts_canvasdev SET business='-1' WHERE id='%d'", GetBusinessData(bizid, B_OWNER_ID));
	mysql_query(mysql, query, false);
	format(query, sizeof query, "UPDATE business SET owner_id = 0 WHERE id = %d", GetBusinessData(bizid, B_SQL_ID));
	mysql_query(mysql, query, false);

	format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", bizid);
	mysql_query(mysql, query, false);

	BusinessHealthPickupInit(bizid);
	g_business_gps_init = false;
	CallLocalFunction("UpdateBusinessLabel", "i", bizid);
	return 1;
}

CMD:offawarn(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

    if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offawarn [ник игрока] [причина]");
    extract params -> new string:player_name[21], string:reason[32]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offawarn [ник игрока] [причина]");
    if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		awarn;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, awarn FROM accounts_canvasdev WHERE name='%e'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		awarn = cache_get_row_int(0, 2);
	}

	cache_delete(result);

	if(admin < 1) return SendClientMessage(playerid, COLOR_FAMILY, "Игрок не является администратором!");
	if(admin >= IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Данный администратор выше или равен вашему рангу.");

	format(query, sizeof query, "UPDATE accounts_canvasdev SET awarn=%d WHERE id=%d", awarn + 1,uid);
	mysql_query(mysql, query, false);

	new string[244];
	format(string, sizeof string, "[A] %s[%d] выдал выговор администратору оффлайн %s по причине: %s (%d/3)", GetPlayerNameEx(playerid), playerid, player_name, reason, awarn + 1);
	SendMessageToAdmins(string, 0xFF5533FF);

	if(awarn + 1 > 2)
	{
		format(string, sizeof string, "[A] Администратор %s был снят с должности администратора по причине: 3/3 выговоров", player_name);
		SendMessageToAdmins(string, 0xFF5533FF);
	
		format(query, sizeof query, "UPDATE accounts_canvasdev SET awarn=0, admin=0 WHERE id=%d", uid);
		mysql_query(mysql, query, false);
	}
    return true;
}
CMD:awarn(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

    if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /awarn [id игрока] [причина]");
	
    extract params -> new to_player, string:reason[32]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /awarn [id игрока] [причина]");

	if(IsPlayerAdminLevel(playerid) < IsPlayerAdminLevel(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Вы пытаетесь выдать выговор администратору выше вас по рангу!");

    if(GetPlayerData(to_player, P_ADMIN) < 1) return SendClientMessage(playerid, COLOR_FAMILY, "Игрок не является администратором!");

    SetPlayerData(to_player, P_AWARN, GetPlayerData(to_player, P_AWARN)+1);
    UpdatePlayerDatabaseInt(to_player, "awarn", GetPlayerData(to_player, P_AWARN));

	new string[244];
	format(string, sizeof(string), "[A] %s[%d] выдал выговор администратору %s[%d] по причине: %s (%d/3)", GetPlayerNameEx(playerid), playerid,
	GetPlayerNameEx(to_player), to_player, reason, GetPlayerData(to_player, P_AWARN));
	SendMessageToAdmins(string, 0xFF5533FF);

	if(GetPlayerData(to_player, P_AWARN) > 2)
	{
	    SendClientMessage(to_player, COLOR_BLUE, "Вы были сняты с поста администратора (3/3)");
	    UpdatePlayerDatabaseInt(to_player, "awarn", 0);
	    UpdatePlayerDatabaseInt(to_player, "admin", 0);
	    SetPlayerData(to_player, P_AWARN, 0);
	    SetPlayerData(to_player, P_ADMIN, 0);
	}
	else SendClientMessage(to_player, COLOR_BLUE, "Вы получили выговор администратора!");
    return true;
}

CMD:unawarn(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

    if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unawarn [id игрока] [причина]");
    extract params -> new to_player, string:reason[32]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unawarn [id игрока] [причина]");
    if(GetPlayerData(to_player, P_ADMIN) < 1) return SendClientMessage(playerid, COLOR_FAMILY, "Игрок не является администратором!");

	if(GetPlayerData(to_player, P_AWARN) < 1) return SendClientMessage(playerid, COLOR_FAMILY, "У администратора отсутствуют выговоры!");

	if(IsPlayerAdminLevel(playerid) < IsPlayerAdminLevel(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Вы пытаетесь выдать выговор администратору выше вас по рангу!");

    SetPlayerData(to_player, P_AWARN, GetPlayerData(to_player, P_AWARN)-1);
    UpdatePlayerDatabaseInt(to_player, "awarn", GetPlayerData(to_player, P_AWARN));

	new string[244];
	format(string, sizeof(string), "[A] %s[%d] снял выговор администратору %s[%d] по причине: %s (%d/3)", GetPlayerNameEx(playerid), playerid,
	GetPlayerNameEx(to_player), to_player, reason, GetPlayerData(to_player, P_AWARN));
	SendMessageToAdmins(string, 0xFF5533FF);
 	SendClientMessage(to_player, COLOR_BLUE, "Администратор снял вам один выговор");
    return true;
}

CMD:awarns(playerid, params[])
{
   if(IsPlayerAdminLevel(playerid) < 1) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

   new query[250];
   format(query, sizeof query, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_AWARN));
   SendClientMessage(playerid, 0xFF6600FF, query);
   SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения вас снимут с поста Администратора");
   return 1;
}

CMD:warns(playerid)
{
   new query[250];
   format(query, sizeof query, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
   SendClientMessage(playerid, 0xFF6600FF, query);
   SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения Ваш аккаунт будет забанен на 10 дней");
   return 1;
}

CMD:spcars(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    new vehicles_count;

    for(new i = 1; i < MAX_VEHICLES; i++)
    {
        if(!IsValidVehicle(i)) continue;
        else if(IsVehicleOccupied(i)) continue;
        else if(IsTrailerAttachedToAnyVehicle(i)) continue;
        SetVehicleToRespawn(i);
        vehicles_count++;

		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ORG_CARS)
		{
            new idx = GetVehicleData(i, V_ACTION_ID);
			SetVehicleVirtualWorld(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], org_cars_canvasdev[idx][ORG_CARS_WORLD]);
		    LinkVehicleToInterior(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], org_cars_canvasdev[idx][ORG_CARS_INTERIOR]);
		}
    }

    new fmt_text[90];
    format(fmt_text, sizeof fmt_text, "Вы зареспавнили весь незанятый транспорт. Всего зареспавнено: %d шт.", vehicles_count);
    SendClientMessage(playerid, 0x3399FFFF, fmt_text);

    if(IsPlayerAdminLevel(playerid) <= 6)
    {
        format(fmt_text, sizeof fmt_text, "[A] %s[%d] зареспавнил весь незанятый транспорт", GetPlayerNameEx(playerid), playerid);
        SendMessageToAdmins(fmt_text, 0x999999FF);
    }
    return 1;
}

CMD:setprefix(playerid, params[])
{
	if(CheckAdmin(playerid, 6)) return 1;

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");
	
	
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xCECECEFF, !"Используйте: /setprefix [id игрока]");
	SetPVarInt(playerid,"PrefixID",params[0]);
	IntfDialogCallRemote(playerid, 1234, DIALOG_STYLE_LIST, "Выдача префикс", "Выдать префикс\nЗабрать префикс", "Выбрать", "Закрыть");
	return 1;
}

CMD:spanel(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Это не ваш транспорт управлять подвеской может только владелец");

	if(GetOwnableCarData(index, OC_PNEWMA) != 1 || !IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "У Вас не установлена пневматическая подвеска.");
	
	CEF_CREATE(playerid, 1, 4,"TuningPlayerPneuma");

	return 1;
}

CMD:ytskin(playerid, params[])
{
    if(GetPlayerYAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Ютубер %s выдал Вам %s скин", GetPlayerNameEx(playerid), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerYAdminEx(playerid) >= 1)
	{
		if(skin_id != -1)
			format(fmt_text, sizeof fmt_text, "[YT] Ютубер %s[%d] выдал %s[%d] скин №%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		else
			format(fmt_text, sizeof fmt_text, "[YT] Ютубер %s[%d] выдал %s[%d] прежний скин", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:kinfo(playerid, params[])
{
	new query[115],
		Cache: result,
		rows,
		balance,
		team,
		list[sizeof query * 25 + 60] = "Организация\t\t\tБаланс\n";


	mysql_format(mysql, query, sizeof query, "SELECT * FROM bank_org");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{

		balance = cache_get_field_content_int(i, "team_bank");
		team = cache_get_field_content_int(i, "team_id");

		format
		(
			query, sizeof query,
			"\n{"#cW"}%s%s{CECECE}%d руб.",
			GetTeamName(team),
			strlen(GetTeamName(team)) > 13 ? "\t" : "\t\t\t",
	        balance
		);

		strcat(list, query);
	}

	cache_delete(result);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{"#cGold"}Баланс организаций", list, "Закрыть", "");

	return 1;
}
CMD:kazna_log(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /kazna_log [id фракции]");

	extract params -> new id;

	new fmt_str[128];
	new Cache: result;
	new rows;

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date FROM bank_org_log WHERE team_id=%d ORDER BY id DESC LIMIT 10", id);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	new text[900] = "{"#cW"}";
	new day, month, year;

	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		sscanf(fmt_str, "P<->ddd", year, month, day);

		format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
		strcat(text, fmt_str);
	}
	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{"#cGold"}Последние 10 операций", text, "Вернуться", "");

	cache_delete(result);

	return 1;
}

CMD:bank_log(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /bank_log [id счета]");

	extract params -> new id;

	new fmt_str[128];
	new Cache: result;
	new rows;

	new desc[128];

	format(desc, sizeof desc, "{"#cGold"}История операций счета №%d", id);

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", id);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		new text[900] = "{"#cW"}";
		new day, month, year;

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", year, month, day);

			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, desc, text, "Закрыть", "");
	}
	else IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, desc, "{"#cW"}История операций счета пуста", "Закрыть", "");

	cache_delete(result);

	return 1;
}
CMD:admins(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 1 && GetPlayerYAdminEx(playerid) < 3 && GetPlayerPremium(playerid) < 1) return 1;

	new count;

	SCM(playerid, 0x99CC00FF, !"Админы онлайн:");

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(1 > IsPlayerAdminLevel(i)) continue;

		if(g_player[i][P_MYPREFIX] && g_player[i][P_MYPREFIX_COLOR])
		{
			if(IsPlayerAFK(i))
				SCMF(playerid, -1, "{%s}[%s] {99CC00}%s [%d] (LVL %d) {FF0000}AFK [%02d:%02d]", g_player[i][P_MYPREFIX_COLOR], g_player[i][P_MYPREFIX], GetPlayerNameEx(i), i, IsPlayerAdminLevel(i), (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);
			
			else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
				SCMF(playerid, -1, "{%s}[%s] {99CC00}%s [%d] (LVL %d) {00CC00}/sp > %d", g_player[i][P_MYPREFIX_COLOR], g_player[i][P_MYPREFIX], GetPlayerNameEx(i), i, IsPlayerAdminLevel(i), GetPlayerSpectateData(i, S_PLAYER));

			else
				SCMF(playerid, -1, "{%s}[%s] {99CC00}%s [%d] (LVL %d)", g_player[i][P_MYPREFIX_COLOR], g_player[i][P_MYPREFIX], GetPlayerNameEx(i), i, IsPlayerAdminLevel(i));

			count++;
		}
		if(!g_player[i][P_MYPREFIX] && !g_player[i][P_MYPREFIX_COLOR])
		{
			if(IsPlayerAFK(i))
				SCMF(playerid, -1, "{99CC00}%s [%d] (LVL %d) {FF0000}AFK [%02d:%02d]", GetPlayerNameEx(i), i, IsPlayerAdminLevel(i), (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

			else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
				SCMF(playerid, -1, "{99CC00}%s [%d] (LVL %d) {00CC00}/sp > %d", GetPlayerNameEx(i), i, IsPlayerAdminLevel(i), GetPlayerSpectateData(i, S_PLAYER));

			else
				SCMF(playerid, -1, "{99CC00}%s [%d] (LVL %d)", GetPlayerNameEx(i), i, IsPlayerAdminLevel(i));

			count++;
		 }
	}
	SCMF(playerid, 0x99CC00FF, "Всего админов в сети: %d", count);
	return 1;
}

cmd:apanel(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
	IntfDialogCallRemote
	(
		playerid, DIALOG_ADMIN_PANEL, DIALOG_STYLE_LIST,
		"{0099FF}Админ Панель",
		"Список Администрации\n"\
		"Список Команд",
		"Выбрать", "Закрыть"
	);
	return 1;
}
cmd:adminlist(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 5) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	page_cars[playerid] = 1;
	type_page_cars[playerid] = 7;
	ShowAdminLists(playerid, page_cars[playerid]);
	return true;
}

CMD:aefir(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


    switch(GetPVarInt(playerid, "efir"))
    {
        case 0:
        {
            SetPVarInt(playerid, "efir", 1);
            SendClientMessage(playerid, 0x33FF33AA, "Вы успешно подключились к эфиру");
            SendClientMessage(playerid, 0x33FF33AA, "Отправить сообщение в эфире: {"#cW"}/t");
        }
        case 1:
        {
            SetPVarInt(playerid, "efir", 0);
            SendClientMessage(playerid, 0xFF6666FF, "Вы успешно отключились от эфира");
        }
    }

    return 1;
}
CMD:aedit(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");


	if(!g_advert_created) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	new fmt_text[360],
		bool: ad_is_found;

	for(new idx; idx < g_advert_created; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;
		format
		(
			fmt_text, sizeof fmt_text,
			"{FFFFFF}Отправитель: %s\n\nТекст:\n{FFCD00}%s\n\n"\
			"{FFFFFF}Для редактирования объявления введите новый текст и нажмите 'Отправить'.\n"\
			"Если редактирование объявлению не нужно, оставьте поле пустым.",
			GetPlayerNameEx(GetAdvertData(idx, A_CREATOR)), GetAdvertData(idx, A_TEXT)
		);
		IntfDialogCallRemote(playerid, DIALOG_ADVERT_EDIT, DIALOG_STYLE_INPUT, "{00CC00}Публикация объявления", fmt_text, "Отправить", "Отклонить");
		SetAdvertData(idx, A_EDIT, true);
		SetPVarInt(playerid, "advert_id", idx);
		ad_is_found = true;
		break;
	}
	if(!ad_is_found) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");
	return 1;
}
CMD:at(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!GetPVarInt(playerid, "efir")) return SendClientMessage(playerid, 0x999999FF, "Вы не подключены к радио-эфиру");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /at [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[ТРК «Ритм»] %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);
	return 1;
}

CMD:stili(playerid)
{
	IntfDialogCallRemote(playerid, DIALOG_SHK_ST, DIALOG_STYLE_LIST, "{ffd83d}Выберите стиль",
	"1.Стиль 'Бокс'\t{FF8C00}250.000р\n\
	2.Стиль 'Кунг-фу'\t{FF8C00}150.000р\n\
	3.Стиль 'СКолена'\t{FF8C00}100.000р\n\
	4.Стиль 'Проход в ноги'\t{FF8C00}50.000р\n\
	5.Стиль 'Локтем'\t{FF8C00}200.000р\n\
	6.Удалить стили",
	"Выучить", "Закрыть");
	return 1;
}

CMD:fstyle(playerid)
{
	IntfDialogCallRemote(playerid, DIALOG_F_STYLE, DIALOG_STYLE_LIST, "{ffd83d}Выберите стиль",
	"1. Выбрать стиль - {FF8C00}'Бокс'\n"\
	"2. Выбрать стиль - {FF8C00}'Кунгфу'\n"\
	"3. Выбрать стиль - {FF8C00}'СКолена'\n"\
	"4. Выбрать стиль - {FF8C00}'Проход в ноги'\n"\
	"5. Выбрать стиль - {FF8C00}'Локтем'",
	"Выбрать", "Закрыть");
	return 1;
}

CMD:styleremove(playerid)
{
	IntfDialogCallRemote(playerid, DIALOG_REMOVE_STYLE, DIALOG_STYLE_LIST, "{ffd83d}Выберите стиль",
	"1. Удалить стиль - {FF8C00}'Бокс'\n"\
	"2. Удалить стиль - {FF8C00}'Кунгфу'\n"\
	"3. Удалить стиль - {FF8C00}'СКолена'\n"\
	"4. Удалить стиль - {FF8C00}'Проход в ноги'\n"\
	"5. Удалить стиль - {FF8C00}'Локтем'",
	"Удалить", "Закрыть");
	return 1;
}

CMD:info_work(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	new fmt_msg[148];
	format(fmt_msg, sizeof fmt_msg, "{ffffff}Металла на шахте: {FFD700}%d {ffffff}Руды на шахте: {FFD700}%d {ffffff}Нареплавке на шахте: {FFD700}%d", GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT));
	SendClientMessage(playerid, -1, fmt_msg);
	format(fmt_msg, sizeof fmt_msg, "{ffffff}Металла на заводе: {FFD700}%d {ffffff}Топлива на заводе: {FFD700}%d {ffffff}Продуктов на заводе: {FFD700}%d", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT));
	SendClientMessage(playerid, -1, fmt_msg);
	format(fmt_msg, sizeof fmt_msg, "{ffffff}Топлива на нефтезаводе: {FFD700}%d {ffffff}Дерево на лесопилке: {FFD700}%d", GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
	SendClientMessage(playerid, -1, fmt_msg);
	format(fmt_msg, sizeof fmt_msg, "{ffffff}Металла на складе Армии: {FFD700}%d {ffffff}Патрон на складе Армии: {FFD700}%d", GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT),GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT));
	SendClientMessage(playerid, -1, fmt_msg);
	return 1;
}

CMD:give_work(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /give_work [id склада] [кол-во]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Металл на шахте");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Руда на шахте");
		SendClientMessage(playerid, 0xCECECEFF, "3 - На переплавке на шахте");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Металл на заводе");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Топливо на заводе");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Продукты на заводе");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Топливо на нефтезаводе");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Металл на складе Армии");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Патроны на складе Армии");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Дерево на лесопилке");


		return 1;
	}
	extract params -> new sklad_id, kolvo;
	if(!(1 <= sklad_id <= 10)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор id склада");
	if(!(1 <= kolvo <= 100000)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор количества(до 100000)");
	switch(sklad_id)
	{
		case 1:
		{
			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
			SaveRepository();
		}
		case 2:
		{
			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
			SaveRepository();		}
		case 3:
		{
			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);
			SaveRepository();
		}
		case 4:
		{
			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);
			SaveRepository();
		}
		case 5:
		{
			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
			SaveRepository();
		}
		case 6:
		{
			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
			SaveRepository();
		}
		case 7:
		{
			SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
			SaveRepository();
		}
		case 8:
		{
			SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
			SaveRepository();
		}
		case 9:
		{
			SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
			SaveRepository();
		}
		case 10:
		{
			SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, kolvo);
			UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			SaveRepository();
		}
	}
	return 1;

}

CMD:givefstyle(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givefstyle [id игрока] [id стиля]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Стиль боя 'Бокс'");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Стиль боя 'Кунгфу'");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Стиль боя 'СКолена'");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Стиль боя 'Проход в ноги'");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Стиль боя 'Локтем'");


		return 1;
	}
	extract params -> new to_player, cmd_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid,0xFF6600FF, "Такого игрока нет");
	if(!(1 <= cmd_id <= 5)) return SendClientMessage(playerid, 0x999999FF, "Неверный идентификатор стиля боя");
	new fmt_text[200];
	switch(cmd_id)
	{
		case 1:
		{
			SetPlayerData(to_player, P_STYLE_1, GetPlayerData(to_player, P_STYLE_1) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "style1", GetPlayerData(to_player, P_STYLE_1));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s стиль боя 'Бокс'", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_STYLE_1) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] стиль боя 'Бокс'", GetPlayerData(to_player, P_STYLE_1) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}
		case 2:
		{
			SetPlayerData(to_player, P_STYLE_2, GetPlayerData(to_player, P_STYLE_2) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "style2", GetPlayerData(to_player, P_STYLE_2));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s стиль боя 'Кунгфу'", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_STYLE_2) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] стиль боя 'Кунгфу'", GetPlayerData(to_player, P_STYLE_2) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}
		case 3:
		{
			SetPlayerData(to_player, P_STYLE_3, GetPlayerData(to_player, P_STYLE_3) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "style3", GetPlayerData(to_player, P_STYLE_3));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s стиль боя 'СКолена'", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_STYLE_3) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] стиль боя 'СКолена'", GetPlayerData(to_player, P_STYLE_3) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}
		case 4:
		{
			SetPlayerData(to_player, P_STYLE_4, GetPlayerData(to_player, P_STYLE_4) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "style4", GetPlayerData(to_player, P_STYLE_4));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s стиль боя 'Проход в ноги'", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_STYLE_4) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] стиль боя 'Проход в ноги'", GetPlayerData(to_player, P_STYLE_4) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}
		case 5:
		{
			SetPlayerData(to_player, P_STYLE_5, GetPlayerData(to_player, P_STYLE_5) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "style5", GetPlayerData(to_player, P_STYLE_5));

			format(fmt_text, sizeof fmt_text, "Администратор %s[%d] %s стиль боя 'Локтем'", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_STYLE_5) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] стиль боя 'Локтем'", GetPlayerData(to_player, P_STYLE_5) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
		}

		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givefstyle [id игрока] [id стиля]");

	}
	return 1;
}
CMD:addcarsharing(playerid,params[])
{
    new vehicleid;
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new model_id, color_1, color_2, price, type; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addcarcarsharing [id автомобиля] [цвет 1] [цвет 2] [цена при аренде][тип авто]");

	if((!(15195 <= model_id <= 15202)))  return SendClientMessage(playerid, 0xCECECEFF, "Вы указали неверный id транспорта, используйте: 15195-15202");
    if(!(0 <= type <= 3)) return SendClientMessage(playerid, 0xFF6600FF, "Типы авто: 0- Бип Драйв 1- Кар Шеринг , 2- Crown Car, 3 - Wow Drive");
	new Float: pos_xp, Float: pos_yp, Float: pos_zp,Float: angle;

	GetPlayerPos(playerid,pos_xp,pos_yp,pos_zp);

	GetPlayerFacingAngle(playerid, angle);


	new query[220],
		Cache: result;

	format
	(
		query, sizeof query,
		"INSERT INTO carsharing_cars \
		(model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,price,vinil,create_time) \
		VALUES \
		('%d','%d','%d','%f','%f','%f','%f','%d','%d', '%d')",
		model_id,
		color_1,
		color_2,
		pos_xp,
		pos_yp,
		pos_zp,
		angle,
		price,
		type,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	new
		idx;

	idx = GetFreeCarshCarID();

	SetCarshCarData(idx, OC_MODEL_ID, 	model_id);
	SetCarshCarData(idx, OC_COLOR_1, 	color_1);
	SetCarshCarData(idx, OC_COLOR_2, 	color_2);
	SetCarshCarData(idx, OC_VINIL, 		type);


	SetCarshCarData(idx, OC_POS_X, 		pos_xp);
	SetCarshCarData(idx, OC_POS_Y, 		pos_yp);
	SetCarshCarData(idx, OC_POS_Z, 		pos_zp);
	SetCarshCarData(idx, OC_ANGLE, 		angle);


    SetCarshCarData(idx, OC_PRICE, 		price);

	SetCarshCarData(idx, OC_CREATE, 		gettime());
    SetCarshCarData(idx, OC_RENT_OWNER, 		-1);

	vehicleid = CreateVehicle
	(
		GetCarshCarData(idx, OC_MODEL_ID),
		GetCarshCarData(idx, OC_POS_X),
		GetCarshCarData(idx, OC_POS_Y),
		GetCarshCarData(idx, OC_POS_Z),
		GetCarshCarData(idx, OC_ANGLE),
		GetCarshCarData(idx, OC_COLOR_1),
		GetCarshCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_CARSH_CAR,
		idx
	);
	new typeauto[24];
    if(GetCarshCarData(idx, OC_VINIL) == 0) format(typeauto, 11, "Бип Drive");
    if(GetCarshCarData(idx, OC_VINIL) == 1) format(typeauto, 12, "Кар Шеринг");
    if(GetCarshCarData(idx, OC_VINIL) == 2) format(typeauto, 12, "Crown Car");
    if(GetCarshCarData(idx, OC_VINIL) == 3) format(typeauto, 12, "WOW Drive");

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(idx, OC_MODEL_ID)  , VI_NAME), GetCarshCarData(idx, OC_MODEL_ID), GetCarshCarData(idx, OC_PRICE));
    CreateVehicleLabel(vehicleid, STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);

	SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);


	ChangeVehiclePaintjob(vehicleid, GetCarshCarData(idx, OC_VINIL));


    SendClientMessage(playerid, 0x66CC00FF, "Вы успешно создали транспорт каршеринга!");
	cache_delete(result);
	return 1;
}
CMD:givemed(playerid, params[])
{
    if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "Вы не работник больницы");

	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /givemed [id]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
		
	if(GetPlayerMedcarta(to_player) == 1) return SendClientMessage(playerid, 0x999999FF, "У игрока уже есть мед карта.");

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Врач %s[%d] выдал Вам мед карту", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0x6495EDFF, fmt_text);
	
    SetPlayerData(to_player, P_MEDCARTA, 1);
    UpdatePlayerDatabaseInt(to_player, "medcarta", 1);

	format(fmt_text, sizeof fmt_text, "Вы выдали мед карту %s[%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x6495EDFF, fmt_text);

	return 1;
}
CMD:agivevb(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /agivevb [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Aдминистратор %s[%d] выдал Вам военный билет", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0x6495EDFF, fmt_text);

    SetPlayerData(to_player, P_VOEN, 1);
    UpdatePlayerDatabaseInt(to_player, "voennik", 1);

	format(fmt_text, sizeof fmt_text, "Вы выдали военный билет %s [%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x6495EDFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[А] Администратор %s [%d] выдал военный билет игроку %s [%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}
CMD:givevb(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /givevb [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Генерал %s[%d] выдал Вам военный билет", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0x6495EDFF, fmt_text);

    SetPlayerData(to_player, P_VOEN, 1);
    UpdatePlayerDatabaseInt(to_player, "voennik", 1);

	format(fmt_text, sizeof fmt_text, "Вы выдали военный билет %s[%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x6495EDFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s выдал военный билет %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}
CMD:takevb(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL)
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	extract params -> new to_player; else return SendClientMessage(playerid, COLOR_GOLD, "Используйте:{"#cW"} /takevb [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "Генерал %s[%d] забрал у Вас военный билет", GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0x6495EDFF, fmt_text);
	
    SetPlayerData(to_player, P_VOEN, 0);
    UpdatePlayerDatabaseInt(playerid, "voennik", 0);

	format(fmt_text, sizeof fmt_text, "Вы забрали военный билет %s[%d]", GetPlayerNameEx(to_player), to_player);
	SendClientMessage(playerid, 0x6495EDFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s забрал военный билет %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

CMD:cm_test_drive(playerid, params[])
{
    extract params -> new to_player, time; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cm_test_drive [айди игрока] [время теста (в минутах)]");
	if(!(1 <= time <= 5))
					return SendClientMessage(playerid, 0xCECECEFF, "Время тест-драйва от 1 минуты до 5 минут");
	new vehicleid;
    new Float:Distance_ = 5.0;

    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
	    {
		    new iddx = GetVehicleData(i, V_ACTION_ID);
	        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
	        {
				new Float:Distance = D_PlayerVehicle(playerid, i);
		    	if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
	            }
	        }
        }

	}
	if(Distance_ == 4.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(GetPlayerOwnableCarLast(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	//new fmt_text[2640];
	if(GetPlayerOwnableCars(playerid) == 0)	return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
	{
	    if(GetOwnableCarData(index, OC_BY_ID) != 0)
	    {
			new  Float: car_x, Float: car_y, Float: car_z;
			GetVehiclePos(vehicleid, car_x, car_y, car_z);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, car_x, car_y, car_z))
			{
			    SendPlayerOffer(playerid, to_player, OFFER_TYPE_TEST_DRIVE, vehicleid, time);
 			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около своего ТС");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Ваш т/с должен находиться на б/у рынке");
	}
	return 1;
}

CMD:cm_price(playerid, params[])
{
    extract params -> new price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cm_price [цена]");
	new vehicleid;
    new Float:Distance_ = 7.0;

    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
	    {
		    new iddx = GetVehicleData(i, V_ACTION_ID);
	        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
	        {
				new Float:Distance = D_PlayerVehicle(playerid, i);
		    	if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
	            }
	        }
        }
	}
	if(Distance_ == 7.0) return SendClientMessage(playerid, 0x808080FF, "Вы далеко от своего транспорта");
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	if(GetPlayerOwnableCars(playerid) == 0)	return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
	{
	    if(GetOwnableCarData(index, OC_BY_ID) != -1)
	    {
			new  Float: car_x, Float: car_y, Float: car_z;
			GetVehiclePos(vehicleid, car_x, car_y, car_z);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, car_x, car_y, car_z))
			{
                new model_id = GetVehicleData(vehicleid, V_MODELID);
				new car_price = GetVehicleInfo(model_id , VI_PRICE);

				if(!(3000 <= price <= (car_price * 4)))
					return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000 рублей и не дороже в 4 раза гос. стоимости ТС");

				new str[300],
					phone_number[15];

				valstr(phone_number, GetPlayerPhone(playerid));

				format(str, sizeof str,
				"{FFA500}Модель:{FFFFFF} %s\n"\
				"{FFA500}Продавец:{FFFFFF} %s\n"\
				"{FFA500}Цена:{FFFFFF} %s {FFA500}руб\n"\
				"{FFA500}Телефон:{FFFFFF} %s",
				GetVehicleName(vehicleid), GetPlayerNameEx(playerid), formatInt(price), GetPlayerPhone(playerid) == 0 ? "Нет" : phone_number);
				UpdateVehicleLabel(vehicleid, 0xFFFFFFFF, str);

				format(str, sizeof str,"Вы изменили цену продажи {42B02C}\"%s\"{FFFFFF} на {42B02C}%s{FFFFFF} руб", GetVehicleName(vehicleid), formatInt(price));
				SendClientMessage(playerid, -1, str);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около своего ТС");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Ваш т/с должен находиться на б/у рынке");
	}
	return 1;
}
CMD:pick(playerid, params[])
{
	for(new i = 1; i <= TOTALY; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.5, DYaz[i][g_y][0], DYaz[i][g_y][1], DYaz[i][g_y][2]) && !IsPlayerInAnyVehicle(playerid))
		{
			if(GetPVarInt(playerid,"respeat")== 1) return SendClientMessage(playerid, COLOR_GREY, "У Вас уже есть поднос с едой");
			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			SetPVarInt(playerid,"respeat",1);
			SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
			SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
			DestroyDynamicObject(DYaz[i][g_yid]);
			DYaz[i][g_y][0] = 0;
			DYaz[i][g_y][1] = 0;
			DYaz[i][g_y][2] = 0;
			DYaz[i][g_ypod] = 0;
			Delete3DTextLabel(DYaz[i][g_text]);
			g_cursor[playerid] = 1;
			DestroyDynamicArea(g_podnos_alt[i]);
	        g_podnos_alt[i] = 0;
			CEF_CREATE(playerid, 2, 4, "Interactions", "[[5, \"Перекусить\"], [6, \"Выбросить поднос\"]]");
		}
	}
	return true;
}

CMD:put(playerid, params[])
{
	if(GetPVarInt(playerid,"respeat")== 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет c собой еды");
	if(GetPVarInt(playerid,"training") == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете выбросить поднос во время обучения.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
	ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,0,0);
	DropYas(playerid);
	g_cursor[playerid] = 0;
	CEF_HIDE(playerid, "Interactions");
	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
	return true;
}
CMD:eat(playerid, params[])
{
    new str[128],name[MAX_PLAYER_NAME],action[21],actions[21];
    if(IsPlayerConnected(playerid))
	{
        if(GetPVarInt(playerid,"respeat")== 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет c собой еды");

		if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");

		ApplyAnimation(playerid,"FOOD","EAT_Burger", 2.0,0,0,0,0,5000,1);

		if(GetPVarInt(playerid,"respeat") == 1) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 30);
		if(GetPVarInt(playerid,"respeat") == 2) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 50);
		if(GetPVarInt(playerid,"respeat") == 3) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 70);

		if(GetPlayerData(playerid, P_EAT) > 100) SetPlayerData(playerid, P_EAT, 100);
		UpdatePlayerDataInt(playerid, "hunger", GetPlayerData(playerid, P_EAT));
		
		GetPlayerName(playerid, name, sizeof(name));

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').updateHungerLevel(%d)",GetPlayerData(playerid, P_EAT));
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

 		if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
		
		//BattlePass_Completingtasks(playerid, 1, 18);
		ApplyAnimation(playerid,"FOOD","EAT_Burger", 2.0,0,0,0,0,5000,1);
		SetTimerEx("RemovePlayerAttachedObjectDelay",4000,false,"ii",playerid,0);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		g_cursor[playerid] = 0;
		CEF_HIDE(playerid, "Interactions");
		CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
        new Hour;
		gettime(Hour, _, _);
		SetWorldTime(Hour);
        switch(Hour)
		{
            case 7..12: strcat(action," завтракает");
			case 13..17: strcat(action," обедает");
			case 18..23: strcat(action," ужинает");
			default: strcat(action, " ест");//
		}
		new Hour1;
		gettime(Hour1, _, _);
		SetWorldTime(Hour1);
        switch(Hour1)
		{
            case 7..12: strcat(actions,"позавтракали");
			case 13..17: strcat(actions,"поoбедали");
			case 18..23: strcat(actions,"поужинали");
			default: strcat(actions, "покушали");
		}
		SetPlayerChatBubble(playerid, action, 0xFFFF00FF, 40.0, 3000);
		strcat(str, name);
		strcat(str, action);
		ProxDetector(10.0, playerid, str, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF);
        SetPVarInt(playerid,"respeat",0);
        return true;
	}
	return true;
}

CMD:createbillboard(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);

	EditObjectPlayer[playerid] = CreateObject(3627, x+2, y+2, z, 0, 0, 0);
    SetPVarInt(playerid, "create_bill", 1);
    SetPVarInt(playerid, "bill_type", 0);
    SetPVarInt(playerid, "bill_color", 0);
	EditObject(playerid, EditObjectPlayer[playerid]);
	return 1;
}
cmd:gotobillboard(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    extract params -> new id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gotobillboard [айди билборда]");
    id = id - 1;
    if(billboardsload[id] != -1)
    {
		SetPlayerPos(playerid, BillInfo[id][BillPosX] + 2, BillInfo[id][BillPosY] + 2, BillInfo[id][BillPosZ]);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы телепортировались к билборду №%d", id + 1);
		SendClientMessage(playerid, -1, STRING_GLOBAL);
    }
    else SendClientMessage(playerid, 0xCECECEFF, "Данного билборда не существует");
    return 1;
}
cmd:billboards(playerid)
{
	new buffer[1];
    new query[170];
    string_dialog[0] = EOS;
    for(new i; i < MAX_BILLBOARD; i++){
		if(billboardsload[i] != -1){
		    buffer[0] = Get2DCity(BillInfo[i][BillPosX], BillInfo[i][BillPosY]);
			if(BillInfo[i][BillStatus] == 0) format(query, sizeof query, "{33AA33}№%d<t>%s<n>", i+1, GetCityName(buffer[0]));
			else if(BillInfo[i][BillStatus] == 1) format(query, sizeof query, "{FF0000}№%d<t>%s<n>", i+1, GetCityName(buffer[0]));
			else if(BillInfo[i][BillStatus] == 2) format(query, sizeof query, "{FFA500}№%d<t>%s<n>", i+1, GetCityName(buffer[0]));
			strcat(string_dialog, query);
    	}
    }
	IntfDialogCallRemote(playerid, DIALOG_BILLBOARD_SELECT, DIALOG_STYLE_LIST, "Выберите биллборд", string_dialog, "Далее", "Закрыть");
}

cmd:tdo(playerid, params[])
{
  	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xFF6600FF, "Этим можно пользоваться со 2 уровня");

	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tdo [текст]");

    if(pame_text[playerid] != Text3D:-1)
         return SendClientMessage(playerid, -1, "Вы уже создали объявление. Используйте: /tdo_delete");

	new description[228];

	format(description, sizeof description, "{87CEEB}[Информация]\n{90EE90}%s\n{FFA500}ID: %d | %s", params, playerid ,GetPlayerNameEx(playerid));

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	pame_text[playerid] = CreateDynamic3DTextLabel(description, 0xCECECEFF, X, Y, Z, 10.0);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "Вы создали объявление с текстом: %s", params);
	SendClientMessage(playerid, COLOR_WHITE, fmt_str);

	return 1;
}

cmd:tdo_delete(playerid, params[])
{
    if(pame_text[playerid] == Text3D:-1)
        return SendClientMessage(playerid, 0xFF6600FF, "Вы еще не создавали объявление. Используйте: /tdo");

    SendClientMessage(playerid, 0xFF6600FF, "Вы удалили созданное Вами объявление");
    DestroyDynamic3DTextLabel(pame_text[playerid]);
    pame_text[playerid] = Text3D:-1;
    return 1;
}

cmd:trunk(playerid)
{
	new Float:POS[5];
	new vehicleid;
    new Float:Distance_ = 15.0;

    for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
	    {
		    new iddx = GetVehicleData(i, V_ACTION_ID);
	        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
	        {
				new Float:Distance = D_PlayerVehicle(playerid, i);
		    	if(Distance < Distance_)
				{
					Distance_ = Distance;
					vehicleid = i;
	            }
	        }
        }
	}
	if(Distance_ == 15.0) return 1;

	if(vehicleid != -1)
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new car_sql_id = GetOwnableCarData(index, OC_SQL_ID);

		SetPVarInt(playerid, "vehicleid", car_sql_id);

		GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);

		if(!IsPlayerInRangeOfPoint(playerid, 4.0, POS[0], POS[1], POS[2])) return 1;

		if(status_authorization[playerid] != 1) return true;

		SetVehicleParam(vehicleid, V_BOOT, VEHICLE_PARAM_ON);

		inventory_trunk_id[playerid] = car_sql_id;

		UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);

		STRING_GLOBAL[0] = EOS;

		if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24],[3,\"Багажник\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
		else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[3,\"Багажник\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);

		CEF_CREATE(playerid, 2, 4, "InventoryNew", STRING_GLOBAL);
	}
	return 1;
}

cmd:additem(playerid, params[])
{
 	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, item, type, count, indx; else return SCM(playerid, COLOR_YELLOW, "Используйте: /additem [id игрока] [ид предмета] [1 - выдать 0 - забрать] [количество] [indx default 0]");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	
	if(type == 0 && GetIteamIndx(to_player, item, indx) < count) return SCM(playerid, COLOR_GREY, "У данного игрока нет данного предмета в таком количестве"); 

	new query[148];
	format(query, sizeof query, "Администратор %s выдал данный предмет", GetPlayerNameEx(playerid));
	GiveIteam(to_player, item, type, count, indx, query);

	format(query, sizeof query, "Администратор %s %s Вам предмет %s[№%d] в количестве %d шт.", GetPlayerNameEx(playerid), type ? "выдал" : "забрал у", ItemsInfo[item], item, count);
	SendClientMessage(to_player, 0xFFFFFFFF, query);

	format(query, sizeof query, "[A] %s[%d] %s предмет %s[№%d] %s %s[%d] в количестве %d шт.", GetPlayerNameEx(playerid), playerid, type ? "выдал" : "забрал", ItemsInfo[item], item, type ? "игроку" : "у игрока", GetPlayerNameEx(to_player), to_player, count);
	SendMessageToAdmins(query, 0xFFFF00FF);
    return 1;
}


CMD:mplist(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 4) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	IntfDialogCallRemote
	(
		playerid, DIALOG_MEROPRIATIE, DIALOG_STYLE_LIST,
		"{FFFF00}Выберите мероприятие",
		"Уедь от админа\n"\
		"Король дигла\n"\
		"CS:GO\n"\
		"Мокрая Вечеринка(поливалка)\n"\
		"Восточная Дуэль(дуэли)",
		"Выбрать", "Закрыть"
	);

	return 1;
}
cmd:fullsellall(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	new cur_time = gettime(),
		query[580];

	new price, a_id;

	for(new i; i < g_house_loaded; i ++)
	{
		if(GetHouseData(i, H_RENT_DATE) > cur_time) continue;

		format(query, sizeof query, "UPDATE houses SET owner_id='0',lock='0',eviction='0' WHERE id='%d'", GetHouseData(i, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts_canvasdev SET house_type=-1 WHERE id=%d", GetHouseData(i, H_OWNER_ID));
		mysql_query(mysql, query, false);

		SetHouseData(i, H_OWNER_ID,			0);
		SetHouseData(i, H_IMPROVEMENTS,		0);

		SetHouseData(i, H_EVICTION, 0);

		SetHouseData(i, H_RENT_DATE,		0);
		SetHouseData(i, H_LOCK_STATUS,		false);

		UpdateHouse(i);

		HouseHealthInit(i);
		HouseStoreInit(i);

		a_id = GetHouseData(i, H_SQL_ID);
		price = GetHouseData(i, H_PRICE);

		switch(random(100))
		{
			case 50..100:
			{
				mysql_format(mysql, query, sizeof query, "INSERT INTO auction (price, last_price, price_owner, type, house_id, business_id, garage_id) VALUES (%d, %d, -1, 0, %d, -1, -1)", price, price, a_id - 1);
				mysql_query(mysql, query, false);
			}
		}
	}

	for(new i; i < g_business_loaded; i ++)
	{
		if(!GetBusinessData(i, B_EVICTION)) continue;
		if(GetBusinessData(i, B_RENT_DATE) > cur_time) continue;

		format(query, sizeof query, "UPDATE business SET `owner_id` = '0', `products` = '0', `prod_price` = '0', `lock` = '0', `eviction` = '0' WHERE `id` = '%d'", GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts_canvasdev SET business=-1 WHERE id=%d", GetBusinessData(i, B_OWNER_ID));
		mysql_query(mysql, query, false);

		SetBusinessData(i, B_OWNER_ID, 			0);
		SetBusinessData(i, B_IMPROVEMENTS, 		0);

		SetBusinessData(i, B_EVICTION, 0);

		SetBusinessData(i, B_PRODS, 			0);
		SetBusinessData(i, B_PROD_PRICE,		0);

		SetBusinessData(i, B_BALANCE,			0);
		SetBusinessData(i, B_RENT_DATE,			0);
		SetBusinessData(i, B_ENTER_MUSIC,		0);
		SetBusinessData(i, B_LOCK_STATUS,		false);

		format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
		mysql_query(mysql, query, false);

		g_business_gps_init = false;

		CallLocalFunction("UpdateBusinessLabel", "i", i);

		a_id = GetBusinessData(i, B_SQL_ID);
		price = GetBusinessData(i, B_PRICE);

		switch(random(101))
		{
			case 50..100:
			{
				mysql_format(mysql, query, sizeof query, "INSERT INTO auction (price, last_price, price_owner, type, house_id, business_id, garage_id) VALUES (%d, %d, -1, 1, -1, %d, -1)", price, price, a_id - 1);
				mysql_query(mysql, query, false);
			}
		}
	}

	for(new i; i < g_garage_loaded; i ++)
	{
		if(!GetGarageData(i, G_EVICTION)) continue;
		if(GetGarageData(i, G_RENT_DATE) < cur_time) continue;

		format(query, sizeof query, "UPDATE garage SET owner_id='0',lock='0',eviction='0' WHERE id='%d'", GetGarageData(i, G_SQL_ID));
		mysql_query(mysql, query, false);

		SetGarageData(i, G_OWNER_ID,			0);
		SetGarageData(i, G_IMPROVEMENTS,		0);

		SetGarageData(i, G_EVICTION, 0);

		SetGarageData(i, G_RENT_DATE,		0);
		SetGarageData(i, G_LOCK_STATUS,		false);


		CallLocalFunction("UpdateGarageLabel", "i", i);
		UpdateGarage(i);

		a_id = GetGarageData(i, G_SQL_ID);
		price = GetGarageData(i, G_PRICE);

		switch(random(101))
		{
			case 50..100:
			{
				mysql_format(mysql, query, sizeof query, "INSERT INTO auction (price, last_price, price_owner, type, house_id, business_id, garage_id) VALUES (%d, %d, -1, 2, -1, -1, %d)", price, price, a_id - 1);
				mysql_query(mysql, query, false);
			}
		}
	}
	SCM(playerid, 0xCECECEFF, "Всё неоплаченное имущество слетело!");
	return 1;
}
CMD:charity(playerid, params[])
{
	new Cache: result;
	new rows;
	new money;
	new fmt_str[75];
	new string[850];

	cache_set_active(charity_cache_data);
	rows = cache_num_rows();

	string = "Сумма\t\tИмя\n\n{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		money = cache_get_row_int(idx, 1);

		format(fmt_str, sizeof fmt_str, "%d руб\t\t%s\n", money, fmt_str);
  		strcat(string, fmt_str);
	}
	cache_set_active(Cache:0); //unset active cache

	format(fmt_str, sizeof fmt_str, "SELECT SUM(money) as money FROM charity WHERE uid=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_str, true);

	money = cache_get_row_int(0, 0);
	cache_delete(result);

	format(fmt_str, sizeof fmt_str, "\n{999999}Сумма Ваших пожертвований: %d руб", money);
	strcat(string, fmt_str);

	return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00CC00}Топ 25 благотворителей", string, "Закрыть", "");
}

CMD:varkanarkoti(playerid){IntfDialogCallRemote(playerid, DIALOG_VARKA_DRUGS, DIALOG_STYLE_MSGBOX,"{"#cW"}Варка наркотиков","{"#cW"}Вы хотите сварить наркотики?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество наркотиков: {FFFF00}10.","Далее", "Закрыть");}

CMD:showmc(playerid, params[])
{
    if(GetPlayerData(playerid, P_MEDCARD) == 0) return SCM(playerid, 0xFF6600FF, !"У вас нет мед карты");

	extract params -> new to_player; else return SCM(playerid, 0xCECECEFF, !"Используйте: /showmc [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SCM(playerid, 0xFF6600FF, !"Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	if(to_player == playerid)
	{
	    new fmt_text[200];

		new name_mc[144];

		switch(GetPlayerData(playerid, P_MEDCARD_STATUS))
		{
		    case 0: name_mc = "Не установлен";
		    case 1: name_mc = "Болен(а)";
		    case 2: name_mc = "Имеются психические отклонения";
		    case 3: name_mc = "Полностью здоров(а)";
		}

		new stat_mc[85];
		switch(GetPlayerData(playerid, P_MEDCARD))
		{
		    case 0: stat_mc = "{FF5533}Отсутствует";
		    case 1: stat_mc = "Есть";
		}

		format(fmt_text, sizeof fmt_text, "[[2,[66322,\"%s\",\"%s\",\"%s\",\"Валерий\"]]]",
		GetPlayerNameEx(playerid), name_mc), gettime();
        CEF_CREATE(playerid, 2, 4, "Docs", fmt_text);
		Action(playerid, "просмотривает свою мед. карту", _, false);
	}
	else{
		new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
		if(0.5 <= dist <= 1.5) SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOWMC);
		else SCM(playerid, 0xFF6600FF, !"Вы находитесь слишком далеко от игрока");
	}
	return 1;
}

CMD:steal_cars(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2674.4509,2189.0325,1000.9988)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у компьютера на базе");
	if(GetPVarInt(playerid,"ygnal1") == 1) CEF_CREATE(playerid, 2, 4, "TransportOrder", "[[\"BMW\", 2,\"BMW M8 F92\",1664827000,145000], [\"Mercedes\", 3,\"Mercedes W124 C\",1664827000,250000], [\"Lexus\", 3,\"Lexus IS200\",1664827000,24000], [\"Lamborghini\", 3,\"Lamborghini Uru\",1664827000,115000], [\"Tayota\", 3,\"Tayota Hachirok\",1664827000,18000], [\"UAZ\", 3,\"UAZ Хантер\",1664827000,14000]]");
	else CEF_CREATE(playerid, 2, 4, "TransportOrder", "[[\"BMW\", 2,\"BMW M8 F92\",1664827000,145000], [\"Mercedes\", 3,\"Mercedes W124 C\",1664827000,250000], [\"Lexus\", 3,\"Lexus IS200\",1664827000,24000], [\"Lamborghini\", 3,\"Lamborghini Uru\",1664827000,115000], [\"Tayota\", 3,\"Tayota Hachirok\",1664827000,18000], [\"UAZ\", 3,\"UAZ Хантер\",1664827000,14000]]");
	return 1;
}

CMD:lottery(playerid)
{
    if(GetIteam(playerid, 257) < 1) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет лотерейного билета");
	
	//BattlePass_Completingtasks(playerid, 1, 19);
    CEF_CREATE(playerid, 2, 4, "Lottery", "[1, \"Зимняя сказка\"]");
    return 1;
}

CMD:attach(playerid, params[])
{
	if(GetIteam(playerid, 4) < 1) return SCM(playerid, 0xCECECEFF, "У вас нет буксировочного троса. Купить его можно в любом супермаркете!");

	if(!IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");
	{
		new Float:pX,Float:pY,Float:pZ;
		GetPlayerPos(playerid,pX,pY,pZ);
		new Float:vX,Float:vY,Float:vZ;
		new Found=0;
		new vid=0;
		GiveIteam(playerid, 4, 0, 1, 0);
		while((vid<MAX_VEHICLES)&&(!Found))
		{
			vid++;
			GetVehiclePos(vid,vX,vY,vZ);
			if((floatabs(pX-vX)<6.0)&&(floatabs(pY-vY)<6.0)&&(floatabs(pZ-vZ)<6.0)&&(vid!=GetPlayerVehicleID(playerid)))
			{
				Found=1;
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
			}
		}

		if(!Found)
		{
		}
  	}
	return 1;
}
CMD:fcuff(playerid, params[])
{
    if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}
CMD:funcuff(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:fputpl(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Вы не сотрудник ФСИН");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [ID игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xFF6600FF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xFF6600FF, "Игрок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в автомобиле");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0xFF6600FF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:asellstall(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
 	 
    extract params -> new i; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellstall [номер киоска]");

	if(!(0 <= i <= g_kiosk_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного киоска не существует на сервере");
	new query[256];
	format(query, sizeof query, "UPDATE accounts_canvasdev SET kiosk=-1 WHERE id='%d'", GetKioskData(i, K_OWNER_ID));
	mysql_query(mysql, query, false);

    format(query, sizeof query, "UPDATE kiosk SET owner_id=0,improvements=1,rent=0 WHERE id='%d'", GetKioskData(i, K_SQL_ID));
	mysql_query(mysql, query, false);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
 	 
    extract params -> new i; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /asellgarage [номер гаража]");

	if(!(0 <= i <= g_garage_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного гаража не существует на сервере");

	new query[256];

	if(GetGarageData(i, G_TYPE) == 1)
	{
		format(query, sizeof query, "UPDATE accounts_canvasdev SET car_slots=4 WHERE id='%d'", GetGarageData(i, G_OWNER_ID));
		mysql_query(mysql, query, false);
	}
	else if(GetGarageData(i, G_TYPE) == 2)
	{
		format(query, sizeof query, "UPDATE accounts_canvasdev SET car_slots=4 WHERE id='%d'", GetGarageData(i, G_OWNER_ID));
		mysql_query(mysql, query, false);
	}
	else if(GetGarageData(i, G_TYPE) == 3)
	{
		format(query, sizeof query, "UPDATE accounts_canvasdev SET car_slots=4 WHERE id='%d'", GetGarageData(i, G_OWNER_ID));
		mysql_query(mysql, query, false);
	}

    SetGarageData(i, G_OWNER_ID, 0);
    SetGarageData(i, G_IMPROVEMENTS, 0);
    SetGarageData(i, G_RENT_DATE, 0);
    CallLocalFunction("UpdateGarageLabel", "i", i);
	UpdateGarage(i);

    format(query, sizeof query, "UPDATE garage SET owner_id=0,improvements=0 WHERE id='%d'", GetGarageData(i, G_SQL_ID));
	mysql_query(mysql, query, false);
	return 1;
}

CMD:block(playerid)
{
    if(!IsPlayerInPoliceTeam(playerid))
        return SendClientMessage(playerid, -1, "");
    if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
        return SendClientMessage(playerid, -1, "Нельзя стваить шипы в интерьере.");
    if(IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, -1, "Нельзя ставить шипы, находясь в машине.");
    if(spike_objects[playerid] == 0)
    {
        new Float:x, Float:y, Float:z, Float:a;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        SetPVarInt(playerid,"spikespawnn",1);
        SetPVarInt(playerid,"spikespawn",1);
        spike_objects[playerid] = CreateDynamicObject(2899, x, y+1.0, z-0.8, 0, 0, a+90);
        spike_areas[playerid] = CreateDynamicSphere(x, y+1.0, z, 3.0, -1, -1, -1);
        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 1, 1);
        SendClientMessage(playerid, 0x0bda51FF, "Вы установили шипы.");
        SetPVarInt(playerid, "ship", 1);
        return SendClientMessage(playerid, 0x0bda51FF, "");
    }
    else
    {
        if(GetPVarInt(playerid,"spikespawnn") == 1)
		{
	        DestroyDynamicObject(spike_objects[playerid]);
	        spike_objects[playerid] = 0;
	        SetPVarInt(playerid,"spikespawn",0);
	        SetPVarInt(playerid,"spikespawnn",0);
	        DestroyDynamicArea(spike_areas[playerid]);
	        SetPVarInt(playerid, "ship", 0);
	        CEF_CREATE(playerid, 2, 4, "Interactions","[[-1, \"Убрать шипы\"]]");
	        return SendClientMessage(playerid, COLOR_GREY, "Шипы дезактивированы.");
		}
    }
    return 1;
}
CMD:radar111111(playerid)
{
	if(!IsPlayerInPoliceTeam(playerid))
    	return SendClientMessage(playerid, -1, "");
    if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
    	return SendClientMessage(playerid, -1, "Нельзя брать радар в интерьере.");
    if(IsPlayerInAnyVehicle(playerid))
    	return SendClientMessage(playerid, -1, "Нельзя брать радар, находясь в машине.");
	{
	    SetPVarInt(playerid,"radarspawn",1);
		SetPVarInt(playerid,"radarspawnn",1);
		CEF_CREATE(playerid, 2, 4, "Interactions","[[-1, \"Установить радар\"]]");
	    SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 14775, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
		return 1;
	}
}

CMD:alogin(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 1) return 1;
	if(admin_logged[playerid] == true) return 1;

	if(!strcmp(g_player[playerid][P_ADMIN_PASSWORD], "999999", true)) IntfDialogCallRemote(playerid, DIALOG_ADMIN_CREATE_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Регистрация Админ-Прав","{FFFFFF}Создайте свой личный пароль для авторизации как администратор","Далее", "Закрыть");
	else IntfDialogCallRemote(playerid, DIALOG_ADMIN_PASS_2, DIALOG_STYLE_PASSWORD,"{FFD83D}Авторизация Админ-Прав","Вы пытаетесь авторизоваться как администратор.\n\n{FFFFFF}Введите пароль:","Далее", "Закрыть");

	return 1;
}

CMD:radar22(playerid)
{
    if(!IsPlayerInPoliceTeam(playerid)) return 1;

    if(GetPVarInt(playerid,"radarspawn") == 1)
	{
		if(GetPVarInt(playerid,"radarspawnn") == 1)
		{
		    if(radar_objects[playerid] == 0)
		    {
		        new Float:x, Float:y, Float:z, Float:a;
		        GetPlayerPos(playerid, x, y, z);
		        GetPlayerFacingAngle(playerid, a);
		        radar_objects[playerid] = CreateDynamicObject(14775, x+0.8, y, z-1.0, 0, 0, a+180.0);
		        radar_objects1[playerid] = CreateDynamic3DTextLabel("{ffa500}Допустимая скорость \n {ffa500}До {FFFFFF}100 км/ч", 0xFFFFFFFF, x+0.8, y, z+0.3, 7.0);
		        radar_areas[playerid] = CreateDynamicSphere(x, y+1.5, z, 7.0, -1, -1, -1);
		        RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		        ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);
		        SendClientMessage(playerid, 0x0bda51FF, "Вы установили радар.");
		        SetPVarInt(playerid,"radarspawnn",0);
		        CEF_CREATE(playerid, 2, 4, "Interactions","[[-1, \"Установить радар\"]]");
		        return SendClientMessage(playerid, 0x0bda51FF, "Чтобы убрать радар, нужно подойти к нему.");
			}
		    else
		    {
		        if(GetPVarInt(playerid,"radarspawnnn") == 1)
				{
			        DestroyDynamicObject(radar_objects[playerid]);
			        DestroyDynamic3DTextLabel(radar_objects1[playerid]);
			        radar_objects[playerid] = 0;
			        DestroyDynamicArea(radar_areas[playerid]);
			        SetPVarInt(playerid,"radarspawn",0);
			        return SendClientMessage(playerid, COLOR_GREY, "Вы убрали радар");
		    	}
			}
		}
	}
	return 1;
}

CMD:house_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /house_slot [id игрока] [кол-во слотов]");
	new string[148], str[148];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "от 0 до 15");

	AddPlayerData(to_player, P_HOUSE_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "house_slots", GetPlayerData(to_player, P_HOUSE_SLOTS));

	format(string, sizeof(string), "Руководитель %s[%d] добавил игроку %s[%d] %d слотов под дом", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(string, 0xFFFF00FF);

	format(str, sizeof(str), "Руководитель %s[%d] добавил вам %d слотов под дом", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, str);
	return 1;
}
CMD:garage_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /garage_slot [id игрока] [кол-во слотов]");
	new string[148], str[148];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "от 0 до 15");

	AddPlayerData(to_player, P_GARAGE_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "garage_slots", GetPlayerData(to_player, P_GARAGE_SLOTS));

	format(string, sizeof(string), "Руководитель %s[%d] добавил игроку %s[%d] %d слотов под гараж", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(string, 0xFFFF00FF);

	format(str, sizeof(str), "Руководитель %s[%d] добавил вам %d слотов под гараж", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, str);
	return 1;
}
CMD:biz_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /biz_slot [id игрока] [кол-во слотов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(0 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 0 до 15");

	AddPlayerData(to_player, P_BIZ_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "biz_slots", GetPlayerData(to_player, P_BIZ_SLOTS));

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Руководитель %s[%d] добавил игроку %s[%d] %d слотов под бизнес", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);

	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "Руководитель %s[%d] добавил вам %d слотов под бизнес", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, STRING_GLOBAL);

	return 1;
}

cmd:information(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new string: message[144 + 1];
	if(strfind(message,"|") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1) return SCM(playerid, COLOR_RED, "Хуй крашнешь сын потаскухи иди на нубо рп");
	
	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, 82 + strlen(message), "interface('ScreenNotification').add('[1,\"Информация\",\"%s\",\"ffffff\",10000]')", message);
		CEF_CREATE(i, 1, 2, STRING_GLOBAL);
	}
	return 1;
}


CMD:setfuels(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
 		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuels [кол-во]");

	new fmt_text[90];

	if(!(0 <= amount <= 10000)) return SendClientMessage(playerid, 0x999999FF, "Количество топлива от 0 до 10000");

	for(new i; i < g_business_loaded; i++)
	{
		if(GetBusinessData(i, B_TYPE) == 37)
		SetBusinessData(i, B_PRODS, amount);

		format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(i, B_PRODS), GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, fmt_text, false);
	}
	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива во всех АЗС", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива во всех АЗС", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0x999999FF);

	return 1;
}

cmd:info_world(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	SCMF(playerid, -1, "world %d, interior %d, business %d, house %d, garage %d", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetPlayerInBiz(playerid), GetPlayerInHouse(playerid), GetPlayerInGarage(playerid));
	return 1;
}

CMD:pj(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 6) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new vehicleid, type, vinil; else return SendClientMessage(playerid, 0x999999FF, "Используйте: /pj [id транспорта] [тип: 1 - Общие | 2 - индивидуальные] [id винила]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xFF6600FF, "Данного транспорта не существует на сервере");

    new index = GetVehicleData(vehicleid, V_ACTION_ID);

	if(type == 1) ChangeVehicleViniljob(vehicleid, vinil);
	if(type == 2) ChangeVehicleDefaultViniljob(vehicleid, vinil);

	SetOwnableCarData(index, OC_VINIL, vinil);
	
	new queryy[312];

	mysql_format(mysql, queryy, sizeof queryy, "UPDATE ownable_cars SET vinil=%d WHERE id=%d", vinil, GetOwnableCarData(index, OC_SQL_ID));
	mysql_query(mysql, queryy, false);

	SCMF(playerid, -1, "Вы установили винил {FFD83D}№%d {FFFFFF}транспорту {FFD83D}№%d", vinil, vehicleid);
	return 1;
}

CMD:gmx(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new type; else return SCM(playerid,-1,"Используйте: /gmx [1 - временный рестарт | 2 - мгновенный рестарт]");

	if(type == 1)
	{
		SendClientMessageToAll(COLOR_RED, "{FF0000}Внимание!");
		SendClientMessageToAll(0xFAAC58FF, "Через 2 минут(ы) будет произведена перезагрузка сервера!");
		SendClientMessageToAll(COLOR_RED, "{FF0000}Внимание!");
		SendClientMessageToAll(0xFAAC58FF, "Через 2 минут(ы) будет произведена перезагрузка сервера!");

		STRING_GLOBAL[0] = EOS;

		foreach(new i: Player)
		{
			if(!IsPlayerLogged(i)) continue;
			
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"До перезапуска сервера\",%d]", 120);
			CEF_CREATE(i, 2, 4, "InformationTimer", STRING_GLOBAL);

			GameText(i, "~w~Сервер будет~r~перезагружен~n~в течении 2 минут", 4000, 0);
		}

		SetTimer("ServerRestart", 2000*60, false);
	}
	else ServerRestart();

	return 1;
}
cmd:selldebtorsproperty(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	SellDebtorsProperty();
	return 1;
}

CMD:givefish(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return true;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


    extract params -> new to_player, count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givefish [id игрока] [кол-во]");

    if(1 >= count >= 100_000) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 100.000 фишек за один раз");

    if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s[%d] выдал игроку %s[%d] %s фишек", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, formatInt(count));
    SendMessageToAdmins(STRING_GLOBAL, 0xFFFFFFFF);

    SCMF(to_player, -1, "Администратор %s[%d] выдал вам %s фишек", GetPlayerNameEx(playerid), playerid, formatInt(count));

    GiveIteam(to_player, 293, 1, count, 0, "Выдано администратором [А]");

    return true;
}

CMD:yrangoff(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 5) return 1;
    else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	extract params -> new string: name[21], lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /yrangoff [ник игрока] [уровень]");

	if(!(0 <= lvl <= 3)) return SendClientMessage(playerid, 0xFF6600FF, "Неверный идентификатор. Уровень от 0 до 3");

    new query[400];
    new Cache: result, user_id;

    mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
    result = mysql_query(mysql, query);

    if(cache_num_rows()) user_id = cache_get_field_content_int(0, "id");

    if(!cache_num_rows() || !user_id) return SendClientMessage(playerid, 0xFF6600FF, "Аккаунт с таким именем не найден"), cache_delete(result);

    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s [%d] оффлайн назначил игрока %s ютубером %d уровня", GetPlayerNameEx(playerid), playerid, name, lvl);
    SendMessageToAdmins(STRING_GLOBAL, 0xCECECEFF);

    mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET yadmin=%d WHERE id=%d LIMIT 1", lvl, user_id);
    mysql_query(mysql, query, false);

	cache_delete(result);
    return 1;
}

CMD:createcode(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
 	    else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	for(new i; i < MAX_PRIZES_CODE; i++)
	{
		code_additionally[i] = 0;
		code_additionally_type[i] = 0;
		code_additionally_id[i] = 0;
		code_additionally_count[i] = 0;
	}

	IntfDialogCallRemote(playerid, DIALOG_CREATE_CODE, DIALOG_STYLE_LIST,"{99cc00}Меню создания Промокодов-Бонус Кодов","{FFFFFF}1. Промокод \t {999999}Активно\n{FFFFFF}2. Бонус-код \t {999999}Активно\n{FFFFFF}3. Ютуберский промокод \t {999999}Активно","Выбрать", "Закрыть");
	return 1;
}

cmd:return_items(playerid)
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_RETURN_ITEMS) != 1) continue;

		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);

		new typeitem = GetPlayerItem(i, PI_TYPE_ITEM);
		new count = GetPlayerItem(i, PI_COUNT);

		new id = GetPlayerItem(i, PI_SQL_ID);

		if(GetPlayerItem(i, PI_RETURN_ITEMS) == 1)
		{
			if(typeitem == 0) SCMF(playerid, COLOR_GREEN, "Ваш товар: {FFFFFF}\"Предмет\" (%d ед.) {42B02C}снят с продажи владельцем киоска.", count);
			else if(typeitem == 1) SCM(playerid, COLOR_GREEN, "Ваш товар: {FFFFFF}\"Автомобильный номер\" (1 ед.) {42B02C}снят с продажи владельцем киоска.");
			else if(typeitem == 2) SCM(playerid, COLOR_GREEN, "Ваш товар: {FFFFFF}\"Аксессуар\" (1 ед.) {42B02C}снят с продажи владельцем киоска.");
			else if(typeitem == 3) SCM(playerid, COLOR_GREEN, "Ваш товар: {FFFFFF}\"Одежда\" (1 ед.) {42B02C}снят с продажи владельцем киоска.");
		}
	
		new query[365];
		format(query, sizeof query, "UPDATE items SET return_items=0, type=1, slots=%d WHERE id=%d", GetInventorySlots(playerid), id);
		mysql_query(mysql, query, false);

		SetPlayerItem(i, PI_SLOTS, GetInventorySlots(playerid));
		SetPlayerItem(i, PI_TYPE, 1);
		SetPlayerItem(i, PI_RETURN_ITEMS, 0);
	}

	return 1;
}

CMD:get_car_market(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	extract params -> new veh_id; else return SCM(playerid, 0xFFA500FF, "Используйте: /get_car_market [vehid]");
	new fmt_str[128 + 1];
	format(fmt_str, sizeof fmt_str, "%s (%d) - %d", GetVehicleInfo(veh_id, VI_NAME), veh_id, GetCarMarket(veh_id));
	IntfDialogCallRemote(playerid, 0, DIALOG_STYLE_LIST, "{FFA500}Количество в автосалоне", fmt_str, "Закрыть", "");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] посмотрел количество модели [№%d] в автосалоне", GetPlayerNameEx(playerid), playerid, veh_id);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	return 1;
}

CMD:set_car_market_all(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new count; else return SCM(playerid, -1, "Используйте: /set_car_market_all [количество]");
	new query[32 + 1];
	mysql_format(mysql, query, sizeof query, "UPDATE car_market SET count=%d", count);
	mysql_query(mysql, query, false);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] изменил количество всех моделей в автосалонах на %d шт.", GetPlayerNameEx(playerid), playerid, count);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	return 1;
}

CMD:set_car_market(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


	extract params -> new vehicleid, count; else return SCM(playerid, -1, "Используйте: /set_car_market [id транспорта] [количество]");
	new query[52 + 1];
	mysql_format(mysql, query, sizeof query, "UPDATE car_market SET count=%d WHERE modelid=%d", count, vehicleid);
	mysql_query(mysql, query, false);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] изменил количество модели [№%d] в автосалоне на %d шт.", GetPlayerNameEx(playerid), playerid, vehicleid, count);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);
	return 1;
}

CMD:add_all_car_market(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
    if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

    new count;
    if(sscanf(params, "i", count)) return SCM(playerid, -1, "Используйте: /add_all_car_market [кол-во]");

    new query[256], Cache:result;
    for(new i = 0; i < sizeof(g_load_car_shop); i++)
    {
        new modelid = g_load_car_shop[i][CAR_ID];
        
        mysql_format(mysql, query, sizeof(query), "SELECT id FROM car_market WHERE modelid = %d LIMIT 1", modelid);
        result = mysql_query(mysql, query, true);

        if(cache_num_rows())
        {
            mysql_format(mysql, query, sizeof(query), "UPDATE car_market SET count = %d WHERE modelid = %d", count, modelid);
            mysql_query(mysql, query, false);
        }
        else
        {
            mysql_format(mysql, query, sizeof(query), "INSERT INTO car_market (modelid, count) VALUES (%d, %d)", modelid, count);
            mysql_query(mysql, query, false);
        }

        cache_delete(result);
    }

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] обновил автосалон: все модели x%d.", GetPlayerNameEx(playerid), playerid, count);
    SendMessageToAdmins(STRING_GLOBAL, 0x00FF00FF);
    return 1;
}

CMD:report(playerid, params[])
{
 	if(IsPlayerRMuted(playerid) > 0) return SCM(playerid, 0xFF6600FF, "У Вас заблокирован доступ к репорту. Используйте: /time");

	if(GetPVarInt(playerid, "antifloodrep") > gettime())
        return SCMF(playerid, 0xFF6600FF, "Вы недавно отправляли жалобу. Подождите %d {FF6600}сек.", GetPVarInt(playerid, "antifloodrep") - gettime());
	
    if(!strlen(params)) 
    {
        IntfDialogCallRemote
        (
            playerid, DIALOG_REPORT_1, DIALOG_STYLE_INPUT,
            "{FFD83D}Связь с администрацией",
            "{FFFFFF}Введите свое сообщение для администрации сервера\n"\
            "{FFFFFF}Оно должно быть кратким и ясным\n\n"\
            "{99FF99}Если вы хотите подать жалобу на игрока,\n"\
            "{99FF99}обязательно укажите его ID и причину жалобу",
            "Отправить", "Назад"
        );
    }
    else
    {
        format(report_message[playerid], sizeof report_message, "%s", params);

        if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
            return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        if(strfind(report_message[playerid], "~k~~SWITCH_DEBUG_CAM_ON~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
            return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        if(strfind(report_message[playerid], "~k~~TAKE_SCREEN_SHOT~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
            return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        if(strfind(report_message[playerid], "%~%k%~%~SWITCH_DEBUG_CAM_ON%~") != -1 || strfind(report_message[playerid],"|") != -1 || strfind(report_message[playerid],"}") != -1 || strfind(report_message[playerid],"{") != -1 || strfind(report_message[playerid],"&") != -1 || strfind(report_message[playerid],"#") != -1 || strfind(report_message[playerid],"@") != -1 || strfind(report_message[playerid],"%") != -1)
            return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        if(strfind(report_message[playerid],"%s") != -1) return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        if(strfind(report_message[playerid],"%ss") != -1) return SCM(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
        
        IntfDialogCallRemote(playerid, DIALOG_REPORT_2, DIALOG_STYLE_LIST, "Выберите действие", "1. Жалоба на игрока\n2. Задать вопрос", "Далее", "Закрыть");
    }
	return 1;
}
CMD:a_atinfo(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 6) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	extract params -> new to_player; else return SCM(playerid, -1, "Используйте: /a_atinfo [id игрока]");

    new hour, minute,second, day, month, year,report,mute,jail,kick,warn,ban,query[144],time[6], 
		Cache: result;

    mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d", GetPlayerAccountID(to_player));
    result = mysql_query(mysql, query, true);

    new rows = cache_num_rows();

    gettime(hour, minute,second);
    getdate(year, month, day);

    if(rows)
    {
        for(new idx; idx < rows; idx ++)
        {
            timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);
            if(time[0] == day)
            {
                new type = cache_get_field_content_int(idx, "type");
                if(type == 1) mute ++;
                if(type == 2) report ++;
                if(type == 3) jail++;
                if(type == 4) kick++;
                if(type == 5) warn++;
                if(type == 6) ban++;
             }
        }
    }
    cache_delete(result);

	string_dialog[0] = EOS;

    format
    (
        string_dialog, sizeof string_dialog,
        "{FFFFFF}Здесь отображается информация о выполненных действиях игрока\n\
		{FFFFFF}на посту администратора за этот день\n\n\
		{FAAC58}Название команды\tКоличество использований\n\
		{FFFFFF}/pm\t{FAAC58}%d (всего %d)\n\
        {FFFFFF}/jail\t{FAAC58}%d\n\
        {FFFFFF}/mute(/unmute)\t{FAAC58}%d\n\
        {FFFFFF}/kick\t{FAAC58}%d\n\
        {FFFFFF}/warn\t{FAAC58}%d\n\
        {FFFFFF}/ban\t{FAAC58}%d\n\n\
		{FFFFFF}Имя игрока\t{FAAC58}%s\n\
		{FFFFFF}Уровень администратора\t{FAAC58}%d ур.\n\
        {FFFFFF}Текущее время\t{FAAC58}%02d ч. %02d мин. %02d сек.\n\
        {FFFFFF}Текущая дата\t{FAAC58}%d %s %d г.",
        report, GetPlayerData(to_player, P_ADMREP), jail, mute, kick, warn, ban, GetPlayerNameEx(to_player), IsPlayerAdminLevel(to_player), hour, minute, second, day, month_name[month-1], year
    );
    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Статистика администратора", string_dialog, "", "Закрыть");

	format(string_dialog, sizeof string_dialog, "[A] Администратор %s[%d] посмотрел статистику /a_atinfo игрока %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player));
	SendMessageToAdmins(string_dialog, 0x999999FF);
    return 1;
}
CMD:atinfo(playerid)
{
    if(IsPlayerAdminLevel(playerid) < 1) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

    new hour, minute,second, day, month, year,report,mute,jail,kick,warn,ban,query[144],time[6], 
		Cache: result;

    mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d", GetPlayerAccountID(playerid));
    result = mysql_query(mysql, query, true);

    new rows = cache_num_rows();

    gettime(hour, minute,second);
    getdate(year, month, day);

    if(rows)
    {
        for(new idx; idx < rows; idx ++)
        {
            timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);
            if(time[0] == day)
            {
                new type = cache_get_field_content_int(idx, "type");
                if(type == 1) mute ++;
                if(type == 2) report ++;
                if(type == 3) jail++;
                if(type == 4) kick++;
                if(type == 5) warn++;
                if(type == 6) ban++;
             }
        }
    }
    cache_delete(result);

	string_dialog[0] = EOS;

    format
    (
        string_dialog, sizeof string_dialog,
        "{FFFFFF}Здесь отображается информация о ваших выполненных действиях\n\
		{FFFFFF}на посту администратора за этот день\n\n\
		{FAAC58}Название команды\tКоличество использований\n\
		{FFFFFF}/pm\t{FAAC58}%d (всего %d)\n\
        {FFFFFF}/jail\t{FAAC58}%d\n\
        {FFFFFF}/mute(/unmute)\t{FAAC58}%d\n\
        {FFFFFF}/kick\t{FAAC58}%d\n\
        {FFFFFF}/warn\t{FAAC58}%d\n\
        {FFFFFF}/ban\t{FAAC58}%d\n\n\
		{FFFFFF}Ваше имя\t{FAAC58}%s\n\
		{FFFFFF}Ваш уровень администратора\t{FAAC58}%d ур.\n\
        {FFFFFF}Текущее время\t{FAAC58}%02d ч. %02d мин. %02d сек.\n\
        {FFFFFF}Текущая дата\t{FAAC58}%d %s %d г.",
        report, GetPlayerData(playerid, P_ADMREP), jail, mute, kick, warn, ban, GetPlayerNameEx(playerid), IsPlayerAdminLevel(playerid), hour, minute, second, day, month_name[month-1], year
    );
    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Статистика администратора", string_dialog, "", "Закрыть");

	format(string_dialog, sizeof string_dialog, "[A] Администратор %s[%d] посмотрел информацию /atinfo", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(string_dialog, 0x999999FF);
    return 1;
}
CMD:pm(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 1) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	extract params -> new to_player, string: message[144 + 1]; else return SCM(playerid, 0xCECECEFF, "Используйте: /pm [id игрока] [текст]");

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "Введите сообщение");

	SCMF(to_player, 0xFF9945FF, "Администратор %s ответил(а) на ваш запрос: %s", GetPlayerNameEx(playerid), message);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Администратор %s ответил(а) для %s: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), message);
	SendMessageToAdmins(STRING_GLOBAL, 0xFF9945FF);

	PlayerPlaySound(to_player, 1085, 0.0, 0.0, 0.0);

	AddPlayerData(playerid, P_ADMREP, +, 1);

	UpdatePlayerDatabaseInt(playerid, "admreport", GetPlayerData(playerid, P_ADMREP));

	CEF_CREATE(to_player, 1, 4, "Notification");
	CEF_CREATE(to_player, 1, 2, "interface('Notification').type = 1");

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Notification').nickname = '%s'", GetPlayerNameEx(playerid));
	CEF_CREATE(to_player, 1, 2, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Notification').param = %d", RandomEx(1546,5471));
	CEF_CREATE(to_player, 1, 2, STRING_GLOBAL);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Для %s[acc:%d]: %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), message);
	SendLog(playerid, LOG_TYPE_ADMIN_ANSWER, STRING_GLOBAL);
	return 1;
}

cmd:z(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 1) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	extract params -> new ticket_id; else return SCM(playerid, 0xCECECEFF, "Используйте: /z [id запроса]");

    new query[320],
	    Cache: result;

	format(query, sizeof query, "SELECT * FROM `report_mesage` WHERE `report_id`=%d", ticket_id);
	result = mysql_query(mysql, query, true);

    new rows = cache_num_rows();

    if(!rows) return SCM(playerid, COLOR_YELLOW, "Указанный вами запрос не существует или он уже закрыт");

	new text[150], name[32];

    string_dialog = "";

    format(string_dialog, sizeof string_dialog, "{FFFFFF}Все сообщения данного запроса:\n\n");

    new owner_id = cache_get_field_content_int(0, "owner_id");

	for(new i; i < rows; i ++)
	{
        cache_get_field_content(i, "name", name);
        cache_get_field_content(i, "text", text);
        
        new status = cache_get_field_content_int(i, "status");

        if(status == 0) format(query, sizeof query, "{FFD700}Игрок %s: {FFFFFF}%s\n\n", name, text);
        if(status == 1) format(query, sizeof query, "{FFD700}Администратор %s: {FFFFFF}%s\n\n", name, text);
        strcat(string_dialog, query);
    }

    cache_delete(result);

    new fmt_text[32];
    format(fmt_text, sizeof fmt_text, "Запрос [№ %d]", ticket_id);

    format(string_dialog, sizeof string_dialog, "%sВ поле ниже напишите ответ на данный запрос:", string_dialog);
    IntfDialogCallRemote(playerid, DIALOG_REPORT_Z, DIALOG_STYLE_INPUT, fmt_text, string_dialog, "Отправить", "Закрыть");

    m_player_report_id[playerid] = ticket_id;
    
    SetPVarInt(playerid, "owner_id_player", owner_id);

    return true;
}

cmd:setbuyadmin(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");
 	extract params -> new to_player, type; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setbuyadmin [id игрока] [0 - забрать | 1 - выдать]");
 	
	if(!(0 <= type <= 1)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setbuyadmin [id игрока] [0 - забрать | 1 - выдать]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))	return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(type == 1)
	{
		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] выдал %s[%d] обозначение покупного администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(STRING_GLOBAL, 0xFF5533FF);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Поставил %s[%d] на пост покупного администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, STRING_GLOBAL);

		SetPlayerData(to_player, P_BUYADMIN, 1);
		UpdatePlayerDatabaseInt(to_player, "buyadmin", 1);
	}
	else
	{
		STRING_GLOBAL[0] = EOS;
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] снял %s[%d] с покупного администратора",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToAdmins(STRING_GLOBAL, 0xFF5533FF);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Снял %s[%d] с поста покупного администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_SETADMIN, STRING_GLOBAL);

		SetPlayerData(to_player, P_BUYADMIN, 0);
		UpdatePlayerDatabaseInt(to_player, "buyadmin", 0);
	}
	return 1;
}

CMD:add_pcar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new modelid, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add_pcar [id модели] [цвет 1] [цвет 2]");
	if(!(400 <= modelid <= 614) && (!(699 <= modelid <= 699) && (!(793 <= modelid <= 799) && (!(15065 <= modelid <= 15299) && (!(15600 <= modelid <= 15699) && (!(907 <= modelid <= 909) && (!(965 <= modelid <= 965) && (!(999 <= modelid <= 999) && (!(1326 <= modelid <= 1326) && (!(17400 <= modelid <= 17409) && (!(17410 <= modelid <= 17427)))))))))))) return SCM(playerid, 0xCECECEFF, "Вы указали неверный id авто. Доступные авто: 400-614, 699, 793-799, 907-909, 965, 999, 1326, 15065-15299, 15600-15699, 17400-17409, 17410-17427");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	CreateVehicle(modelid, x, y + 3, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_PRIZE, 1);
	//SetVehicleNumber(vehicleid, 4, GenerateCarNumberUK(playerid));

	new fmt_text[100];
	format(fmt_text, sizeof fmt_text, "Транспорт созданный для Розыгрыша");
	CreateVehicleLabel(modelid, fmt_text, 0xFFFFFFFF, 0.0, 4.0, 2.0, 15.0);
	
	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] создал транспорт для розыгрыша (%s, %d, %d)", GetPlayerNameEx(playerid), playerid, GetVehicleInfo(modelid , VI_NAME), color_1, color_2);
	SendMessageToAdmins(fmt_text, 0xFF000000);

	SendLog(playerid, LOG_TYPE_ADMIN_MUTE, fmt_text);

	return 1;
}

CMD:offhardban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new string:name[21], string:reason[222]; else return SendClientMessage(playerid, 0xC0C0C0FF, "Используйте /offhardban [Имя игрока] [причина]");

	new query[248];
	mysql_format(mysql,query,sizeof query,"SELECT id,serialid FROM accounts_canvasdev WHERE name='%e'",name);
	mysql_tquery(mysql,query,"CB_BanHWIDoff","iss",playerid,name,reason);

	return 1;
}

CMD:hardban(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, string:reason[222]; else return SendClientMessage(playerid, 0xC0C0C0FF, "Используйте /hardban [id игрока] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(IsPlayerAdminLevel(playerid) <= IsPlayerAdminLevel(to_player)) 
		return SCM(playerid, COLOR_GREY, "Вы не можете забанить по hwid администратора выше вас по рангу");

	new query[548];
	format(query, sizeof query, "INSERT INTO `hardware_bans` (`acc_id`, `hardware_id`, `type`, `reason`) VALUES ('%d', '%s', 1, '%s');", GetPlayerAccountID(to_player), g_player[to_player][P_HARDWARE_ID_TEMP], reason);
	mysql_pquery(mysql, query);

	return 1;
}

cmd:findcar(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /findcar [название транспорта или часть названия транспорта]");

	new count;
	new fmt_str[148];

	for(new i; i < sizeof g_vehicle_info; i++)
	{
		if(strfind(g_vehicle_info[i][VI_NAME], params, true) != -1)
		{
			count ++;

			format(fmt_str, sizeof fmt_str, "{FFFFFF}%s, ID: {d0cba6}%d", g_vehicle_info[i][VI_NAME], g_vehicle_info[i][VI_ID]);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
	}
	if(!count) SendClientMessage(playerid, 0x999999FF, "Совпадений не найдено");

	return 1;
}

cmd:createorders(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] %s[%d] инициировал добавление новых заказов для дальнобойщиков", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(STRING_GLOBAL, 0xFFFF00FF);

	CreateProdsOrders();
	CreateFuelOrders();
	return true;
}

cmd:jmenu(playerid)
{
	if(!HasJob(playerid, 15)) return SCM(playerid, COLOR_GREY, "Вы не работаете Дальнобойщиком");
	
	ShowPlayerJMenu(playerid);

	return true;
}

CMD:r(playerid, params[])
{
    if(IsPlayerMuted(playerid) > 0)
        return SCM(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");

    if(!strlen(params))
        return SCM(playerid, 0xCECECEFF, "Используйте: /r [текст]");

    new fmt_text[144];

    if(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FSB)
    {
        format(fmt_text, sizeof fmt_text, "[F] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
            if(!GetPlayerTeamEx(i)) continue;
            if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
            if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

            SendClientMessage(i, 0x6699CCFF, fmt_text);
        }
    }
    return 1;
}

CMD:rr(playerid, params[])
{
    if(IsPlayerMuted(playerid) > 0)
        return SCM(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");

    if(!strlen(params))
        return SCM(playerid, 0xCECECEFF, "Используйте: /rr [текст]");

    new fmt_text[144];

    if(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FSB)
    {
        format(fmt_text, sizeof fmt_text, "(( [F] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
            if(!GetPlayerTeamEx(i)) continue;
            if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
            if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;

            SendClientMessage(i, 0x6699CCFF, fmt_text);
        }
    }
    return 1;
}

CMD:d(playerid, params[])
{
    if(GetPlayerJob(playerid) < 9 || GetPlayerJob(playerid) > 10)
        return SCM(playerid, 0xCECECEFF, "Доступно только лидеру и заместителю организации");

    if(IsPlayerMuted(playerid) > 0)
        return SCM(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");

    if(!strlen(params))
        return SCM(playerid, 0xCECECEFF, "Используйте: /d [текст]");

    new fmt_text[144];
    format(fmt_text, sizeof fmt_text, "(( [D] [%s] %s %s[%d]: %s ))", GetPlayerTeamName(playerid), GetPlayerRankNameTeam(playerid), GetPlayerNameEx(playerid), playerid, params);

    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
        if(!GetPlayerTeamEx(i)) continue;

        SendClientMessage(i, 0x0099FFFF, fmt_text);
    }
    return 1;
}

CMD:dd(playerid, params[])
{
    if(GetPlayerJob(playerid) < 9 || GetPlayerJob(playerid) > 10)
        return SCM(playerid, 0xCECECEFF, "Доступно только лидеру и заместителю организации");

    if(IsPlayerMuted(playerid) > 0)
        return SCM(playerid, 0xFF6600FF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");

    if(!strlen(params))
        return SCM(playerid, 0xCECECEFF, "Используйте: /dd [текст]");

    new fmt_text[144];
    format(fmt_text, sizeof fmt_text, "(( [DD] [%s] %s %s[%d]: %s ))", GetPlayerTeamName(playerid), GetPlayerRankNameTeam(playerid), GetPlayerNameEx(playerid), playerid, params);

    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
        if(!GetPlayerTeamEx(i)) continue;

        SendClientMessage(i, 0x6699CCFF, fmt_text);
    }
    return 1;
}

cmd:trucker(playerid)
{
	if(!HasJob(playerid, 15)) return SCM(playerid, COLOR_GREY, "Эта команда доступна только дальнобойщикам");

	if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 2) return SCM(playerid, COLOR_GREY, "Данная команда доступна только внештатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

	new modelid = GetVehicleData(vehicleid, V_MODELID);

    if(!IsCustomCarTkModel(modelid)) return SCM(playerid, COLOR_GREY, "Данный транспорт не подходит для начала работы");

	if(GetPlayerData(playerid, P_IN_JOB) == false)
	{
		SetPlayerData(playerid, P_IN_JOB, true);

		SetPlayerData(playerid, P_JOB_CAR, vehicleid);

		player_job_active[playerid] = 4;

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFA500}Транспортная компания\n{FFFFFF}%s", GetBusinessData(GetPlayerData(playerid, P_TK_JOB), B_NAME));
		CreateVehicleLabel(vehicleid, STRING_GLOBAL, 0x3399FFFF, 0.0, 2.1, 3.1, 20.0);
			
		SCM(playerid, 0xFFFFFFFF, "Вы начали свой {E6CE7B}рабочий день. Посигнальте {FFFFFF}и выберите необходимый прицеп");
	}
	else if(GetPlayerData(playerid, P_IN_JOB) == true)
	{
		SetPlayerData(playerid, P_IN_JOB, false);

		g_player_trailer_status[playerid] = 0;
		g_player_trailer_type[playerid] = 0;
		player_job_active[playerid] = 0;

		DestroyVehicle(g_player_trailer[playerid]);
		g_player_trailer[playerid] = INVALID_VEHICLE_ID;

		SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

		if(GetPlayerData(playerid, P_ORDER) != -1) 
		{
			SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
			SetPlayerData(playerid, P_ORDER, -1);
		}

		if(GetPlayerData(playerid, P_FUELORDER) != -1) 
		{
			SetFuelOrderData(GetPlayerData(playerid, P_FUELORDER), F_USED, false);
			SetPlayerData(playerid, P_FUELORDER, -1);
		}

		SCM(playerid, 0xFFFFFFFF, "Вы закончили свой {E6CE7B}рабочий день.{FFFFFF}Ваш прицеп доставлен в гараж компании");

		DisablePlayerRaceCheckpoint(playerid);
	}

	return true;
}

cmd:bonus(playerid)
{
	DeletePVar(playerid, "all_player_bonus");

	new query[148],
		text[32],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM player_bonus WHERE owner_id=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	new rows = cache_num_rows();

	if(rows)
	{
		string_dialog[0] = EOS;
		format(string_dialog, sizeof string_dialog, "{FFFFFF}Забрать все бонусы");
		for(new i; i < rows; i++)
		{
			new count = cache_get_field_content_int(i, "count");

			cache_get_field_content(i, "text", text);

			SetPlayerListitemValue(playerid, i, cache_get_field_content_int(i, "id"));

			format(query, sizeof query, "\n{ffffff}- Бонус за {c5b519}%s {FFFFFF}в размере {64a807}%s руб", text, formatInt(count));
        	strcat(string_dialog, query);

			SetPVarInt(playerid, "all_player_bonus", GetPVarInt(playerid, "all_player_bonus") + count);
		}

		IntfDialogCallRemote(playerid, DIALOG_PLAYER_BONUS, DIALOG_STYLE_LIST, "{FFFFFF}Полученные бонусы", string_dialog, "Забрать", "Закрыть");
	}
	else
	{
		IntfDialogCallRemote(playerid, DIALOG_PLAYER_BONUS, DIALOG_STYLE_LIST, "{FFFFFF}Полученные бонусы", "{FFFFFF}- Вы не получали бонусов", "Забрать", "Закрыть");
	}

	cache_delete(result);

	return true;
}

cmd:nf(playerid) callcmd::notification(playerid);
cmd:nt(playerid) callcmd::notification(playerid);
cmd:notification(playerid)
{
	new query[348],
		text[148],
		time[32],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM notification WHERE owner_id=%d ORDER BY status DESC", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	new rows = cache_num_rows();

	if(rows)
	{
		string_dialog[0] = EOS;
		for(new i; i < rows; i++)
		{
			cache_get_field_content(i, "text", text);
			cache_get_field_content(i, "time", time);

			new status = cache_get_field_content_int(i, "status");

			SetPlayerListitemValue(playerid, i, cache_get_field_content_int(i, "id"));

			format(query, sizeof query, "{ffffff}- %s | %s %s\n", time, text, status ? "{64a807}[NEW]" : "");
        	strcat(string_dialog, query);
		}
		strdel(string_dialog, strlen(string_dialog) - 2, strlen(string_dialog));

		IntfDialogCallRemote(playerid, DIALOG_PLAYER_NOTIFICATION, DIALOG_STYLE_LIST, "{FFFFFF}Список уведомлений", string_dialog, "Выбрать", "Закрыть");
	}
	else IntfDialogCallRemote(playerid, DIALOG_PLAYER_NOTIFICATION, DIALOG_STYLE_LIST, "{FFFFFF}Список уведомлений", "{FFFFFF}- Список уведомлений пуст", "", "Закрыть");

	cache_delete(result);
	return true;
}

cmd:myslots(playerid)
{
	string_dialog[0] = EOS;

	format
	(
		string_dialog, sizeof string_dialog,
		"\
		{FFFFFF}Здесь отображается информация об количестве слотов для иммущества\n\
		{FFFFFF}которые имеются на вашем аккаунте:\n\n\
		{FFFFFF}Слоты для транспорта:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для дома:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для бизнеса:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для гаража:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для киоска:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для огорода:\t{FAAC58}%d шт.\n\
		{FFFFFF}Слоты для лотов в аукционе:\t{FAAC58}%d шт.\n\
		",
		GetPlayerData(playerid, P_CAR_SLOTS),
		GetPlayerData(playerid, P_HOUSE_SLOTS),
		GetPlayerData(playerid, P_BIZ_SLOTS),
		GetPlayerData(playerid, P_GARAGE_SLOTS),
		GetPlayerData(playerid, P_KIOSK_SLOTS),
		GetPlayerData(playerid, P_GARDEN_SLOTS),
		GetPlayerData(playerid, P_AUCTION_SLOTS)
	);

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация о слотах", string_dialog, "", "Закрыть");
	return true;
}

CMD:givemoney(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new to_player, string:cash[22]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemoney [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	GivePlayerMoneyStr(to_player, cash);

	new reason[144];
	format(reason, sizeof reason, "Администратор %s выдал Вам %s рублей", GetPlayerNameEx(playerid), formatStr(cash));
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во %s руб, в итоге у игрока %s руб", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, formatStr(cash), formatStr(QueryPlayerBalance(to_player)));
	SendMessageToAdmins(reason, 0xFFFF00FF);
	return 1;
}

CMD:togvip(playerid)
{
    if(GetPlayerVipoff(playerid) == 0)
    {
	    SetPlayerData(playerid, P_VIPOFF, 1);
	   	UpdatePlayerDatabaseInt(playerid, "vipoff", 1);
	   	SendClientMessage(playerid, 0x66CC00FF, "Вы выключили VIP чат");
		return 1;
    }
    if(GetPlayerVipoff(playerid) == 1)
    {
	    SetPlayerData(playerid, P_VIPOFF, 0);
	   	UpdatePlayerDatabaseInt(playerid, "vipoff", 0);
	   	SendClientMessage(playerid, 0x66CC00FF, "Вы включили VIP чат");
		return 1;
    }
    return 1;
}

CMD:vr(playerid, params[])
{
	if(IsPlayerMuted(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");
	if(IsPlayerVMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "У Вас заблокирован доступ к VIP чату. Используйте: /time");
	if(GetPlayerKDSet(playerid) == 1) return SendClientMessage(playerid, 0xFF8800FF, "Писать в премиум чат можно раз в {FFFFFF}10{FF8800} секунд");
	if(GetPlayerLevel(playerid) < 3) return SendClientMessage(playerid, 0xFF8800FF, "Писать в премиум чат можно только с {FFFFFF}3{FF8800} уровня");
	if(GetPlayerVipoff(playerid) == 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас отключён VIP чат. Включить /togvip");
	if(GetPlayerData(playerid, P_KDSET) == 1) return SendClientMessage(playerid, 0xCECECEFF, "Не так часто!");
	
	if(!strlen(params))
	return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vr [текст]");

	new fmt_str[128];
	SetPlayerData(playerid, P_KDSET, 1);
	SetTimerEx("KDSet", 2000, false, "i", playerid);
	if(GetPlayerYAdminEx(playerid) > 1) return format(fmt_str, sizeof fmt_str, "[Media]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xAA3333AA);
	if(IsPlayerAdminLevel(playerid) > 1) return format(fmt_str, sizeof fmt_str, "[Администратор]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xAA3333AA);
	if(GetPlayerPremium(playerid) == 0) return format(fmt_str, sizeof fmt_str, "[Игрок]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xCD7F32FF);
	if(GetPlayerPremium(playerid) == 1) return format(fmt_str, sizeof fmt_str, "[VIP Silver]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xCD7F32FF);
	if(GetPlayerPremium(playerid) == 2) return format(fmt_str, sizeof fmt_str, "[VIP Gold]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xFFD700FF);
	if(GetPlayerPremium(playerid) == 3) return format(fmt_str, sizeof fmt_str, "[VIP Platinum]{FFFFFF} %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params), SendMessageToPrem(fmt_str, 0xE5E4E2FF);
	return 1;
}

cmd:setcmd(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) 
		return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setcmd [id игрока]");

	//if(playerid == to_player) 
		//return SCM(playerid, 0xCECECEFF, "Вы не можете самому себе выдать доступ к команде");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	SetPVarInt(playerid, "to_player", to_player);

	string_dialog[0] = EOS;

	format
	(
		string_dialog, sizeof string_dialog, 
		"Команда\tДоступ\tИнформация о команде\n\
		/giveskin\t%s\t{FFFFFF}Выдача одежды на аккаунт\n\
		/contspawn\t%s\t{FFFFFF}Спавн контейнеров любого типа\n\
		/svalkaspawn`\t%s\t{FFFFFF}Спавн свалки\n\
		/afly\t%s\t{FFFFFF}Доступ к полету\n\
		/getv\t%s\t{FFFFFF}Телепорт личного транспорта к себе\n\
		/fixcar\t%s\t{FFFFFF}Ремонт транспорта без рем. комплекта",
		GetPlayerData(to_player, P_CMD_giveskin) ? "{66CC33}Есть" : "{CC3333}Нет",
		GetPlayerData(to_player, P_CMD_contspawn) ? "{66CC33}Есть" : "{CC3333}Нет",
		GetPlayerData(to_player, P_CMD_dumpspawn) ? "{66CC33}Есть" : "{CC3333}Нет",
		GetPlayerData(to_player, P_CMD_afly) ? "{66CC33}Есть" : "{CC3333}Нет",
		GetPlayerData(to_player, P_CMD_getv) ? "{66CC33}Есть" : "{CC3333}Нет",
		GetPlayerData(to_player, P_CMD_fixcar) ? "{66CC33}Есть" : "{CC3333}Нет"
	);

 	IntfDialogCallRemote(playerid, DIALOG_SET_CMD, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}Панель доступа к командам", string_dialog, "Выбрать", "Закрыть");

	return true;
}

cmd:give_jticket(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) 
		return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");

	extract params -> new to_player, count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /give_jticket [id игрока] [время купона]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");


	new fmt_text[128];
	format(fmt_text, sizeof fmt_text, "Купон для выхода из тюрьмы Деморган (%d мин)", count);

	GivePlayerMyPrizes(to_player, fmt_text, 16, count, 0, 0, 0);
	
	format(fmt_text, sizeof fmt_text, "[A] Администратор %s[%d] выдал %s[%d] купон для выхода из тюрьмы \"Деморган\" (%d мин)",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, count);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	SCMF(to_player, 0x66CC00FF, "Администратор %s[%d] выдал вам купон для выхода из тюрьмы \"Деморган\" (%d мин)", GetPlayerNameEx(playerid), playerid, count);
	return true;
}

CMD:delownablecar(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8) return 1;
    
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delownablecar [id транспорта]");
	
	extract params -> new id;

    new query[185],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id=%d LIMIT 1", id);
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) 
		return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует");

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", id);
	mysql_query(mysql, query, false);

	return 1;
}


cmd:set_iznos(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 3) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");
	
	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	extract params -> new vehicleid, iznos; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /set_iznos [id транспорта] [кол-во износа]");

	if(!IsAOwnableCar(vehicleid)) 
		return SCM(playerid, COLOR_GREY, "Данный транспорт является временным, ему нельзя изменить износ");
	
	SetVehicleData(vehicleid, V_IZNOS, iznos);

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new query[124];
	mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET iznos=%d WHERE id=%d LIMIT 1", iznos, GetOwnableCarData(index, OC_SQL_ID));
	mysql_query(mysql, query, false);

	format(query, sizeof query, "%s[%d] изменил износ у личного транспорта[#%d] на %d через /set_iznos", GetPlayerNameEx(playerid), playerid, vehicleid, iznos);
	SendMessageToAdmins(query, 0x999999FF);

	return true;
}

CMD:setspawn(playerid, params[])
{
	CEF_CREATE(playerid, 2, 4, "SelectSpawn", "[[[\"На ЖД вокзале, автостанции\",1,34],[\"В личном доме\",0,24],[\"В гостиничном номере\",0,52],[\"В доме банды\",2,101],[\"В гостях (совместное проживание)\",0,24],[\"В доме на колесах\",0,8],[\"В личном гараже\",0,39]]]");

	SetPVarInt(playerid, "SelectSpawn", 1);
}

stock SelectSpawnGoldVip(playerid)
{
	CEF_CREATE(playerid, 2, 4, "SelectSpawn", "[[\
	[\"Автовокзал г.Арзамас\",0,34], \
	[\"Автовокзал г.Лыткарино\",0,34],\
	[\"Автовокзал пгт.Батырево\",0,34],\
	[\"Автовокзал г.Арзамас (около больницы)\",0,34],\
	[\"Автовокзал г.Эдово\",0,34],\
	[\"Автовокзал г.Южный\",0,34]\
	]]");

	SetPVarInt(playerid, "SelectSpawnGoldVip", 1);

	return 1;
}

stock OnPlayerSelectSpawnClose(playerid) 
{
	CEF_HIDE(playerid, "SelectSpawn");
	if(GetPVarInt(playerid, "SelectSpawn") == 1)
	{
		DeletePVar(playerid, "SelectSpawn");
	}
	if(GetPVarInt(playerid, "SelectSpawnGoldVip") == 1)
	{
		DeletePVar(playerid, "SelectSpawnGoldVip");
	}
}

public: OnPlayerSelectSpawn(playerid, listitem)
{
	if(GetPVarInt(playerid, "SelectSpawn") == 1)
	{
	    switch(listitem)
		{
		    case 1: 
		    {
			    new query[94],
				    Cache: result;

			    mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
			    result = mysql_query(mysql, query, true);

			    new rows = cache_num_rows();

			    if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

			    string_dialog[0] = EOS;
			    for(new i; i < rows; i ++)
			    {
				    new biz_id = cache_get_field_content_int(i, "id");
				    new entrance = cache_get_field_content_int(i, "entrance");

				    if(entrance == -1)
				    {
					    if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
					    else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
				    }
				    else
				    {
					    if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
					    else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
				    }

				    strcat(string_dialog, query);
				    SetPlayerListitemValue(playerid, i, biz_id-1);
			    }
			    IntfDialogCallRemote(playerid, DIALOG_SPAWN_HOME_LIST, DIALOG_STYLE_LIST, "{FFCD00}Выберите дом", string_dialog, "Выбрать", "Закрыть");

			    cache_delete(result);

			    return true;
		    }
		    case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return GameText(playerid, "~r~Вы не проживаете ни у кого в гостях", 3000, 1);
		    case 3: 
			{
				new fam_id = GetPlayerData(playerid, P_FAMILY);
                new inFamilyMansion = GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1 || GetFamilyData(fam_id, F_WEST_MANSION) == 1
                || GetFamilyData(fam_id, F_NORTH_MANSION) == 1
                || GetFamilyData(fam_id, F_PELA_BASE) == 1;
                new inFaction = GetPlayerTeamEx(playerid); 

                if(!inFaction && !inFamilyMansion) 
                {
                   return GameText(playerid, "~r~Вы не состоите в организации", 3000, 1);
                }
			}
		    case 4: if(!GetPlayerFamily(playerid)) return GameText(playerid, "~r~Вы не состоите в банде", 3000, 1);
		    case 5:
		    {
			    page_cars[playerid] = 1;
			    type_page_cars[playerid] = 17;
			    ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
			    return true;
		    }
	    }
	    SetPlayerData(playerid, P_SPAWN, listitem);
	    UpdatePlayerDatabaseInt(playerid, "setting_spawn", listitem);
        SendClientMessage(playerid, 0x3399FFFF, "Место появления в игре изменено");
		DeletePVar(playerid, "SelectSpawn");
        CEF_HIDE(playerid, "SelectSpawn");
	}
	if(GetPVarInt(playerid, "SelectSpawnGoldVip") == 1)
	{
		switch(listitem)
		{
			case 0: SetPlayerPosEx(playerid, 842.2757, 588.6500, 15.8857, 87.8111, 0, 0);
			case 1: SetPlayerPosEx(playerid, -2665.5464, 149.0538, 12.4469, 268.1883, 0, 0);
			case 2: SetPlayerPosEx(playerid, 1649.1024, 2192.5959, 14.1029, 1.0846, 0, 0);
			case 3: SetPlayerPosEx(playerid, 451.4427, 1560.8689, 12.1943, 174.5830, 0, 0);
			case 4: SetPlayerPosEx(playerid, -2471.8464, 2838.7969, 37.7199, 89.8594, 0, 0);
			case 5: SetPlayerPosEx(playerid, 2570.5774, -2048.5359, 21.9640, 267.7914, 0, 0);
		}
		CEF_HIDE(playerid, "SelectSpawn");
		DeletePVar(playerid, "SelectSpawnGoldVip");
	}
	return true;
}

new g_vehicle_house[5] = {15277,15278,15279,15668,15680};

new vehicle_house_id[MAX_PLAYERS];
new vehicle_house_status[MAX_PLAYERS];

stock EnterVehicleHouse(playerid)
{

	new vehicleid = IsVehicleIdHouse(playerid);

	if(!vehicleid) return true;

	if(!IsAOwnableCar(vehicleid)) return true;
	
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) 
			continue;

		if(vehicleid != i) 
			continue;

		new action_id = GetVehicleData(i, V_ACTION_ID);

		vehicle_house_id[playerid] = GetOwnableCarData(action_id, OC_SQL_ID);

		SetPlayerPosEx(playerid, -2803.1982,-1500.1239,1001.0106,180.8575, 4, vehicle_house_id[playerid]);

		CEF_HIDE(playerid, "Interactions");
		vehicle_house_status[playerid] = 0;
		CEF_CREATE(playerid, 2, 4, "Interactions", "[[10, \"Выйти из дома\"]]");
	}
	return true;
}
stock ExitVehicleHouse(playerid)
{
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			continue;

		new auction_id = GetVehicleData(i, V_ACTION_ID);

		if(GetOwnableCarData(auction_id, OC_OWNER_ID) != GetPlayerAccountID(playerid))
			continue;

		if(GetOwnableCarData(auction_id, OC_SQL_ID) != vehicle_house_id[playerid])
			continue;

	    new Float: POS[5];
		GetCoordVehicle(i, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);

		SetPlayerPosEx(playerid, POS[0] + 1.5, POS[1] + 1.5, POS[2], POS[3], 0, 0);

        CEF_HIDE(playerid, "Interactions");
		vehicle_house_id[playerid] = 0;

		return true;
	}
	SCM(playerid, COLOR_GREY, "Ошибка! Ваше транспортное средство не загружено на сервере");

	return true;
}

stock IsVehicleIdHouse(playerid)
{
	new vehicleid = GetNearestVehicleID(playerid, 5.0);
	if(vehicleid == INVALID_VEHICLE_ID)
	{

		if(vehicle_house_status[playerid] == 1)
		{
			CEF_HIDE(playerid, "Interactions");
			vehicle_house_status[playerid] = 0;
		}
	}
	else
	{
		if(!IsAOwnableCar(vehicleid)) return 0;

		new model_id = GetVehicleData(vehicleid, V_MODELID);

		for(new i; i < sizeof g_vehicle_house; i++)
		{
			if(g_vehicle_house[i] != model_id) continue;

			new Float: POS[5];
			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, POS[0], POS[1], POS[2], POS[3], POS[4]);
			if(IsPlayerInRangeOfPoint(playerid, 2.5, POS[0], POS[1], POS[2]))
			{
				if(vehicle_house_status[playerid] == 0)
				{
					CEF_CREATE(playerid, 2, 4, "Interactions", "[[10, \"Войти в дом\"]]");
					vehicle_house_status[playerid] = 1;
				}
				return vehicleid;
			}
			else 
			{
				CEF_HIDE(playerid, "Interactions");
				vehicle_house_status[playerid] = 0;

				return 1;
			}
		}
	}
	return 0;
}
new testdrive_timer[MAX_PLAYERS];
//-------------Казино-----------------
new RouletteTable[MAX_PLAYERS]; // стол
new PositionChip[MAX_PLAYERS] = -1; // туда куда поставили
new RouletteChip[MAX_PLAYERS]; // объект
new ruletka_time1[MAX_PLAYERS];
new RouletteStatus[MAX_PLAYERS];
new ChipRandom[7];

new StatusChip[MAX_PLAYERS];

new Float:ChipPosition[6][49][3] = // координаты фишек
{
    {
        {223.168, -303.192, 1010.98}, //0
        {223.393, -303.032, 1010.98}, //1
        {223.165, -303.037, 1010.98}, //2
        {222.935, -303.037, 1010.98}, //3
        {223.396, -302.885, 1010.98}, //4
        {223.168, -302.890, 1010.98}, //5
        {222.935, -302.895, 1010.98}, //6
        {223.406, -302.744, 1010.98}, //7
        {223.162, -302.752, 1010.98}, //8
        {222.938, -302.749, 1010.98}, //9
        {223.409, -302.599, 1010.98}, //10
        {223.168, -302.599, 1010.98}, //11
        {222.935, -302.600, 1010.98}, //12
        {223.406, -302.459, 1010.98}, //13
        {223.166, -302.461, 1010.98}, //14
        {222.929, -302.458, 1010.98}, //15
        {223.408, -302.313, 1010.98}, //16
        {223.168, -302.312, 1010.98}, //17
        {222.928, -302.308, 1010.98}, //18
        {223.408, -302.167, 1010.98}, //19
        {223.165, -302.172, 1010.98}, //20
        {222.930, -302.164, 1010.98}, //21
        {223.401, -302.023, 1010.98}, //22
        {223.165, -302.022, 1010.98}, //23
        {222.935, -302.023, 1010.98}, //24
        {223.399, -301.874, 1010.98}, //25
        {223.165, -301.877, 1010.98}, //26
        {222.935, -301.867, 1010.98}, //27
        {223.397, -301.731, 1010.98}, //28
        {223.166, -301.734, 1010.98}, //29
        {222.932, -301.730, 1010.98}, //30
        {223.396, -301.580, 1010.98}, //31
        {223.166, -301.580, 1010.98}, //32
        {222.927, -301.584, 1010.98}, //33
        {223.399, -301.441, 1010.98}, //34
        {223.166, -301.438, 1010.98}, //35
        {222.928, -301.441, 1010.98}, //36
		{223.397, -301.293, 1010.98}, //2 TO 1 возле 34
		{223.157, -301.297, 1010.98}, //2 TO 1 возле 35
        {222.928, -301.302, 1010.98}, //2 TO 1 возле 36
		{223.596, -302.822, 1010.98}, //1ST 12
        {223.596, -302.251, 1010.98}, //2ND 12
        {223.600, -301.662, 1010.98}, //3RD 12
        {223.747, -302.377, 1010.98}, //RED
        {223.748, -302.102, 1010.98}, //BLACK
        {223.749, -302.977, 1010.98}, //1 TO 18
        {223.746, -301.513, 1010.98}, //19 TO 36
        {223.746, -302.677, 1010.98}, //EVEN
        {223.748, -301.806, 1010.98}  //ODD
    },
    {
        {223.084, -297.194, 1010.98}, //0
		{223.306, -297.046, 1010.98}, //1
		{223.076, -297.049, 1010.98}, //2
		{222.844, -297.044, 1010.98}, //3
		{223.314, -296.899, 1010.98}, //4
		{223.074, -296.899, 1010.98}, //5
		{222.84, -296.8980, 1010.98}, //6
		{223.314, -296.765, 1010.98}, //7
		{223.074, -296.757, 1010.98}, //8
		{222.844, -296.757, 1010.98}, //9
		{223.315, -296.602, 1010.98}, //10
		{223.084, -296.606, 1010.98}, //11
		{222.839, -296.617, 1010.98}, //12
		{223.309, -296.463, 1010.98}, //13
		{223.075, -296.461, 1010.98}, //14
		{222.847, -296.474, 1010.98}, //15
		{223.314, -296.315, 1010.98}, //16
		{223.075, -296.315, 1010.98}, //17
		{222.839, -296.313, 1010.98}, //18
		{223.304, -296.176, 1010.98}, //19
		{223.074, -296.169, 1010.98}, //20
		{222.834, -296.170, 1010.98}, //21
		{223.308, -296.025, 1010.98}, //22
		{223.074, -296.024, 1010.98}, //23
		{222.834, -296.028, 1010.98}, //24
		{223.304, -295.884, 1010.98}, //25
		{223.074, -295.874, 1010.98}, //26
		{222.834, -295.892, 1010.98}, //27
		{223.307, -295.739, 1010.98}, //28
		{223.075, -295.738, 1010.98}, //29
		{222.834, -295.743, 1010.98}, //30
		{223.299, -295.598, 1010.98}, //31
		{223.084, -295.598, 1010.98}, //32
		{222.846, -295.598, 1010.98}, //33
		{223.302, -295.454, 1010.98}, //34
		{223.078, -295.448, 1010.98}, //35
		{222.853, -295.442, 1010.98}, //36
		{223.287, -295.308, 1010.98}, //2 TO 1 возле 34
		{223.071, -295.306, 1010.98}, //2 TO 1 возле 35
		{222.83, -295.3070, 1010.98}, //2 TO 1 возле 36
		{223.504, -296.854, 1010.98}, //1ST 12
		{223.509, -296.258, 1010.98}, //2ND 12
		{223.509, -295.683, 1010.98}, //3RD 12
		{223.654, -296.391, 1010.98}, //RED
		{223.654, -296.106, 1010.98}, //BLACK
		{223.654, -296.986, 1010.98}, //1 TO 18
		{223.654, -295.520, 1010.98}, //19 TO 36
		{223.654, -296.681, 1010.98}, //EVEN
		{223.654, -295.811, 1010.98}  //ODD
    },
	{
		{208.168, -296.109, 1010.98}, //0
		{207.928, -296.271, 1010.98}, //1
		{208.168, -296.272, 1010.98}, //2
		{208.408, -296.268, 1010.98}, //3
		{207.938, -296.409, 1010.98}, //4
		{208.168, -296.408, 1010.98}, //5
		{208.408, -296.408, 1010.98}, //6
		{207.938, -296.549, 1010.98}, //7
		{208.168, -296.549, 1010.98}, //8
		{208.398, -296.548, 1010.98}, //9
		{207.938, -296.698, 1010.98}, //10
		{208.178, -296.703, 1010.98}, //11
		{208.398, -296.703, 1010.98}, //12
		{207.938, -296.843, 1010.98}, //13
		{208.168, -296.843, 1010.98}, //14
		{208.408, -296.843, 1010.98}, //15
		{207.948, -296.984, 1010.98}, //16
		{208.168, -296.986, 1010.98}, //17
		{208.408, -296.986, 1010.98}, //18
		{207.948, -297.124, 1010.98}, //19
		{208.178, -297.128, 1010.98}, //20
		{208.398, -297.131, 1010.98}, //21
		{207.948, -297.281, 1010.98}, //22
		{208.168, -297.273, 1010.98}, //23
		{208.408, -297.278, 1010.98}, //24
		{207.947, -297.426, 1010.98}, //25
		{208.177, -297.427, 1010.98}, //26
		{208.417, -297.427, 1010.98}, //27
		{207.937, -297.567, 1010.98}, //28
		{208.177, -297.567, 1010.98}, //29
		{208.417, -297.577, 1010.98}, //30
		{207.937, -297.707, 1010.98}, //31
		{208.167, -297.717, 1010.98}, //32
		{208.407, -297.717, 1010.98}, //33
		{207.937, -297.857, 1010.98}, //34
		{208.177, -297.857, 1010.98}, //35
		{208.407, -297.857, 1010.98}, //36
		{207.935, -298.006, 1010.98}, //2 TO 1 возле 34
		{208.178, -298.007, 1010.98}, //2 TO 1 возле 35
		{208.408, -297.997, 1010.98}, //2 TO 1 возле 36
		{207.728, -296.459, 1010.98}, //1ST 12
		{207.728, -297.048, 1010.98}, //2ND 12
		{207.738, -297.622, 1010.98}, //3RD 12
		{207.588, -296.916, 1010.98}, //RED
		{207.588, -297.206, 1010.98}, //BLACK
		{207.588, -296.325, 1010.98}, //1 TO 18
		{207.588, -297.785, 1010.98}, //19 TO 36
		{207.588, -296.626, 1010.98}, //EVEN
		{207.588, -297.499, 1010.98}  //ODD
	},
	{
		{208.136, -302.540, 1010.98}, //0
		{207.911, -302.699, 1010.98}, //1
		{208.135, -302.696, 1010.98}, //2
		{208.375, -302.696, 1010.98}, //3
		{207.915, -302.847, 1010.98}, //4
		{208.145, -302.837, 1010.98}, //5
		{208.375, -302.847, 1010.98}, //6
		{207.912, -302.979, 1010.98}, //7
		{208.142, -302.979, 1010.98}, //8
		{208.372, -302.989, 1010.98}, //9
		{207.913, -303.130, 1010.98}, //10
		{208.143, -303.130, 1010.98}, //11
		{208.373, -303.130, 1010.98}, //12
		{207.913, -303.280, 1010.98}, //13
		{208.142, -303.277, 1010.98}, //14
		{208.372, -303.277, 1010.98}, //15
		{207.912, -303.418, 1010.98}, //16
		{208.144, -303.422, 1010.98}, //17
		{208.370, -303.418, 1010.98}, //18
		{207.911, -303.561, 1010.98}, //19
		{208.141, -303.560, 1010.98}, //20
		{208.371, -303.564, 1010.98}, //21
		{207.911, -303.715, 1010.98}, //22
		{208.141, -303.711, 1010.98}, //23
		{208.371, -303.718, 1010.98}, //24
		{207.910, -303.858, 1010.98}, //25
		{208.140, -303.861, 1010.98}, //26
		{208.370, -303.859, 1010.98}, //27
		{207.910, -303.997, 1010.98}, //28
		{208.140, -303.997, 1010.98}, //29
		{208.370, -304.007, 1010.98}, //30
		{207.910, -304.149, 1010.98}, //31
		{208.140, -304.149, 1010.98}, //32
		{208.370, -304.149, 1010.98}, //33
		{207.910, -304.299, 1010.98}, //34
		{208.149, -304.302, 1010.98}, //35
		{208.374, -304.292, 1010.98}, //36
		{207.908, -304.432, 1010.98}, //2 TO 1 возле 34
		{208.148, -304.432, 1010.98}, //2 TO 1 возле 35
		{208.379, -304.432, 1010.98}, //2 TO 1 возле 36
		{207.709, -302.894, 1010.98}, //1ST 12
		{207.699, -303.478, 1010.98}, //2ND 12
		{207.699, -304.065, 1010.98}, //3RD 12
		{207.559, -303.350, 1010.98}, //RED
		{207.559, -303.630, 1010.98}, //BLACK
		{207.559, -302.755, 1010.98}, //1 TO 18
		{207.559, -304.215, 1010.98}, //19 TO 36
		{207.559, -303.062, 1010.98}, //EVEN
		{207.559, -303.929, 1010.98}  //ODD
	},
	{
		{190.756, -293.002, 1011.8}, //0
		{190.904, -293.238, 1011.8}, //1
		{190.907, -293.008, 1011.8}, //2
		{190.910, -292.770, 1011.8}, //3
		{191.049, -293.239, 1011.8}, //4
		{191.049, -293.009, 1011.8}, //5
		{191.044, -292.769, 1011.8}, //6
		{191.194, -293.239, 1011.8}, //7
		{191.194, -293.009, 1011.8}, //8
		{191.194, -292.769, 1011.8}, //9
		{191.344, -293.239, 1011.8}, //10
		{191.344, -293.009, 1011.8}, //11
		{191.341, -292.769, 1011.8}, //12
		{191.482, -293.243, 1011.8}, //13
		{191.482, -293.004, 1011.8}, //14
		{191.482, -292.774, 1011.8}, //15
		{191.629, -293.240, 1011.8}, //16
		{191.629, -293.000, 1011.8}, //17
		{191.629, -292.770, 1011.8}, //18
		{191.779, -293.240, 1011.8}, //19
		{191.779, -293.000, 1011.8}, //20
		{191.779, -292.770, 1011.8}, //21
		{191.926, -293.234, 1011.8}, //22
		{191.922, -293.001, 1011.8}, //23
		{191.924, -292.769, 1011.8}, //24
		{192.074, -293.232, 1011.8}, //25
		{192.071, -293.002, 1011.8}, //26
		{192.071, -292.772, 1011.8}, //27
		{192.217, -293.230, 1011.8}, //28
		{192.217, -293.000, 1011.8}, //29
		{192.218, -292.774, 1011.8}, //30
		{192.358, -293.234, 1011.8}, //31
		{192.358, -293.004, 1011.8}, //32
		{192.360, -292.771, 1011.8}, //33
		{192.500, -293.233, 1011.8}, //34
		{192.499, -293.003, 1011.8}, //35
		{192.499, -292.773, 1011.8}, //36
		{192.649, -293.231, 1011.8}, //2 TO 1 возле 34
		{192.648, -292.991, 1011.8}, //2 TO 1 возле 35
		{192.644, -292.762, 1011.8}, //2 TO 1 возле 36
		{191.104, -293.439, 1011.8}, //1ST 12
		{191.693, -293.440, 1011.8}, //2ND 12
		{192.273, -293.442, 1011.8}, //3RD 12
		{191.561, -293.579, 1011.8}, //RED
		{191.847, -293.581, 1011.8}, //BLACK
		{190.963, -293.578, 1011.8}, //1 TO 18
		{192.435, -293.588, 1011.8}, //19 TO 36
		{191.266, -293.579, 1011.8}, //EVEN
		{192.139, -293.589, 1011.8}  //ODD
	},
	{
		{201.075, -332.381, 1010.96}, //0
		{201.323, -332.229, 1010.96}, //1
		{201.070, -332.226, 1010.96}, //2
		{200.835, -332.229, 1010.96}, //3
		{201.324, -332.089, 1010.96}, //4
		{201.075, -332.084, 1010.96}, //5
		{200.835, -332.084, 1010.96}, //6
		{201.324, -331.939, 1010.96}, //7
		{201.075, -331.944, 1010.96}, //8
		{200.845, -331.944, 1010.96}, //9
		{201.323, -331.796, 1010.96}, //10
		{201.075, -331.796, 1010.96}, //11
		{200.846, -331.796, 1010.96}, //12
		{201.314, -331.649, 1010.96}, //13
		{201.075, -331.654, 1010.96}, //14
		{200.845, -331.654, 1010.96}, //15
		{201.323, -331.501, 1010.96}, //16
		{201.077, -331.501, 1010.96}, //17
		{200.845, -331.501, 1010.96}, //18
		{201.323, -331.366, 1010.96}, //19
		{201.085, -331.366, 1010.96}, //20
		{200.847, -331.366, 1010.96}, //21
		{201.323, -331.221, 1010.96}, //22
		{201.083, -331.221, 1010.96}, //23
		{200.847, -331.221, 1010.96}, //24
		{201.327, -331.068, 1010.96}, //25
		{201.084, -331.068, 1010.96}, //26
		{200.849, -331.068, 1010.96}, //27
		{201.322, -330.922, 1010.96}, //28
		{201.084, -330.922, 1010.96}, //29
		{200.844, -330.922, 1010.96}, //30
		{201.324, -330.782, 1010.96}, //31
		{201.087, -330.782, 1010.96}, //32
		{200.857, -330.782, 1010.96}, //33
		{201.330, -330.632, 1010.96}, //34
		{201.091, -330.632, 1010.96}, //35
		{200.862, -330.632, 1010.96}, //36
		{201.319, -330.479, 1010.96}, //2 TO 1 возле 34
		{201.089, -330.479, 1010.96}, //2 TO 1 возле 35
		{200.859, -330.479, 1010.96}, //2 TO 1 возле 36
		{201.513, -332.036, 1010.96}, //1ST 12
		{201.513, -331.446, 1010.96}, //2ND 12
		{201.523, -330.865, 1010.96}, //3RD 12
		{201.654, -331.584, 1010.96}, //RED
		{201.664, -331.294, 1010.96}, //BLACK
		{201.648, -332.180, 1010.96}, //1 TO 18
		{201.674, -330.714, 1010.96}, //19 TO 36
		{201.654, -331.884, 1010.96}, //EVEN
		{201.674, -330.994, 1010.96}  //ODD
	}
};
stock RulletShow(playerid)
{
	PositionChip[playerid] = -1;
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d, 1000]", GetIteam(playerid, 293));
	CEF_CREATE(playerid, 2, 4, "CasinoRullet", STRING_GLOBAL);
	return 1;
}
stock LoadRoulette(playerid)
{
	if(StatusChip[playerid] == 0)
	{
		if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
		RouletteChip[playerid] = INVALID_OBJECT_ID;

		PositionChip[playerid] = 17;

		RouletteChip[playerid] = CreateDynamicObject(10887, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0] + 0.1, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1] + 0.3, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2] + 0.3, 0.0, 0.0, 0.0, -1, -1, playerid);
		MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50, 0.00000, 0.00000, 0.0);

		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);

		SetPlayerPos(playerid, x + 0.05, y + 0.05, z);

		//MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);

		if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.4474,-302.4741,1012.0385))
		{
			InterpolateCameraPos(playerid, 225.375091, -302.632354, 1013.522888, 223.1900, -302.7880, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 221.801132, -302.647369, 1010.026245, 223.0900, -302.7880, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.1531,-296.3004,1012.0284))
		{
			InterpolateCameraPos(playerid, 225.492965, -296.621063, 1013.492187, 223.1100, -296.8030, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 221.715301, -296.595642, 1010.216735, 223.0100, -296.8030, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.7382,-296.5287,1012.0684))
		{
			InterpolateCameraPos(playerid, 205.750213, -296.680328, 1013.723571, 208.1200, -296.5370, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 209.323822, -296.732971, 1010.226928, 208.2200, -296.5370, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.9463,-303.3881,1012.0385))
		{
			InterpolateCameraPos(playerid, 205.576446, -303.171691, 1013.490661, 208.1000, -302.9880, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 209.493804, -303.188140, 1010.383544, 208.2000, -302.9880, 1012.8310, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 191.6914,-293.2050,1012.8684))
		{
			InterpolateCameraPos(playerid, 191.293655, -295.537445, 1014.428344, 191.2720, -293.0270, 1014.7610, 2000);
			InterpolateCameraLookAt(playerid, 191.314788, -291.671630, 1011.257385, 191.2720, -292.9270, 1013.6610, 2000);
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.4565,-331.6115,1012.0385))
		{
			InterpolateCameraPos(playerid, 203.738037, -331.871582, 1013.848327, 201.1100, -331.8660, 1013.9310, 2000);
			InterpolateCameraLookAt(playerid, 200.052810, -331.764617, 1010.470825, 201.0100, -331.8660, 1012.8310, 2000);
		}

		SendClientMessage(playerid, 0xFAAC58FF, "Чтобы сделать ставку используйте клавиши {FFFFFF}W-A-S-D {FAAC58}и {FFFFFF}ENTER.");
		StatusChip[playerid] = 1;
	}
	return 1;
}

public:OnPlayerRoulClose(playerid)
{
	CEF_HIDE(playerid, "CasinoRullet");
	SetCameraBehindPlayer(playerid);
	RouletteStatus[playerid] = 0;
	DeletePVar(playerid, "Rull_Bet");
	PositionChip[playerid] = -1;
	RouletteTable[playerid] = 0;

	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;

	StatusChip[playerid] = 0;
	return 1;
}

public:OnPlayerRoulSetBet(playerid,ty,ti)
{
	if(RouletteStatus[playerid] == 1) return SCM(playerid, -1, "Вы уже поставили ставку, ожидайте окончания игры.");
	if(PositionChip[playerid] == -1) return GameText(playerid, "Необходимо выбрать позицию", 3000, 0);
	if(ty < 10 || ty > 1000) return SCM(playerid, -1, "Допустимая ставка от 10 фишек до 1.000 фишек");
	if(GetIteam(playerid, 293) < ty) return SCM(playerid, -1, "У Вас недостаточно фишек для ставки");

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.4474,-302.4741,1012.0385))
    {
        InterpolateCameraPos(playerid, 223.1900, -302.7880, 1013.9310, 225.375091, -302.632354, 1013.522888, 2000);
        InterpolateCameraLookAt(playerid, 223.0900, -302.7880, 1012.8310, 221.801132, -302.647369, 1010.026245, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.1531,-296.3004,1012.0284))
    {
        InterpolateCameraPos(playerid, 223.1100, -296.8030, 1013.9310, 225.492965, -296.621063, 1013.492187, 2000);
        InterpolateCameraLookAt(playerid, 223.0100, -296.8030, 1012.8310, 221.715301, -296.595642, 1010.216735, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.7382,-296.5287,1012.0684))
    {
        InterpolateCameraPos(playerid, 208.1200, -296.5370, 1013.9310, 205.750213, -296.680328, 1013.723571, 2000);
        InterpolateCameraLookAt(playerid, 208.2200, -296.5370, 1012.8310, 209.323822, -296.732971, 1010.226928, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 207.9463,-303.3881,1012.0385))
    {
        InterpolateCameraPos(playerid, 208.1000, -302.9880, 1013.9310, 205.576446, -303.171691, 1013.490661, 2000);
        InterpolateCameraLookAt(playerid, 208.2000, -302.9880, 1012.8310, 209.493804, -303.188140, 1010.383544, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 191.6914,-293.2050,1012.8684))
    {
        InterpolateCameraPos(playerid, 191.2720, -293.0270, 1014.7610, 191.293655, -295.537445, 1014.428344, 2000);
        InterpolateCameraLookAt(playerid, 191.2720, -292.9270, 1013.6610, 191.314788, -291.671630, 1011.257385, 2000);
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.4565,-331.6115,1012.0385))
    {
        InterpolateCameraPos(playerid, 201.1100, -331.8660, 1013.9310, 203.738037, -331.871582, 1013.848327, 2000);
        InterpolateCameraLookAt(playerid, 201.0100, -331.8660, 1012.8310, 200.052810, -331.764617, 1010.470825, 2000);
    }

	SetPVarInt(playerid, "Rull_Bet", ty);

	new bet = PositionChip[playerid];

	STRING_GLOBAL[0] = EOS;

	if(bet == 43) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"RED\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 44) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"BLACK\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.",ty);
	else if(bet == 40) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"1ST12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 41) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"2ND12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.",ty);
	else if(bet == 42) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"3RD12\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 45) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"1 TO 18\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 46) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"19 TO 36\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 48) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"ODD\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 47) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"EVEN\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else if(bet == 37 || bet == 38 || bet == 39) SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {ffffff}\"2 TO 1\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", ty);
	else SCMF(playerid, COLOR_LightSeaGreen, "Вы успешно сделали ставку на сектор {FFFFFF}\"%d\"{ABCDEF} в размере {FFFFFF}%d {ABCDEF}фишек.", PositionChip[playerid], ty);
	SendClientMessage(playerid, COLOR_LightSeaGreen, "Ваша ставка принята, игра начата.");

	ruletka_time1[playerid] = SetTimerEx("OnPlayCasinoRoulette", 10000, false, "i", playerid);
	
	CEF_CREATE(playerid, 1, 2, "interface('CasinoRullet').setBetState(false)");
	CEF_CREATE(playerid, 1, 2, "interface('CasinoRullet').startTimer()");
	CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/moved.wav')");

	RouletteStatus[playerid] = 1;

	ChipRandom[RouletteTable[playerid]] = random(36);
	if(ChipRandom[RouletteTable[playerid]] == PositionChip[playerid]) ChipRandom[RouletteTable[playerid]] = random(36);

	StatusChip[playerid] = 0;

	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;

	RouletteChip[playerid] = CreateDynamicObject(10887, ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2], 0.0, 0.0, 0.0);

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetPlayerPos(playerid, x - 0.05, y - 0.05, z);

	GiveIteam(playerid, 293, 0, ty, 0, "Поставил ставку в рулетке [Казино]");

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%s фишек", formatInt(ty));
	GameText(playerid, STRING_GLOBAL, 3000, 2);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoRullet').setBalance(%d)", GetIteam(playerid, 293));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}

public:OnPlayCasinoRoulette(playerid)
{
	new fishka = PositionChip[playerid];
	new chislo = ChipRandom[RouletteTable[playerid]];
	STRING_GLOBAL[0] = EOS;

	KillTimer(ruletka_time1[playerid]);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoRullet').stopTimer(%d)", chislo);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	if(fishka == 37)
	{
		if(chislo == 1 || chislo == 4 || chislo == 7 || chislo == 10 || chislo == 13 || chislo == 16 || chislo == 19 || chislo == 22 || chislo == 25 || chislo == 28 || chislo == 31 || chislo == 34)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 38)
	{
		if(chislo == 2 || chislo == 5 || chislo == 8 || chislo == 11 || chislo == 14 || chislo == 17 || chislo == 20 || chislo == 23 || chislo == 26 || chislo == 29 || chislo == 32 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 39)
	{
		if(chislo == 3 || chislo == 6 || chislo == 9 || chislo == 12 || chislo == 15 || chislo == 18 || chislo == 21 || chislo == 24 || chislo == 27 || chislo == 30 || chislo == 33 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 40)
	{
		if(chislo == 1 || chislo == 2 || chislo == 3 || chislo == 4 || chislo == 5 || chislo == 6 || chislo == 7 || chislo == 8 || chislo == 9 || chislo == 10 || chislo == 11 || chislo == 12)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 41)
	{
		if(chislo == 13 || chislo == 14 || chislo == 15 || chislo == 16 || chislo == 17 || chislo == 18 || chislo == 19 || chislo == 20 || chislo == 21 || chislo == 22 || chislo == 23 || chislo == 24)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		   	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 42)
	{
		if(chislo == 25 || chislo == 26 || chislo == 27 || chislo == 28 || chislo == 29 || chislo == 30 || chislo == 31 || chislo == 32 || chislo == 33 || chislo == 34 || chislo == 35 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 3, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 3));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 3, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 43)
	{
		if(chislo == 1 || chislo == 3|| chislo == 5 || chislo == 7 || chislo == 9 || chislo == 12 || chislo == 14 || chislo == 16 || chislo == 18 || chislo == 19 || chislo == 21 || chislo == 23 || chislo == 25 || chislo == 27 || chislo == 30 || chislo == 32 || chislo == 34 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 44)
	{
		if(chislo == 2 || chislo == 4|| chislo == 6 || chislo == 8 || chislo == 10 || chislo == 11 || chislo == 13 || chislo == 15 || chislo == 17 || chislo == 20 || chislo == 22 || chislo == 24 || chislo == 26 || chislo == 28 || chislo == 29 || chislo == 31 || chislo == 33 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet")*2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 45)
	{
		if(chislo == 1 || chislo == 2 || chislo == 3 || chislo == 4 || chislo == 5 || chislo == 6 || chislo == 7 || chislo == 8 || chislo == 9 || chislo == 10 || chislo == 11 || chislo == 12 || chislo == 13 || chislo == 14 || chislo == 15 || chislo == 16 || chislo == 17 || chislo == 18)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	
	}
	else if(fishka == 46)
	{
		if(chislo == 19 || chislo == 20 || chislo == 21 || chislo == 22 || chislo == 23 || chislo == 24 || chislo == 25 || chislo == 26 || chislo == 27 || chislo == 28 || chislo == 29 || chislo == 30 || chislo == 31 || chislo == 32 || chislo == 33 || chislo == 34 || chislo == 35 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
            SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 47)
	{
		if(chislo == 2 || chislo == 4 || chislo == 6 || chislo == 8 || chislo == 10 || chislo == 12 || chislo == 14 || chislo == 16 || chislo == 18 || chislo == 20 || chislo == 22 || chislo == 24 || chislo == 26 || chislo == 28 || chislo == 30 || chislo == 32 || chislo == 34 || chislo == 36)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == 48)
	{
		if(chislo == 1 || chislo == 3 || chislo == 5 || chislo == 7 || chislo == 9 || chislo == 11 || chislo == 13 || chislo == 15 || chislo == 17 || chislo == 19 || chislo == 21 || chislo == 23 || chislo == 25 || chislo == 27 || chislo == 29 || chislo == 31 || chislo == 33 || chislo == 35)
		{
			SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
			SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 2, 0, "Выйграл в рулетке [Казино]");
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 2));
			GameText(playerid, STRING_GLOBAL, 3000, 2);
			format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 2, GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			OnBattlePass_Perfomance(playerid, 2, 1);
			AddPlayerAchiv(playerid, 17);
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
		}
		else
		{
		    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 		    SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.", chislo, GetPVarInt(playerid, "Rull_Bet"));
			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
		}
	}
	else if(fishka == chislo)
	{
		SetPVarInt(playerid, "Rull_Bet", (GetPVarInt(playerid, "Rull_Bet") * 90) / 100);
		SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы выиграли {FFFFFF}%s {FAAC58}фишек.", chislo, formatInt(GetPVarInt(playerid, "Rull_Bet") * 36));
		GiveIteam(playerid, 293, 1, GetPVarInt(playerid, "Rull_Bet") * 36, 0, "Выйграл в рулетке [Казино]");
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(GetPVarInt(playerid, "Rull_Bet") * 36));
		GameText(playerid, STRING_GLOBAL, 3000, 2);
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(1, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet") * 36, GetIteam(playerid, 293));
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		OnBattlePass_Perfomance(playerid, 2, 1);
		AddPlayerAchiv(playerid, 17);
		CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/win.wav')");
	}
	else
	{
	    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').showAlert(0, %d, %d, %d)", chislo, GetPVarInt(playerid, "Rull_Bet"), GetIteam(playerid, 293));
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	 	SCMF(playerid, 0xFAAC58FF, "Выпало число %d. Вы проиграли {FFFFFF}%d {FAAC58}фишек.",chislo,GetPVarInt(playerid, "Rull_Bet"));
		CEF_CREATE(playerid, 1, 2, "window.playSound('casino/rulette/loose.wav')");
	}	
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('CasinoRullet').setBalance(%d)", GetIteam(playerid, 293));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	RouletteStatus[playerid] = 0;
	DeletePVar(playerid, "Rull_Bet");
	PositionChip[playerid] = -1;
	
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;

	return 1;
}

public: Casino_OnPlayerExchange(playerid, type, event)
{
    STRING_GLOBAL[0] = EOS;

    if(10 > event || event > 50000) return GameText(playerid,"~r~Можно купить или продать~n~~w~до 50.000 фишек", 4000, 2);

    if(type == 0)
    {
        if(!VerifyIntString(QueryPlayerBalance(playerid), event * 1000)) return GameText(playerid,"~r~Недостаточно средств", 4000, 2);

		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

        ModifyCashBalance(playerid, -event * 1000, "Покупка фишек в казино", true, true);
        GiveIteam(playerid, 293, 1, event, 0, "Обмен фишек [Казино]");

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffb833}Вы обменяли {FFFFFF}%s {ffb833}рублей на %d фишек. Всего {ffffff}%d {ffb833}фишек.", formatInt(event * 1000), event, GetIteam(playerid, 293));
        SCM(playerid, -1, STRING_GLOBAL);

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d фишек~n~~r~-%s рублей", event, formatInt(event * 1000));
    }
    if(type == 1)
    {
        if(GetIteam(playerid, 293) < event) return GameText(playerid,"~r~Недостаточно фишек", 4000, 2);

		ModifyCashBalance(playerid, event * 980, "Продажа фишек в казино", true, true);
		GiveIteam(playerid, 293, 0, event, 0, "Обмен фишек [Казино]");

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ffb833}Вы обменяли {FFFFFF}%d {ffb833}фишек на %s рублей. Всего {ffffff}%d {ffb833}фишек.", event, formatInt(event * 980), GetIteam(playerid, 293));
		SCM(playerid, -1, STRING_GLOBAL);

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~r~-%d фишек~n~~g~+%s рублей", event, formatInt(event * 980));
	}
    GameText(playerid, STRING_GLOBAL, 4000, 2);
    CEF_HIDE(playerid, "CasinoExchange");
    return 1;
}

public: Tablet_OnPlayerOpenApp(playerid, event) 
{
    return 1;
}
public: Tablet_OnPlayerCloseApp(playerid, event) 
{
    // event 0 - выйти из приложения бизнес
    // event 1 - выйти из приложения Равито
    // event 2 - выйти из приложения Семья
    // event -1 - выйти из планшета
    
    return true;
}
public: MarktPlc_OnPlayerSelectCategory(playerid, event)
{
    // event 0 - 7 // подгрузка определенной вкладки

    if(event != 0)
    {
        new fmt_text[364],
            owner_name[32],
            r_name[32],
            p_name[48],
            description[124],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM marktplc WHERE category=%d", event);
        result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
        {
            new id = cache_get_field_content_int(i, "id");
            new items = cache_get_field_content_int(i, "items");
            new type = cache_get_field_content_int(i, "type");
            new money = cache_get_field_content_int(i, "money");
            new likes = cache_get_field_content_int(i, "likes");
            new views = cache_get_field_content_int(i, "views");
            new owner_phone = cache_get_field_content_int(i, "owner_phone");
            new updates = cache_get_field_content_int(i, "updates");

            cache_get_field_content(i, "p_name", p_name);
            cache_get_field_content(i, "description", description);
            cache_get_field_content(i, "owner_name", owner_name);
            cache_get_field_content(i, "r_name", r_name);

            // 0 тип - Транспорт // 1 тип - Недвижимость // 2 тип - Бизнес // 3 тип -  // 4 тип - Гараж // 5 тип - Прочее // 6 тип -  //
            if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
            else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
	    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);
    }
    else
    {
        new fmt_text[364],
            owner_name[32],
            r_name[32],
            p_name[48],
            description[124],
            Cache: result;

        result = mysql_query(mysql, "SELECT * FROM marktplc ORDER BY views DESC", true);

        new rows = cache_num_rows();

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
        {
            new id = cache_get_field_content_int(i, "id");
            new items = cache_get_field_content_int(i, "items");
            new type = cache_get_field_content_int(i, "type");
            new money = cache_get_field_content_int(i, "money");
            new likes = cache_get_field_content_int(i, "likes");
            new views = cache_get_field_content_int(i, "views");
            new owner_phone = cache_get_field_content_int(i, "owner_phone");
            new updates = cache_get_field_content_int(i, "updates");

            cache_get_field_content(i, "p_name", p_name);
            cache_get_field_content(i, "description", description);
            cache_get_field_content(i, "owner_name", owner_name);
            cache_get_field_content(i, "r_name", r_name);

            // 0 тип - Транспорт // 1 тип - Недвижимость // 2 тип - Бизнес // 3 тип -  // 4 тип - Гараж // 5 тип - Прочее // 6 тип -  //
            if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
            else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
	    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);
    }
    return true;
}

public: MarktPlc_OnPlayerOpenMyAds(playerid)
{
    // открытие мои объявления

    new fmt_text[364],
        owner_name[32],
        r_name[32],
        p_name[48],
        description[124],
        Cache: result;

    format(fmt_text, sizeof fmt_text, "SELECT * FROM marktplc WHERE owner_id=%d", GetPlayerAccountID(playerid));
    result = mysql_query(mysql, fmt_text, true);

    new rows = cache_num_rows();

    STRING_GLOBAL[0] = EOS;
    for(new i; i < rows; i ++)
    {
        new id = cache_get_field_content_int(i, "id");
        new items = cache_get_field_content_int(i, "items");
        new type = cache_get_field_content_int(i, "type");
        new money = cache_get_field_content_int(i, "money");
        new likes = cache_get_field_content_int(i, "likes");
        new views = cache_get_field_content_int(i, "views");
        new owner_phone = cache_get_field_content_int(i, "owner_phone");
        new updates = cache_get_field_content_int(i, "updates");

        cache_get_field_content(i, "p_name", p_name);
        cache_get_field_content(i, "description", description);
        cache_get_field_content(i, "owner_name", owner_name);
        cache_get_field_content(i, "r_name", r_name);

        // 0 тип - Транспорт // 1 тип - Недвижимость // 2 тип - Бизнес // 3 тип -  // 4 тип - Гараж // 5 тип - Прочее // 6 тип -  //
        if(type == 3) format(fmt_text, sizeof fmt_text, "[%d,343,3,\"Аксессуар\",\"%s\",[\"%d\"],%d,0,%d,%d,[\"%s\",0,%d],\"\",%d,17,\"\",0,\"%s\"],", id, description, items, money, likes, views, owner_name, owner_phone, updates, r_name);
        else format(fmt_text, sizeof fmt_text, "[%d,%d,%d,\"%s\",\"%s\",[\"b1043361c\"],%d,%d,%d,%d,[\"%s\",1,%d],\"\",%d,56,\"\",0,\"%s\"],", id, items, type, p_name, description, money, money, likes, views, owner_name, owner_phone, updates, r_name);
        strcat(STRING_GLOBAL, fmt_text);
    }
    strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setCards('[[1,6],[%s]]')", STRING_GLOBAL);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    cache_delete(result);

    return true;
}
public: MarktPlc_OnUploadPhoto(playerid, event, type)
{
    return true;
}

public: MarktPlc_OnCreateAd(playerid, hours, price, description[], items_id, items_type, name[])
{
    if(strfind(description,"|") != -1 || strfind(description,"&") != -1 || strfind(description,"#") != -1 || strfind(description,"@") != -1 || strfind(description,"%") != -1) return GameText(playerid, "Присутствуют запрещенные символы", 3000, 0);
    if(strfind(name,"|") != -1 || strfind(name,"&") != -1 || strfind(name,"#") != -1 || strfind(name,"@") != -1 || strfind(name,"%") != -1) return GameText(playerid, "Присутствуют запрещенные символы", 3000, 0);
    
    if(strlen(description) < 5 || strlen(description) > 120) return GameText(playerid, "~w~описание должно быть от 5 до 120 символов", 3000, 0);
    if(strlen(description) < 2 || strlen(description) > 30) return GameText(playerid, "~w~название должно быть от 2 до 30 символов", 3000, 0);

    new query[364];
    
    if(items_type == 0)
    {
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            GetVehicleInfo(items_id, VI_NAME),
            items_id
        );
    }
    else if(items_type == 1)
    {
        format(query, sizeof query, "Дом (№ %d)", items_id);
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            query,
            items_id
        );
    }
    else if(items_type == 2)
    {
        new name_biz[32],
            Cache: result;

        format(query, sizeof query, "SELECT * FROM business WHERE id=%d", items_id);
	    result = mysql_query(mysql, query, true);

        cache_get_field_content(0, "name", name_biz);

        cache_delete(result);

        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            name_biz,
            items_id
        );
    }
    else if(items_type == 4)
    {
        format(query, sizeof query, "Гараж (№ %d)", items_id);

        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            query,
            items_id
        );
    }
    else
    {
        format
        (
            query, sizeof query, 
            "INSERT INTO marktplc (owner_id, owner_name, owner_phone, money, category, type, description, p_name, items) VALUES (%d, '%s', %d, %d, %d, %d, '%s', '%s', %d)", 
            GetPlayerAccountID(playerid), 
            GetPlayerNameEx(playerid), 
            GetPlayerPhone(playerid),
            price,
            items_type + 1,
            items_type,
            description,
            name, 
            items_id
        );
    }
    mysql_query(mysql, query, false);
    
    CEF_HIDE(playerid, "Tablet");
    CEF_CREATE(playerid, 2, 4, "Tablet", "[0]");
    CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Успех!\", \"Ваше объявление было успешно создано\", 5000]')");
    return true;
}
public: MarktPlc_OnPlayerShowItems(playerid, event)
{
    //выбор одну из катигорий

    if(event == 0) // Транспорт
    {
        CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"Если вы не можете найти свой транспорт в списке, то убедитесь, что он загружен на сервер\", 5000]')");

        new fmt_text[248],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        if(!rows) return CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного транспорта\", 5000]')");

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new model_id = cache_get_field_content_int(i, "model_id");

            format(fmt_text, sizeof fmt_text, "[%d,\"%s\",%d,0,\"%s\"],", model_id, GetVehicleInfo(model_id, VI_NAME), GetVehicleInfo(model_id, VI_PRICE), GetVehicleInfo(model_id, VI_NAME_MARK));
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);

    }
    if(event == 1) // Недвижимость
    {
        new fmt_text[248],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        if(!rows) return CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет недвижимости\", 5000]')");

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");
            new entrance = cache_get_field_content_int(i, "entrance");

            if(entrance == -1) format(fmt_text, sizeof fmt_text, "[%d,\"Дом (№ %d)\",%d,1,\"None\"],", id, id, price);
            else format(fmt_text, sizeof fmt_text, "[%d,\"Квартира (№ %d)\",%d,1,\"None\"],", id, id, price);
            
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);
    }
    if(event == 2) // Бизнес
    {
        new fmt_text[248],
            name[32],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        if(!rows) return CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного бизнеса\", 5000]')");

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");
            cache_get_field_content(i, "name", name);

            format(fmt_text, sizeof fmt_text, "[%d,\"%s (№ %d)\",%d,2,\"None\"],", id, name, id, price);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);
    }
    if(event == 3) // Аксессуары
    {
        new fmt_text[248],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM items WHERE owner_id=%d AND type_item=2", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        if(!rows) return CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного аксессуара\", 5000]')");

        STRING_GLOBAL[0] = EOS; 
        for(new i; i < rows; i ++)
	    {
            new typeacs = cache_get_field_content_int(i, "typeacs");
            new aks_id = cache_get_field_content_int(i, "aks_id");

            format(fmt_text, sizeof fmt_text, "[%d,\"%s\",0,3,\"%d\"],", aks_id, ItemsInfo[typeacs], aks_id);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);
    }
    if(event == 4) // Гаражи
    {
        new fmt_text[248],
            Cache: result;

        format(fmt_text, sizeof fmt_text, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	    result = mysql_query(mysql, fmt_text, true);

        new rows = cache_num_rows();

        if(!rows) return CEF_CREATE(playerid, 1, 2, "interface('Tablet').addNotification('[2, \"Напоминание\", \"У вас нет не одного гаража\", 5000]')");

        STRING_GLOBAL[0] = EOS;
        for(new i; i < rows; i ++)
	    {
            new id = cache_get_field_content_int(i, "id");
            new price = cache_get_field_content_int(i, "price");

            format(fmt_text, sizeof fmt_text, "[%d,\"Гараж (№ %d)\",%d,4,\"None\"],", id, id, price);
            strcat(STRING_GLOBAL, fmt_text);
        }
        strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[%s]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), STRING_GLOBAL);
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

        cache_delete(result);

    }
    if(event == 5) // Прочее
    {
        STRING_GLOBAL[0] = EOS;
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Tablet').getCurrentApp().page().setItems('[\"%s\",%d,[]]')", GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
    }
    return true;
}

public: MarktPlc_OnPlayerViewedEntity(playerid, event, type) // просмотры
{
    return true;
}
public: MarktPlc_OnPlayerAddFavorite(playerid, event, type) // добавить в лайк
{
    return true;
}
public: MarktPlc_OnPlayerRemoveFavorite(playerid, event, type) // убрать с лайка
{
    return true;
}
public: MarktPlc_OnPlayerContact(playerid, event, type) // связаться с продавцом
{
    return true;
}

#define MAX_AUCTION 500

#define GetAuctionData(%0,%1)			g_auction[%0][%1]
#define SetAuctionData(%0,%1,%2)		g_auction[%0][%1] = %2
#define AddAuctionData(%0,%1,%2,%3)	    g_auction[%0][%1] %2= %3

enum E_AUCTION_STRUCT
{
    A_SQL_ID,
    A_OWNER_ID,
    A_OWNER_NAME[21],
	A_ID_IM,
    A_TYPE,
    A_PHONE,
    A_NUMBER[10],
    A_REGION[10],
    A_TYPE_NUMBER,
	A_PLAYER_ID,
    A_BET,
    A_CAR_ID
};

new g_auction[MAX_AUCTION][E_AUCTION_STRUCT];
new g_auction_loaded;

#define MAX_AUCTION_BET 500

#define GetAuctionBetData(%0,%1)			g_auction_bet[%0][%1]
#define SetAuctionBetData(%0,%1,%2)		    g_auction_bet[%0][%1] = %2
#define AddAuctionBetData(%0,%1,%2,%3)	    g_auction_bet[%0][%1] %2= %3

enum E_AUCTION_BET_STRUCT
{
    AB_SQL_ID,
    AB_OWNER_ID,
	AB_AUCTION_ID,
    AB_BET
};

new g_auction_bet[MAX_AUCTION_BET][E_AUCTION_BET_STRUCT];

new pred_auction[MAX_PLAYERS][2];
new page_auction[MAX_PLAYERS];
new event_auction[MAX_PLAYERS];
new open_auction[MAX_PLAYERS];


public: LoadAuction()
{
	new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM auction", true);

	new rows = cache_num_rows();

	if(rows > MAX_AUCTION)
	{
		rows = MAX_AUCTION;
		print("[Auction]: DB rows > MAX_AUCTION");
	}

	for(new i; i < rows; i ++)
	{
        SetAuctionData(i, A_SQL_ID, 		cache_get_field_content_int(i, "id"));
        SetAuctionData(i, A_OWNER_ID, 		cache_get_field_content_int(i, "owner_id"));
		SetAuctionData(i, A_ID_IM, 		    cache_get_field_content_int(i, "id_im"));
		SetAuctionData(i, A_TYPE,			cache_get_field_content_int(i, "type"));
        SetAuctionData(i, A_PHONE,			cache_get_field_content_int(i, "phone"));

        cache_get_field_content(i, "owner_name", g_auction[i][A_OWNER_NAME], mysql, 21);
        cache_get_field_content(i, "number", g_auction[i][A_NUMBER], mysql, 10);
        cache_get_field_content(i, "region", g_auction[i][A_REGION], mysql, 10);

        SetAuctionData(i, A_TYPE_NUMBER,	cache_get_field_content_int(i, "type_number"));
        SetAuctionData(i, A_PLAYER_ID,		cache_get_field_content_int(i, "player_id"));
        SetAuctionData(i, A_BET,			cache_get_field_content_int(i, "stavka"));
        SetAuctionData(i, A_CAR_ID,			cache_get_field_content_int(i, "car_id"));
	}
	g_auction_loaded = rows;
	cache_delete(result);

	printf("[Auction]: Аукцион загружен: %d", g_auction_loaded);
}

stock GetFreeAuctionID()
{
	for(new i; i < MAX_AUCTION; i ++)
	{
		if(GetAuctionData(i, A_SQL_ID) != 0) continue;
        if(GetAuctionData(i, A_ID_IM) != 0) continue;

		return i;
	}
	return -1;
}

stock DeleteAuctionLot(auction_id)
{
    SetAuctionData(auction_id, A_SQL_ID, 		0);
    SetAuctionData(auction_id, A_ID_IM, 		0);
    SetAuctionData(auction_id, A_TYPE,			0);
    SetAuctionData(auction_id, A_PHONE,			0);

    format(g_auction[auction_id][A_NUMBER], 10, "");
    format(g_auction[auction_id][A_REGION], 10, "");

    SetAuctionData(auction_id, A_TYPE_NUMBER,	0);
    SetAuctionData(auction_id, A_PLAYER_ID,		0);
    SetAuctionData(auction_id, A_BET,		0);
    SetAuctionData(auction_id, A_CAR_ID,			0);
    return 1;
}

stock AddAuctionLot(id_im, stavka, type, owner_id = 0, phone = 0, number[] = "", region[] = "", type_number = 0, car_id = 0, owner_name[] = "ГОСУДАРСТВО")
{
    new auction_id = GetFreeAuctionID();

    SetAuctionData(auction_id, A_ID_IM, 		id_im);
    SetAuctionData(auction_id, A_TYPE,			type);
    SetAuctionData(auction_id, A_PHONE,			phone);

    format(g_auction[auction_id][A_NUMBER], 10, "%s",       number);
    format(g_auction[auction_id][A_REGION], 10, "%s",       region);
    format(g_auction[auction_id][A_OWNER_NAME], 10, "%s",   owner_name);

    SetAuctionData(auction_id, A_TYPE_NUMBER,	type_number);
    SetAuctionData(auction_id, A_PLAYER_ID,		0);
    SetAuctionData(auction_id, A_BET,		    stavka);
    SetAuctionData(auction_id, A_CAR_ID,		car_id);

    new query[248],
        Cache: result;

    mysql_format(mysql, query, sizeof query, "INSERT INTO auction (owner_id, owner_name, id_im, stavka, type, phone, number, region, type_number, car_id) VALUES ('%d', '%s', '%d', '%d', '%d', '%d', '%s', '%s', '%d', '%d')", 
    owner_id, owner_name, id_im, stavka, type, phone, number, region, type_number, car_id);
	result = mysql_query(mysql, query);

    SetAuctionData(auction_id, A_SQL_ID, 		cache_insert_id());
    cache_delete(result);

    return true;
}

stock LoadAuctionPage(playerid, event, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);

    STRING_GLOBAL[0] = EOS;

    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_TYPE) != event) continue;

        rowss++;

        if(pred <= rowss <= page)
		{
            new id = GetAuctionData(i, A_SQL_ID);
            new id_im = GetAuctionData(i, A_ID_IM);
            new stavka = GetAuctionData(i, A_BET);

            new bet = GetPlayerAuctionBet(playerid, id);
            
            if(event == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", i, GetBusinessData(id_im, B_NAME), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_PHONE), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);

			strcat(STRING_GLOBAL, query);
        }
    }

    new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    if(event == 7) GameText(playerid, "При выигрыше Ценной бумаги она будет находится в~n~~g~Мои Награды", 3000, 1);

    return true;
}

stock LoadCreatePlayerAuctionPage(playerid, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);

    STRING_GLOBAL[0] = EOS;

    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

        rowss++;

        if(pred <= rowss <= page)
		{
            new id = GetAuctionData(i, A_SQL_ID);
            new id_im = GetAuctionData(i, A_ID_IM);
            new stavka = GetAuctionData(i, A_BET);

            new event = GetAuctionData(i, A_TYPE);

            new bet = GetPlayerAuctionBet(playerid, id);
            
            if(event == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", i, GetBusinessData(id_im, B_NAME), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_PHONE), GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(event == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, GetAuctionData(i, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);

			strcat(STRING_GLOBAL, query);
        }
    }

    new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
    return true;
}

stock GetAuctionID(auction_id)
{
    new count = -1;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) != auction_id) continue;

        count = i;
        break;
    }
    return count;
}

public: OnAuctionPlayerAction(playerid, type, event)
{
    if(type == 4) // Все лоты
    {
        event_auction[playerid] = event;

        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;

        LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 0)
    {
        event_auction[playerid] = event;

        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;

        LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 1) // Ваши ставки
    {
        event_auction[playerid] = -1;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;

        LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 2 && event == 2) // Горящие лоты
    {
        SCM(playerid, -1, "В разработке!");
    }
    if(type == 2 && event == 3) // Мои лоты
    {
        event_auction[playerid] = -2;
        page_auction[playerid] = 1;
        pred_auction[playerid][0] = 1;
		pred_auction[playerid][1] = 4;

        LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 1 && event == 1) // стрелка справа
    {
        page_auction[playerid] = page_auction[playerid] + 1;
        pred_auction[playerid][0] = pred_auction[playerid][0] + 4;
        pred_auction[playerid][1] = pred_auction[playerid][1] + 4;

        if(event_auction[playerid] == -2) LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else if(event_auction[playerid] == -1) LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    if(type == 1 && event == 0) // стрелка слева
    {
        if(page_auction[playerid] == 1) return true;

        page_auction[playerid] = page_auction[playerid] - 1;
        pred_auction[playerid][0] = pred_auction[playerid][0] - 4;
        pred_auction[playerid][1] = pred_auction[playerid][1] - 4;

        if(event_auction[playerid] == -2) LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else if(event_auction[playerid] == -1) LoadPlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadAuctionPage(playerid, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
    }
    return true;
}

public: OnAuctionPlayerClose(playerid)
{
    CEF_HIDE(playerid, "Auction");
    open_auction[playerid] = 0;
    return true;
}

public: OnAuctionPlayerSetBet(playerid, id, count)
{
    new query[348];

    new stavka = GetAuctionData(id, A_BET);
    new type = GetAuctionData(id, A_TYPE);
    new bet = GetPlayerAuctionBet(playerid, GetAuctionData(id, A_SQL_ID));

    if(type == 0) if((GetPlayerOwnableHouse(playerid) + 1) > GetPlayerHouseSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество домов.");
    if(type == 1) if((GetPlayerOwnableBiz(playerid) + 1) > GetPlayerBizSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество бизнесов.");
    if(type == 2) if(GetPlayerOwnableGarage(playerid) + 1 > GetPlayerGarageSlots(playerid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы уже имеете максимально количество гаражей.");

    if(bet == 0) if(GetPlayerData(playerid, P_AUCTION_SLOTS) < GetOwnableAuctionBet(playerid) + 1) return SCM(playerid, COLOR_GREY, "Недостаточно слотов на лоты для того чтобы поставить на этот лот");

    if(stavka > count + bet) return SCMF(playerid, 0xFFE58BFF, "* Ставка не должна быть меньше %d фишек.", stavka + (stavka / 100 * 10));

    if((stavka + (stavka / 100 * 10)) - bet > count) return SCMF(playerid, 0xFFE58BFF, "* Ставка не должна быть меньше %d фишек.", stavka + (stavka / 100 * 10)) - bet;

    if(stavka == bet) return SCM(playerid, 0xFFE58BFF, "* Вы уже поставили максимальную ставку.");

    if(GetIteam(playerid, 293) < count) return GameText(playerid, "~r~Недостаточно~n~фишек", 3000, 2);

    GiveIteam(playerid, 293, 0, count, 0, "Поставил ставку [Аукцион]");

    format(query, sizeof query, "~r~-%d фишек", count);
    GameText(playerid, query, 3000, 2);

    AddAuctionBet(playerid, GetAuctionData(id, A_SQL_ID), count);

    bet = GetPlayerAuctionBet(playerid, GetAuctionData(id, A_SQL_ID));

    format(query, sizeof query, "UPDATE auction SET player_id=%d, stavka=%d WHERE id=%d", GetPlayerAccountID(playerid), bet, GetAuctionData(id, A_SQL_ID));
	mysql_query(mysql, query, false);

    if(GetAuctionData(id, A_PLAYER_ID) > 0) CreatePlayerNotification(GetAuctionData(id, A_PLAYER_ID), "Аукцион", "Вашу ставку на лот в аукционе перебили.");

    SetAuctionData(id, A_PLAYER_ID, GetPlayerAccountID(playerid));
    SetAuctionData(id, A_BET, bet);

    foreach(new i: Player)
    {
        if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

        if(open_auction[i] == 0) continue;

        if(event_auction[playerid] != -1) LoadAuctionPage(i, event_auction[playerid], pred_auction[playerid][0], pred_auction[playerid][1]);
        else LoadPlayerAuctionPage(i, pred_auction[playerid][0], pred_auction[playerid][1]);
    }

    return true;
}

stock OnAuctionResult()
{
    new query[348];

    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        
        new id =  GetAuctionData(i, A_SQL_ID),
            id_im = GetAuctionData(i, A_ID_IM),
            type = GetAuctionData(i, A_TYPE),
            player_id = GetAuctionData(i, A_PLAYER_ID);

        if(player_id == 0) continue;

        if(type == 0)
        {
            new houseid = id_im;

            SetHouseData(houseid, H_OWNER_ID, 		player_id);
            SetHouseData(houseid, H_IMPROVEMENTS, 	0);

            SetHouseData(houseid, H_STORE_X, 0.0);
            SetHouseData(houseid, H_STORE_Y, 0.0);
            SetHouseData(houseid, H_STORE_Z, 0.0);

            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;

            SetHouseData(houseid,	H_RENT_DATE,	rent_time);
            SetHouseData(houseid,	H_LOCK_STATUS,	false);

            new entranceid = GetHouseData(houseid, H_ENTRACE);
            if(entranceid != -1)
            {
                CallLocalFunction("EntranceStatusInit", "i", entranceid);
            }

            //format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid)player_id, 0);

            format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0,owner_id=%d WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), player_id, GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

            UpdateHouse(houseid);

            HouseHealthInit(houseid);
            HouseStoreInit(houseid);
        }
        if(type == 1)
        {
            new businessid = id_im;

            SetBusinessData(businessid, B_OWNER_ID, 		player_id);
            SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;

            SetBusinessData(businessid,	B_PRODS, 		100);
            SetBusinessData(businessid,	B_PROD_PRICE, 	0);

            SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
            SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

            SetBusinessData(businessid,	B_BALANCE, 		0);
            SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
            SetBusinessData(businessid,	B_LOCK_STATUS,	false);
            
            //format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
            CallLocalFunction("UpdateBusinessLabel", "i", businessid);

            format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d,owner_id=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), player_id, GetBusinessData(businessid, B_SQL_ID));
            mysql_query(mysql, query, false);

            format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
            mysql_query(mysql, query, false);
        }
        if(type == 2)
        {
            new garage_id = id_im;

            SetGarageData(garage_id, G_OWNER_ID, 		player_id);
            SetGarageData(garage_id, G_IMPROVEMENTS, 	0);

            new time = gettime();
            new rent_time = (time - (time % 86400)) + 86400;

            SetGarageData(garage_id,	G_RENT_DATE,	rent_time);
            SetGarageData(garage_id,	G_LOCK_STATUS,	false);
           
            CallLocalFunction("UpdateGarageLabel", "i", garage_id);
			UpdateGarage(garage_id);

            format(query, sizeof query, "UPDATE garage SET improvements=0,rent_time=%d,`lock`=%d, owner_id=%d WHERE id=%d LIMIT 1", GetGarageData(garage_id, G_RENT_DATE), GetGarageData(garage_id, G_LOCK_STATUS), player_id, GetGarageData(garage_id, G_SQL_ID));
            mysql_query(mysql, query, false);	
        }
        if(type == 7)
        {
            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Ценная бумага', 8, 288, 0, 1, 0)", player_id);
            mysql_tquery(mysql, query, "", "");
        }

        if(GetAuctionData(i, A_OWNER_ID) != 0)
        {
            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Фишки', 8, 293, 0, %d, 0)", GetAuctionData(i, A_OWNER_ID), GetAuctionData(i, A_BET));
            mysql_tquery(mysql, query, "", "");

		    CreatePlayerNotification(GetAuctionData(i, A_OWNER_ID), "Аукцион", "Один из ваших лотов был продан на аукционе.\nЗабрать фишки можно в Мои Награды");
        }

        format(query, sizeof query, "DELETE FROM auction WHERE id=%d", id);
		mysql_query(mysql, query, false);

        DeleteAuctionLot(i);

        DeleteAuctionBet(id, player_id);
    }

    SendClientMessageToAll(0xFFA500FF, "[Информация] Произошел слет аукциона!");

    return true;
}

stock GetPlayerCreateAuction(playerid)
{
    new count;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

        count = 1;
        break;
    }
    return count;
}

public: OnAuctionPlayerCreateLot(playerid, type, bet, time)
{
    if(bet < 1 || bet > 2000000000) return SCM(playerid, COLOR_GREY, "Выставить цену можно от 1 до 2.000.000.000 фишек");

    if(GetPlayerCreateAuction(playerid)) return SCM(playerid, COLOR_GREY, "Вы уже создавали лот в аукционе, дождитесь его окончания прежде чем создавать новый");

    SCM(playerid, COLOR_GREY, "В данном аукционе нельзя создавать свои лоты");
    LoadCreatePlayerAuctionPage(playerid, pred_auction[playerid][0], pred_auction[playerid][1]);
    return true;
}

stock GetOwnableAuction(type, id_im)
{
    new count;
    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_TYPE) != type) continue;
        if(GetAuctionData(i, A_ID_IM) != id_im) continue;

        count = 1;
    }
    return count;
}

stock GetOwnableAuctionBet(playerid)
{
    new count;
    for(new i; i < MAX_AUCTION_BET; i++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

        count++;
    }
    return count;
}

public: LoadAuctionBet(playerid)
{
	new query[94],
        Cache: result;

    mysql_format(mysql, query, sizeof query, "SELECT * FROM auction_bet WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

    if(rows)
    {
        if(rows > MAX_AUCTION_BET)
        {
            rows = MAX_AUCTION_BET;
            print("[Auction Bet]: DB rows > MAX_AUCTION_BET");
        }

        for(new i; i < rows; i ++)
        {
            new auction_id = GetFreeAuctionBetID();

            SetAuctionBetData(auction_id, AB_SQL_ID, 		cache_get_field_content_int(i, "id"));
            SetAuctionBetData(auction_id, AB_OWNER_ID, 		GetPlayerAccountID(playerid));
            SetAuctionBetData(auction_id, AB_AUCTION_ID,    cache_get_field_content_int(i, "auction_id"));
            SetAuctionBetData(auction_id, AB_BET,		    cache_get_field_content_int(i, "bet"));
        }
    }
    cache_delete(result);
    //printf("[Auction Bet]: Ставки в аукционе игрока %s загружены: %d", GetPlayerNameEx(playerid), rows);
}

stock GetFreeAuctionBetID()
{
	for(new i; i < MAX_AUCTION_BET; i ++)
	{
		if(GetAuctionBetData(i, AB_SQL_ID) != 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != 0) continue;

		return i;
	}
	return -1;
}

stock DeleteAuctionBet(auction_id, player_id)
{
    new query[94];
    format(query, sizeof query, "DELETE FROM auction_bet WHERE auction_id='%d'", auction_id);
    mysql_query(mysql, query, false);

    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_AUCTION_ID) != auction_id) continue;

        if(GetAuctionBetData(i, AB_OWNER_ID) == player_id)
        {
            SetAuctionBetData(i, AB_SQL_ID, 		0);
            SetAuctionBetData(i, AB_OWNER_ID, 	    0);
            SetAuctionBetData(i, AB_AUCTION_ID,     0);
            SetAuctionBetData(i, AB_BET,			0);
            continue;
        }
        else
        {
            if(IsPlayerConnected(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID))) && IsPlayerLogged(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID))))
            {
                SCM(GetPlayerIDBySqlID(GetAuctionBetData(i, AB_OWNER_ID)), 0xFFE58BFF, "Вы проиграли в аукционе, вам вернули вашу ставку в 'Мои Награды'");
            }

            format(query, sizeof query, "INSERT INTO prizes (owner_id, name, size, item, type, count, indx) VALUES (%d, 'Фишки', 8, 293, 0, %d, 0)", GetAuctionBetData(i, AB_OWNER_ID), GetAuctionBetData(i, AB_BET));
            mysql_tquery(mysql, query, "", "");

            CreatePlayerNotification(GetAuctionBetData(i, AB_OWNER_ID), "Аукцион", "Вы проиграли в аукционе за лот.\nЗабрать фишки можно в Мои Награды");

            SetAuctionBetData(i, AB_SQL_ID, 		0);
            SetAuctionBetData(i, AB_OWNER_ID, 	    0);
            SetAuctionBetData(i, AB_AUCTION_ID,     0);
            SetAuctionBetData(i, AB_BET,			0);
        }
    }
    return 1;
}

stock AddAuctionBet(playerid, id, bet)
{
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetAuctionBetData(i, AB_AUCTION_ID) != id) continue;

        AddAuctionBetData(i, AB_BET, +, bet);

        new query[64];
        format(query, sizeof query, "UPDATE auction_bet SET bet='%d' WHERE id='%d'", GetAuctionBetData(i, AB_BET), GetAuctionBetData(i, AB_SQL_ID));
        mysql_query(mysql, query, false);

        return 1;
    }

    new auction_id = GetFreeAuctionBetID();

    SetAuctionBetData(auction_id, AB_OWNER_ID, 	    GetPlayerAccountID(playerid));
    SetAuctionBetData(auction_id, AB_AUCTION_ID,    id);
    SetAuctionBetData(auction_id, AB_BET,			bet);

    new query[148],
        Cache: result;

    mysql_format(mysql, query, sizeof query, "INSERT INTO auction_bet (owner_id, auction_id, bet) VALUES ('%d', '%d', '%d')", GetPlayerAccountID(playerid), id, bet);
	result = mysql_query(mysql, query);

    SetAuctionBetData(auction_id, AB_SQL_ID, 		cache_insert_id());
    cache_delete(result);

    return true;
}

stock GetPlayerAuctionBet(playerid, auction_id)
{
    new count;
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetAuctionBetData(i, AB_AUCTION_ID) != auction_id) continue;

        count = GetAuctionBetData(i, AB_BET);
        return count;
    }
    return count;
}

stock LoadPlayerAuctionPage(playerid, pred, page)
{
    new query[348],
        rowss,
        count_item = GetIteam(playerid, 293);

    STRING_GLOBAL[0] = EOS;
    for(new i; i < MAX_AUCTION_BET; i ++)
    {
        if(GetAuctionBetData(i, AB_SQL_ID) == 0) continue;
        if(GetAuctionBetData(i, AB_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        
        new auction_id = GetAuctionID(GetAuctionBetData(i, AB_AUCTION_ID));

        new type = GetAuctionData(auction_id, A_TYPE);

        new id_im = GetAuctionData(auction_id, A_ID_IM);
        new stavka = GetAuctionData(auction_id, A_BET);

        new bet = GetAuctionBetData(i, AB_BET);

        rowss++;

        if(pred <= rowss <= page)
		{
            if(type == 0) format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, id_im, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 1) format(query, sizeof query, "[%d,1,\"Бизнес\",\"%s\",\"%s\",%d,%d,%d,[\"-\"],0,%d],", auction_id, GetBusinessData(id_im, B_NAME), GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 2) format(query, sizeof query, "[%d,2,\"Гараж\",\"Гараж (№ %d)\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, id_im, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 4) format(query, sizeof query, "[%d,4,\"SIM карта\",\"%d\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, GetAuctionData(auction_id, A_PHONE), GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);
            else if(type == 7) format(query, sizeof query, "[%d,7,\"Ценная бумага\",\"На постройку нефтенасоса\",\"%s\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", auction_id, GetAuctionData(auction_id, A_OWNER_NAME), stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);

			strcat(STRING_GLOBAL, query);
        }
    }
    new str_len;
    str_len = strlen(STRING_GLOBAL);
    strdel(STRING_GLOBAL, str_len - 1, str_len);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setLots('[[%s],%d]')", STRING_GLOBAL, page_auction[playerid]);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Auction').setPage('%d')", page_auction[playerid]);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    return true;
}

CMD:auction(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 50.0, -137.6529,2426.3170,1001.2500)) return true;
    
    page_auction[playerid] = 1;
    event_auction[playerid] = 0;
    pred_auction[playerid][0] = 1;
	pred_auction[playerid][1] = 4;
    
    new query[348], 
		rowss,
        count_item = GetIteam(playerid, 293);

	STRING_GLOBAL[0] = EOS;

    for(new i; i < MAX_AUCTION; i++)
    {
        if(GetAuctionData(i, A_SQL_ID) == 0) continue;
        if(GetAuctionData(i, A_TYPE) != 0) continue;

        rowss++;

        if(1 <= rowss <= 4)
		{
            new id = GetAuctionData(i, A_SQL_ID);
            new id_im = GetAuctionData(i, A_ID_IM);
            new stavka = GetAuctionData(i, A_BET);

            new bet = GetPlayerAuctionBet(playerid, id);
            
            format(query, sizeof query, "[%d,0,\"Жильё\",\"Дом (№ %d)\",\"ГОСУДАРСТВО\",%d,%d,%d,[\"-\", \"-\", \"-\"],0,%d],", i, id_im, stavka, count_item, bet, (stavka + (stavka / 100 * 10)) - bet);

            strcat(STRING_GLOBAL, query);
        }
    }

	new str_len;
	str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[%s],%d]", STRING_GLOBAL, page_auction[playerid]);
	CEF_CREATE(playerid, 2, 4, "Auction", STRING_GLOBAL);

    GameText(playerid, "Аукцион принимает только~n~~r~фишки", 3000, 1);

    open_auction[playerid] = 1;

    return true;
}

CMD:auction_slot(playerid, params[])
{
	if(IsPlayerAdminLevel(playerid) < 7) return 1;
	if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

    if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


 	extract params -> new to_player, slots; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /auction_slot [id игрока] [кол-во слотов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

	if(!(1 <= slots <= 15)) return SendClientMessage(playerid, 0xCECECEFF, "от 1 до 15");

	AddPlayerData(to_player, P_AUCTION_SLOTS, +, slots);
	UpdatePlayerDatabaseInt(to_player, "auction_slots", GetPlayerData(to_player, P_AUCTION_SLOTS));

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[A] Администратор %s[%d] добавил игроку %s[%d] %d слотов для ставок в аукционе", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, slots);
	SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);

	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "[A] Администратор %s[%d] добавил вам %d слотов для ставок в аукционе", GetPlayerNameEx(playerid), playerid, slots);
	SendClientMessage(to_player, -1, STRING_GLOBAL);

	return 1;
}

cmd:addauctionlot(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return true;
		else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");


    extract params -> new id_im, stavka, type; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addauctionlot [id имущества] [ставка] [тип имущества (0 - жилье | 1 - бизнес | 2 - гараж)]");

    if(type > 2 || 0 > type) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addauctionlot [id имущества] [ставка] [тип имущества (0 - жилье | 1 - бизнес | 2 - гараж)]");

    if(type == 0)
    {
        if(IsHouseOwned(id_im)) return SCM(playerid, COLOR_GREY, "Данный дом пренадлежит игроку.");
        if(GetOwnableAuction(0, GetHouseData(id_im, H_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный дом уже выставлен на аукцион");
        AddAuctionLot(id_im, stavka, type);
    }
    if(type == 1)
    {
        if(IsBusinessOwned(id_im)) return SCM(playerid, COLOR_GREY, "Данный бизнес пренадлежит игроку.");
        if(GetOwnableAuction(1, GetBusinessData(id_im, B_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный бизнес уже выставлен на аукцион");
        AddAuctionLot(id_im, stavka, type);
    }
    if(type == 2)
    {
        if(IsGarageOwned(id_im)) return SCM(playerid, COLOR_GREY, "Данный гараж пренадлежит игроку.");
        if(GetOwnableAuction(2, GetGarageData(id_im, G_SQL_ID)) > 0) return SCM(playerid, COLOR_GREY, "* Данный гараж уже выставлен на аукцион");
        AddAuctionLot(id_im, stavka, type);
    }
    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[A] Администратор %s[%d] создал лот для аукциона (№%d)", GetPlayerNameEx(playerid), playerid, id_im);
	SendMessageToAdmins(STRING_GLOBAL, 0x999999FF);
    return true;
}

enum S_CRAFT_PRIZE_STRUCT
{
	CRAFT_PRIZE_ID,
	CRAFT_PRIZE_EVENT,
	CRAFT_PRIZE_ITEM_ID,
	CRAFT_PRIZE_NAME[34],
	CRAFT_PRIZE_TYPE,
	CRAFT_PRIZE_IF,
	CRAFT_PRIZE_CHANCE,
	CRAFT_PRIZE_PRICE
}

new g_craft_prize[43][S_CRAFT_PRIZE_STRUCT] =
{
	{0,0,31,"Кастет",3,1,0,0},
	{1,0,29,"Отмычка",4,0,0,0},
	{2,0,2,"Аптечка",4,0,0,0},
	{3,0,151,"Денежная печат.машинка",5,0,0,0},
	{4,0,15,"Обрез",3,1,0,0},
	{5,0,22,"Снайперская винтовка",3,1,0,0},
	{6,0,123,"Ноутбук Apple",5,0,0,0},
	{7,0,9991,"Самодельная Багги",7,1,0,0},
	{8,0,218,"Запчасти к двигателю",5,1,0,0},
	{9,0,179,"Материалы для оружия",1,1,0,0},
	{10,0,119,"Руль AMG",5,0,0,0},
	{11,0,44,"Рем.комплект",4,0,0,0},
	{12,0,9992,"Shelby Cobra",7,1,0,0},
	{13,0,9993,"Napier Railton",7,1,0,0},
	{14,0,180,"Сабвуфер",5,1,0,0},
	{15,0,127,"Металлоискатель BHJ",1,1,0,0},
	{16,0,125,"Лопата",1,1,0,0},
	{17,0,254,"Аппарат для диагностики",1,1,0,0},
	{18,0,164,"Наручные часы",0,1,0,0},
	{19,0,100,"Одежда",2,1,0,0},
	{20,0,9955,"Ремонт бронежилета",6,1,0,0},
	{21,0,323,"Бронепластина",1,1,0,0},
	{22,0,15639,"ZAZ 4",7,1,10,0},
	{23,0,110,"Телефон iPhone",5,0,0,0},
	{24,0,15649,"Chevrolet Camper",7,1,45,1500000},
	{25,1,15563,"Хасбик Шейх",2,1,35,10000000},
	{26,0,331,"Канистра для воды",1,1,0,0},
	{27,1,15559,"МакГрегор Поло",2,1,35,9000000},
	{28,1,15588,"Богданчик в футболке",2,1,15,4500000},
	{29,1,17029,"Санрайз в майке",2,1,50,2500000},
	{30,1,17041,"Мэлстрой Гучи",2,1,13,5000000},
	{31,1,17032,"Аарон Плей",2,1,35,2500000},
	{32,0,15680,"ЗИЛ-131",7,1,30,8000000},
	{33,0,15686,"Rolls royce Spectre",7,1,15,0},
	{34,0,15685,"Mercedes SL 63 MANSORY",7,1,0,0},
	{35,1,17058,"Наглаженный Тёмчик",2,1,25,0},
	{36,0,15689,"Lamborghini Revuelto",7,1,40,10000000},
	{37,1,17067,"Малфой",2,1,5,100000},
	{38,0,423,"GAZ Spooky Bus",7,1,0,0},
	{39,0,15696,"BMW M5 G90",7,1,20,2500000},
	{40,0,369,"Болгарка",4,0,0,0},
	{41,1,17080,"Стэн Лютер",2,1,30,0},
	{42,0,17425,"Gaz Volgatti",7,1,20,2100000}
};

enum S_CRAFT_DETAILS_STRUCT
{
	CRAFT_DETAILS_ID,
	CRAFT_DETAILS_TYPE,
	CRAFT_DETAILS_ITEM_ID,
	CRAFT_DETAILS_COUNT,
	CRAFT_DETAILS_NAME[34]
};

new g_craft_details[191][S_CRAFT_DETAILS_STRUCT] =
{
	{0,0,27,35,""},
	{0,0,157,1,""},

	{1,0,27,25,""},
	{1,0,137,1,""},

	{2,0,142,1,""},
	{2,0,299,3,""},
	{2,0,141,1,""},

	{3,0,152,3,""},
	{3,0,153,1,""},
	{3,0,160,1,""},

	{4,0,14,1,""},
	{4,0,158,1,""},

	{5,0,42,1,""},
	{5,0,146,1,""},

	{6,0,75,1,""},
	{6,0,150,1,""},

	{7,0,156,2,""},
	{7,0,155,4,""},
	{7,0,154,4,""},
	{7,0,27,100,""},
	{7,0,153,5,""},

	{8,0,27,200,""},
	{8,0,153,1,""},
	{8,0,138,3,""},

	{9,0,27,100,""},
	{9,0,153,1,""},
	{9,0,144,1,""},

	{10,0,189,1,""},
	{10,0,190,20,""},

	{11,0,27,30,""},
	{11,0,153,1,""},

	{12,0,156,2,""},
	{12,0,155,4,""},
	{12,0,154,5,""},
	{12,0,27,500,""},
	{12,0,153,3,""},
	{12,0,188,1,""},
	{12,0,189,1,""},
	{12,0,190,30,""},
	{12,0,191,4,""},

	{13,0,156,4,""},
	{13,0,155,4,""},
	{13,0,154,10,""},
	{13,0,27,500,""},
	{13,0,153,9,""},
	{13,0,188,3,""},
	{13,0,189,1,""},
	{13,0,190,50,""},
	{13,0,191,4,""},

	{14,0,304,1,""},
	{14,0,305,1,""},

	{15,0,306,1,""},
	{15,0,307,1,""},

	{16,0,308,1,""},
	{16,0,309,1,""},

	{17,0,310,1,""},
	{17,0,311,1,""},

	{18,0,312,1,""},
	{18,0,313,1,""},
	{18,0,314,1,""},
	{18,0,315,1,""},

	{19,0,317,1,""},
	{19,0,318,1,""},
	{19,0,319,1,""},

	{20,0,154,2,""},
	{20,0,138,1,""},
	{20,0,323,2,""},

	{21,0,27,100,""},

	{22,0,156,6,""},
	{22,0,155,4,""},
	{22,0,301,2,""},
	{22,0,122,4,""},
	{22,0,191,4,""},
	{22,0,27,250,""},
	{22,0,180,2,""},
	{22,0,105,2,""},
	{22,0,543,1,"Tesla Model S"},
	{22,0,555,1,"Zaz"},

	{23,0,148,1,""},
	{23,0,149,2,""},

	{24,0,156,2,""},
	{24,0,188,1,""},
	{24,0,122,4,""},
	{24,0,190,10,""},
	{24,0,301,1,""},
	{24,0,155,4,""},
	{24,0,191,1,""},
	{24,0,27,500,""},
	{24,0,180,2,""},
	{24,0,192,1,""},
	{24,0,10,4,""},
	{24,0,77,1,""},

	{25,3,15850,2,"Ножик на ногу"},
	{25,3,15849,1,"Куфия"},
	{25,1,15498,1,""},
	{25,0,332,1,""},
	{25,0,138,5,""},

	{26,0,27,50,""},
	{26,0,153,1,""},

	{27,3,14628,1,"Ювелирка цепь"},
	{27,3,15848,1,"Корона"},
	{27,1,175,1,""},
	{27,0,332,1,""},
	{27,0,138,5,""},

	{28,3,15751,1,"Шапка с очками"},
	{28,3,16224,1,"Кепка с ушками"},
	{28,1,15426,1,""},
	{28,0,332,1,""},
	{28,0,200,1,""},

	{29,1,17014,1,""},
	{29,1,22,1,""},
	{29,0,318,1,""},
	{29,0,332,1,""},

	{30,1,15518,1,""},
	{30,3,13962,1,"Chanel Gold"},
	{30,3,14614,1,"Часы"},
	{30,3,14628,1,"Ювелирка цепь"},

	{31,1,15434,1,""},
	{31,0,466,1,"BMW G30"},
	{31,0,259,2,""},
	{31,0,332,1,""},

	{32,0,68,1,""},
	{32,0,106,2,""},
	{32,0,27,350,""},
	{32,0,156,2,""},
	{32,0,188,1,""},
	{32,0,155,4,""},
	{32,0,122,4,""},
	{32,0,191,1,""},
	{32,0,154,10,""},

	{33,0,409,1,"Rolls-Royce Phantom VII"},
	{33,0,502,2,"Rolls-Royce Wraith"},
	{33,0,15146,1,"Rolls-Royce Cullinan"},
	{33,0,156,1,""},
	{33,0,188,1,""},
	{33,0,155,4,""},
	{33,0,122,4,""},

	{34,0,15684,1,"Mercedes-Benz L65"},
	{34,0,354,1,""},

	{35,1,17051,1,""},
	{35,1,186,1,""},
	{35,1,15485,1,""},
	{35,3,14614,1,"Часы"},
	{35,0,332,1,""},
	{35,0,47,1,""},

	{36,0,415,1,"Lamborghini Aventador"},
	{36,0,605,1,"Lamborghini Huracan"},
	{36,0,156,1,""},
	{36,0,106,2,""},
	{36,0,188,1,""},
	{36,0,122,4,""},
	{36,0,190,30,""},
	{36,0,153,3,""},
	{36,0,155,4,""},

	{37,0,317,1,""},
	{37,0,318,1,""},
	{37,0,319,1,""},
	{37,0,110,1,""},
	{37,0,111,1,""},
	{37,0,332,1,""},

	{38,0,15692,1,"GAZ School Bus"},
	{38,0,358,1,""},
	
	{39,0,15107,2,"BMW M5 F90"},
	{39,0,612,1,"BMW M5 E60"},
	{39,3,13978,1,"BMW"},
	{39,0,156,1,""},
	{39,0,106,2,""},
	{39,0,188,1,""},
	{39,0,27,200,""},
	{39,0,153,2,""},

	{40, 0, 124, 50, ""},
	{40, 0, 153, 1, ""},
	{40, 0, 156, 1, ""},
	{40, 0, 370, 1, ""},

	{41,1,15420,1,""},
	{41,0,15298,1,"Porsche 959"},
	{41,3,19006,1,"Красные"},
	{41,0,111,5,""},
	{41,0,8,1,""},
	{41,0,47,1,""},
	{41,0,1,1,""},
	{41,0,332,1,""},

	{42,0,15085,1,"Bugatti Chiron"},
	{42,0,15694,1,"GAZ 21 Волга"},
	{42,0,156,1,""},
	{42,0,106,2,""},
	{42,0,188,1,""},
	{42,0,122,4,""},
	{42,0,153,2,""},
	{42,0,155,4,""},
	{42,0,154,10,""}
};
new craftfinish[MAX_PLAYERS] = -1;

new Float: g_garage_pos_workbench[3][3] =
{
	{-1613.2582,1581.6844,2005.7100},
	{2904.54640,2915.6694,1001.0000},
	{-1633.6216,-454.4589,1001.0000}
};

stock ShowCraftCarDialog(playerid, model_id, const name[], type, event)
{
	CraftSet[playerid] = model_id;

	new count = GetCountCraft(playerid, model_id);
    
	if(count > 1)
	{
		CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'Недостаточно ингредиентов')");
        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Выберите транспорт~n~%s", name);
	    GameText(playerid, STRING_GLOBAL, 3000, 3);
	    page_cars[playerid] = 1;
		CraftDialog[playerid] = 1;
	    type_page_cars[playerid] = 20;
	    ShowOwnableCars(playerid, DIALOG_CRAFT_CAR, page_cars[playerid]);
	}
	else
	{
        SelectedCraft[playerid]++;
		CraftModel[playerid] = model_id;
		CraftModelList[playerid][CraftModelCount[playerid]++] = model_id;
        CarIsStoyanka(playerid, model_id);
		OnPlayerCraftingStart(playerid, type, event);
	}
	return 1;
}

stock IsCraftModelLoaded(playerid, model_id)
{
    for(new i = 0; i < MAX_VEHICLES; i++)
    {
        if(GetVehicleData(i, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR)
            continue;

        new car_sql_id = GetVehicleData(i, V_ACTION_ID);
        if(GetOwnableCarData(car_sql_id, OC_OWNER_ID) != GetPlayerAccountID(playerid))
            continue;

        if(GetOwnableCarData(car_sql_id, OC_MODEL_ID) == model_id)
            return 1;
    }
    return 0;
}

stock GetCountCraft(playerid, car_id)
{
	new count, 
		query[100],
		Cache:result;

	mysql_format(mysql, query, sizeof query, "SELECT model_id FROM ownable_cars WHERE owner_id=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(rows == 0)
    {
        cache_delete(result);
        return 0;
    }

	for(new i = 0; i < rows; i++)
    {
        new model = cache_get_row_int(i, 0);
        if(model == car_id)
        {
            count++;
        }
    }

	cache_delete(result);
	return count;
}

stock CarIsStoyanka(playerid, car_id)
{
    new query[256], Cache: result;

    mysql_format(mysql, query, sizeof query, "SELECT id, stoyanka, typenumber FROM ownable_cars WHERE owner_id=%d AND model_id=%d LIMIT 1", GetPlayerAccountID(playerid), car_id);
    result = mysql_query(mysql, query, true);

    new rows = cache_num_rows();

    if(rows == 0)
    {
        cache_delete(result);
        return 0;
    }

    new car_sql_id = cache_get_row_int(0, 0);
    new stoyanka = cache_get_row_int(0, 1);
    new typenumber = cache_get_row_int(0, 2);
    cache_delete(result);

    if(stoyanka == 1)
    {
        CraftError[playerid] = 2;
    }
    else
    {
        if(!IsCraftModelLoaded(playerid, car_id))
        {
            CraftError[playerid] = 1;
        }
        else
        {
            if(typenumber != 0)
            {
                CraftError[playerid] = 3;
            }
            else
            {
                mysql_format(mysql, query, sizeof query, "SELECT id FROM cars_accessories WHERE car_id=%d LIMIT 1", car_sql_id);
                result = mysql_query(mysql, query, true);

                if(cache_num_rows() > 0)
                {
                    CraftError[playerid] = 4;
                    cache_delete(result);
                    return 1;
                }

                mysql_format(mysql, query, sizeof query, "SELECT id FROM items WHERE car_id=%d LIMIT 1", car_sql_id);
                result = mysql_query(mysql, query, true);

                if(cache_num_rows() > 0)
                {
                    CraftError[playerid] = 5;
                }
                else
                {
                    CraftError[playerid] = 0;
                }

                cache_delete(result);
            }
        }
    }

    return 1;
}

public: OnPlayerCraftingStart(playerid, type, event)
{
	if(g_craft_prize[event][CRAFT_PRIZE_IF] == 1)
	{
		new garage_id = GetPlayerInGarage(playerid);
		
		if(garage_id == -1) 
			return CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'Вы должны быть возле верстака')");

		if(GetGarageData(garage_id, G_IMPROVEMENTS) < 2) 
			return CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'Вы должны быть возле верстака')");
		
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2])) 
			return CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'Вы должны быть возле верстака')");		
	}

	if(CraftDialog[playerid] == 1) return CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'Недостаточно ингредиентов')");

	if(GetInventorySlots(playerid) == -1) return CEF_CREATE(playerid, 1, 2, "interface('Craft').showError('Ошибка', 'У Вас нет места под новый предмет в инвентаре.')");

	if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 7 || g_craft_prize[event][CRAFT_PRIZE_TYPE] == 2)
	{
		if(CraftError[playerid] == 1)
		{
			new name_car = CraftModel[playerid];
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Craft').showError('Ошибка', 'Выбранное авто %s не загружен на сервер.')", GetVehicleInfo(name_car, VI_NAME));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			return 1;
		}
		if(CraftError[playerid] == 2)
		{
			new name_car = CraftModel[playerid];
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Craft').showError('Ошибка', 'Выбранное авто %s находится на штрафстоянке.')", GetVehicleInfo(name_car, VI_NAME));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			return 1;
		}
		if(CraftError[playerid] == 3)
		{
			new name_car = CraftModel[playerid];
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Craft').showError('Ошибка', 'Выбранное авто %s имеет номерной знак.')", GetVehicleInfo(name_car, VI_NAME));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			return 1;
		}
		if(CraftError[playerid] == 4)
		{
			new name_car = CraftModel[playerid];
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Craft').showError('Ошибка', 'Выбранное авто %s имеет объекты на транспорте.')", GetVehicleInfo(name_car, VI_NAME));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			return 1;
		}
		if(CraftError[playerid] == 5)
		{
			new name_car = CraftModel[playerid];
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Craft').showError('Ошибка', 'Выбранное авто %s имеет предметы в багажнике.')", GetVehicleInfo(name_car, VI_NAME));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			return 1;
		}

		new step = SelectedCraft[playerid];

		switch(event)
		{
			case 22:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 543, "Tesla Model S", type, event);
				else if(step == 1) ShowCraftCarDialog(playerid, 555, "Zaz", type, event);
				else if(step == 2) craftfinish[playerid] = event;
			}
			case 33:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 409, "Rolls-Royce Phantom VII", type, event);
				else if(step == 1) ShowCraftCarDialog(playerid, 502, "Rolls-Royce Wraith", type, event);
				else if(step == 2) ShowCraftCarDialog(playerid, 502, "Rolls-Royce Wraith", type, event);
				else if(step == 3) ShowCraftCarDialog(playerid, 15146, "Rolls-Royce Cullinan", type, event);
				else if(step == 4) craftfinish[playerid] = event;
			}
			case 34:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 15684, "Mercedes-Benz L65", type, event);
				else if(step == 1) craftfinish[playerid] = event;
			}
			case 36:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 415, "Lamborghini Aventador", type, event);
				else if(step == 1) ShowCraftCarDialog(playerid, 605, "Lamborghini Huracan", type, event);
				else if(step == 2) craftfinish[playerid] = event;
			}
			case 38:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 15692, "GAZ School Bus", type, event);
				else if(step == 1) craftfinish[playerid] = event;
			}
			case 39:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 15107, "BMW M5 F90", type, event);
				else if(step == 1) ShowCraftCarDialog(playerid, 15107, "BMW M5 F90", type, event);
				else if(step == 2) ShowCraftCarDialog(playerid, 612, "BMW M5 E60", type, event);
				else if(step == 3) craftfinish[playerid] = event;
			}
			case 31:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 466, "BMW G30", type, event);
				else if(step == 1) craftfinish[playerid] = event;
			}
			case 41:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 15298, "Porsche 959", type, event);
				else if(step == 1) craftfinish[playerid] = event;
			}
			case 42:
			{
				if(step == 0) ShowCraftCarDialog(playerid, 15085, "Bugatti Chiron", type, event);
				else if(step == 1) ShowCraftCarDialog(playerid, 15694, "GAZ 21 Волга", type, event);
				else if(step == 2) craftfinish[playerid] = event;
			}
			default:
			{
				craftfinish[playerid] = event;
			}
		}
	}
	else craftfinish[playerid] = event;

	return true;
}

stock OnPlayerCraftingFinish(playerid)
{
	new event = craftfinish[playerid];

	if(!VerifyIntString(QueryPlayerBalance(playerid), g_craft_prize[event][CRAFT_PRIZE_PRICE])) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

	new typewin;

	for(new idx; idx < sizeof g_craft_details; idx++)
	{
		if(event != g_craft_details[idx][CRAFT_DETAILS_ID]) continue;

		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 0) 
		{
			if(g_craft_details[idx][CRAFT_DETAILS_ITEM_ID] <= sizeof ItemsInfo)
			{
				GiveIteam(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], 0, g_craft_details[idx][CRAFT_DETAILS_COUNT], 0);
			}
			else
			{
                for(new i = 0; i < SelectedCarCount[playerid]; i++)
                {
                    new car_id = SelectedCars[playerid][i];
                    new query[128];
                    mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE owner_id=%d AND id=%d", GetPlayerAccountID(playerid), car_id);
                    mysql_query(mysql, query, false);
                }

                if(CraftModelCount[playerid] > 0)
                {
                    for(new i = 0; i < CraftModelCount[playerid]; i++)
                    {
                        new model_id = CraftModelList[playerid][i];
                        new query[128];
                        mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE owner_id=%d AND model_id=%d LIMIT 1", GetPlayerAccountID(playerid), model_id);
                        mysql_query(mysql, query, false);
                    }
                }

                SelectedCarCount[playerid] = 0;
                for(new i = 0; i < 25; i++)
                {
                    SelectedCars[playerid][i] = 0;
                }

                CraftModelCount[playerid] = 0;
                for(new i = 0; i < 25; i++)
                {
                    CraftModelList[playerid][i] = 0;
                }
			}
		}
		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 3) DestroyAcs(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], g_craft_details[idx][CRAFT_DETAILS_COUNT]);
		
		if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 1) DestroySkin(playerid, g_craft_details[idx][CRAFT_DETAILS_ITEM_ID], g_craft_details[idx][CRAFT_DETAILS_COUNT]);
	}
	if(g_craft_prize[event][CRAFT_PRIZE_PRICE] != 0) ModifyCashBalance(playerid, -g_craft_prize[event][CRAFT_PRIZE_PRICE], "Крафт");

	if(g_craft_prize[event][CRAFT_PRIZE_CHANCE] != 0)
	{
		new win = RandomEx(1,100);

		if(win <= g_craft_prize[event][CRAFT_PRIZE_CHANCE]) typewin = 1;
		else typewin = 0;
	}
	else typewin = 1;

	if(typewin == 1)
	{
		if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 7)
		{
			if(event == 7) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 568, 0, 1, -1);
			else if(event == 12) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 15174, 0, 1, -1);
			else if(event == 13) GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, 15233, 0, 1, -1);
			else GivePlayerMyPrizes(playerid, g_craft_prize[event][CRAFT_PRIZE_NAME], 3, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID], 0, 1, -1);
			SCM(playerid, 0x80bb20FF, "Автомобиль был добавлен в ваши награды. Используйте меню, чтобы забрать.");
			CEF_CREATE(playerid, 1, 2, "interface('Craft').showResult()");
			if(g_craft_prize[event][CRAFT_PRIZE_ITEM_ID] == 15686) {
                AddPlayerAchiv(playerid, 34);
			}
		}
		else if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 2)
		{
			if(event == 19)
			{
				new id_skin = random(171);
				GiveSkin(playerid, g_business_clothing_skins[0][id_skin][g_model]);
			}
			else
			{
				GiveSkin(playerid, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID]);
				CEF_CREATE(playerid, 1, 2, "interface('Craft').showResult()");
			}
		}
		else if(g_craft_prize[event][CRAFT_PRIZE_TYPE] == 0)
		{
			GiveAcs(playerid, 14009, 7);
		}
		else
		{
			GiveIteam(playerid, g_craft_prize[event][CRAFT_PRIZE_ITEM_ID], 1, 1, 0);
		}
		
		GameText(playerid, "~g~Успешно", 3000, 3);
		OnBattlePass_Perfomance(playerid, 15, 1);
	}
	else
	{
		GameText(playerid, "~r~Неудача~w~~n~У вас не получилось создать рецепт", 3000, 3);
		CEF_HIDE(playerid, "Craft");
	}
    SelectedCraft[playerid] = 0;
	CraftSet[playerid] = 0;
	CraftError[playerid] = 0;
	CraftModel[playerid] = 0;
	CraftDialog[playerid] = 0;

	return true;
}

stock OnPlayerCraftingClose(playerid) 
{
	CEF_HIDE(playerid, "Craft");
	SelectedCraft[playerid] = 0;
	CraftSet[playerid] = 0;
	CraftError[playerid] = 0;
	CraftModel[playerid] = 0;
	CraftDialog[playerid] = 0;

	SelectedCarCount[playerid] = 0;
    for(new i = 0; i < 25; i++)
    {
        SelectedCars[playerid][i] = 0;
    }

    CraftModelCount[playerid] = 0;
    for(new i = 0; i < 25; i++)
    {
        CraftModelList[playerid][i] = 0;
    }
}

cmd:craft(playerid)
{
    new query[512];
    new fmt_text[512];

    STRING_GLOBAL[0] = EOS;

    for(new i = 0; i < sizeof g_craft_prize; i++)
    {
        fmt_text[0] = EOS;

        for(new idx = 0; idx < sizeof g_craft_details; idx++)
        {
            if(i != g_craft_details[idx][CRAFT_DETAILS_ID]) continue;

            if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 0)
            {
                new count = g_craft_details[idx][CRAFT_DETAILS_COUNT];
                new itemId = g_craft_details[idx][CRAFT_DETAILS_ITEM_ID];
                new have = 0;

                if(itemId < sizeof ItemsInfo)
                {
                    have = GetIteam(playerid, itemId);
                }
                else
                {
                    have = GetCarCraft(playerid, itemId);
                }

                format(query, sizeof query, "[%d,%d,%d,%d],",
                    0,
                    itemId,
                    count,
                    have
                );

                strcat(fmt_text, query);
            }
            else if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 3)
            {
                new count = g_craft_details[idx][CRAFT_DETAILS_COUNT];
                new itemId = g_craft_details[idx][CRAFT_DETAILS_ITEM_ID];
                new have = GetAcs(playerid, itemId);

                format(query, sizeof query, "[%d,%d,%d,%d,\"%s\"],",
                    3,
                    itemId,
                    count,
                    have,
                    g_craft_details[idx][CRAFT_DETAILS_NAME]
                );

                strcat(fmt_text, query);
            }
            else if(g_craft_details[idx][CRAFT_DETAILS_TYPE] == 1)
            {
                new count = g_craft_details[idx][CRAFT_DETAILS_COUNT];
                new itemId = g_craft_details[idx][CRAFT_DETAILS_ITEM_ID];
                new have = GetSkin(playerid, itemId);

                format(query, sizeof query, "[%d,%d,%d,%d],",
                    1,
                    itemId,
                    count,
                    have
                );

                strcat(fmt_text, query);
            }
        }

        new fmt_len = strlen(fmt_text);
        if(fmt_len > 0 && fmt_text[fmt_len - 1] == ',')
        {
            fmt_text[fmt_len - 1] = EOS;
        }

        format(query, sizeof query, "[%d,%d,%d,\"%s\",%d,%d,%d,%d,[%s]],",
            g_craft_prize[i][CRAFT_PRIZE_ID],
            g_craft_prize[i][CRAFT_PRIZE_EVENT],
            g_craft_prize[i][CRAFT_PRIZE_ITEM_ID],
            g_craft_prize[i][CRAFT_PRIZE_NAME],
            g_craft_prize[i][CRAFT_PRIZE_TYPE],
            g_craft_prize[i][CRAFT_PRIZE_IF],
            g_craft_prize[i][CRAFT_PRIZE_CHANCE],
            g_craft_prize[i][CRAFT_PRIZE_PRICE],
            fmt_text
        );

        strcat(STRING_GLOBAL, query);
    }

    new global_len = strlen(STRING_GLOBAL);
    if(global_len > 0 && STRING_GLOBAL[global_len - 1] == ',')
    {
        STRING_GLOBAL[global_len - 1] = EOS;
    }

	str_q[0] = EOS;

    strcat(str_q, "[3000,[");
    strcat(str_q, STRING_GLOBAL);
    strcat(str_q, "]]");

    CEF_CREATE(playerid, 2, 4, "Craft", str_q);

    return 1;
}

new g_tuning_diski_id[][3] =
{
	{-1,-1,5000},
    {1084,13,10000},
    {2846,36,10000},
    {5891,49,20000},
    {1082,11,30000},
    {6389,84,35000},
    {6387,82,35000},
    {6388,83,40000},
    {2849,38,40000},
    {3895,77,40000},
    {2853,42,40000},
    {2747,20,45000},
    {6386,81,45000},
    {1025,1,50000},
    {2748,21,50000},
    {6384,79,60000},
    {6385,80,60000},
    {6280,76,70000},
    {3896,78,70000},
    {6390,85,70000},
    {2749,22,70000},
    {1074,3,80000},
    {1085,14,80000},
    {2843,33,80000},
    {2856,45,90000},
    {1075,4,100000},
    {5187,74,100000},
    {6144,75,100000},
    {2754,27,80000},
    {2842,32,100000},
    {2751,24,100000},
    {5991,57,400000},
    {1096,15,120000},
    {2852,41,150000},
    {2851,40,200000},
    {2848,37,200000},
    {2745,18,200000},
    {2847,47,200000},
    {2753,26,250000},
    {6088,60,250000},
    {2855,44,250000},
    {1080,9,150000},
    {1083,12,280000},
    {6089,61,300000},
    {1078,7,300000},
    {2758,31,300000},
    {2844,34,300000},
    {2850,39,200000},
    {6090,62,400000},
    {6091,63,600000},
    {2746,19,500000},
    {2750,23,500000},
    {6097,69,500000},
    {6096,68,500000},
    {2845,35,500000},
    {2755,28,600000},
    {5990,56,600000},
    {1098,17,600000},
    {5992,58,600000},
    {5987,53,700000},
    {5986,52,700000},
    {6094,66,700000},
    {6092,64,700000},
    {2752,25,800000},
    {5988,54,800000},
    {1073,2,800000},
    {1076,5,400000},
    {6099,71,800000},
    {5989,55,900000},
    {1079,8,1000000},
    {2756,29,1000000},
    {5985,51,400000},
    {6093,65,1000000},
    {6098,70,1000000},
    {2854,43,1100000},
    {5993,59,1100000},
    {1077,6,1200000},
    {2857,46,1200000},
    {2757,30,175000},
    {1081,10,1200000},
    {1097,16,1300000},
    {5186,48,1300000},
    {6101,73,1300000},
    {6095,67,1500000},
    {5984,50,1800000},
    {6100,72,2000000},
    {6586,86,150000},
    {6587,87,90000},
    {6588,88,80000},
    {6612,89,200000},
    {6613,90,200000},
    {6614,91,150000},
    {17500,92,250000},
    {17501,93,100000},
    {17502,94,150000},
    {17503,95,200000},
    {17504,96,300000},
    {17505,97,450000},
    {17506,98,550000},
    {17507,99,600000},
    {17508,100,400000},
    {17509,101,70000},
    {17510,102,70000},
    {17511,103,100000},
    {17512,104,900000},
    {17513,105,50000},
    {3810,106,400000},
    {3811,107,225000},
    {3812,108,400000},
    {3813,109,300000},
	{-1,110,240000}
};

new g_player_diski[MAX_PLAYERS];

stock SetCameraVehicle(playerid, Float:x, Float:y, Float: z, Float:a, x_1, y_1)
{
	new Float:old_x, Float:old_y, Float:old_z, Float:cam_x, Float:cam_y;  
	GetPlayerCameraPos(playerid, old_x, old_y, old_z);
	cam_x = x + (x_1 * floatsin(-a, degrees));
	cam_y = y + (y_1 * floatcos(-a, degrees));
    InterpolateCameraPos(playerid,old_x,old_y,old_z, cam_x, cam_y, z + 1.0,1000);
	InterpolateCameraLookAt(playerid, x, y, z, x,y,z,1000);
}

public: Tuning_OnRimClose(playerid)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return 1;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	
	if(GetOwnableCarData(index, OC_DISKI) == 0) PACKET_215(playerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI), "", "", 1);
	else PACKET_215(playerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI));

	SetCameraBehindPlayer(playerid);
	DeletePVar(playerid, "CameraActive");

	new Float:x = GetPVarFloat(playerid, "styling_x");
	new Float:y = GetPVarFloat(playerid, "styling_y");
	new Float:z = GetPVarFloat(playerid, "styling_z");
    new Float:a = GetPVarFloat(playerid, "styling_a");

	TogglePlayerSpectating(playerid, 0);
	SetPlayerPosEx(playerid, x, y, z, a);

	CEF_HIDE(playerid, "TuningStyling");

	return 1;
}

public: Tuning_OnRimItemChange(playerid, type) //выбор дисков
{
	g_player_diski[playerid] = 0;

	new vehicleid = GetPlayerOwnableCarLast(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return 1;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new diski_id = g_tuning_diski_id[type][0];

	if(diski_id == -1) return 0;

	if(type == 0)
	    PACKET_215(playerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI), "", "", 1);
	else
	    PACKET_215(playerid, 17, vehicleid, diski_id);

	return 1;
}

public: Tuning_OnRimInstall(playerid, type) //покупка диска
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return 1;

	string_dialog[0] = EOS;
	format(string_dialog, 148, "{FFFFFF}Модель: {E08703}'RIM %d'\n{FFFFFF}Стоимость: {E08703}%s руб.", g_tuning_diski_id[type][1], formatInt(g_tuning_diski_id[type][2]));
	IntfDialogCallRemote(playerid, DIALOG_SHINOMONTAJ_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подтверждение заказа", string_dialog, "Да", "Нет");

	g_player_diski[playerid] = type;
	return 1;
}

public: Tuning_OnRimCamera(playerid)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return 0;

	TogglePlayerSpectating(playerid, 1);
    PlayerSpectateVehicle(playerid, vehicleid, SPECTATE_MODE_NORMAL);

	SetPVarInt(playerid, "CameraActive", 1);
	CEF_HIDE(playerid, "TuningStyling");
	CEF_CREATE(playerid, 2, 4, "Interactions","[[-1, \"Сохранить камеру\"]]");
	return 1;
}

new g_vinils_styling[29][2] =
{
    {3000, -1},
    {73200, 1},
    {486000, 2},
    {118000, 3},
    {249500, 4},
    {394000, 5},
    {273300, 6},
    {319000, 7},
    {451800, 8},
    {60200, 10},
    {298000, 12},
    {174500, 13},
    {143600, 14},
    {237000, 15},
    {161200, 16},
    {212300, 17},
    {336700, 18},
    {407400, 19},
    {194600, 20},
    {365000, 21},
    {92500, 22},
    {498000, 23},
    {387000, 24},
    {453000, 25},
    {283900, 26},
    {432600, 27},
    {394800, 36},
    {480200, 37},
    {148300, 44}
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum E_BANNED_VINIL
{
    VINIL_ID,
    MODEL_ID,
    VINIL_NAME[32]
}

new const g_banned_vinils[][E_BANNED_VINIL] = 
{
	{29, 436, "previon1"},
	{30, 436, "previon2"},
	{31, 436, "previon3"},
	{32, 436, "previon4"},

	{29, 444, "monster1"},
	{30, 444, "monster2"},
	{31, 444, "monster3"},

	{29, 467, "oceanic4"},

	{29, 525, "towtruck1"},
	{30, 525, "towtruck2"},

	{29, 528, "fbitruck1"},
	{30, 528, "fbitruck2"},

	{29, 552, "utility1"},

	{29, 554, "yosemite1"},
	{30, 554, "yosemite2"},
	{31, 554, "yosemite3"},
	{32, 554, "yosemite4"},

	{29, 557, "monsterb1"},

	{29, 597, "copcarsf1"},
	{30, 597, "copcarsf2"},

	{29, 598, "copcarvg1"},
	{30, 598, "copcarvg2"},

    {29, 599, "copcarru1"},
	{30, 599, "copcarru2"},

	{29, 15077, "accord5"},

	{29, 15092, "xc90_new1"},
	{30, 15092, "xc90_new2"},
	{31, 15092, "xc90_new3"},
	{32, 15092, "xc90_new4"},

	{29, 15107, "bmw90f1"},

	{29, 15121, "vesta1"},
	{30, 15121, "vesta2"},
	{31, 15121, "vesta3"},

	{29, 15142, "e63smb4"},

	{29, 15157, "v70camry1"},
	{30, 15157, "v70camry2"},
	{31, 15157, "v70camry3"},
	{32, 15157, "v70camry4"},

	{29, 15173, "911porsche4"},

	{29, 15186, "octaviapol1"},
	{30, 15186, "octaviapol2"},
	{31, 15186, "octaviapol3"},
	{32, 15186, "octaviapol4"},
	{33, 15186, "octaviapol5"},

	{29, 15187, "ferra599x1"},

	{29, 15195, "carshcamry1"},
	{30, 15195, "carshcamry2"},
	{31, 15195, "carshcamry3"},

	{29, 15196, "carshfocus1"},
	{30, 15196, "carshfocus2"},
	{31, 15196, "carshfocus3"},

	{29, 15197, "carshgolf1"},
	{30, 15197, "carshgolf2"},
	{31, 15197, "carshgolf3"},

	{29, 15198, "carshkia1"},
	{30, 15198, "carshkia2"},
	{31, 15198, "carshkia3"},

	{29, 15199, "carshmazda1"},
	{30, 15199, "carshmazda2"},
	{31, 15199, "carshmazda3"},

	{29, 15200, "carshoctav1"},
	{30, 15200, "carshoctav2"},
	{31, 15200, "carshoctav3"},

	{29, 15201, "carshreno1"},
	{30, 15201, "carshreno2"},
	{31, 15201, "carshreno3"},

	{29, 15202, "carshvolvo1"},
	{30, 15202, "carshvolvo2"},
	{31, 15202, "carshvolvo3"},

	{29, 15217, "charger2"},

	{29, 15277, "kamazcamp1"},

	{29, 15289, "bmwx5m4"},

	{30, 15294, "mb900ph2"},

	{29, 15295, "hotrodh2"},

	{54, 15603, "vazgranta4"},

	{29, 15614, "lambocountnew1"},

	{29, 15624, "ferraenzo1"},
	{30, 15624, "ferraenzo2"},

	{29, 15630, "mbvclass3"},

	{29, 15644, "skate1"},
	{30, 15644, "skate2"},
	{31, 15644, "skate3"},
	{32, 15644, "skate4"},
	{33, 15644, "skate5"},
	{34, 15644, "skate6"},

	{29, 15650, "lambodiablo2"},

	{29, 15651, "bmw20g"},

	{29, 15658, "rr7phantomh1"},
	{30, 15658, "rr7phantomh2"},

	{29, 15681, "zil600hp1"},

	{29, 15682, "por900evo1"},

	{29, 15697, "bmw99g1"},

	{29, 17407, "ferrapur1"},

	{29, 17409, "laavenute1"}
};

bool:IsVinilBanned(type, model)
{
    for(new i = 0; i < sizeof(g_banned_vinils); i++)
    {
        if(g_banned_vinils[i][VINIL_ID] == type && g_banned_vinils[i][MODEL_ID] == model)
        {
            return true;
        }
    }
    return false;
}

stock OpenTuningVinil(playerid, biz_id)
{		
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(i == playerid) continue;
		if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
		break;
	}

	SetVehiclePos(vehicleid, -6.6451,503.9987,1001.0556);
	SetVehicleZAngle(vehicleid, 178.8139);
	TogglePlayerControllable(playerid, 0);

	SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, playerid + 1);

	LinkVehicleToInterior(vehicleid, 3);
	SetVehicleVirtualWorld(vehicleid, playerid + 1);

	SetPlayerCameraPos(playerid,-3.6452, 498.7973, 1001.8854);
	SetPlayerCameraLookAt(playerid,-6.6452, 501.9935, 1001.2854);

	SetPlayerInBiz(playerid, biz_id);

	new query[124];

	STRING_GLOBAL[0] = EOS;

	new count;

	for(new i; i < sizeof g_vinils_styling; i++)
	{
		count++;
		format(query, sizeof query, "[\"PaintJob №%d\",1,%d],", count, g_vinils_styling[i]);
		strcat(STRING_GLOBAL, query);
	}

	for(new i; i < sizeof e_vinils; i++)
	{
		if(e_vinils[i][eVinilModel] == GetVehicleModel(vehicleid))
		{
			count++;
			format(query, sizeof query, "[\"PaintJob №%d\",1,10000000],", count);
			strcat(STRING_GLOBAL, query);
		}
	}

	new str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[1,[%s]]", STRING_GLOBAL);
	CEF_CREATE(playerid, 2, 4, "TuningStyling", STRING_GLOBAL);

    return 1;
}

public: OnDetailingVinylsClose(playerid)
{
	new vehicleid = GetPlayerOwnableCarLast(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	new biz_id = GetPlayerInBiz(playerid);

	if(GetOwnableCarData(index, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, -1), ChangeVehicleViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
	if(GetOwnableCarData(index, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, -1), ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));

	SetVehiclePos(vehicleid, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z));
	SetVehicleZAngle(vehicleid, GetBusinessData(biz_id, B_EXIT_ANGLE));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	LinkVehicleToInterior(vehicleid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);

	SetPlayerInBiz(playerid, -1);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
	return 1;
}

public: OnDetailingVinylsChange(playerid, type)
{
    new vehicleid = GetPlayerOwnableCarLast(playerid);

    if(type >= 0 && type < 29)
    {
		new vinil_type = g_vinils_styling[type][1];

        ChangeVehicleViniljob(vehicleid, vinil_type);
    }
    else
    {
		new exclusive_index = type - 29;
        ChangeVehicleDefaultViniljob(vehicleid, exclusive_index);
    }
    return 1;
}

public: OnDetailingVinylsInstall(playerid, type)
{
    string_dialog[0] = EOS;

	SetPVarInt(playerid, "vinil_type", type);

    if(type >= 0 && type < 29)
    {
		new vinil_price = g_vinils_styling[type][0];
        new vinil_id = g_vinils_styling[type][1];

	    SetPVarInt(playerid, "vinil_price", vinil_price);
	    SetPVarInt(playerid, "vinil_id", vinil_id);

        format(string_dialog, sizeof string_dialog,  "{FFFFFF}Модель: {E08703}'PaintJob №%d'\n{FFFFFF}Стоимость: {E08703}%s руб.", type + 1, formatInt(vinil_price));
	}
    else
    {
		SetPVarInt(playerid, "vinil_id", type - 29);
        format(string_dialog, sizeof string_dialog, "{FFFFFF}Модель: {E08703}'PaintJob №%d'\n{FFFFFF}Стоимость: {E08703}10.000.000 руб.", type + 1);
    }

    IntfDialogCallRemote(playerid, DIALOG_VINIL_INSTAL, DIALOG_STYLE_MSGBOX, "{FFFFFF}Подтверждение заказа", string_dialog, "Да", "Нет");

    return 1;
}

enum E_HANDLING_STRUCT
{
    E_MODEL_INDEX,
    Float:E_MASS,
    Float:E_TURNMASS,
    Float:E_DRAGMULT,
    Float:E_CENTRE_OF_MASS_X,
    Float:E_CENTRE_OF_MASS_Y,
    Float:E_CENTRE_OF_MASS_Z,
    E_PERCENT_SUBMERGED,
    Float:E_TRACTION_MULTIPLIER,
    E_DRIVE_TYPE,
    E_ENGINE_TYPE,
    E_NUMBER_OF_GEARS,
    E_TRANSIMISSION_HANDLING_FLAGS,
    Float:E_ENGINE_ACCELERATION,
    Float:E_ENGINE_INERT,
    Float:E_MAXGEAR_VELOCITY,
    Float:E_BRAKE_DECELERATION,
    Float:E_BRAKE_BIAS,
    Float:E_STEERING_LOCK,
    Float:E_TRACTION_LOSS,
    Float:E_TRACTION_BIAS,
    Float:E_SUSPENSION_FORCE_LEVEL,
    Float:E_SUSPENSION_DAMPING_LEVEL,
    Float:E_SUSPENSION_HIGH,
    Float:E_SUSPENSION_UPPER,
    Float:E_SUSPENSION_LOWER,
    Float:E_SUSPENSION_BIAS,
    Float:E_SUSPENSION_ANTI_DRIVE,
    Float:E_COLLISION_DAMAGE,
    E_MODEL_FLAGS,
    E_HANDLING_FLAGS,
    Float:E_SEAT_OFFSET,
    E_MONETARY_VALUE,
    E_FRONT_LIGHTS,
    E_REAR_LIGHTS,
    E_ANIM_GROUP
};

new g_handling_data[][E_HANDLING_STRUCT] = 
{
    {0, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7799999713897705, 52, 68, 5, 24134656, 22.0, 180.0, 286.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.49000000953674316, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {1, 1400.0, 4500.0, 2.5, 0.0, 0.30000001192092896, -0.4000000059604645, 70, 0.699999988079071, 82, 80, 4, 1, 4.0, 180.0, 140.0, 4.0, 0.800000011920929, 30.0, 0.75, 0.47999998927116394, 1.0, 0.07999999821186066, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.0, 0.6000000238418579, 25, 1, 0.20000000298023224, 3000, 2, 2, 13},
    {10, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8199999928474426, 82, 68, 5, 20971520, 18.0, 120.0, 280.0, 7.0, 0.5, 42.0, 0.75, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.15000000596046448, 0.550000011920929, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {100, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 68, 5, 24134656, 18.0, 171.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.3499999940395355, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {101, 2145.0, 5200.0, 2.4000000953674316, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 80, 5, 24133632, 18.959999084472656, 120.0, 305.0, 8.0, 0.5799999833106995, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.15000000596046448, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.5400000214576721, 2236420, 24133632, 0.15000000596046448, 16000, 1, 3, 0},
    {102, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 180.0, 250.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.6499999761581421, 2228224, 16777217, 1.0, 35000, 1, 1, 0},
    {103, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 180.0, 250.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.44999998807907104, 0.30000001192092896, 0.6499999761581421, 2228224, 16777217, 1.0, 35000, 1, 1, 0},
    {104, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.75, 52, 68, 5, 24117248, 15.0, 204.0, 240.0, 5.0, 0.5, 35.0, 0.75, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.3499999940395355, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {105, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.75, 52, 68, 5, 24117248, 15.0, 200.0, 250.0, 5.0, 0.5, 35.0, 0.75, 0.46000000834465027, 0.800000011920929, 0.17000000178813934, 0.0, 0.25, -0.18000000715255737, 0.5, 0.30000001192092896, 0.3499999940395355, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {106, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 80, 5, 20971521, 18.0, 135.0, 270.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.12999999523162842, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971521, 0.4000000059604645, 16000, 1, 3, 0},
    {107, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7799999713897705, 52, 68, 5, 24134656, 18.0, 156.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.07999999821186066, 0.47999998927116394, 0.30000001192092896, 0.3499999940395355, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {108, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.6000000238418579, 80, 0.75, 52, 80, 5, 24134656, 16.0, 126.0, 240.0, 5.0, 0.5, 30.0, 0.75, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.15000000596046448, 0.5, 0.5, 0.3499999940395355, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {109, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 52, 68, 5, 19931648, 11.5, 240.0, 150.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.15000000596046448, 0.41999998688697815, 0.30000001192092896, 0.3499999940395355, 2228224, 19931648, 0.6499999761581421, 16000, 1, 3, 0},
    {11, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.800000011920929, 52, 68, 5, 20988928, 16.0, 141.0, 250.0, 5.0, 0.800000011920929, 38.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 20988928, 1.0, 16000, 1, 3, 0},
    {110, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.800000011920929, 52, 80, 5, 20971520, 18.0, 141.0, 250.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.4000000059604645, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {111, 1500.0, 3000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 90, 0.8999999761581421, 82, 80, 5, 20971520, 15.600000381469727, 9.0, 265.0, 11.100000381469727, 0.47999998927116394, 35.0, 0.8999999761581421, 0.44999998807907104, 0.800000011920929, 0.20000000298023224, 0.0, 0.2199999988079071, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5400000214576721, 8196, 20971520, 0.23999999463558197, 50000, 1, 1, 0},
    {112, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.824999988079071, 70, 68, 5, 20971520, 16.0, 165.0, 260.0, 7.0, 0.5, 37.0, 0.824999988079071, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.03999999910593033, 0.6000000238418579, 0.6000000238418579, 0.30000001192092896, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {113, 2305.0, 5150.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.699999988079071, 52, 80, 5, 20988931, 9.600000381469727, 66.0, 275.0, 12.0, 0.44999998807907104, 40.0, 0.800000011920929, 0.5, 1.0, 0.15000000596046448, 0.0, 0.25, -0.10000000149011612, 0.5, 0.30000001192092896, 0.6000000238418579, 8192, 20988931, 0.20000000298023224, 50000, 1, 1, 0},
    {114, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 20971520, 15.0, 200.0, 265.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.44999998807907104, 2236448, 20971520, 0.28999999165534973, 16000, 1, 3, 0},
    {115, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20988928, 20.0, 144.0, 290.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.49000000953674316, 0.6000000238418579, 0.5400000214576721, 2236416, 20988928, 0.5, 16000, 1, 3, 0},
    {116, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3100000023841858, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.5, 219.0, 180.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.11999999731779099, 0.0, 0.20000000298023224, -0.11999999731779099, 0.46000000834465027, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {117, 2500.0, 4000.0, 2.4000000953674316, 0.0, 0.05000000074505806, -0.10000000149011612, 70, 0.6000000238418579, 82, 80, 5, 16785920, 12.0, 141.0, 210.0, 13.0, 0.6000000238418579, 30.0, 0.8600000143051147, 0.5, 1.100000023841858, 0.10000000149011612, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5, 8192, 16785920, 0.25999999046325684, 50000, 1, 1, 0},
    {118, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 82, 68, 5, 285212672, 11.5, 249.0, 160.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.20000000298023224, 0.5, 0.30000001192092896, 0.4000000059604645, 2228240, 285212672, 0.6499999761581421, 16000, 1, 3, 0},
    {119, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.5, 216.0, 169.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.20000000298023224, 0.47999998927116394, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {12, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 82, 68, 5, 16777216, 11.5, 231.0, 190.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {120, 3385.0, 5100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8199999928474426, 82, 68, 5, 20971536, 15.0, 132.0, 250.0, 5.0, 0.5, 42.0, 0.7200000286102295, 0.5199999809265137, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971536, 0.4000000059604645, 16000, 1, 3, 0},
    {121, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.5350000262260437, 80, 0.7799999713897705, 52, 80, 5, 24117248, 15.0, 111.0, 220.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.14000000059604645, 0.5, 0.5, 0.4000000059604645, 2236448, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {122, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25, 80, 0.7200000286102295, 52, 68, 5, 24117248, 12.0, 240.0, 230.0, 5.0, 0.5, 29.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5249999761581421, 0.5, 0.30000001192092896, 2236416, 24117248, 0.4399999976158142, 40000, 0, 1, 0},
    {123, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24134656, 18.0, 145.0, 280.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.2199999988079071, -0.05000000074505806, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {124, 3500.0, 6156.2001953125, 2.200000047683716, 0.0, 0.0, -0.20000000298023224, 80, 0.7649999856948853, 82, 68, 5, 16777216, 15.0, 225.0, 250.0, 5.0, 0.5, 30.0, 0.7649999856948853, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.23000000417232513, -0.1599999964237213, 0.5, 0.5, 0.4000000059604645, 2236416, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {125, 2100.0, 4200.0, 2.0, 0.0, 0.0, -0.2800000011920929, 70, 0.7400000095367432, 70, 68, 5, 20971520, 14.0, 180.0, 210.0, 5.0, 0.5, 30.0, 0.7400000095367432, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.4699999988079071, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {126, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.699999988079071, 82, 80, 5, 285278208, 11.600000381469727, 249.0, 170.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.25, -0.15000000596046448, 0.4000000059604645, 0.30000001192092896, 0.4000000059604645, 2228224, 285278208, 0.6499999761581421, 95000, 1, 1, 1},
    {127, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 52, 80, 5, 20971520, 18.0, 150.0, 250.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.18000000715255737, 0.44999998807907104, 0.6000000238418579, 0.4000000059604645, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {128, 2235.0, 4560.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 90, 0.7300000190734863, 52, 80, 5, 3145730, 3.9200000762939453, 84.0, 170.0, 12.0, 0.5199999809265137, 35.0, 0.8600000143051147, 0.5099999904632568, 0.9200000166893005, 0.15000000596046448, 0.0, 0.3100000023841858, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5600000023841858, 0, 3145730, 0.10000000149011612, 50000, 1, 1, 0},
    {129, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8500000238418579, 70, 68, 5, 20971520, 16.0, 170.0, 240.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.12999999523162842, 0.550000011920929, 0.6000000238418579, 0.44999998807907104, 2236416, 20971520, 0.5, 16000, 1, 3, 0},
    {13, 2600.0, 8666.7001953125, 3.0, 0.0, 0.0, -0.25, 80, 0.550000011920929, 82, 68, 5, 1, 4.800000190734863, 24.0, 110.0, 6.0, 0.800000011920929, 30.0, 0.8999999761581421, 0.5, 2.5999999046325684, 0.07000000029802322, 0.0, 0.3499999940395355, -0.15000000596046448, 0.25, 0.0, 0.5, 16385, 1, 0.20000000298023224, 20000, 0, 3, 13},
    {130, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25999999046325684, 80, 0.7200000286102295, 52, 68, 5, 24117248, 12.0, 189.0, 215.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.18000000715255737, 0.44999998807907104, 0.5, 0.4000000059604645, 2228256, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {131, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.7799999713897705, 82, 68, 5, 16794625, 16.0, 180.0, 250.0, 5.0, 0.5, 42.0, 0.7599999904632568, 0.5, 1.0, 0.20000000298023224, 0.0, 0.10000000149011612, -0.10000000149011612, 0.5, 0.30000001192092896, 0.6000000238418579, 2228224, 16794625, 0.20000000298023224, 16000, 1, 3, 0},
    {132, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.75, 82, 68, 5, 16794625, 16.0, 201.0, 295.0, 5.0, 0.5, 35.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.15000000596046448, 0.4300000071525574, 0.30000001192092896, 0.30000001192092896, 2228224, 16794625, 0.4399999976158142, 16000, 1, 3, 0},
    {133, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8700000047683716, 52, 68, 5, 20971520, 26.0, 129.0, 325.0, 7.0, 0.5, 45.0, 0.8700000047683716, 0.44999998807907104, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.6000000238418579, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {134, 4000.0, 7000.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 75, 0.6499999761581421, 52, 80, 3, 19957760, 6.079999923706055, 81.0, 80.0, 8.0, 0.550000011920929, 38.0, 0.8500000238418579, 0.5, 0.699999988079071, 0.05000000074505806, 0.0, 0.4000000059604645, -0.20999999344348907, 0.5, 0.30000001192092896, 0.3499999940395355, 0, 19957760, 0.25, 50000, 1, 1, 0},
    {135, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.25, 85, 0.7599999904632568, 70, 68, 5, 16777216, 12.0, 220.0, 225.0, 5.0, 0.5, 28.0, 0.7599999904632568, 0.47999998927116394, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {136, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.9800000190734863, 52, 68, 5, 20987906, 34.0, 141.0, 420.0, 8.0, 0.5, 45.0, 0.9800000190734863, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07500000298023224, 0.5299999713897705, 0.6000000238418579, 0.5400000214576721, 1075978244, 20987906, 0.4000000059604645, 16000, 1, 3, 0},
    {137, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 82, 68, 5, 20987904, 18.0, 171.0, 250.0, 7.0, 0.5, 42.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.18000000715255737, 0.49000000953674316, 0.6000000238418579, 0.30000001192092896, 2149720064, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {138, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8500000238418579, 70, 68, 5, 20971520, 14.0, 160.0, 240.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.125, 0.5, 0.6000000238418579, 0.44999998807907104, 2228224, 20971520, 0.5, 16000, 1, 3, 0},
    {139, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.7799999713897705, 82, 68, 5, 16777217, 13.0, 180.0, 190.0, 8.0, 0.5, 42.0, 0.7300000190734863, 0.5, 1.0, 0.20000000298023224, 0.0, 0.10000000149011612, -0.05000000074505806, 0.5, 0.30000001192092896, 0.6000000238418579, 2228224, 16777217, 0.6499999761581421, 16000, 1, 3, 0},
    {14, 8000.0, 18273.30078125, 4.5, 0.0, -0.20000000298023224, -0.07000000029802322, 90, 0.6499999761581421, 82, 68, 4, 4464650, 4.800000190734863, 9.0, 130.0, 2.0, 0.3400000035762787, 24.0, 0.550000011920929, 0.3499999940395355, 0.9200000166893005, 0.05999999865889549, 0.0, 0.4099999964237213, -0.20000000298023224, 0.5, 0.0, 0.4000000059604645, 1075986432, 4464650, 0.25999999046325684, 20000, 1, 1, 2},
    {140, 2200.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.8199999928474426, 52, 80, 5, 20971520, 19.200000762939453, 159.0, 300.0, 6.0, 0.5, 40.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.49000000953674316, 0.30000001192092896, 0.6000000238418579, 2236416, 20971520, 0.25, 16000, 1, 3, 0},
    {141, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 186.0, 240.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.6000000238418579, 2228224, 16777217, 0.6499999761581421, 35000, 1, 1, 0},
    {142, 1400.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 70, 0.699999988079071, 82, 80, 5, 20971522, 8.479999542236328, 36.0, 220.0, 8.0, 0.550000011920929, 30.0, 0.8999999761581421, 0.47999998927116394, 1.0, 0.05000000074505806, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.30000001192092896, 0.6000000238418579, 16, 20971522, 0.25, 50010, 1, 1, 0},
    {143, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.2800000011920929, 80, 0.7799999713897705, 52, 80, 5, 24134656, 18.0, 190.0, 230.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.5, 0.5, 0.4000000059604645, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {144, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.75, 82, 68, 5, 16794625, 15.0, 201.0, 250.0, 5.0, 0.5, 35.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 16794625, 0.4399999976158142, 16000, 1, 3, 0},
    {145, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 80, 5, 24117248, 17.0, 141.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {146, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 150.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.20000000298023224, 0.4000000059604645, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {147, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8500000238418579, 52, 68, 5, 20988928, 22.0, 129.0, 320.0, 7.0, 0.5, 42.0, 0.8500000238418579, 0.47999998927116394, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {148, 5000.0, 10000.0, 2.4000000953674316, 0.0, 0.8999999761581421, -1.899999976158142, 90, 0.75, 82, 80, 5, 16793602, 4.840000152587891, 81.0, 180.0, 8.0, 0.30000001192092896, 35.0, 0.8999999761581421, 0.4000000059604645, 1.2999999523162842, 0.20000000298023224, 0.0, 0.20999999344348907, -0.15000000596046448, 0.5, 0.30000001192092896, 0.25, 0, 16793602, 0.3499999940395355, 50000, 1, 1, 0},
    {149, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 16385, 7.159999847412109, 120.0, 120.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.25, -0.15000000596046448, 0.5, 0.30000001192092896, 0.25, 0, 16385, 0.3499999940395355, 50000, 1, 1, 0},
    {15, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8999999761581421, 52, 68, 5, 21005312, 28.0, 129.0, 350.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.17499999701976776, -0.05999999865889549, 0.6499999761581421, 0.6000000238418579, 0.5400000214576721, 3223461892, 21005312, 0.4000000059604645, 16000, 1, 3, 0},
    {150, 3500.0, 11100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 75, 0.699999988079071, 52, 68, 5, 24117249, 11.5, 219.0, 110.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
    {151, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 1, 6.800000190734863, 171.0, 130.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.25, 0.0, 0.5, 0.30000001192092896, 0.25, 0, 1, 0.3499999940395355, 50000, 1, 1, 0},
    {152, 3800.0, 15000.0, 2.0, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 1, 6.800000190734863, 171.0, 100.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.25, -0.0, 0.5, 0.0, 0.25, 538984456, 1, 0.3499999940395355, 35000, 2, 2, 2},
    {153, 8000.0, 15000.0, 2.4000000953674316, 0.0, 0.0, 0.0, 90, 0.75, 82, 80, 5, 1, 6.0, 171.0, 100.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.2999999523162842, 0.20000000298023224, 0.0, 0.18000000715255737, -0.15000000596046448, 0.5, 0.30000001192092896, 0.25, 0, 1, 0.3499999940395355, 50000, 1, 1, 0},
    {154, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 8705, 7.159999847412109, 231.0, 60.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.20000000298023224, 0.0, 0.5, 0.30000001192092896, 0.25, 0, 8705, 0.3499999940395355, 50000, 1, 1, 0},
    {155, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 8705, 8.0, 171.0, 130.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.25, 0.0, 0.5, 0.30000001192092896, 0.25, 0, 8705, 0.3499999940395355, 50000, 1, 1, 0},
    {156, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 17409, 6.800000190734863, 201.0, 80.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.20000000298023224, 0.0, 0.5, 0.30000001192092896, 0.25, 0, 17409, 0.3499999940395355, 50000, 1, 1, 0},
    {157, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.15000000596046448, 85, 0.800000011920929, 52, 80, 5, 24125955, 16.0, 50.0, 250.0, 5.0, 0.5, 30.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.11999999731779099, 0.5, 0.30000001192092896, 0.30000001192092896, 2232320, 24125955, 0.20000000298023224, 50000, 1, 1, 0},
    {158, 1726.0, 3850.0, 2.4000000953674316, 0.0, 0.009999999776482582, -0.20000000298023224, 80, 0.75, 82, 80, 4, 16793600, 9.800000190734863, 51.0, 200.0, 9.0, 0.44999998807907104, 35.0, 0.8999999761581421, 0.5099999904632568, 1.100000023841858, 0.07000000029802322, 0.0, 0.3499999940395355, -0.11999999731779099, 0.5, 0.30000001192092896, 0.5, 0, 16793600, 0.15000000596046448, 50000, 1, 1, 0},
    {159, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 82, 80, 5, 20987905, 16.0, 135.0, 250.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5099999904632568, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987905, 0.4000000059604645, 16000, 1, 3, 0},
    {16, 2600.0, 10202.7998046875, 2.5, 0.0, 0.0, -0.10000000149011612, 90, 0.75, 52, 68, 5, 4, 6.800000190734863, 9.0, 145.0, 7.0, 0.550000011920929, 35.0, 0.800000011920929, 0.4699999988079071, 1.0, 0.07000000029802322, 0.0, 0.4000000059604645, -0.20000000298023224, 0.5, 0.0, 0.33000001311302185, 16385, 4, 0.5799999833106995, 10000, 0, 1, 13},
    {160, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 135.0, 300.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {161, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 52, 68, 5, 24134656, 16.0, 174.0, 264.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {162, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.800000011920929, 52, 80, 5, 20971520, 18.0, 141.0, 250.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5, 0.6000000238418579, 0.4000000059604645, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {163, 1500.0, 2400.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 90, 0.800000011920929, 82, 80, 5, 24134657, 15.600000381469727, 60.0, 340.0, 8.0, 0.550000011920929, 40.0, 0.8999999761581421, 0.5, 0.800000011920929, 0.11999999731779099, 0.0, 0.15000000596046448, -0.029999999329447746, 0.5, 0.30000001192092896, 0.75, 8196, 24134657, 0.25, 50000, 1, 1, 0},
    {164, 1700.0, 3100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.600000381469727, 120.0, 315.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5350000262260437, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.029999999329447746, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {165, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7300000190734863, 52, 68, 5, 19922944, 14.0, 200.0, 185.0, 5.0, 0.5, 30.0, 0.7300000190734863, 0.47999998927116394, 0.800000011920929, 0.16500000655651093, 0.0, 0.2800000011920929, -0.15000000596046448, 0.5, 0.5, 0.4000000059604645, 2228256, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {166, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8999999761581421, 52, 68, 5, 20987904, 28.0, 125.0, 340.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.44999998807907104, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {167, 15000.0, 25000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.6499999761581421, 52, 68, 5, 0, 15.760000228881836, 249.0, 110.0, 6.0, 0.4000000059604645, 30.0, 0.8500000238418579, 0.5400000214576721, 0.800000011920929, 0.10000000149011612, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.30000001192092896, 0.1599999964237213, 1, 0, 0.3199999928474426, 50000, 1, 1, 0},
    {168, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7200000286102295, 52, 68, 5, 24117248, 11.0, 186.0, 180.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.10000000149011612, 0.5, 0.5, 0.30000001192092896, 2228228, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {169, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7400000095367432, 70, 68, 5, 16777216, 11.5, 219.0, 190.0, 3.5, 0.5, 29.0, 0.7400000095367432, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.10000000149011612, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {17, 10000.0, 33156.19921875, 2.799999952316284, 0.0, 0.0, -0.30000001192092896, 85, 0.699999988079071, 82, 68, 5, 24388097, 11.0, 150.0, 135.0, 3.0, 0.5, 28.0, 0.699999988079071, 0.4399999976158142, 0.699999988079071, 0.16500000655651093, 0.0, 0.4000000059604645, -0.20000000298023224, 0.5, 0.0, 0.75, 2228232, 24388097, 0.4399999976158142, 16000, 1, 3, 0},
    {170, 1726.0, 3850.0, 2.4000000953674316, 0.0, 0.009999999776482582, -0.20000000298023224, 80, 0.75, 70, 80, 4, 16777216, 5.119999885559082, 39.0, 170.0, 9.0, 0.44999998807907104, 35.0, 0.8999999761581421, 0.5099999904632568, 1.100000023841858, 0.07000000029802322, 0.0, 0.3499999940395355, -0.07999999821186066, 0.5, 0.30000001192092896, 0.5, 8192, 16777216, 0.15000000596046448, 50000, 1, 1, 0},
    {171, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7400000095367432, 70, 68, 5, 16777216, 11.5, 219.0, 190.0, 3.5, 0.5, 29.0, 0.7400000095367432, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.10000000149011612, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {172, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.699999988079071, 82, 80, 5, 285278208, 11.199999809265137, 250.0, 160.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.25, -0.15000000596046448, 0.4000000059604645, 0.30000001192092896, 0.4000000059604645, 2228224, 285278208, 0.6499999761581421, 95000, 1, 1, 1},
    {173, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.800000011920929, 52, 68, 5, 24134656, 18.0, 81.0, 250.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149715968, 24134656, 0.4000000059604645, 16000, 1, 3, 0},
    {174, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 52, 68, 5, 20971520, 16.0, 141.0, 250.0, 5.0, 0.800000011920929, 38.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.25, -0.05999999865889549, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {175, 2100.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8199999928474426, 52, 80, 5, 20987904, 22.0, 135.0, 300.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5299999713897705, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.4000000059604645, 0.6000000238418579, 0.5400000214576721, 2149720064, 20987904, 0.5, 16000, 1, 3, 0},
    {176, 2500.0, 6000.0, 2.5, 0.0, 0.0, -0.20000000298023224, 80, 0.6499999761581421, 52, 80, 4, 5, 6.0, 129.0, 95.0, 7.0, 0.44999998807907104, 30.0, 0.75, 0.5, 1.0, 0.09000000357627869, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.0, 0.3499999940395355, 1, 5, 0.4399999976158142, 40000, 2, 2, 0},
    {177, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 20971520, 12.0, 174.0, 230.0, 5.0, 0.5, 30.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.12999999523162842, 0.5, 0.30000001192092896, 0.3499999940395355, 2236448, 20971520, 0.28999999165534973, 19000, 0, 3, 0},
    {178, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8500000238418579, 52, 68, 5, 24117248, 16.0, 165.0, 250.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.550000011920929, 0.6000000238418579, 0.44999998807907104, 2236416, 24117248, 0.5, 16000, 1, 3, 0},
    {179, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 1.2000000476837158, 82, 68, 5, 21005314, 28.0, 141.0, 350.0, 8.0, 0.5, 45.0, 0.949999988079071, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5, 0.6000000238418579, 0.5400000214576721, 1075978244, 21005314, 0.4000000059604645, 16000, 1, 3, 0},
    {18, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8500000238418579, 70, 68, 5, 24117248, 16.0, 160.0, 265.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.44999998807907104, 2236416, 24117248, 0.5, 16000, 1, 3, 0},
    {180, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.6000000238418579, 70, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 135.0, 250.0, 7.0, 0.5, 42.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.6000000238418579, 0.30000001192092896, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {181, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.2800000011920929, 85, 0.800000011920929, 52, 80, 5, 20987904, 20.0, 120.0, 250.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 16000, 1, 1, 0},
    {182, 2200.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 75, 0.8199999928474426, 52, 80, 5, 20971520, 15.0, 219.0, 250.0, 6.0, 0.5, 40.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.25, -0.029999999329447746, 0.5, 0.30000001192092896, 0.6000000238418579, 2236416, 20971520, 0.25, 16000, 1, 3, 0},
    {183, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.5, 219.0, 169.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.20000000298023224, 0.46000000834465027, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {184, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7799999713897705, 52, 68, 5, 24117248, 17.0, 171.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.07999999821186066, 0.6000000238418579, 0.5, 0.4000000059604645, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {185, 2000.0, 4000.0, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.75, 52, 68, 5, 24182784, 11.199999809265137, 171.0, 210.0, 4.0, 0.5, 30.0, 0.75, 0.5, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.0, 0.3499999940395355, 2228288, 24182784, 0.3799999952316284, 16000, 1, 3, 0},
    {186, 1500.0, 4000.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 120, 0.75, 52, 68, 5, 24117248, 10.0, 69.0, 240.0, 5.0, 0.5199999809265137, 40.0, 0.8500000238418579, 0.5, 1.0, 0.15000000596046448, 0.0, 0.20000000298023224, -0.019999999552965164, 0.5, 0.30000001192092896, 0.23999999463558197, 2236416, 24117248, 0.10000000149011612, 16000, 1, 3, 0},
    {187, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.800000011920929, 52, 82, 5, 20971520, 13.0, 81.0, 250.0, 6.0, 0.44999998807907104, 35.0, 0.800000011920929, 0.44999998807907104, 0.800000011920929, 0.1550000011920929, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {188, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.600000381469727, 210.0, 190.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.11999999731779099, 0.0, 0.20000000298023224, -0.11999999731779099, 0.46000000834465027, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {189, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.44999998807907104, 85, 0.7799999713897705, 52, 68, 5, 20971520, 13.0, 120.0, 250.0, 5.0, 0.800000011920929, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {19, 1300.0, 4300.0, 2.0, 0.0, 0.30000001192092896, -0.30000001192092896, 75, 0.75, 82, 80, 5, 1, 6.0, 60.0, 110.0, 10.0, 0.5299999713897705, 35.0, 0.8500000238418579, 0.5, 1.0, 0.11999999731779099, 0.0, 0.2800000011920929, -0.20000000298023224, 0.550000011920929, 0.0, 0.23999999463558197, 32, 1, 0.20000000298023224, 25000, 2, 2, 0},
    {190, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.7599999904632568, 52, 68, 5, 24117248, 16.0, 180.0, 250.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.2800000011920929, -0.10000000149011612, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24117248, 0.4399999976158142, 19000, 1, 1, 0},
    {191, 1000.0, 2500.0, 2.0, 0.0, -0.5, 0.0, 90, 0.44999998807907104, 82, 68, 5, 1052928, 7.199999809265137, 6.0, 120.0, 8.0, 0.30000001192092896, 25.0, 0.75, 0.5, 1.5, 0.05000000074505806, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.0, 0.25, 2113536, 1052928, 0.6499999761581421, 35000, 0, 1, 0},
    {192, 2000.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.550000011920929, 75, 0.8399999737739563, 82, 68, 5, 16811009, 22.0, 180.0, 305.0, 6.5, 0.5, 32.0, 0.800000011920929, 0.49000000953674316, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.6000000238418579, 2228224, 16811009, 0.25, 35000, 1, 1, 1},
    {193, 2000.0, 5848.2998046875, 2.799999952316284, 0.0, 0.0, -0.20000000298023224, 85, 0.75, 82, 80, 5, 16777216, 12.0, 129.0, 210.0, 5.5, 0.6000000238418579, 28.0, 0.6200000047683716, 0.44999998807907104, 0.6000000238418579, 0.10000000149011612, 0.0, 0.20000000298023224, -0.11999999731779099, 0.4000000059604645, 0.0, 0.4000000059604645, 2228224, 16777216, 0.20000000298023224, 16000, 1, 3, 0},
    {194, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 20971520, 13.0, 165.0, 240.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.3499999940395355, 2236448, 20971520, 0.28999999165534973, 19000, 0, 3, 0},
    {195, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 135.0, 300.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {196, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 70, 0.8500000238418579, 52, 68, 5, 20988928, 25.0, 144.0, 307.0, 8.0, 0.6000000238418579, 45.0, 0.8500000238418579, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.6499999761581421, 0.30000001192092896, 0.5400000214576721, 2236420, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {197, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.550000011920929, 70, 0.8799999952316284, 52, 68, 5, 21004291, 30.0, 144.0, 350.0, 8.0, 0.6000000238418579, 40.0, 0.8799999952316284, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5, 0.30000001192092896, 0.5400000214576721, 2236436, 21004291, 0.4000000059604645, 16000, 1, 3, 0},
    {198, 2145.0, 5200.0, 2.4000000953674316, 0.0, 0.0, -0.5, 70, 0.7599999904632568, 82, 68, 5, 16777216, 13.0, 210.0, 250.0, 5.0, 0.5, 38.0, 0.6800000071525574, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.20000000298023224, 0.4699999988079071, 0.30000001192092896, 0.5400000214576721, 2236420, 16777216, 0.15000000596046448, 16000, 1, 3, 0},
    {199, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 180.0, 250.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05999999865889549, 0.44999998807907104, 0.30000001192092896, 0.6000000238418579, 2228224, 16777217, 1.0, 35000, 1, 1, 0},
    {2, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.550000011920929, 85, 0.800000011920929, 52, 80, 5, 20987904, 20.0, 120.0, 250.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.12999999523162842, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 16000, 1, 1, 0},
    {20, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.23499999940395355, 85, 0.7400000095367432, 70, 68, 5, 16777216, 11.0, 249.0, 208.0, 5.0, 0.5, 29.0, 0.7400000095367432, 0.47999998927116394, 0.800000011920929, 0.07800000160932541, 0.0, 0.25, -0.11999999731779099, 0.4650000035762787, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {200, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.800000011920929, 82, 80, 5, 16777217, 16.0, 159.0, 250.0, 5.0, 0.5, 42.0, 0.800000011920929, 0.5, 0.800000011920929, 0.20000000298023224, 0.0, 0.1599999964237213, -0.17000000178813934, 0.5, 0.30000001192092896, 0.6000000238418579, 2236416, 16777217, 0.6499999761581421, 16000, 1, 3, 0},
    {201, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 126.0, 305.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05999999865889549, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {202, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 68, 5, 20987905, 22.0, 140.0, 290.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2236416, 20987905, 0.5, 16000, 1, 3, 0},
    {203, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 52, 68, 5, 20971520, 18.0, 144.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.20999999344348907, 0.41999998688697815, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {204, 3385.0, 7200.0, 2.0, 0.0, 0.0, -0.3799999952316284, 70, 0.800000011920929, 52, 68, 5, 20971520, 20.0, 111.0, 250.0, 7.0, 0.5, 41.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.20000000298023224, 0.41999998688697815, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {205, 3385.0, 5100.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.7400000095367432, 82, 80, 5, 16777216, 14.0, 220.0, 220.0, 5.0, 0.47999998927116394, 38.0, 0.6000000238418579, 0.5199999809265137, 0.800000011920929, 0.15000000596046448, 0.0, 0.20000000298023224, -0.125, 0.47999998927116394, 0.5, 0.5, 2149711872, 16777216, 0.4000000059604645, 16000, 1, 3, 0},
    {206, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 82, 68, 5, 20987904, 23.0, 105.0, 306.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05000000074505806, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {207, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 85, 0.9100000262260437, 82, 68, 5, 16793600, 20.0, 120.0, 324.0, 7.0, 0.5, 40.0, 0.8500000238418579, 0.46000000834465027, 0.800000011920929, 0.1599999964237213, 0.0, 0.18000000715255737, -0.18000000715255737, 0.5799999833106995, 0.30000001192092896, 0.30000001192092896, 2236420, 16793600, 0.4399999976158142, 16000, 1, 3, 0},
    {208, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.3799999952316284, 70, 0.800000011920929, 70, 68, 5, 20971520, 16.0, 180.0, 272.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.48500001430511475, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.44999998807907104, 2236416, 20971520, 0.5, 16000, 1, 3, 0},
    {209, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 1.0, 82, 68, 5, 20988928, 21.0, 156.0, 325.0, 7.0, 0.5, 42.0, 0.8999999761581421, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2236416, 20988928, 0.4399999976158142, 16000, 1, 3, 0},
    {21, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 52, 68, 5, 19922944, 11.5, 219.0, 180.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 19922944, 0.6499999761581421, 16000, 1, 3, 0},
    {210, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.6000000238418579, 85, 0.8999999761581421, 52, 68, 5, 20987904, 23.0, 126.0, 306.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07000000029802322, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2236420, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {211, 1800.0, 3000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 70, 0.8999999761581421, 82, 80, 5, 24150019, 13.0, 141.0, 250.0, 8.0, 0.6000000238418579, 40.0, 0.8999999761581421, 0.44999998807907104, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.4300000071525574, 0.30000001192092896, 0.5400000214576721, 2236436, 24150019, 0.4000000059604645, 16000, 1, 3, 0},
    {212, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20971520, 24.0, 135.0, 300.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {213, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.5099999904632568, 70, 1.0, 82, 80, 5, 20987907, 26.0, 159.0, 320.0, 7.0, 0.5, 40.0, 0.9300000071525574, 0.47999998927116394, 0.800000011920929, 0.1850000023841858, 0.0, 0.20000000298023224, -0.09000000357627869, 0.5099999904632568, 0.30000001192092896, 0.5400000214576721, 2236420, 20987907, 0.4000000059604645, 105000, 0, 0, 1},
    {214, 2000.0, 4000.0, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.75, 52, 82, 5, 24217600, 11.199999809265137, 171.0, 190.0, 8.0, 0.5, 30.0, 0.75, 0.5, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.0, 0.3499999940395355, 2228304, 24217600, 0.3799999952316284, 105000, 0, 0, 1},
    {215, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5799999833106995, 85, 1.0, 82, 68, 5, 20971520, 26.0, 171.0, 320.0, 7.0, 0.5, 40.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {216, 1500.0, 3500.0, 2.4000000953674316, 0.0, 0.0, -0.5, 75, 0.6499999761581421, 82, 68, 5, 16777216, 8.0, 225.0, 163.0, 4.0, 0.5, 28.0, 0.6499999761581421, 0.4399999976158142, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.12999999523162842, 0.47999998927116394, 0.30000001192092896, 0.6000000238418579, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {217, 1500.0, 3500.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.7599999904632568, 82, 68, 5, 20987905, 14.0, 159.0, 250.0, 6.0, 0.5, 40.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.4399999976158142, 0.30000001192092896, 0.6000000238418579, 2236416, 20987905, 0.6499999761581421, 16000, 1, 3, 0},
    {218, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 1.0, 82, 68, 5, 21004290, 32.0, 141.0, 350.0, 7.0, 0.5, 45.0, 1.0, 0.44999998807907104, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.08500000089406967, 0.6000000238418579, 0.6000000238418579, 0.550000011920929, 2149720068, 21004290, 0.4000000059604645, 105000, 0, 0, 1},
    {219, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8500000238418579, 70, 68, 5, 24182784, 16.0, 160.0, 265.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.44999998807907104, 2236416, 24182784, 0.5, 16000, 1, 3, 0},
    {22, 1700.0, 4108.2998046875, 3.5, 0.0, 0.0, 0.0, 85, 0.75, 82, 68, 5, 2, 5.599999904632568, 51.0, 145.0, 4.170000076293945, 0.800000011920929, 35.0, 0.75, 0.5, 1.2000000476837158, 0.10000000149011612, 0.0, 0.3499999940395355, -0.15000000596046448, 0.5, 0.0, 0.7699999809265137, 136, 2, 0.23999999463558197, 29000, 0, 1, 0},
    {220, 1500.0, 3500.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.75, 82, 68, 5, 16777217, 13.0, 120.0, 210.0, 8.0, 0.5, 42.0, 0.6000000238418579, 0.5199999809265137, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.12999999523162842, 0.47999998927116394, 0.30000001192092896, 0.6000000238418579, 2228224, 16777217, 0.6499999761581421, 16000, 1, 3, 0},
    {221, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 80, 5, 20971520, 14.0, 159.0, 250.0, 6.0, 0.5, 38.0, 0.7799999713897705, 0.4749999940395355, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {222, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 70, 68, 5, 20971520, 14.0, 180.0, 250.0, 6.0, 0.5, 38.0, 0.7799999713897705, 0.46000000834465027, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {223, 1500.0, 3500.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 75, 0.7599999904632568, 82, 68, 5, 20971521, 14.0, 159.0, 250.0, 6.0, 0.5, 40.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.15000000596046448, 0.47999998927116394, 0.30000001192092896, 0.6000000238418579, 2236416, 20971521, 0.6499999761581421, 16000, 1, 3, 0},
    {224, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.3499999940395355, 70, 1.0, 82, 68, 5, 21004288, 29.0, 120.0, 315.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.46000000834465027, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.4699999988079071, 0.6000000238418579, 0.5400000214576721, 2149720064, 21004288, 0.4000000059604645, 105000, 0, 0, 1},
    {225, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24134656, 19.0, 141.0, 290.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.2199999988079071, -0.05000000074505806, 0.5, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {226, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.7799999713897705, 52, 100, 5, 24117248, 16.0, 159.0, 250.0, 6.0, 0.5, 42.0, 0.7799999713897705, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5, 0.30000001192092896, 0.6000000238418579, 2236480, 24117248, 0.6499999761581421, 26000, 0, 1, 0},
    {227, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 82, 68, 5, 16777216, 13.0, 231.0, 210.0, 6.0, 0.5, 30.0, 0.7400000095367432, 0.4699999988079071, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228240, 16777216, 0.4399999976158142, 19000, 1, 1, 0},
    {228, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.800000011920929, 82, 68, 5, 20971520, 16.0, 159.0, 250.0, 6.0, 0.5, 42.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05000000074505806, 0.4699999988079071, 0.30000001192092896, 0.4000000059604645, 2236416, 20971520, 0.6499999761581421, 19000, 1, 1, 0},
    {229, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.8199999928474426, 52, 69, 5, 20971520, 23.0, 90.0, 260.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.4699999988079071, 0.6000000238418579, 0.5400000214576721, 2149715968, 20971520, 0.4000000059604645, 19000, 1, 1, 0},
    {23, 1200.0, 2000.0, 4.0, 0.0, 0.0, -0.30000001192092896, 80, 0.75, 52, 80, 4, 3145728, 8.0, 9.0, 170.0, 6.0, 0.5, 35.0, 0.8500000238418579, 0.5, 1.0, 0.07000000029802322, 5.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.0, 0.4000000059604645, 4458816, 3145728, 0.3799999952316284, 15000, 1, 2, 25},
    {230, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 52, 68, 5, 24388097, 11.0, 201.0, 110.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.800000011920929, 0.17000000178813934, 0.0, 0.44999998807907104, -0.05000000074505806, 0.5, 0.5, 0.30000001192092896, 2228232, 24388097, 0.4399999976158142, 16000, 1, 3, 0},
    {231, 3500.0, 7000.0, 4.0, 0.0, 0.0, 0.10000000149011612, 80, 0.550000011920929, 82, 80, 5, 0, 6.0, 129.0, 90.0, 4.5, 0.6000000238418579, 30.0, 0.8500000238418579, 0.46000000834465027, 1.5, 0.07000000029802322, 5.0, 0.3499999940395355, -0.18000000715255737, 0.5, 0.0, 0.5299999713897705, 16520, 0, 0.46000000834465027, 22000, 0, 3, 0},
    {232, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 80, 5, 20988928, 4.800000190734863, 174.0, 220.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.3499999940395355, 2236448, 20988928, 0.28999999165534973, 19000, 0, 3, 0},
    {233, 1200.0, 3500.0, 2.5, 0.0, 0.0, -0.4000000059604645, 70, 0.699999988079071, 70, 80, 5, 1, 6.800000190734863, 81.0, 115.0, 12.0, 0.5299999713897705, 38.0, 0.800000011920929, 0.47999998927116394, 1.5, 0.11999999731779099, 0.0, 0.2800000011920929, -0.18000000715255737, 0.550000011920929, 0.0, 0.23999999463558197, 2080, 1, 0.20000000298023224, 7000, 2, 2, 0},
    {234, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 68, 5, 20971520, 14.0, 135.0, 250.0, 6.0, 0.5, 38.0, 0.7799999713897705, 0.46000000834465027, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.4699999988079071, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {235, 1625.0, 3560.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 90, 0.800000011920929, 70, 80, 5, 16777216, 6.840000152587891, 30.0, 220.0, 9.0, 0.3499999940395355, 40.0, 0.5, 0.5, 1.100000023841858, 0.10000000149011612, 0.0, 0.3799999952316284, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5, 0, 16777216, 0.23999999463558197, 50000, 1, 0, 0},
    {236, 1650.0, 3500.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.699999988079071, 70, 80, 5, 20971523, 3.5999999046325684, 36.0, 190.0, 8.0, 0.550000011920929, 30.0, 0.75, 0.47999998927116394, 1.0, 0.05000000074505806, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.30000001192092896, 0.6000000238418579, 8196, 20971523, 0.25, 50000, 1, 1, 0},
    {237, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 80, 5, 20971520, 14.0, 159.0, 250.0, 6.0, 0.5, 38.0, 0.7799999713897705, 0.4749999940395355, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {238, 1300.0, 4300.0, 2.4000000953674316, 0.0, 0.30000001192092896, -0.30000001192092896, 75, 0.75, 70, 80, 5, 1, 6.400000095367432, 81.0, 120.0, 10.0, 0.5299999713897705, 35.0, 0.8500000238418579, 0.5, 1.0, 0.11999999731779099, 0.0, 0.2800000011920929, -0.18000000715255737, 0.5, 0.30000001192092896, 0.23999999463558197, 0, 1, 0.20000000298023224, 50000, 1, 1, 0},
    {239, 2300.0, 7000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 80, 0.800000011920929, 52, 80, 5, 24125952, 11.600000381469727, 24.0, 220.0, 8.5, 0.5, 35.0, 0.800000011920929, 0.5199999809265137, 0.699999988079071, 0.15000000596046448, 0.0, 0.3400000035762787, -0.20000000298023224, 0.5, 0.30000001192092896, 0.30000001192092896, 8192, 24125952, 0.25, 50000, 1, 1, 0},
    {24, 2200.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.75, 82, 80, 5, 16777216, 13.0, 150.0, 170.0, 4.0, 0.5, 28.0, 0.75, 0.41999998688697815, 0.800000011920929, 0.16500000655651093, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5199999809265137, 0.30000001192092896, 0.6000000238418579, 2228288, 16777216, 0.25, 16000, 1, 3, 0},
    {240, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.8199999928474426, 82, 68, 5, 20971520, 20.0, 144.0, 307.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {241, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.44999998807907104, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 144.0, 300.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5, 0.6000000238418579, 0.5, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {242, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7200000286102295, 82, 68, 5, 16777216, 8.0, 225.0, 120.0, 5.0, 0.5, 28.0, 0.7200000286102295, 0.46000000834465027, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {243, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 141.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.46000000834465027, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {244, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7200000286102295, 82, 68, 5, 16777216, 10.0, 225.0, 199.0, 5.0, 0.5, 28.0, 0.7200000286102295, 0.46000000834465027, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {245, 1300.0, 3500.0, 2.5, 0.0, 0.30000001192092896, -0.4000000059604645, 70, 0.699999988079071, 82, 68, 4, 1, 6.0, 150.0, 130.0, 4.0, 0.800000011920929, 30.0, 0.699999988079071, 0.47999998927116394, 1.0, 0.07999999821186066, 0.0, 0.30000001192092896, -0.10000000149011612, 0.550000011920929, 0.0, 0.6000000238418579, 2230320, 1, 0.20000000298023224, 16010, 1, 3, 0},
    {246, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8199999928474426, 82, 68, 5, 20987904, 18.0, 156.0, 250.0, 7.0, 0.5, 42.0, 0.75, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {247, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 82, 68, 5, 20971520, 18.399999618530273, 168.0, 300.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5099999904632568, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {248, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.800000011920929, 82, 80, 5, 20988929, 22.0, 140.0, 300.0, 6.0, 0.5, 45.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10999999940395355, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720068, 20988929, 0.4000000059604645, 16000, 1, 3, 0},
    {249, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 141.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {25, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 52, 68, 5, 19940352, 11.5, 249.0, 180.0, 5.0, 0.5, 29.0, 0.7400000095367432, 0.4650000035762787, 1.0, 0.20000000298023224, 0.0, 0.30000001192092896, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 19940352, 0.4399999976158142, 16000, 1, 3, 0},
    {250, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 129.0, 250.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236420, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {251, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7300000190734863, 52, 68, 5, 19922944, 14.0, 195.0, 175.0, 5.0, 0.5, 30.0, 0.7300000190734863, 0.4699999988079071, 0.800000011920929, 0.17000000178813934, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.5, 0.4000000059604645, 2228256, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {252, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.699999988079071, 70, 68, 5, 16777216, 10.0, 249.0, 188.0, 3.0, 0.5, 28.0, 0.699999988079071, 0.44999998807907104, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {253, 1800.0, 3000.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 70, 0.800000011920929, 82, 68, 5, 24117251, 28.0, 81.0, 200.0, 11.100000381469727, 0.47999998927116394, 40.0, 0.800000011920929, 0.44999998807907104, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5400000214576721, 2236420, 24117251, 0.4000000059604645, 16000, 1, 3, 0},
    {254, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 174.0, 290.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {255, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25, 80, 0.7400000095367432, 52, 68, 5, 24117248, 16.0, 150.0, 220.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.45500001311302185, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.5, 0.30000001192092896, 2236480, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {256, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 174.0, 270.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.07999999821186066, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {257, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 68, 5, 20971520, 16.0, 159.0, 250.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5799999833106995, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {258, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7400000095367432, 52, 82, 5, 24117248, 14.0, 210.0, 186.0, 5.0, 0.5, 30.0, 0.7400000095367432, 0.47999998927116394, 0.800000011920929, 0.17499999701976776, 0.0, 0.2800000011920929, -0.10000000149011612, 0.5, 0.5, 0.4000000059604645, 2228288, 24117248, 0.4399999976158142, 26000, 0, 1, 0},
    {259, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 1.0, 52, 68, 5, 20987904, 32.0, 180.0, 400.0, 8.0, 0.5, 45.0, 0.8999999761581421, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.550000011920929, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {26, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 82, 68, 5, 20971520, 17.0, 150.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.18000000715255737, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {260, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 85, 0.7799999713897705, 52, 68, 5, 16793600, 20.0, 135.0, 294.0, 5.0, 0.5, 40.0, 0.7799999713897705, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2236420, 16793600, 0.4399999976158142, 16000, 1, 3, 0},
    {261, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8999999761581421, 52, 68, 5, 20971520, 29.0, 135.0, 350.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.46000000834465027, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.06499999761581421, 0.5, 0.6000000238418579, 0.5400000214576721, 1075978244, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {262, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8999999761581421, 52, 68, 5, 21005312, 29.0, 135.0, 350.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.46000000834465027, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.06499999761581421, 0.5, 0.6000000238418579, 0.5400000214576721, 1075978244, 21005312, 0.4000000059604645, 16000, 1, 3, 0},
    {263, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7400000095367432, 52, 68, 5, 24117248, 14.0, 114.0, 200.0, 5.0, 0.5, 30.0, 0.7400000095367432, 0.4699999988079071, 0.800000011920929, 0.17000000178813934, 0.0, 0.2800000011920929, -0.11999999731779099, 0.5199999809265137, 0.5, 0.4000000059604645, 2236480, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {264, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 1.0, 82, 68, 5, 20971520, 29.0, 129.0, 335.0, 8.0, 0.5, 45.0, 0.8999999761581421, 0.4650000035762787, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10999999940395355, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {265, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.550000011920929, 85, 1.0, 82, 68, 5, 20971520, 26.0, 141.0, 318.0, 7.0, 0.5, 40.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {266, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 1.0, 82, 68, 5, 20987904, 24.0, 150.0, 335.0, 7.0, 0.5, 40.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236420, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {267, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7599999904632568, 82, 68, 5, 20971520, 15.0, 249.0, 250.0, 5.0, 0.5, 35.0, 0.7599999904632568, 0.4650000035762787, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.42500001192092896, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {268, 3500.0, 11100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 75, 0.699999988079071, 52, 68, 5, 24117249, 11.5, 219.0, 135.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
    {269, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7350000143051147, 82, 82, 5, 16777216, 18.0, 249.0, 268.0, 5.0, 0.5, 30.0, 0.7350000143051147, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2237184, 16777216, 0.4399999976158142, 15000, 1, 2, 1},
    {27, 5500.0, 33187.8984375, 2.0, 0.0, 0.5, 0.0, 90, 0.75, 82, 68, 4, 0, 5.599999904632568, 51.0, 130.0, 4.170000076293945, 0.4000000059604645, 30.0, 0.8500000238418579, 0.4000000059604645, 1.2000000476837158, 0.07000000029802322, 0.0, 0.44999998807907104, -0.25, 0.44999998807907104, 0.0, 0.75, 16386, 0, 0.20000000298023224, 15000, 1, 1, 16},
    {270, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 85, 1.0, 82, 80, 5, 20988928, 26.0, 171.0, 365.0, 7.0, 0.5, 40.0, 0.9300000071525574, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.6000000238418579, 0.30000001192092896, 0.30000001192092896, 2236420, 20988928, 0.6499999761581421, 45000, 1, 1, 1},
    {271, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 1.0, 82, 68, 5, 20971520, 29.0, 159.0, 360.0, 8.0, 0.5, 45.0, 1.0, 0.44999998807907104, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5299999713897705, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {272, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 85, 0.8999999761581421, 82, 68, 5, 16777216, 20.0, 135.0, 294.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {273, 1800.0, 3000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 70, 0.8999999761581421, 52, 68, 5, 24133635, 28.0, 81.0, 350.0, 11.100000381469727, 0.47999998927116394, 40.0, 0.8999999761581421, 0.44999998807907104, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.30000001192092896, 0.5400000214576721, 2236420, 24133635, 0.4000000059604645, 16000, 1, 3, 0},
    {274, 1300.0, 5008.2998046875, 2.5, 0.0, 0.0, -0.30000001192092896, 80, 0.75, 52, 68, 5, 5242882, 10.0, 39.0, 60.0, 6.199999809265137, 0.6000000238418579, 35.0, 0.8500000238418579, 0.5, 2.5, 0.11999999731779099, 0.0, 0.2800000011920929, -0.14000000059604645, 0.5, 0.25, 0.23000000417232513, 32, 5242882, 0.27000001072883606, 6000000, 0, 1, 0},
    {275, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7300000190734863, 52, 68, 5, 19922944, 14.0, 201.0, 175.0, 5.0, 0.5, 30.0, 0.7300000190734863, 0.4699999988079071, 0.800000011920929, 0.16500000655651093, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.5, 0.4000000059604645, 2228256, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {276, 5500.0, 33187.8984375, 5.0, 0.0, 0.0, -0.20000000298023224, 90, 0.6000000238418579, 82, 68, 4, 512, 8.0, 30.0, 110.0, 3.5, 0.4000000059604645, 30.0, 0.8999999761581421, 0.5, 1.0, 0.05999999865889549, 0.0, 0.44999998807907104, -0.25, 0.550000011920929, 0.30000001192092896, 0.20000000298023224, 16392, 512, 0.44999998807907104, 5000, 0, 1, 0},
    {277, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 80, 5, 20988928, 4.800000190734863, 174.0, 220.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.3499999940395355, 2236448, 20988928, 0.28999999165534973, 19000, 0, 3, 0},
    {278, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8999999761581421, 52, 68, 5, 20971520, 28.0, 126.0, 345.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.0949999988079071, 0.550000011920929, 0.6000000238418579, 0.5400000214576721, 2236420, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {279, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 52, 68, 5, 24117248, 18.0, 144.0, 280.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {28, 25000.0, 250000.0, 5.0, 0.0, 0.0, 0.0, 90, 2.5, 52, 68, 4, 3180608, 16.0, 150.0, 80.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.4000000059604645, 0.019999999552965164, 0.0, 0.3499999940395355, -0.10000000149011612, 0.5, 0.0, 0.09000000357627869, 1073774600, 3180608, 0.2199999988079071, 110000, 0, 1, 24},
    {280, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 80, 5, 21004288, 18.0, 135.0, 280.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 21004288, 0.4000000059604645, 35000, 1, 1, 0},
    {281, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7799999713897705, 52, 68, 5, 24134656, 22.0, 156.0, 300.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07000000029802322, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {282, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 82, 68, 5, 20971520, 18.799999237060547, 159.0, 300.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {283, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 82, 68, 5, 20971520, 18.799999237060547, 159.0, 300.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {284, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.3499999940395355, 70, 0.8999999761581421, 52, 68, 5, 20987904, 28.0, 126.0, 340.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05999999865889549, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {285, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.800000011920929, 82, 80, 5, 24133632, 18.0, 99.0, 280.0, 5.0, 0.5, 42.0, 0.75, 0.5, 0.800000011920929, 0.14000000059604645, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24133632, 0.4399999976158142, 35000, 1, 1, 0},
    {286, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 141.0, 260.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 0.44999998807907104, 35000, 1, 1, 0},
    {287, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 80, 5, 20971520, 18.0, 141.0, 260.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 1.0, 35000, 1, 1, 0},
    {288, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 80, 5, 20971520, 18.799999237060547, 159.0, 300.0, 7.0, 0.5, 40.0, 0.699999988079071, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 1.0, 35000, 1, 1, 0},
    {289, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 52, 68, 5, 20971520, 18.0, 141.0, 260.0, 5.0, 0.5, 42.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.4000000059604645, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 1.0, 16000, 1, 3, 0},
    {29, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 52, 68, 5, 24379393, 11.0, 201.0, 110.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.800000011920929, 0.17000000178813934, 0.0, 0.44999998807907104, -0.05000000074505806, 0.5, 0.5, 0.30000001192092896, 2228232, 24379393, 0.4399999976158142, 16000, 1, 3, 0},
    {290, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 80, 5, 20987904, 18.0, 125.0, 260.0, 5.0, 0.5, 42.0, 0.75, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.029999999329447746, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228224, 20987904, 0.44999998807907104, 105000, 0, 0, 1},
    {291, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.3499999940395355, 70, 0.800000011920929, 82, 68, 5, 20987904, 20.0, 171.0, 330.0, 7.0, 0.5, 40.0, 0.8799999952316284, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720148, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {292, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 52, 68, 5, 19940352, 11.5, 249.0, 180.0, 5.0, 0.5, 29.0, 0.7400000095367432, 0.4650000035762787, 1.0, 0.20000000298023224, 0.0, 0.30000001192092896, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 19940352, 0.4399999976158142, 16000, 1, 3, 0},
    {293, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.3499999940395355, 70, 0.8999999761581421, 52, 68, 5, 20988928, 28.0, 126.0, 350.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5799999833106995, 0.6000000238418579, 0.5400000214576721, 2149720068, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {294, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.18000000715255737, 80, 0.7200000286102295, 52, 68, 5, 19922944, 11.0, 186.0, 180.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.17000000178813934, 0.0, 0.2800000011920929, -0.15000000596046448, 0.4399999976158142, 0.5, 0.30000001192092896, 2228228, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {295, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.46000000834465027, 70, 1.0, 82, 80, 5, 21005312, 28.0, 141.0, 330.0, 7.0, 0.5, 45.0, 0.9300000071525574, 0.44999998807907104, 0.800000011920929, 0.1850000023841858, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.5400000214576721, 2236420, 21005312, 0.4000000059604645, 35000, 1, 1, 0},
    {296, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8199999928474426, 82, 80, 5, 20971521, 22.0, 130.0, 300.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971521, 0.4000000059604645, 16000, 1, 3, 0},
    {297, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7799999713897705, 52, 80, 5, 24134656, 18.0, 156.0, 250.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.1599999964237213, 0.5, 0.5, 0.4000000059604645, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {298, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7400000095367432, 52, 68, 5, 24396800, 15.0, 126.0, 180.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.45500001311302185, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.20000000298023224, 0.4699999988079071, 0.5, 0.30000001192092896, 2236456, 24396800, 0.4399999976158142, 16000, 1, 3, 0},
    {299, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7799999713897705, 52, 68, 5, 24134656, 18.0, 144.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {3, 7080.0, 14000.0, 2.5, 0.0, 0.30000001192092896, -0.20000000298023224, 90, 0.800000011920929, 82, 68, 4, 19927296, 8.399999618530273, 9.0, 100.0, 8.0, 0.5899999737739563, 36.5, 0.7699999809265137, 0.47999998927116394, 0.925000011920929, 0.8100000023841858, 10.0, 0.2800000011920929, -0.20000000298023224, 0.49000000953674316, 0.15000000596046448, 0.4000000059604645, 1114128, 19927296, 0.3499999940395355, 45000, 0, 1, 2},
    {30, 1400.0, 3400.0, 2.5, 0.0, 0.30000001192092896, -0.30000001192092896, 75, 0.75, 82, 80, 5, 32768, 11.199999809265137, 6.0, 200.0, 11.0, 0.44999998807907104, 30.0, 0.800000011920929, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.2800000011920929, -0.20000000298023224, 0.4000000059604645, 0.30000001192092896, 0.6000000238418579, 1073768448, 32768, 0.20000000298023224, 35000, 1, 1, 0},
    {300, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 82, 68, 5, 19922944, 11.5, 249.0, 180.0, 5.0, 0.5, 29.0, 0.7400000095367432, 0.4650000035762787, 1.0, 0.20000000298023224, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.30000001192092896, 2228225, 19922944, 0.4399999976158142, 26000, 0, 1, 13},
    {301, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 85, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 99.0, 300.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.18000000715255737, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {302, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 52, 68, 5, 20971520, 18.0, 144.0, 250.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.18000000715255737, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {303, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 68, 5, 20987904, 15.0, 120.0, 250.0, 5.0, 0.800000011920929, 38.0, 0.75, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 35000, 1, 1, 0},
    {304, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 68, 5, 20971520, 15.0, 201.0, 240.0, 5.0, 0.800000011920929, 38.0, 0.75, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {305, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 52, 80, 5, 24117248, 16.0, 189.0, 245.0, 5.0, 0.800000011920929, 38.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2228224, 24117248, 0.4399999976158142, 35000, 1, 1, 0},
    {306, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7400000095367432, 52, 68, 5, 24134656, 15.0, 180.0, 180.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.45500001311302185, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.15000000596046448, 0.5299999713897705, 0.5, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {307, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7400000095367432, 52, 68, 5, 24134656, 15.0, 180.0, 180.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.45500001311302185, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.15000000596046448, 0.5299999713897705, 0.5, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {308, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.75, 52, 68, 5, 24134656, 15.0, 204.0, 240.0, 5.0, 0.5, 35.0, 0.75, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {309, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.20000000298023224, 80, 0.699999988079071, 52, 68, 5, 24379393, 11.0, 201.0, 135.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.5, 0.17000000178813934, 0.0, 0.44999998807907104, -0.15000000596046448, 0.4300000071525574, 0.5, 0.30000001192092896, 8, 24379393, 0.4399999976158142, 16000, 1, 3, 0},
    {31, 5000.0, 30000.0, 2.0, 0.0, -0.5, 0.0, 90, 0.44999998807907104, 82, 68, 5, 1052928, 7.199999809265137, 6.0, 120.0, 8.0, 0.30000001192092896, 25.0, 0.75, 0.5, 1.5, 0.05000000074505806, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.0, 0.25, 2113536, 1052928, 0.6499999761581421, 35000, 0, 1, 0},
    {310, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 82, 80, 5, 24379393, 11.0, 201.0, 135.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 1.2000000476837158, 0.17000000178813934, 0.0, 0.44999998807907104, -0.11999999731779099, 0.41999998688697815, 0.5, 0.30000001192092896, 2228232, 24379393, 0.4399999976158142, 26000, 0, 1, 13},
    {311, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 52, 68, 5, 24134656, 11.0, 201.0, 135.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.800000011920929, 0.17000000178813934, 0.0, 0.44999998807907104, -0.20000000298023224, 0.4699999988079071, 0.5, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {312, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25, 80, 0.7200000286102295, 52, 68, 5, 24117248, 12.0, 240.0, 190.0, 5.0, 0.5, 29.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5249999761581421, 0.5, 0.30000001192092896, 2236452, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {313, 1500.0, 1300.0, 5.0, 0.0, 0.0, -0.10000000149011612, 110, 0.7200000286102295, 82, 80, 5, 0, 4.0, 6.0, 60.0, 15.0, 0.20000000298023224, 35.0, 0.7200000286102295, 0.41999998688697815, 0.800000011920929, 0.20000000298023224, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.4000000059604645, 0, 0, 0.3799999952316284, 1000, 1, 2, 0},
    {314, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 144.0, 306.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {315, 3500.0, 11100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 75, 0.699999988079071, 52, 68, 5, 24117249, 11.5, 219.0, 135.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
    {316, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 52, 68, 5, 20971520, 18.0, 180.0, 260.0, 5.0, 0.800000011920929, 38.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2228224, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {317, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.44999998807907104, 70, 0.9800000190734863, 52, 68, 5, 20987904, 32.0, 126.0, 380.0, 8.0, 0.5, 45.0, 0.9800000190734863, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.5299999713897705, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {318, 5000.0, 11500.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 75, 0.800000011920929, 52, 68, 5, 24117249, 22.0, 135.0, 300.0, 5.0, 0.5, 30.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17499999701976776, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4699999988079071, 0.30000001192092896,  0.25, 2236448, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
	{319, 3385.0, 11200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7799999713897705, 82, 68, 5, 20971520, 17.0, 180.0, 250.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.4650000035762787, 0.800000011920929, 0.1599999964237213, 0.0, 0.2800000011920929, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.10000000149011612, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {32, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 16777216, 12.0, 190.0, 180.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.07999999821186066, 0.47999998927116394, 0.30000001192092896, 0.3499999940395355, 2236448, 16777216, 0.28999999165534973, 16000, 1, 3, 0},
    {320, 5000.0, 11500.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.7799999713897705, 52, 68, 5, 24117249, 15.0, 84.0, 220.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.30000001192092896, -0.15000000596046448, 0.47999998927116394, 0.30000001192092896, 0.6000000238418579, 2236480, 24117249, 0.6499999761581421, 40000, 0, 1, 0},
    {321, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.4000000059604645, 80, 0.7799999713897705, 52, 80, 5, 24134656, 20.0, 159.0, 250.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.5, 0.5, 0.4000000059604645, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {322, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7900000214576721, 82, 68, 5, 20971520, 17.0, 165.0, 250.0, 5.0, 0.5, 35.0, 0.7900000214576721, 0.4650000035762787, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.18000000715255737, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {323, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.8199999928474426, 52, 68, 5, 20988928, 23.0, 111.0, 250.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2149715968, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {324, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24134656, 19.0, 141.0, 290.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.2199999988079071, -0.05000000074505806, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {325, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25999999046325684, 80, 0.7200000286102295, 52, 68, 5, 24134657, 13.0, 171.0, 215.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.15000000596046448, 0.47999998927116394, 0.5, 0.4000000059604645, 2228256, 24134657, 0.4399999976158142, 16000, 1, 3, 0},
    {326, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.7400000095367432, 82, 68, 5, 16777217, 16.0, 144.0, 205.0, 4.0, 0.5, 30.0, 0.7400000095367432, 0.47999998927116394, 0.699999988079071, 0.10000000149011612, 0.0, 0.25, -0.1599999964237213, 0.4699999988079071, 0.0, 0.30000001192092896, 2236416, 16777217, 0.4399999976158142, 16000, 1, 3, 0},
    {327, 1726.0, 3850.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 80, 0.699999988079071, 70, 68, 4, 16794624, 8.399999618530273, 171.0, 170.0, 4.0, 0.5, 30.0, 0.699999988079071, 0.5, 1.0, 0.1599999964237213, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4300000071525574, 0.30000001192092896, 0.5, 1114112, 16794624, 0.15000000596046448, 35000, 1, 1, 0},
	{328, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.800000011920929, 52, 68, 5, 4194305, 22.0, 51.0, 250.0, 5.0, 0.5, 30.0, 0.800000011920929, 0.5, 0.699999988079071, 0.16500000655651093, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.0, 0.30000001192092896, 2228224, 4194305, 0.4399999976158142, 16000, 1, 3, 0},
    {329, 2200.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.699999988079071, 70, 80, 5, 16777216, 11.0, 150.0, 150.0, 4.0, 0.5, 28.0, 0.699999988079071, 0.41999998688697815, 0.800000011920929, 0.16500000655651093, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5199999809265137, 0.30000001192092896, 0.6000000238418579, 2228224, 16777216, 0.25, 16000, 1, 3, 0},
    {33, 9500.0, 57324.6015625, 1.7999999523162842, 0.0, 0.0, 0.0, 90, 0.6499999761581421, 82, 68, 5, 2097152, 7.199999809265137, 9.0, 160.0, 5.699999809265137, 0.3499999940395355, 30.0, 0.8500000238418579, 0.3499999940395355, 1.5, 0.03999999910593033, 0.0, 0.44999998807907104, -0.25, 0.5, 0.0, 0.47999998927116394, 2, 2097152, 0.44999998807907104, 20000, 0, 1, 15},
    {330, 5000.0, 11500.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 75, 0.800000011920929, 52, 68, 5, 24117249, 22.0, 135.0, 300.0, 5.0, 0.5, 30.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17499999701976776, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4699999988079071, 0.30000001192092896, 0.25, 2236448, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
    {331, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 52, 68, 5, 16809984, 22.0, 99.0, 317.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 16809984, 0.4399999976158142, 16000, 1, 3, 0},
    {332, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 1.0, 82, 68, 5, 20987904, 29.0, 120.0, 300.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.4650000035762787, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {333, 1300.0, 3500.0, 2.5, 0.0, 0.30000001192092896, -0.4000000059604645, 70, 0.699999988079071, 82, 68, 4, 1, 6.0, 150.0, 130.0, 4.0, 0.800000011920929, 30.0, 0.699999988079071, 0.47999998927116394, 1.0, 0.07999999821186066, 0.0, 0.30000001192092896, -0.15000000596046448, 0.6000000238418579, 0.0, 0.6000000238418579, 2230320, 1, 0.20000000298023224, 16000, 1, 3, 0},
    {334, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 85, 0.949999988079071, 82, 68, 5, 16793600, 20.0, 120.0, 305.0, 7.0, 0.5, 40.0, 0.8500000238418579, 0.4699999988079071, 0.800000011920929, 0.1599999964237213, 0.0, 0.18000000715255737, -0.12999999523162842, 0.5, 0.30000001192092896, 0.30000001192092896, 2236436, 16793600, 0.4399999976158142, 16000, 1, 3, 0},
    {335, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.800000011920929, 52, 68, 5, 20988928, 18.0, 144.0, 270.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.4000000059604645, 0.6000000238418579, 0.4000000059604645, 2149720064, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {336, 1726.0, 3850.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 80, 0.699999988079071, 70, 68, 4, 16794624, 8.399999618530273, 171.0, 170.0, 4.0, 0.5, 30.0, 0.699999988079071, 0.5, 1.0, 0.1599999964237213, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4300000071525574, 0.30000001192092896, 0.5, 1114112, 16794624, 0.15000000596046448, 35000, 1, 1, 0},
    {337, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.7799999713897705, 82, 68, 5, 20988929, 20.0, 159.0, 260.0, 6.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10000000149011612, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228224, 20988929, 0.6499999761581421, 16000, 1, 3, 0},
    {338, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7300000190734863, 52, 208, 5, 19922944, 14.0, 201.0, 175.0, 5.0, 0.5, 30.0, 0.7300000190734863, 0.4699999988079071, 0.800000011920929, 0.16500000655651093, 0.0, 0.2800000011920929, -0.10000000149011612, 0.44999998807907104, 0.5, 0.4000000059604645, 2228272, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {339, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.4000000059604645, 80, 0.7799999713897705, 52, 80, 5, 24134656, 20.0, 159.0, 250.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.5, 0.5, 0.4000000059604645, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {34, 1300.0, 4300.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.75, 82, 80, 5, 1, 6.0, 81.0, 170.0, 10.0, 0.5299999713897705, 35.0, 0.8500000238418579, 0.5, 1.0, 0.11999999731779099, 0.0, 0.2199999988079071, -0.07999999821186066, 0.5, 0.30000001192092896, 0.23999999463558197, 0, 1, 0.20000000298023224, 50000, 1, 1, 0},
    {340, 1726.0, 3850.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 80, 0.699999988079071, 70, 68, 4, 16794624, 8.399999618530273, 171.0, 170.0, 4.0, 0.5, 30.0, 0.699999988079071, 0.5, 1.0, 0.1599999964237213, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4300000071525574, 0.30000001192092896, 0.5, 1114112, 16794624, 0.15000000596046448, 35000, 1, 1, 0},
    {341, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24134656, 19.0, 141.0, 290.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.2199999988079071, -0.05000000074505806, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {342, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 52, 68, 5, 20987904, 23.0, 129.0, 306.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.05000000074505806, 0.550000011920929, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {343, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7799999713897705, 52, 68, 5, 24117248, 18.0, 156.0, 235.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.47999998927116394, 0.5, 0.4000000059604645, 2236480, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {344, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.44999998807907104, 85, 0.8999999761581421, 52, 68, 5, 20987904, 32.0, 99.0, 400.0, 7.0, 0.5, 40.0, 0.8999999761581421, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2236420, 20987904, 0.6499999761581421, 16000, 1, 3, 0},
    {345, 25000.0, 250000.0, 5.0, 0.0, 0.0, -0.6000000238418579, 90, 0.75, 52, 68, 4, 3180608, 16.0, 150.0, 80.0, 3.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.20000000298023224, 0.5, 0.0, 0.09000000357627869, 1073782792, 3180608, 0.30000001192092896, 16000, 1, 3, 0},
    {346, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8999999761581421, 52, 68, 5, 21004288, 28.0, 126.0, 355.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.4399999976158142, 0.800000011920929, 0.18000000715255737, 0.0, 0.17499999701976776, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 3223461892, 21004288, 0.4000000059604645, 16000, 1, 3, 0},
    {347, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.800000011920929, 82, 80, 5, 16777219, 18.0, 99.0, 250.0, 7.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.25999999046325684, 0.30000001192092896, 0.4000000059604645, 2105408, 16777219, 0.6499999761581421, 45000, 1, 3, 0},
    {348, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.949999988079071, 52, 68, 5, 21005314, 32.0, 141.0, 407.0, 8.0, 0.5, 45.0, 0.949999988079071, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.5400000214576721, 1075978244, 21005314, 0.4000000059604645, 16000, 1, 3, 0},
    {349, 5000.0, 10000.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 90, 0.75, 82, 80, 5, 16785922, 4.840000152587891, 81.0, 180.0, 8.0, 0.5, 35.0, 0.8999999761581421, 0.4000000059604645, 0.800000011920929, 0.16500000655651093, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.25, 16, 16785922, 0.3499999940395355, 50000, 1, 1, 0},
    {35, 800.0, 1400.0, 1.0, 0.0, 0.0, 0.0, 7, 3.5, 82, 80, 5, 0, 0.6399999856948853, 6.0, 190.0, 0.07000000029802322, 0.009999999776482582, 23.0, 3.5, 1.0, 1.0, 4.5, 0.0, 3.5, 0.10000000149011612, 0.699999988079071, 0.0, 0.11999999731779099, 134218752, 0, 0.20000000298023224, 5000, 0, 1, 12},
    {350, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 20971520, 14.0, 141.0, 250.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.20000000298023224, 0.47999998927116394, 0.30000001192092896, 0.3499999940395355, 2236448, 20971520, 0.28999999165534973, 16000, 1, 3, 0},
    {351, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.019999999552965164, 75, 0.7200000286102295, 82, 80, 5, 16842752, 11.5, 249.0, 150.0, 3.5, 0.5, 30.0, 0.7200000286102295, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.15000000596046448, 0.4399999976158142, 0.30000001192092896, 0.4000000059604645, 0, 16842752, 0.6499999761581421, 16000, 1, 3, 0},
    {352, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8199999928474426, 82, 68, 5, 20987904, 20.0, 135.0, 300.0, 7.0, 0.5, 42.0, 0.75, 0.5099999904632568, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2149720064, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {353, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 52, 68, 5, 20987904, 22.0, 159.0, 336.0, 5.0, 0.5, 38.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.30000001192092896, 0.6000000238418579, 2236416, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {354, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 82, 68, 5, 20987904, 23.5, 150.0, 348.0, 6.0, 0.5, 45.0, 0.8500000238418579, 0.44999998807907104, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {355, 3500.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.7300000190734863, 52, 68, 5, 20971520, 11.5, 219.0, 135.0, 3.5, 0.5, 30.0, 0.7300000190734863, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 1114176, 20971520, 0.6499999761581421, 16000, 1, 3, 0},
    {356, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8600000143051147, 52, 68, 5, 21005312, 29.0, 120.0, 350.0, 7.0, 0.5, 45.0, 0.8600000143051147, 0.47999998927116394, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07000000029802322, 0.6700000166893005, 0.6000000238418579, 0.5400000214576721, 1075978244, 21005312, 0.4000000059604645, 16000, 1, 3, 0},
    {357, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.6499999761581421, 80, 0.7649999856948853, 52, 80, 5, 24134656, 15.0, 90.0, 210.0, 5.0, 0.5, 30.0, 0.7649999856948853, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.14000000059604645, 0.47999998927116394, 0.5, 0.3499999940395355, 2232352, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {358, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24134656, 22.0, 135.0, 300.0, 7.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.2199999988079071, -0.07999999821186066, 0.5, 0.5, 0.44999998807907104, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {359, 3500.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.7300000190734863, 52, 68, 5, 20971520, 11.5, 219.0, 135.0, 3.5, 0.5, 30.0, 0.7300000190734863, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228224, 20971520, 0.6499999761581421, 16000, 1, 3, 0},
    {36, 100.0, 24.100000381469727, 6.0, 0.0, 0.05000000074505806, -0.10000000149011612, 70, 0.800000011920929, 52, 69, 1, 0, 14.0, 6.0, 75.0, 5.5, 0.5, 25.0, 0.8999999761581421, 0.49000000953674316, 1.600000023841858, 0.10000000149011612, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.0, 0.05000000074505806, 4456448, 0, 0.20000000298023224, 500, 0, 1, 0},
    {360, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7649999856948853, 82, 68, 5, 24134656, 13.0, 201.0, 220.0, 5.0, 0.5, 30.0, 0.7649999856948853, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.49000000953674316, 0.30000001192092896, 0.44999998807907104, 2228224, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {361, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7450000047683716, 52, 68, 5, 24117249, 13.0, 171.0, 200.0, 5.0, 0.5, 30.0, 0.7450000047683716, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.18000000715255737, 0.47999998927116394, 0.5, 0.3499999940395355, 2228256, 24117249, 0.4399999976158142, 16000, 1, 3, 0},
    {362, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7799999713897705, 52, 68, 5, 24117248, 18.0, 120.0, 220.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.49000000953674316, 0.5, 0.3499999940395355, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {363, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.7799999713897705, 52, 68, 5, 24117248, 18.0, 120.0, 220.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.49000000953674316, 0.5, 0.3499999940395355, 2236480, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {364, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 68, 5, 20987904, 22.0, 99.0, 307.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5, 2236416, 20987904, 0.5, 16000, 1, 3, 0},
    {365, 3500.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7400000095367432, 52, 68, 5, 20971520, 11.5, 219.0, 170.0, 3.5, 0.5, 30.0, 0.7400000095367432, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.3499999940395355, 1114176, 20971520, 0.6499999761581421, 16000, 1, 3, 0},
    {366, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 68, 5, 20987904, 22.0, 141.0, 307.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5, 2236416, 20987904, 0.5, 16000, 1, 3, 0},
    {367, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.44999998807907104, 70, 0.800000011920929, 52, 68, 5, 20971520, 22.0, 156.0, 300.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.6000000238418579, 0.5, 2149720064, 20971520, 0.5, 16000, 1, 3, 0},
    {368, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.8999999761581421, 52, 68, 5, 20987904, 23.0, 135.0, 300.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.10000000149011612, 0.0, 0.20000000298023224, -0.15000000596046448, 0.42500001192092896, 0.30000001192092896, 0.30000001192092896, 2238468, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {369, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.8999999761581421, 52, 68, 5, 20971520, 23.0, 99.0, 300.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.4000000059604645, 0.30000001192092896, 0.30000001192092896, 2232320, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {37, 2000.0, 3000.0, 2.0, 0.0, 0.30000001192092896, 0.0, 70, 0.699999988079071, 82, 80, 4, 2, 8.0, 81.0, 125.0, 7.400000095367432, 0.6000000238418579, 30.0, 0.800000011920929, 0.5, 1.0, 0.09000000357627869, 0.0, 0.3199999928474426, -0.1599999964237213, 0.5600000023841858, 0.0, 0.5400000214576721, 0, 2, 0.25999999046325684, 19000, 0, 3, 0},
    {370, 3385.0, 7200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 52, 68, 5, 20971520, 20.0, 159.0, 333.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {371, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 70, 80, 5, 20988928, 11.399999618530273, 45.0, 100.0, 4.0, 0.5, 29.0, 0.800000011920929, 0.44999998807907104, 0.800000011920929, 0.18000000715255737, 0.0, 0.18000000715255737, -0.05000000074505806, 0.5, 0.30000001192092896, 0.30000001192092896, 2232320, 20988928, 0.4399999976158142, 95000, 1, 1, 1},
    {372, 2145.0, 5200.0, 2.4000000953674316, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 80, 5, 24133632, 18.959999084472656, 100.0, 305.0, 8.0, 0.5799999833106995, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.15000000596046448, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.5400000214576721, 2236420, 24133632, 0.15000000596046448, 16000, 1, 3, 0},
    {373, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.9800000190734863, 52, 68, 5, 20987906, 34.0, 100.0, 400.0, 8.0, 0.5, 45.0, 1.0, 0.4399999976158142, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5, 0.6000000238418579, 0.25, 1075978244, 20987906, 0.4000000059604645, 16000, 1, 3, 0},
    {374, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.550000011920929, 85, 0.800000011920929, 82, 80, 5, 20987904, 16.0, 165.0, 250.0, 7.0, 0.5, 40.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 16000, 1, 1, 0},
    {375, 2200.0, 29333.30078125, 1.0, 0.0, 0.0, 0.0, 42, 3.0, 82, 80, 5, 0, 1.2000000476837158, 5.0, 240.0, 0.019999999552965164, 0.0, 18.0, 15.0, 0.6499999761581421, 0.44999998807907104, 5.0, 0.0, 0.10000000149011612, 0.05000000074505806, 0.0, 0.0, 0.33000001311302185, 134218752, 0, 0.20000000298023224, 60000, 0, 1, 0},
    {376, 3200.0, 7500.0, 2.0, 0.0, 0.0, -0.10000000149011612, 70, 0.7799999713897705, 52, 69, 5, 24117248, 18.0, 70.0, 300.0, 5.0, 0.5, 45.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.10000000149011612, 0.5, 0.6000000238418579, 0.5400000214576721, 2232384, 24117248, 0.4000000059604645, 95000, 1, 1, 1},
    {377, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.699999988079071, 82, 80, 5, 285295616, 11.5, 255.0, 150.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.25, -0.25, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228240, 285295616, 0.6499999761581421, 95000, 1, 1, 1},
    {378, 3500.0, 11100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.7200000286102295, 82, 80, 5, 20971520, 12.0, 219.0, 170.0, 3.5, 0.5, 28.0, 0.7200000286102295, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.11999999731779099, 0.41999998688697815, 0.30000001192092896, 0.4000000059604645, 2228224, 20971520, 0.6499999761581421, 95000, 1, 1, 1},
    {379, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3400000035762787, 85, 0.7799999713897705, 52, 68, 5, 21005312, 20.0, 135.0, 294.0, 5.0, 0.5, 40.0, 0.7799999713897705, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 1075978244, 21005312, 0.4399999976158142, 16000, 1, 3, 0},
    {38, 8000.0, 48273.30078125, 2.0, 0.0, 0.0, 0.0, 90, 0.6499999761581421, 82, 68, 5, 4456448, 5.199999809265137, 6.0, 150.0, 5.699999809265137, 0.3499999940395355, 30.0, 0.8500000238418579, 0.3499999940395355, 1.5, 0.03999999910593033, 0.0, 0.44999998807907104, -0.25, 0.5, 0.0, 0.4000000059604645, 16384, 4456448, 0.5600000023841858, 20000, 0, 1, 2},
    {380, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.3499999940395355, 70, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 165.0, 250.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5, 2236416, 20971520, 0.5, 16000, 1, 3, 0},
    {381, 3385.0, 7200.0, 2.0, 0.0, 0.0, -0.3799999952316284, 70, 0.800000011920929, 52, 80, 5, 20971520, 20.0, 110.0, 250.0, 7.0, 0.5, 41.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.5, 95000, 1, 1, 1},
    {382, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20987904, 22.0, 144.0, 290.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5199999809265137, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.10000000149011612, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2236416, 20987904, 0.5, 16000, 1, 3, 0},
    {383, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.25, 85, 0.7649999856948853, 52, 68, 5, 19922944, 14.0, 245.0, 231.0, 5.0, 0.5, 30.0, 0.7649999856948853, 0.47999998927116394, 0.800000011920929, 1.7000000476837158, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {384, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 80, 5, 20987905, 18.0, 115.0, 250.0, 7.0, 0.5, 45.0, 0.7900000214576721, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.12999999523162842, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987905, 0.4000000059604645, 16000, 1, 3, 0},
    {385, 3385.0, 7100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.800000011920929, 52, 68, 5, 24117248, 17.0, 150.0, 260.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.30000001192092896, 2236480, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {386, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.8500000238418579, 52, 68, 5, 24117248, 26.0, 130.0, 305.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.44999998807907104, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.05000000074505806, 0.6200000047683716, 0.6000000238418579, 0.5400000214576721, 2149720064, 24117248, 0.4000000059604645, 16000, 1, 3, 0},
    {387, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.9800000190734863, 52, 68, 5, 20987906, 34.599998474121094, 135.0, 420.0, 8.0, 0.5, 45.0, 0.9800000190734863, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07500000298023224, 0.5299999713897705, 0.6000000238418579, 0.5400000214576721, 1075978244, 20987906, 0.4000000059604645, 16000, 1, 3, 0},
    {388, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.7599999904632568, 82, 68, 5, 20971520, 15.0, 249.0, 240.0, 5.0, 0.5, 35.0, 0.7599999904632568, 0.4650000035762787, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.10000000149011612, 0.42500001192092896, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {389, 3800.0, 15000.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 90, 0.7799999713897705, 82, 80, 5, 20979713, 14.0, 130.0, 190.0, 4.0, 0.5, 35.0, 0.7799999713897705, 0.4000000059604645, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.18000000715255737, 0.47999998927116394, 0.30000001192092896, 0.25, 539103232, 20979713, 0.3499999940395355, 50000, 1, 1, 0},
    {39, 3500.0, 11100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 75, 0.699999988079071, 52, 68, 5, 24117249, 13.0, 201.0, 170.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.30000001192092896, -0.1599999964237213, 0.47999998927116394, 0.30000001192092896, 0.4000000059604645, 2236416, 24117249, 0.6499999761581421, 16000, 1, 3, 0},
    {390, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 80, 0.800000011920929, 52, 68, 5, 24117248, 20.0, 145.0, 270.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.2199999988079071, -0.07999999821186066, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {391, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.7799999713897705, 52, 68, 5, 24134656, 20.0, 155.0, 280.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.47999998927116394, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {392, 2200.0, 5300.0, 2.0, 0.0, 0.0, -0.15000000596046448, 70, 0.7799999713897705, 52, 68, 5, 24133633, 22.0, 155.0, 290.0, 6.0, 0.5, 45.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.12999999523162842, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2236416, 24133633, 0.5, 16000, 1, 3, 0},
    {393, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 52, 68, 5, 19997184, 11.5, 249.0, 85.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.10000000149011612, 0.5, 0.30000001192092896, 0.4000000059604645, 2228304, 19997184, 0.6499999761581421, 16000, 1, 3, 0},
    {394, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 52, 69, 5, 20971520, 18.0, 69.0, 250.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.15000000596046448, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2149715968, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {395, 1700.0, 4108.2998046875, 2.5, 0.0, 0.0, 0.0, 85, 0.8500000238418579, 52, 68, 5, 7340032, 8.0, 6.0, 160.0, 6.199999809265137, 0.6000000238418579, 35.0, 0.8500000238418579, 0.5099999904632568, 1.7000000476837158, 0.07999999821186066, 0.0, 0.25, -0.15000000596046448, 0.5, 0.25, 0.23000000417232513, 32, 7340032, 0.27000001072883606, 25000, 0, 1, 0},
    {396, 1000.0, 2000.0, 2.0, 0.0, 0.30000001192092896, -0.10000000149011612, 70, 0.699999988079071, 82, 80, 4, 2, 4.0, 69.0, 70.0, 8.0, 0.6499999761581421, 35.0, 0.800000011920929, 0.44999998807907104, 1.100000023841858, 0.07999999821186066, 2.0, 0.3100000023841858, -0.18000000715255737, 0.550000011920929, 0.30000001192092896, 0.5, 16, 2, 0.20999999344348907, 9000, 0, 0, 0},
    {397, 1200.0, 3500.0, 2.5, 0.0, 0.30000001192092896, -0.4000000059604645, 70, 0.699999988079071, 82, 80, 5, 1, 4.400000095367432, 219.0, 85.0, 4.0, 0.800000011920929, 30.0, 0.75, 0.47999998927116394, 1.0, 0.07999999821186066, 0.0, 0.30000001192092896, -0.10999999940395355, 0.5, 0.0, 0.6000000238418579, 2104, 1, 0.20000000298023224, 2000, 2, 2, 0},
    {398, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.25, 85, 0.7599999904632568, 52, 68, 5, 19922947, 16.0, 275.0, 215.0, 5.0, 0.5, 30.0, 0.7599999904632568, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.09000000357627869, 0.41999998688697815, 0.30000001192092896, 0.30000001192092896, 2228224, 19922947, 0.4399999976158142, 16000, 1, 3, 0},
    {399, 1000.0, 1400.0, 2.4000000953674316, 0.0, 0.20000000298023224, -0.4000000059604645, 70, 0.6000000238418579, 82, 80, 4, 16777216, 5.159999847412109, 96.0, 90.0, 8.0, 0.800000011920929, 30.0, 0.800000011920929, 0.5, 1.2000000476837158, 0.10000000149011612, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.30000001192092896, 0.5, 0, 16777216, 0.25999999046325684, 50000, 1, 1, 0},
    {4, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7350000143051147, 70, 68, 5, 16777216, 11.0, 201.0, 220.0, 5.0, 0.5, 28.0, 0.7350000143051147, 0.4699999988079071, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.18000000715255737, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {40, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.7799999713897705, 52, 80, 5, 20971520, 8.0, 105.0, 175.0, 6.0, 0.44999998807907104, 30.0, 0.7799999713897705, 0.4399999976158142, 1.0, 0.5, 0.0, 0.07999999821186066, -0.15000000596046448, 0.3499999940395355, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {400, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.7400000095367432, 70, 68, 5, 16777216, 11.5, 219.0, 183.0, 3.5, 0.5, 29.0, 0.7400000095367432, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.20000000298023224, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {401, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.7799999713897705, 82, 68, 5, 16794624, 13.0, 186.0, 250.0, 5.0, 0.5, 35.0, 0.6800000071525574, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.16500000655651093, 0.46000000834465027, 0.30000001192092896, 0.30000001192092896, 2228224, 16794624, 0.4399999976158142, 16000, 1, 3, 0},
    {402, 3500.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.7300000190734863, 52, 68, 5, 20971520, 11.5, 219.0, 135.0, 3.5, 0.5, 30.0, 0.7300000190734863, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 1114112, 20971520, 0.6499999761581421, 16000, 1, 3, 0},
    {403, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7200000286102295, 52, 68, 5, 19922944, 11.0, 240.0, 150.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.20000000298023224, 0.44999998807907104, 0.5, 0.30000001192092896, 2228228, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {404, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 82, 68, 5, 16777216, 11.5, 249.0, 80.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.10000000149011612, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2236416, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {405, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25, 80, 0.7799999713897705, 52, 68, 5, 24182784, 19.200000762939453, 160.0, 315.0, 5.0, 0.5, 30.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.18000000715255737, 0.0, 0.25, -0.11999999731779099, 0.5, 0.5, 0.4000000059604645, 2236672, 24182784, 0.4399999976158142, 16000, 1, 3, 0},
    {406, 5000.0, 20000.0, 3.0, 0.0, 0.0, -0.3499999940395355, 80, 0.6499999761581421, 52, 80, 5, 19923013, 18.0, 24.0, 110.0, 7.0, 0.44999998807907104, 35.0, 0.8500000238418579, 0.550000011920929, 1.5, 0.07000000029802322, 0.0, 0.44999998807907104, -0.30000001192092896, 0.5, 0.30000001192092896, 0.3499999940395355, 40, 19923013, 0.4399999976158142, 40000, 0, 1, 20},
    {407, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8199999928474426, 82, 68, 5, 20988928, 18.0, 120.0, 250.0, 7.0, 0.5, 42.0, 0.75, 0.5, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.05999999865889549, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20988928, 0.4000000059604645, 16000, 1, 3, 0},
    {408, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 150.0, 250.0, 5.0, 0.5, 42.0, 0.7200000286102295, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.05999999865889549, 0.5, 0.30000001192092896, 0.6000000238418579, 2228228, 16777217, 0.6499999761581421, 16000, 1, 3, 0},
    {409, 2200.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 52, 68, 5, 24117248, 16.0, 165.0, 250.0, 5.0, 0.5, 38.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2236416, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {41, 5500.0, 65000.0, 3.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 512, 8.0, 21.0, 110.0, 3.1700000762939453, 0.4000000059604645, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 1.7000000476837158, -0.4099999964237213, 0.550000011920929, 0.0, 0.20000000298023224, 8, 512, 0.44999998807907104, 5000, 0, 1, 2},
    {410, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.7799999713897705, 82, 70, 5, 16777217, 16.0, 180.0, 260.0, 5.0, 0.5, 42.0, 0.699999988079071, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.10999999940395355, 0.5, 0.30000001192092896, 0.6499999761581421, 2228224, 16777217, 1.0, 35000, 1, 1, 0},
    {411, 100.0, 24.100000381469727, 5.0, 0.0, 0.0, -0.10000000149011612, 70, 0.699999988079071, 52, 69, 1, 64, 14.0, 15.0, 75.0, 5.0, 0.5, 45.0, 0.8999999761581421, 0.49000000953674316, 1.600000023841858, 0.10000000149011612, 0.0, 0.2800000011920929, -0.14000000059604645, 0.5, 0.0, 0.05000000074505806, 0, 64, 0.20000000298023224, 500, 0, 1, 0},
    {412, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.5, 219.0, 169.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.18000000715255737, 0.550000011920929, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {413, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7200000286102295, 70, 68, 5, 16777216, 11.5, 216.0, 190.0, 3.5, 0.5, 28.0, 0.7200000286102295, 0.47999998927116394, 0.800000011920929, 0.11999999731779099, 0.0, 0.25, -0.13500000536441803, 0.5600000023841858, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {414, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.699999988079071, 82, 80, 5, 285295616, 11.5, 249.0, 150.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.25, -0.25, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228240, 285295616, 0.6499999761581421, 95000, 1, 1, 1},
    {415, 1000.0, 2500.300048828125, 4.0, 0.0, 0.0, -0.30000001192092896, 80, 0.800000011920929, 52, 82, 4, 19956739, 14.0, 6.0, 170.0, 6.099999904632568, 0.550000011920929, 35.0, 0.800000011920929, 0.5, 1.0, 0.10000000149011612, 5.0, 0.30000001192092896, -0.30000001192092896, 0.5, 0.0, 0.10000000149011612, 1075972868, 19956739, 0.6000000238418579, 15000, 1, 2, 1},
    {416, 5500.0, 33187.8984375, 1.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 2097152, 8.0, 21.0, 110.0, 3.1700000762939453, 0.4000000059604645, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, -0.01899999938905239, 0.550000011920929, 0.0, 0.20000000298023224, 2, 2097152, 0.44999998807907104, 5000, 0, 1, 15},
    {417, 5500.0, 65000.0, 3.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 512, 8.0, 21.0, 110.0, 3.700000047683716, 0.6499999761581421, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, 0.009999999776482582, 0.550000011920929, 0.0, 0.20000000298023224, 520, 512, 1.7999999523162842, 5000, 0, 1, 21},
    {418, 300.0, 150.0, 5.0, 0.0, 0.0, -0.15000000596046448, 110, 0.8999999761581421, 82, 80, 4, 3179009, 7.199999809265137, 6.0, 90.0, 15.0, 0.20000000298023224, 35.0, 0.8500000238418579, 0.47999998927116394, 1.5, 0.20000000298023224, 0.0, 0.25, -0.03999999910593033, 0.5, 0.0, 0.4000000059604645, 1073748736, 3179009, 0.3799999952316284, 15000, 1, 2, 18},
    {419, 800.0, 500.0, 5.0, 0.0, 0.0, -0.30000001192092896, 80, 0.699999988079071, 82, 80, 3, 19955713, 4.800000190734863, 30.0, 60.0, 6.099999904632568, 0.550000011920929, 35.0, 0.800000011920929, 0.47999998927116394, 1.0, 0.15000000596046448, 0.0, 0.15000000596046448, -0.05000000074505806, 0.5, 0.0, 0.4000000059604645, 1073748736, 19955713, 0.3799999952316284, 15000, 1, 2, 28},
    {42, 5000.0, 30000.0, 2.0, 0.0, -0.5, 0.0, 90, 0.44999998807907104, 82, 68, 5, 1052928, 7.199999809265137, 6.0, 120.0, 8.0, 0.30000001192092896, 25.0, 0.75, 0.5, 1.5, 0.05000000074505806, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.0, 0.25, 2113536, 1052928, 0.6499999761581421, 35000, 0, 1, 0},
    {420, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7400000095367432, 52, 68, 5, 24379392, 15.0, 120.0, 160.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.45500001311302185, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.20000000298023224, 0.4000000059604645, 0.5, 0.30000001192092896, 2236488, 24379392, 0.4399999976158142, 16000, 1, 3, 0},
    {421, 800.0, 632.7000122070312, 5.0, 0.0, 0.0, -0.30000001192092896, 80, 0.699999988079071, 82, 80, 3, 19956225, 4.800000190734863, 30.0, 60.0, 6.099999904632568, 0.550000011920929, 35.0, 0.800000011920929, 0.46000000834465027, 1.600000023841858, 0.15000000596046448, 0.0, 0.3400000035762787, -0.10000000149011612, 0.5, 0.0, 0.4000000059604645, 1073764864, 19956225, 0.30000001192092896, 15000, 1, 2, 0},
    {422, 1830.0, 3000.0, 3.0, 0.0, 0.05000000074505806, -0.10000000149011612, 70, 0.6000000238418579, 82, 80, 4, 2, 10.0, 90.0, 145.0, 8.0, 0.6000000238418579, 30.0, 0.8600000143051147, 0.5, 1.100000023841858, 0.10000000149011612, 3.0, 0.30000001192092896, -0.23999999463558197, 0.5, 0.20000000298023224, 0.5, 1073741824, 2, 0.25999999046325684, 9000, 0, 0, 0},
    {423, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 82, 68, 5, 16777216, 11.5, 249.0, 138.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.20000000298023224, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {424, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 52, 68, 5, 24379393, 11.0, 201.0, 110.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.800000011920929, 0.17000000178813934, 0.0, 0.44999998807907104, -0.05000000074505806, 0.5, 0.5, 0.30000001192092896, 2228232, 24379393, 0.4399999976158142, 16000, 1, 3, 0},
    {425, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.6000000238418579, 80, 0.75, 52, 80, 5, 24134656, 15.0, 150.0, 230.0, 5.0, 0.5, 30.0, 0.75, 0.4699999988079071, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.11999999731779099, 0.5, 0.5, 0.4000000059604645, 2236448, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {426, 2500.0, 4000.0, 3.0, 0.0, 0.05000000074505806, -0.10000000149011612, 70, 0.6000000238418579, 82, 80, 4, 0, 10.0, 3.0, 150.0, 8.0, 0.6000000238418579, 30.0, 0.8600000143051147, 0.5, 1.100000023841858, 0.10000000149011612, 3.0, 0.3499999940395355, -0.10000000149011612, 0.5, 0.20000000298023224, 0.5, 1073752068, 0, 0.25999999046325684, 100000, 0, 0, 0},
    {427, 1900.0, 6333.2998046875, 2.0, 0.0, 0.0, -0.15000000596046448, 80, 0.8500000238418579, 82, 68, 5, 2, 6.0, 15.0, 160.0, 6.0, 0.800000011920929, 30.0, 0.699999988079071, 0.46000000834465027, 1.2999999523162842, 0.07000000029802322, 0.0, 0.3499999940395355, -0.15000000596046448, 0.44999998807907104, 0.0, 0.4300000071525574, 16385, 2, 0.20000000298023224, 20000, 0, 3, 13},
    {428, 800.0, 632.7000122070312, 5.0, 0.0, 0.0, -0.10000000149011612, 80, 0.8500000238418579, 82, 80, 4, 3179008, 6.0, 30.0, 170.0, 6.099999904632568, 0.550000011920929, 35.0, 0.800000011920929, 0.46000000834465027, 1.2000000476837158, 0.15000000596046448, 0.0, 0.3400000035762787, -0.10000000149011612, 0.5, 0.0, 0.4000000059604645, 6656, 3179008, 0.3799999952316284, 15000, 1, 2, 0},
    {429, 5000.0, 30000.0, 2.0, 0.0, -0.5, 0.0, 90, 0.44999998807907104, 82, 68, 5, 1052928, 7.199999809265137, 6.0, 120.0, 8.0, 0.30000001192092896, 25.0, 0.75, 0.5, 1.5, 0.05000000074505806, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.0, 0.25, 2113536, 1052928, 0.6499999761581421, 35000, 0, 1, 0},
    {43, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.550000011920929, 70, 0.8999999761581421, 52, 68, 5, 20987904, 28.0, 135.0, 330.0, 7.0, 0.5, 45.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.15000000596046448, -0.20000000298023224, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720068, 20987904, 0.4000000059604645, 16000, 1, 3, 0},
    {430, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.15000000596046448, 80, 0.7649999856948853, 82, 68, 5, 19922944, 15.0, 231.0, 250.0, 5.0, 0.5, 30.0, 0.7649999856948853, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.25, -0.1599999964237213, 0.44999998807907104, 0.5, 0.4000000059604645, 2228224, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {431, 2200.0, 4100.0, 2.200000047683716, 0.0, 0.0, -0.3499999940395355, 75, 0.7799999713897705, 52, 80, 5, 19922944, 16.0, 180.0, 240.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5099999904632568, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.6000000238418579, 2236416, 19922944, 0.25, 35000, 1, 1, 0},
    {432, 6500.0, 23000.599609375, 3.0, 0.0, 0.0, -0.10000000149011612, 80, 0.7200000286102295, 82, 80, 5, 49160, 6.400000095367432, 159.0, 140.0, 4.5, 0.6000000238418579, 30.0, 0.699999988079071, 0.46000000834465027, 1.0, 0.09000000357627869, 0.0, 0.30000001192092896, -0.11999999731779099, 0.5, 0.6000000238418579, 0.4000000059604645, 1073741832, 49160, 0.36000001430511475, 22000, 2, 3, 28},
    {433, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.8500000238418579, 52, 68, 5, 20971520, 16.0, 165.0, 250.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.44999998807907104, 2236416, 20971520, 0.5, 16000, 1, 3, 0},
    {434, 5000.0, 30000.0, 2.0, 0.0, -0.5, 0.0, 90, 0.44999998807907104, 82, 68, 5, 1052928, 7.199999809265137, 6.0, 120.0, 8.0, 0.30000001192092896, 25.0, 0.75, 0.5, 1.5, 0.05000000074505806, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.0, 0.25, 2113536, 1052928, 0.6499999761581421, 35000, 0, 1, 0},
    {435, 5500.0, 65000.0, 3.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 512, 8.0, 21.0, 110.0, 3.700000047683716, 0.6499999761581421, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, 0.25, 0.550000011920929, 0.0, 0.20000000298023224, 520, 512, 1.7999999523162842, 5000, 0, 1, 28},
    {436, 2500.0, 6004.2001953125, 2.5, 0.0, 0.10000000149011612, -0.3499999940395355, 80, 0.699999988079071, 52, 80, 4, 1048580, 7.199999809265137, 6.0, 150.0, 7.0, 0.44999998807907104, 35.0, 0.8500000238418579, 0.5400000214576721, 0.800000011920929, 0.07999999821186066, 0.0, 0.4000000059604645, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.3499999940395355, 16416, 1048580, 0.4399999976158142, 40000, 0, 1, 0},
    {437, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 70, 68, 5, 16777216, 12.0, 250.0, 210.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.4699999988079071, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {438, 5000.0, 10000.0, 2.5, 0.0, 0.0, -0.10000000149011612, 85, 0.6499999761581421, 52, 68, 5, 16785920, 9.600000381469727, 24.0, 110.0, 6.400000095367432, 0.44999998807907104, 27.0, 0.699999988079071, 0.46000000834465027, 0.699999988079071, 0.07999999821186066, 1.0, 0.30000001192092896, -0.18000000715255737, 0.5, 0.0, 0.05999999865889549, 8912912, 16785920, 0.3199999928474426, 40000, 0, 1, 13},
    {439, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.800000011920929, 82, 80, 5, 20987904, 15.0, 120.0, 270.0, 5.0, 0.800000011920929, 38.0, 0.75, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20987904, 0.4399999976158142, 35000, 1, 1, 0},
    {44, 15500.0, 65000.0, 2.4000000953674316, 0.0, 0.0, 0.0, 90, 0.6000000238418579, 82, 68, 4, 19931648, 3.8399999141693115, 159.0, 85.0, 5.0, 0.550000011920929, 30.0, 0.8999999761581421, 0.4000000059604645, 0.8999999761581421, 0.15000000596046448, 0.0, 0.25, -0.17000000178813934, 0.5, 0.30000001192092896, 0.20000000298023224, 16, 19931648, 0.44999998807907104, 50000, 1, 1, 0},
    {440, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 85, 0.7400000095367432, 82, 68, 5, 16777217, 16.0, 144.0, 211.0, 4.0, 0.5, 30.0, 0.7400000095367432, 0.47999998927116394, 0.699999988079071, 0.10000000149011612, 0.0, 0.25, -0.3100000023841858, 0.5, 0.0, 0.30000001192092896, 2228224, 16777217, 0.4399999976158142, 16000, 1, 3, 0},
    {441, 1500.0, 1854.199951171875, 5.0, 0.0, 0.0, 0.0, 70, 1.0, 82, 69, 3, 4, 8.0, 30.0, 160.0, 5.0, 0.5, 30.0, 0.8500000238418579, 0.5, 2.0, 0.09000000357627869, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.5, 12544, 4, 0.25999999046325684, 9000, 1, 1, 0},
    {442, 1000.0, 1354.199951171875, 5.0, 0.0, 0.4000000059604645, -0.20000000298023224, 70, 1.0, 82, 69, 3, 4, 8.0, 30.0, 160.0, 5.0, 0.5, 30.0, 0.8500000238418579, 0.5, 2.0, 0.09000000357627869, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.5, 12544, 4, 0.25999999046325684, 9000, 1, 1, 0},
    {443, 1000.0, 2500.0, 5.0, 0.0, 0.4000000059604645, -0.20000000298023224, 70, 1.0, 82, 69, 3, 4, 8.0, 30.0, 160.0, 5.0, 0.5, 30.0, 0.8500000238418579, 0.5, 2.0, 0.09000000357627869, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.5, 12544, 4, 0.25999999046325684, 9000, 1, 1, 0},
    {444, 5500.0, 10489.599609375, 3.0, 0.0, -0.0, -0.30000001192092896, 80, 0.8199999928474426, 82, 68, 5, 513, 6.800000190734863, 150.0, 150.0, 4.5, 0.6000000238418579, 30.0, 0.699999988079071, 0.46000000834465027, 0.8999999761581421, 0.07999999821186066, 0.0, 0.25, -0.15000000596046448, 0.3499999940395355, 0.6000000238418579, 0.4000000059604645, 16393, 513, 0.36000001430511475, 22000, 0, 3, 13},
    {445, 400.0, 400.0, 5.0, 0.0, -0.4000000059604645, 0.0, 70, 0.6000000238418579, 82, 69, 3, 4, 8.0, 30.0, 160.0, 5.0, 0.5, 30.0, 0.8500000238418579, 0.5, 1.0, 0.10000000149011612, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.5, 12544, 4, 0.25999999046325684, 9000, 1, 1, 0},
    {446, 1000.0, 1354.199951171875, 5.0, 0.0, 0.0, 0.0, 70, 1.0, 82, 69, 3, 4, 8.0, 30.0, 160.0, 5.0, 0.5, 30.0, 0.8500000238418579, 0.5, 2.0, 0.09000000357627869, 0.0, 0.25, -0.10000000149011612, 0.5, 0.0, 0.5, 12544, 4, 0.25999999046325684, 9000, 1, 1, 0},
    {447, 500.0, 161.6999969482422, 4.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 5, 0, 12.0, 5.0, 60.0, 15.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 0, 0.0, 10000, 1, 1, 4},
    {448, 350.0, 160.0, 5.0, 0.0, 0.0, -0.20000000298023224, 103, 2.0, 82, 80, 3, 0, 6.0, 5.0, 70.0, 14.0, 0.5, 30.0, 0.8999999761581421, 0.49000000953674316, 1.0, 0.15000000596046448, 0.0, 0.10000000149011612, -0.07000000029802322, 0.5, 0.0, 0.0010000000474974513, 16777216, 0, 0.10000000149011612, 10000, 1, 1, 5},
    {449, 500.0, 195.0, 5.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 5, 0, 12.0, 5.0, 60.0, 14.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16777216, 0, 0.0, 10000, 1, 1, 7},
    {45, 4500.0, 18003.69921875, 3.0, 0.0, 0.0, 0.0, 80, 0.550000011920929, 82, 68, 5, 1, 5.599999904632568, 39.0, 160.0, 4.5, 0.800000011920929, 30.0, 0.699999988079071, 0.47999998927116394, 1.7999999523162842, 0.11999999731779099, 0.0, 0.30000001192092896, -0.25, 0.5, 0.0, 0.44999998807907104, 16520, 1, 0.3499999940395355, 22000, 0, 1, 0},
    {450, 600.0, 200.0, 4.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.5, 82, 80, 5, 0, 6.0, 5.0, 100.0, 15.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.10000000149011612, -0.10000000149011612, 0.5, 0.0, 0.10999999940395355, 16777216, 0, 0.0, 10000, 1, 1, 8},
    {451, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 55.20000076293945, 250.0, 303.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.20000000298023224, 0.5, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {452, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971520, 28.0, 120.0, 205.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16777216, 20971520, 0.0, 10000, 1, 1, 4},
    {453, 700.0, 403.0, 4.0, 0.0, 0.05999999865889549, -0.3499999940395355, 103, 1.5, 82, 80, 4, 0, 16.0, 5.0, 190.0, 10.0, 0.550000011920929, 35.0, 0.8999999761581421, 0.46000000834465027, 0.6499999761581421, 0.20000000298023224, 0.0, 0.09000000357627869, -0.14000000059604645, 0.5, 0.0, 0.23999999463558197, 16785408, 0, 0.0, 10000, 1, 1, 8},
    {454, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 50.0, 270.0, 300.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {455, 800.0, 600.0, 4.0, 0.0, 0.10000000149011612, 0.0, 103, 1.399999976158142, 82, 80, 4, 0, 8.0, 5.0, 110.0, 10.0, 0.550000011920929, 35.0, 0.8500000238418579, 0.47999998927116394, 0.6499999761581421, 0.20000000298023224, 0.0, 0.09000000357627869, -0.10999999940395355, 0.550000011920929, 0.0, 0.23999999463558197, 1090527232, 0, 0.0, 10000, 1, 1, 8},
    {456, 400.0, 300.0, 5.0, 0.0, 0.05000000074505806, -0.20000000298023224, 70, 0.699999988079071, 52, 80, 4, 517, 8.0, 5.0, 50.0, 8.0, 0.5, 35.0, 0.8999999761581421, 0.49000000953674316, 0.800000011920929, 0.10000000149011612, 0.0, 0.15000000596046448, -0.15000000596046448, 0.5, 0.0, 0.5, 2626304, 517, 0.20000000298023224, 9000, 1, 1, 12},
    {457, 100.0, 39.0, 7.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 5, 0, 4.0, 5.0, 50.0, 19.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.800000011920929, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.0, 0.15000000596046448, 1090519040, 0, 0.0, 10000, 1, 1, 9},
    {458, 100.0, 39.0, 6.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 5, 0, 7.199999809265137, 5.0, 120.0, 19.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.0, 0.15000000596046448, 1090519040, 0, 0.0, 10000, 1, 1, 11},
    {459, 100.0, 60.0, 5.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 4, 2, 10.0, 15.0, 140.0, 19.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.20000000298023224, -0.10000000149011612, 0.5, 0.0, 0.15000000596046448, 1090519040, 2, 0.0, 10000, 1, 1, 10},
    {46, 1000.0, 1354.199951171875, 4.0, 0.0, 0.0, -0.10000000149011612, 70, 0.550000011920929, 52, 69, 3, 34820, 6.0, 30.0, 160.0, 13.0, 0.5, 30.0, 0.8500000238418579, 0.5, 1.0, 0.09000000357627869, 0.0, 0.2800000011920929, -0.12999999523162842, 0.5, 0.0, 0.5, 4352, 34820, 0.25999999046325684, 9000, 1, 1, 0},
    {460, 800.0, 403.29998779296875, 4.0, 0.0, 0.10000000149011612, 0.0, 103, 1.2000000476837158, 82, 80, 4, 0, 8.0, 5.0, 120.0, 10.0, 0.550000011920929, 35.0, 0.8199999928474426, 0.5099999904632568, 0.6499999761581421, 0.20000000298023224, 0.0, 0.09000000357627869, -0.10999999940395355, 0.550000011920929, 0.0, 0.23999999463558197, 16785408, 0, 0.0, 10000, 1, 1, 6},
    {461, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 50.0, 270.0, 300.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {462, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 50.0, 320.0, 270.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {463, 400.0, 200.0, 4.0, 0.0, 0.07999999821186066, -0.09000000357627869, 103, 1.7999999523162842, 82, 80, 5, 2, 36.0, 5.0, 250.0, 15.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 2, 0.0, 10000, 1, 1, 4},
    {464, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 60.0, 235.0, 350.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16777216, 20971522, 0.0, 10000, 1, 1, 4},
    {465, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.4000000059604645, 103, 1.7999999523162842, 82, 80, 5, 20971522, 60.0, 270.0, 270.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {466, 400.0, 300.0, 5.0, 0.0, 0.05000000074505806, -0.20000000298023224, 70, 0.699999988079071, 52, 80, 4, 517, 8.0, 5.0, 80.0, 8.0, 0.5, 35.0, 0.8999999761581421, 0.49000000953674316, 0.800000011920929, 0.10000000149011612, 0.0, 0.15000000596046448, -0.15000000596046448, 0.5, 0.0, 0.5, 2626304, 517, 0.20000000298023224, 9000, 1, 1, 12},
    {467, 400.0, 300.0, 5.0, 0.0, 0.05000000074505806, -0.20000000298023224, 70, 0.699999988079071, 52, 80, 4, 517, 8.399999618530273, 5.0, 90.0, 8.0, 0.5, 35.0, 0.8999999761581421, 0.49000000953674316, 0.800000011920929, 0.10000000149011612, 0.0, 0.15000000596046448, -0.15000000596046448, 0.5, 0.0, 0.5, 2626304, 517, 0.20000000298023224, 9000, 1, 1, 12},
    {468, 500.0, 195.0, 5.0, 0.0, 0.05000000074505806, -0.09000000357627869, 103, 1.600000023841858, 82, 80, 5, 0, 14.0, 5.0, 100.0, 14.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16777216, 0, 0.0, 10000, 1, 1, 7},
    {469, 400.0, 200.0, 4.0, 0.0, 0.07999999821186066, -0.09000000357627869, 103, 1.7999999523162842, 82, 80, 5, 2, 24.0, 5.0, 190.0, 15.0, 0.5, 35.0, 0.8999999761581421, 0.47999998927116394, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.5, 0.0, 0.15000000596046448, 16785408, 2, 0.0, 10000, 1, 1, 4},
    {47, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.7400000095367432, 52, 68, 5, 16777216, 12.800000190734863, 249.0, 220.0, 5.0, 0.5, 30.0, 0.7400000095367432, 0.4699999988079071, 0.800000011920929, 0.16500000655651093, 0.0, 0.20000000298023224, -0.23000000417232513, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {470, 800.0, 403.29998779296875, 4.0, 0.0, 0.10000000149011612, 0.0, 103, 1.2000000476837158, 82, 80, 4, 0, 8.0, 5.0, 120.0, 10.0, 0.550000011920929, 35.0, 0.8199999928474426, 0.5099999904632568, 0.6499999761581421, 0.20000000298023224, 0.0, 0.09000000357627869, -0.10999999940395355, 0.550000011920929, 0.0, 0.23999999463558197, 16785408, 0, 0.0, 10000, 1, 1, 6},
    {471, 1200.0, 1000.0, 4.0, 0.0, 0.0, -0.20000000298023224, 103, 1.5, 82, 80, 5, 20971522, 40.0, 230.0, 250.0, 15.0, 0.5, 35.0, 1.5, 0.5099999904632568, 0.8500000238418579, 0.15000000596046448, 0.0, 0.15000000596046448, -0.1599999964237213, 0.44999998807907104, 0.0, 0.15000000596046448, 16785408, 20971522, 0.0, 10000, 1, 1, 4},
    {472, 2200.0, 29333.30078125, 1.0, 0.0, 0.0, 0.0, 14, 2.299999952316284, 82, 80, 5, 0, 0.6800000071525574, 5.0, 190.0, 0.05000000074505806, 0.009999999776482582, 24.0, 15.0, 0.5799999833106995, 1.0, 3.0, 0.0, 0.10000000149011612, 0.10000000149011612, 0.0, 0.0, 0.33000001311302185, 134217728, 0, 0.20000000298023224, 40000, 0, 1, 0},
    {473, 2200.0, 20210.69921875, 1.0, 0.0, 0.0, 0.0, 22, 2.5, 82, 80, 5, 0, 1.0, 5.0, 190.0, 0.03999999910593033, 0.009999999776482582, 20.0, 15.0, 0.6499999761581421, 1.2999999523162842, 3.0, 0.0, 0.10000000149011612, 0.5, 2.0, 0.0, 0.38999998569488525, 134218752, 0, 0.699999988079071, 30000, 0, 1, 0},
    {474, 5000.0, 25520.80078125, 1.0, 0.0, 0.0, 0.0, 15, -1.5, 82, 80, 5, 0, 0.2800000011920929, 5.0, 190.0, 0.019999999552965164, 0.019999999552965164, 25.0, 15.0, 0.44999998807907104, 1.0, 3.0, 0.0, 0.10000000149011612, 0.10000000149011612, 0.0, 0.0, 0.3799999952316284, 134217728, 0, 0.20000000298023224, 25000, 0, 1, 0},
    {475, 2200.0, 29333.30078125, 1.0, 0.0, 0.0, 0.0, 42, 3.0, 82, 80, 5, 0, 1.2000000476837158, 5.0, 190.0, 0.019999999552965164, 0.0, 24.0, 15.0, 0.6499999761581421, 0.44999998807907104, 5.0, 0.0, 0.10000000149011612, 0.05000000074505806, 0.0, 0.0, 0.33000001311302185, 134218752, 0, 0.20000000298023224, 60000, 0, 1, 0},
    {476, 2200.0, 29333.30078125, 1.0, 0.0, 0.0, 0.0, 10, 2.200000047683716, 82, 80, 5, 0, 0.5600000023841858, 5.0, 190.0, 0.05000000074505806, 0.009999999776482582, 24.0, 12.0, 0.44999998807907104, 1.7999999523162842, 3.0, 0.0, 0.10000000149011612, 0.10000000149011612, 0.0, 0.0, 0.33000001311302185, 134218752, 0, 0.20000000298023224, 73000, 0, 1, 0},
    {477, 1200.0, 6525.0, 1.0, 0.0, -0.30000001192092896, 0.0, 14, 2.0, 82, 80, 5, 0, 0.6399999856948853, 5.0, 190.0, 0.05000000074505806, 0.009999999776482582, 24.0, 4.199999809265137, 0.699999988079071, 1.0, 3.0, 0.0, 3.200000047683716, 0.10000000149011612, 2.5, 0.0, 0.18000000715255737, 134217728, 0, 0.20000000298023224, 10000, 0, 1, 0},
    {478, 800.0, 1483.300048828125, 1.0, 0.0, 0.0, 0.0, 16, 3.5, 82, 80, 5, 0, 0.47999998927116394, 5.0, 190.0, 0.07000000029802322, 0.009999999776482582, 30.0, 3.5, 1.0, 1.0, 4.5, 0.0, 3.5, 0.10000000149011612, 0.699999988079071, 0.0, 0.11999999731779099, 134217728, 0, 0.20000000298023224, 5000, 0, 1, 0},
    {479, 5000.0, 155520.796875, 1.0, 0.0, 0.0, 0.0, 10, -3.5, 82, 80, 5, 0, 0.20000000298023224, 5.0, 190.0, 0.03999999910593033, 0.029999999329447746, 38.0, 25.0, 0.4000000059604645, 1.0, 3.0, 0.0, 0.10000000149011612, 0.0, 1.0, 0.0, 0.3799999952316284, 134217728, 0, 0.20000000298023224, 99000, 0, 1, 0},
    {48, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.7400000095367432, 82, 68, 5, 19940352, 11.5, 249.0, 180.0, 5.0, 0.5, 29.0, 0.7400000095367432, 0.4650000035762787, 1.0, 0.20000000298023224, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.30000001192092896, 0.30000001192092896, 2228224, 19940352, 0.4399999976158142, 16000, 1, 3, 0},
    {480, 3000.0, 40000.0, 1.0, 0.0, 0.0, 0.0, 35, 2.0, 82, 80, 5, 0, 1.2000000476837158, 5.0, 190.0, 0.019999999552965164, 0.0, 24.0, 15.0, 0.5, 0.75, 4.0, 0.0, 0.10000000149011612, 0.30000001192092896, 1.5, 0.0, 0.44999998807907104, 134218752, 0, 0.20000000298023224, 48000, 0, 1, 0},
    {481, 2200.0, 20210.69921875, 1.0, 0.0, -1.0, 0.0, 22, 1.5, 82, 80, 5, 0, 0.6000000238418579, 5.0, 190.0, 0.029999999329447746, 0.009999999776482582, 24.0, 15.0, 0.6499999761581421, 1.0, 3.0, 0.0, 0.10000000149011612, 0.5, 2.0, 0.0, 0.38999998569488525, 134218752, 0, 0.699999988079071, 30000, 0, 1, 0},
    {482, 5000.0, 27083.30078125, 12.0, 0.0, 0.0, 0.0, 9, 0.8299999833106995, 52, 80, 1, 0, 0.6800000071525574, 5.0, 200.0, 0.009999999776482582, 0.05000000074505806, 24.0, 45.0, 0.5, 1.5, 0.75, 0.0, 0.10000000149011612, 0.0, 2.0, 0.0, 0.05000000074505806, 67109888, 0, 1.0, 10000, 0, 1, 2},
    {483, 1900.0, 4795.89990234375, 20.0, 0.0, 0.0, 0.20000000298023224, 85, 0.05000000074505806, 82, 80, 5, 4194368, 0.800000011920929, 5.0, 150.0, 1.0, 0.5, 30.0, 1.0, 0.5, 0.5, 0.05000000074505806, 0.0, 0.33000001311302185, -0.25, 0.5, 0.019999999552965164, 0.5, 769, 4194368, 0.6499999761581421, 26000, 0, 1, 23},
    {484, 15000.0, 81250.0, 3.0, 0.0, 0.0, 0.0, 75, 0.550000011920929, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 3.5, 0.15000000596046448, 45.0, 0.800000011920929, 0.699999988079071, 4.0, 0.15000000596046448, 0.0, 1.0, -0.0, 0.30000001192092896, 0.0, 0.6000000238418579, 67142920, 4194304, 1.2000000476837158, 45000, 0, 1, 27},
    {485, 10000.0, 80000.0, 14.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 1.5, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 1.0, -0.10000000149011612, 0.3499999940395355, 0.0, 0.75, 603979784, 4194304, 0.30000001192092896, 45000, 0, 1, 13},
    {486, 5000.0, 27083.30078125, 15.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194336, 6.400000095367432, 5.0, 200.0, 1.5, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 0.550000011920929, -0.05000000074505806, 0.5, 0.0, 0.75, 67141632, 4194336, 0.30000001192092896, 45000, 0, 1, 14},
    {487, 5000.0, 20000.0, 14.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194336, 6.400000095367432, 5.0, 200.0, 1.5, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 0.5, -0.10000000149011612, 0.8999999761581421, 0.0, 0.75, 67141888, 4194336, 0.30000001192092896, 45000, 0, 1, 14},
    {488, 15000.0, 81250.0, 8.0, 0.0, 0.0, 0.0, 75, 0.550000011920929, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 1.5, 0.15000000596046448, 45.0, 0.800000011920929, 0.699999988079071, 4.0, 0.15000000596046448, 0.0, 1.0, -0.0, 0.30000001192092896, 0.0, 0.75, 67158280, 4194304, 0.30000001192092896, 45000, 0, 1, 15},
    {489, 9000.0, 48750.0, 20.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 1.5, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 1.0, 0.15000000596046448, 0.0, 0.5, -0.20000000298023224, 0.800000011920929, 0.0, 0.75, 67141888, 4194304, 0.6000000238418579, 45000, 0, 1, 27},
    {49, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.30000001192092896, 85, 0.800000011920929, 82, 68, 5, 20971520, 18.0, 165.0, 250.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.10000000149011612, -0.23000000417232513, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {490, 60000.0, 9000000.0, 4.0, 0.0, 5.0, 0.0, 75, 1.5, 52, 80, 1, 4194336, 3.200000047683716, 5.0, 200.0, 0.20000000298023224, 0.44999998807907104, 45.0, 0.8999999761581421, 0.8500000238418579, 1.0, 0.10000000149011612, 0.0, 0.4000000059604645, -0.30000001192092896, 0.5, 0.0, 0.75, 4194568, 4194336, 0.30000001192092896, 45000, 0, 1, 29},
    {491, 40000.0, 900000.0, 4.0, 0.0, 0.0, 0.0, 75, 1.5, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 1555.0, 1.0, 0.44999998807907104, 45.0, 0.8999999761581421, 0.8500000238418579, 1.5, 0.15000000596046448, 0.0, 0.5, -0.20000000298023224, 0.30000001192092896, 0.0, 0.75, 604028936, 4194304, 0.699999988079071, 45000, 0, 1, 15},
    {492, 40000.0, 3000000.0, 4.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4456448, 6.400000095367432, 5.0, 200.0, 1.0, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.75, 605110536, 4456448, 0.30000001192092896, 45000, 0, 1, 0},
    {493, 6000.0, 80000.0, 14.0, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194336, 6.400000095367432, 5.0, 200.0, 1.5, 0.44999998807907104, 45.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 1.0, -0.10000000149011612, 0.3499999940395355, 0.0, 0.75, 67158280, 4194336, 0.30000001192092896, 45000, 0, 1, 2},
    {494, 2500.0, 6041.7001953125, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 2.0, 0.10000000149011612, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.5, 33570816, 4194304, 0.30000001192092896, 25000, 0, 1, 0},
    {495, 3000.0, 7250.0, 0.10000000149011612, 0.0, 0.0, -0.10000000149011612, 5, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 2.0, 0.10000000149011612, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.6000000238418579, 33570816, 4194304, 0.30000001192092896, 28000, 0, 1, 0},
    {496, 5000.0, 29270.80078125, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 2.0, 0.15000000596046448, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.75, 33570816, 4194304, 0.30000001192092896, 45000, 0, 1, 0},
    {497, 3500.0, 8458.2998046875, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 2.0, 0.10000000149011612, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.6499999761581421, 33570816, 4194304, 0.30000001192092896, 50000, 0, 1, 0},
    {498, 4500.0, 26343.69921875, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 2.0, 0.10000000149011612, 0.0, 0.5, -0.20000000298023224, 0.5, 0.0, 0.6499999761581421, 33570816, 4194304, 0.30000001192092896, 52000, 0, 1, 0},
    {499, 10000.0, 150000.0, 0.20000000298023224, 0.0, 0.0, 0.0, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 1.0, 0.05000000074505806, 0.0, 0.10000000149011612, -0.10000000149011612, 0.6800000071525574, 0.20000000298023224, 0.20000000298023224, 33603584, 4194304, 0.4000000059604645, 99000, 0, 1, 2},
    {5, 2200.0, 4010.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 75, 0.8199999928474426, 52, 80, 5, 20971520, 19.200000762939453, 159.0, 300.0, 6.0, 0.5, 40.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.25, -0.03999999910593033, 0.5, 0.30000001192092896, 0.6000000238418579, 2236416, 20971520, 0.25, 16000, 1, 3, 0},
    {50, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, 0.0, 75, 0.699999988079071, 82, 68, 5, 285212672, 11.5, 249.0, 160.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.20000000298023224, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228240, 285212672, 0.6499999761581421, 16000, 1, 3, 0},
    {500, 15000.0, 200000.0, 0.10000000149011612, 0.0, 0.0, 0.0, 30, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 1.0, 0.05000000074505806, 0.0, 0.5, -0.20000000298023224, 0.8999999761581421, 0.0, 0.5, 33570816, 4194304, 0.30000001192092896, 25000, 0, 1, 0},
    {501, 20000.0, 48333.30078125, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 0.6000000238418579, 0.05000000074505806, 0.0, 0.5, -0.10000000149011612, 0.30000001192092896, 0.0, 0.5, 570441728, 4194304, 0.30000001192092896, 25000, 0, 1, 0},
    {502, 10000.0, 96666.703125, 0.05000000074505806, 0.0, 0.0, -1.0, 75, 0.6499999761581421, 52, 80, 1, 4194304, 6.400000095367432, 5.0, 200.0, 5.0, 0.44999998807907104, 30.0, 0.8999999761581421, 0.5, 1.5, 0.10000000149011612, 0.0, 0.20000000298023224, -0.15000000596046448, 0.5, 0.0, 0.5, 33570816, 4194304, 0.699999988079071, 99000, 0, 1, 0},
    {503, 100.0, 50.0, 120.0, 0.0, 0.0, 0.0, 99, 0.20000000298023224, 70, 80, 1, 32, 0.4000000059604645, 5.0, 75.0, 0.5, 0.5, 45.0, 0.8999999761581421, 0.5, 0.6000000238418579, 0.10000000149011612, 0.0, 0.25, -0.0, 0.800000011920929, 0.0, 0.07999999821186066, 67108864, 32, 0.20000000298023224, 300, 0, 1, 0},
    {504, 100.0, 24.100000381469727, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 70, 1.100000023841858, 52, 80, 1, 0, 14.0, 5.0, 75.0, 5.5, 0.5, 25.0, 0.75, 0.5, 1.600000023841858, 0.10000000149011612, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.0, 0.05000000074505806, 33554432, 0, 0.20000000298023224, 800, 0, 1, 0},
    {505, 100.0, 24.100000381469727, 0.20000000298023224, 0.0, 0.0, -0.10000000149011612, 70, 1.100000023841858, 52, 80, 1, 0, 14.0, 5.0, 75.0, 5.5, 0.5, 25.0, 0.75, 0.5, 1.600000023841858, 0.10000000149011612, 0.0, 0.2800000011920929, -0.07999999821186066, 0.5, 0.0, 0.10000000149011612, 33554432, 0, 0.20000000298023224, 500, 0, 1, 0},
    {51, 2800.0, 7968.7001953125, 2.5, 0.0, 0.0, 0.0, 80, 0.699999988079071, 52, 80, 5, 3145728, 10.0, 21.0, 95.0, 8.0, 0.5, 30.0, 0.8500000238418579, 0.5, 1.5, 0.07999999821186066, 4.0, 0.3499999940395355, -0.3499999940395355, 0.5, 0.0, 0.25, 8, 3145728, 0.2800000011920929, 40000, 0, 1, 0},
    {52, 1830.0, 2500.0, 3.0, 0.0, 0.05000000074505806, -0.10000000149011612, 70, 0.6000000238418579, 82, 80, 4, 2, 8.0, 30.0, 180.0, 8.0, 0.6000000238418579, 30.0, 0.8600000143051147, 0.5, 1.100000023841858, 0.10000000149011612, 3.0, 0.30000001192092896, -0.25, 0.5, 0.20000000298023224, 0.5, 1073741824, 2, 0.25999999046325684, 9000, 2, 2, 0},
    {53, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.15000000596046448, 85, 0.7799999713897705, 52, 68, 5, 24134656, 14.0, 140.0, 250.0, 5.0, 0.5, 35.0, 0.7799999713897705, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.10000000149011612, -0.12999999523162842, 0.5, 0.30000001192092896, 0.30000001192092896, 2236416, 24134656, 0.4399999976158142, 16000, 1, 3, 0},
    {54, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 75, 0.7799999713897705, 82, 68, 5, 16777217, 16.0, 159.0, 265.0, 5.0, 0.5, 42.0, 0.7599999904632568, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.1599999964237213, 0.5, 0.30000001192092896, 0.6000000238418579, 2228224, 16777217, 0.6499999761581421, 16000, 1, 3, 0},
    {55, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 75, 0.699999988079071, 82, 68, 5, 16777216, 11.5, 249.0, 130.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07500000298023224, 0.0, 0.30000001192092896, -0.20000000298023224, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {56, 2547.0, 5256.0, 2.0, 0.0, 0.0, -0.20000000298023224, 120, 0.7799999713897705, 70, 68, 5, 16777216, 12.0, 190.0, 180.0, 5.0, 0.5, 32.0, 0.7599999904632568, 0.5199999809265137, 0.8999999761581421, 0.15000000596046448, 0.0, 0.20000000298023224, -0.15000000596046448, 0.47999998927116394, 0.30000001192092896, 0.3499999940395355, 2228256, 16777216, 0.28999999165534973, 16000, 1, 3, 0},
    {57, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.8500000238418579, 52, 68, 5, 20971520, 26.0, 141.0, 330.0, 7.0, 0.5, 45.0, 0.8500000238418579, 0.46000000834465027, 1.0, 0.18000000715255737, 0.0, 0.20000000298023224, -0.07000000029802322, 0.6000000238418579, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {58, 1900.0, 5000.0, 2.4000000953674316, 0.0, 0.0, 0.0, 85, 0.800000011920929, 82, 80, 5, 4194304, 6.480000019073486, 51.0, 90.0, 8.5, 0.44999998807907104, 30.0, 0.8700000047683716, 0.5099999904632568, 1.100000023841858, 0.07000000029802322, 0.0, 0.30000001192092896, -0.23000000417232513, 0.5, 0.30000001192092896, 0.5, 1, 4194304, 0.20000000298023224, 50000, 1, 1, 0},
    {59, 5500.0, 15187.900390625, 2.0, 0.0, 0.0, 0.0, 90, 0.75, 82, 80, 5, 0, 5.199999809265137, 141.0, 100.0, 4.170000076293945, 0.4000000059604645, 30.0, 0.8500000238418579, 0.4000000059604645, 1.2000000476837158, 0.07000000029802322, 0.0, 0.44999998807907104, -0.14000000059604645, 0.44999998807907104, 0.0, 0.75, 49160, 0, 0.20000000298023224, 15000, 2, 2, 28},
    {6, 8000.0, 11000.0, 4.0, 0.0, 0.0, 0.0, 90, 0.7799999713897705, 82, 80, 4, 0, 6.0, 51.0, 110.0, 3.1700000762939453, 0.4000000059604645, 30.0, 0.8999999761581421, 0.550000011920929, 1.5, 0.1599999964237213, 0.0, 0.30000001192092896, -0.10000000149011612, 0.550000011920929, 0.0, 0.20000000298023224, 0, 0, 0.44999998807907104, 5000, 1, 1, 20},
    {60, 1300.0, 4300.0, 2.0, 0.0, 0.30000001192092896, -0.30000001192092896, 75, 0.75, 82, 80, 5, 1, 8.0, 60.0, 180.0, 10.0, 0.5299999713897705, 35.0, 0.8500000238418579, 0.5, 1.0, 0.11999999731779099, 0.0, 0.2800000011920929, -0.2800000011920929, 0.550000011920929, 0.0, 0.23999999463558197, 32, 1, 0.20000000298023224, 25000, 2, 2, 0},
    {61, 10000.0, 35000.0, 20.0, 0.0, -0.5, -0.5, 90, 0.8500000238418579, 52, 68, 5, 3408416, 14.0, 150.0, 100.0, 5.0, 0.4000000059604645, 45.0, 0.800000011920929, 0.6000000238418579, 1.399999976158142, 0.15000000596046448, 0.0, 0.25, -0.20000000298023224, 0.3499999940395355, 0.0, 0.20000000298023224, 776, 3408416, 0.44999998807907104, 5000, 0, 1, 17},
    {62, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.25999999046325684, 80, 0.7200000286102295, 52, 68, 5, 24117248, 12.0, 189.0, 215.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.46000000834465027, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.15000000596046448, 0.5, 0.5, 0.4000000059604645, 2228256, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {63, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7649999856948853, 52, 80, 5, 24117248, 20.0, 201.0, 301.0, 6.0, 0.5, 35.0, 0.7649999856948853, 0.47999998927116394, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.18000000715255737, 0.5, 0.5, 0.4000000059604645, 2236420, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {64, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.30000001192092896, 80, 0.7200000286102295, 52, 80, 5, 24117248, 12.0, 171.0, 218.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.10000000149011612, 0.5, 0.5, 0.4000000059604645, 2236448, 24117248, 0.4399999976158142, 16000, 1, 3, 0},
    {65, 2200.0, 4100.0, 2.0, 0.0, 0.0, -0.4000000059604645, 70, 0.800000011920929, 70, 68, 5, 20971520, 13.0, 159.0, 220.0, 5.0, 0.5, 40.0, 0.800000011920929, 0.49000000953674316, 0.800000011920929, 0.17499999701976776, 0.0, 0.20000000298023224, -0.18000000715255737, 0.47999998927116394, 0.6000000238418579, 0.44999998807907104, 2228224, 20971520, 0.5, 16000, 1, 3, 0},
    {66, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 75, 0.7350000143051147, 70, 68, 5, 16777216, 11.5, 219.0, 169.0, 3.5, 0.5, 29.0, 0.7350000143051147, 0.5, 0.800000011920929, 0.10000000149011612, 0.0, 0.25, -0.25, 0.44999998807907104, 0.30000001192092896, 0.4000000059604645, 2228224, 16777216, 0.6499999761581421, 16000, 1, 3, 0},
    {67, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 82, 80, 5, 20971521, 22.0, 150.0, 317.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5099999904632568, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971521, 0.4000000059604645, 16000, 1, 3, 0},
    {68, 2000.0, 4000.0, 2.200000047683716, 0.0, 0.0, -0.6000000238418579, 80, 0.75, 52, 80, 5, 3246080, 11.199999809265137, 189.0, 180.0, 8.0, 0.5, 30.0, 0.8500000238418579, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.3499999940395355, -0.3100000023841858, 0.5, 0.0, 0.3499999940395355, 64, 3246080, 0.3799999952316284, 35000, 1, 1, 0},
    {69, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.3499999940395355, 85, 0.800000011920929, 70, 68, 5, 16777216, 12.800000190734863, 230.0, 210.0, 5.0, 0.5, 28.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.11999999731779099, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {7, 5500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.10000000149011612, 80, 0.699999988079071, 52, 68, 5, 24379392, 11.0, 201.0, 135.0, 5.0, 0.4000000059604645, 30.0, 0.699999988079071, 0.4399999976158142, 0.800000011920929, 0.17000000178813934, 0.0, 0.44999998807907104, -0.10000000149011612, 0.4699999988079071, 0.5, 0.30000001192092896, 2228232, 24379392, 0.4399999976158142, 16000, 1, 3, 0},
    {70, 6500.0, 36670.80078125, 4.0, 0.0, 0.0, -0.20000000298023224, 90, 0.550000011920929, 82, 80, 4, 0, 6.0, 180.0, 90.0, 10.0, 0.44999998807907104, 27.0, 0.800000011920929, 0.5, 1.2000000476837158, 0.07999999821186066, 0.0, 0.17000000178813934, -0.2199999988079071, 0.5, 0.0, 0.25999999046325684, 268451976, 0, 0.20000000298023224, 15000, 2, 2, 1},
    {71, 3500.0, 7000.0, 4.0, 0.0, 0.0, 0.10000000149011612, 80, 0.550000011920929, 82, 80, 5, 0, 6.0, 129.0, 90.0, 4.5, 0.6000000238418579, 30.0, 0.8500000238418579, 0.46000000834465027, 1.5, 0.07000000029802322, 5.0, 0.3499999940395355, -0.18000000715255737, 0.5, 0.0, 0.5299999713897705, 16520, 0, 0.46000000834465027, 22000, 0, 3, 0},
    {72, 1500.0, 3000.0, 2.5, 0.0, 0.0, -0.3499999940395355, 80, 0.699999988079071, 52, 80, 4, 0, 5.599999904632568, 6.0, 85.0, 7.0, 0.44999998807907104, 35.0, 0.8500000238418579, 0.5400000214576721, 1.399999976158142, 0.18000000715255737, 0.0, 0.25, -0.15000000596046448, 0.44999998807907104, 0.30000001192092896, 0.3499999940395355, 64, 0, 0.4399999976158142, 40000, 0, 1, 0},
    {73, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.3799999952316284, 70, 0.8500000238418579, 82, 80, 5, 20987905, 16.0, 142.0, 290.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.49000000953674316, 0.800000011920929, 0.18000000715255737, 0.0, 0.20000000298023224, -0.125, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20987905, 0.4000000059604645, 16000, 1, 3, 0},
    {74, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 85, 0.8199999928474426, 52, 68, 5, 20987904, 24.0, 141.0, 318.0, 7.0, 0.5, 45.0, 0.8199999928474426, 0.5, 0.800000011920929, 0.17000000178813934, 0.0, 0.20000000298023224, -0.11999999731779099, 0.5199999809265137, 0.30000001192092896, 0.30000001192092896, 2236420, 20987904, 0.4399999976158142, 16000, 1, 3, 0},
    {75, 3385.0, 5100.0, 2.0, 0.0, 0.0, -0.30000001192092896, 70, 0.7799999713897705, 82, 80, 5, 16794624, 13.0, 220.0, 225.0, 5.0, 0.47999998927116394, 35.0, 0.6499999761581421, 0.47999998927116394, 0.800000011920929, 0.15000000596046448, 0.0, 0.20000000298023224, -0.15000000596046448, 0.4300000071525574, 0.5, 0.5, 2149711888, 16794624, 0.4000000059604645, 16000, 1, 3, 0},
    {76, 3500.0, 7156.2001953125, 2.200000047683716, 0.0, 0.0, -0.20000000298023224, 80, 0.699999988079071, 82, 68, 5, 19922944, 11.0, 240.0, 150.0, 5.0, 0.5, 28.0, 0.699999988079071, 0.4000000059604645, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.20000000298023224, 0.5, 0.5, 0.30000001192092896, 2228224, 19922944, 0.4399999976158142, 16000, 1, 3, 0},
    {77, 7080.0, 14000.0, 2.5, 0.0, 0.30000001192092896, -0.20000000298023224, 90, 0.800000011920929, 82, 68, 4, 19927296, 8.399999618530273, 9.0, 100.0, 8.0, 0.5899999737739563, 36.5, 0.7699999809265137, 0.47999998927116394, 0.925000011920929, 0.8100000023841858, 10.0, 0.2800000011920929, -0.20000000298023224, 0.49000000953674316, 0.15000000596046448, 0.4000000059604645, 1114112, 19927296, 0.3499999940395355, 45000, 0, 1, 2},
    {78, 3800.0, 15000.0, 2.0, 0.0, 0.0, -1.899999976158142, 90, 0.75, 82, 80, 5, 1, 6.800000190734863, 171.0, 100.0, 8.0, 0.30000001192092896, 35.0, 0.8500000238418579, 0.4000000059604645, 1.0, 0.20000000298023224, 0.0, 0.25, -0.0, 0.5, 0.0, 0.25, 538984456, 1, 0.3499999940395355, 35000, 2, 2, 2},
    {79, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.05000000074505806, 85, 0.7400000095367432, 70, 68, 5, 16777216, 11.0, 210.0, 202.0, 5.0, 0.5, 28.0, 0.7400000095367432, 0.4650000035762787, 1.0, 0.20000000298023224, 0.0, 0.20000000298023224, -0.20000000298023224, 0.47999998927116394, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {8, 5500.0, 33187.8984375, 5.0, 0.0, 0.0, -0.20000000298023224, 90, 0.6000000238418579, 82, 68, 4, 512, 8.0, 30.0, 110.0, 3.5, 0.4000000059604645, 30.0, 0.8999999761581421, 0.5, 1.0, 0.05999999865889549, 0.0, 0.44999998807907104, -0.25, 0.550000011920929, 0.30000001192092896, 0.20000000298023224, 16392, 512, 0.44999998807907104, 5000, 0, 1, 0},
    {80, 1400.0, 6267.7998046875, 2.200000047683716, 0.0, 0.10000000149011612, -0.30000001192092896, 75, 0.699999988079071, 82, 80, 5, 0, 4.400000095367432, 99.0, 90.0, 6.0, 0.550000011920929, 25.0, 0.699999988079071, 0.47999998927116394, 1.2999999523162842, 0.07000000029802322, 0.0, 0.3700000047683716, -0.17000000178813934, 0.5, 0.30000001192092896, 0.5600000023841858, 40, 0, 0.20000000298023224, 8000, 2, 2, 0},
    {81, 1800.0, 3500.0, 2.799999952316284, 0.0, 0.20000000298023224, -0.10000000149011612, 85, 0.6000000238418579, 52, 68, 4, 0, 6.0, 15.0, 140.0, 5.5, 0.6000000238418579, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.10000000149011612, 0.0, 0.3499999940395355, -0.15000000596046448, 0.550000011920929, 0.0, 0.75, 0, 0, 0.20000000298023224, 15000, 2, 2, 1},
    {82, 5500.0, 33187.8984375, 2.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 262656, 8.0, 21.0, 110.0, 3.1700000762939453, 0.4000000059604645, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, -0.25, 0.550000011920929, 0.0, 0.20000000298023224, 4210696, 262656, 0.44999998807907104, 5000, 0, 1, 0},
    {83, 3500.0, 12000.0, 2.5, 0.0, 0.30000001192092896, -0.25, 80, 0.8500000238418579, 82, 68, 5, 18087936, 10.0, 30.0, 160.0, 6.0, 0.800000011920929, 45.0, 0.699999988079071, 0.46000000834465027, 1.600000023841858, 0.07000000029802322, 0.0, 0.3499999940395355, -0.15000000596046448, 0.44999998807907104, 0.0, 0.5, 1114113, 18087936, 0.20000000298023224, 20000, 0, 3, 13},
    {84, 1700.0, 4166.39990234375, 2.0, 0.0, 0.0, -0.20000000298023224, 70, 0.699999988079071, 82, 80, 4, 4, 8.0, 9.0, 160.0, 8.170000076293945, 0.5199999809265137, 35.0, 0.8399999737739563, 0.5299999713897705, 1.2000000476837158, 0.15000000596046448, 0.0, 0.30000001192092896, -0.10000000149011612, 0.5, 0.25, 0.5199999809265137, 1073741824, 4, 0.30000001192092896, 19000, 1, 1, 0},
    {85, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.10000000149011612, 75, 0.699999988079071, 70, 68, 5, 16794624, 11.5, 210.0, 214.0, 3.5, 0.5, 28.0, 0.699999988079071, 0.5, 0.800000011920929, 0.07999999821186066, 0.0, 0.2800000011920929, -0.20000000298023224, 0.5, 0.30000001192092896, 0.4000000059604645, 2228224, 16794624, 0.6499999761581421, 16000, 1, 3, 0},
    {86, 15000.0, 25000.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.6499999761581421, 52, 68, 5, 0, 13.199999809265137, 150.0, 180.0, 6.0, 0.4000000059604645, 30.0, 0.8500000238418579, 0.5400000214576721, 0.800000011920929, 0.10000000149011612, 0.0, 0.30000001192092896, -0.15000000596046448, 0.5, 0.30000001192092896, 0.1599999964237213, 1, 0, 0.3199999928474426, 50000, 1, 1, 0},
    {87, 1800.0, 4350.0, 2.0, 0.0, 0.0, 0.0, 70, 0.699999988079071, 70, 80, 4, 0, 7.199999809265137, 15.0, 160.0, 5.400000095367432, 0.6000000238418579, 30.0, 0.800000011920929, 0.5199999809265137, 1.100000023841858, 0.15000000596046448, 0.0, 0.3199999928474426, -0.14000000059604645, 0.5, 0.0, 0.5400000214576721, 1073741824, 0, 0.25999999046325684, 19000, 0, 3, 0},
    {88, 1000.0, 1354.199951171875, 2.0, 0.0, -0.20000000298023224, -0.3499999940395355, 70, 0.800000011920929, 70, 69, 3, 17039396, 8.0, 15.0, 60.0, 6.0, 0.5, 30.0, 0.8500000238418579, 0.5, 2.0, 0.14000000059604645, 0.0, 0.25, -0.20000000298023224, 0.5, 0.0, 0.5, 4864, 17039396, 0.25999999046325684, 9000, 1, 1, 0},
    {89, 2000.0, 5000.0, 3.0, 0.0, 0.0, 0.0, 70, 0.8999999761581421, 52, 100, 4, 20185093, 8.0, 90.0, 70.0, 15.0, 0.20000000298023224, 50.0, 0.8500000238418579, 0.5, 2.0, 0.11999999731779099, 0.0, 0.25, -0.05000000074505806, 0.5, 0.0, 0.5, 2097680, 20185093, 0.25999999046325684, 9000, 1, 1, 28},
    {9, 3385.0, 7100.0, 2.4000000953674316, 0.0, 0.0, -0.25, 85, 0.800000011920929, 82, 68, 5, 20971520, 17.0, 155.0, 240.0, 5.0, 0.5, 35.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.125, 0.42500001192092896, 0.30000001192092896, 0.30000001192092896, 2236416, 20971520, 0.4399999976158142, 16000, 1, 3, 0},
    {90, 8500.0, 48804.19921875, 5.0, 0.0, 0.30000001192092896, -0.20000000298023224, 90, 0.8799999952316284, 52, 68, 5, 544, 10.0, 81.0, 140.0, 10.0, 0.44999998807907104, 27.0, 0.699999988079071, 0.46000000834465027, 1.2000000476837158, 0.10000000149011612, 0.0, 0.4699999988079071, -0.10999999940395355, 0.5, 0.0, 0.4300000071525574, 1228808, 544, 1.2000000476837158, 10000, 0, 1, 20},
    {91, 2200.0, 4200.0, 2.0, 0.0, 0.0, -0.5, 70, 0.800000011920929, 52, 68, 5, 20971520, 18.0, 120.0, 280.0, 7.0, 0.5, 45.0, 0.800000011920929, 0.47999998927116394, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.07999999821186066, 0.5, 0.6000000238418579, 0.5400000214576721, 2149720064, 20971520, 0.4000000059604645, 16000, 1, 3, 0},
    {92, 1660.0, 4100.0, 2.4000000953674316, 0.0, 0.0, -0.4000000059604645, 120, 0.800000011920929, 82, 80, 5, 20971520, 10.0, 60.0, 180.0, 5.059999942779541, 0.5199999809265137, 30.0, 0.800000011920929, 0.5099999904632568, 1.2000000476837158, 0.15000000596046448, 0.0, 0.2199999988079071, -0.10000000149011612, 0.5, 0.30000001192092896, 0.5600000023841858, 4, 20971520, 0.10000000149011612, 50000, 1, 1, 0},
    {93, 1400.0, 2900.0, 2.0, 0.0, 0.0, -0.6000000238418579, 75, 0.8500000238418579, 52, 80, 5, 83903490, 16.0, 21.0, 265.0, 8.170000076293945, 0.5199999809265137, 45.0, 0.75, 0.5, 1.5, 0.1599999964237213, 0.0, 0.5, -0.10000000149011612, 0.49000000953674316, 0.0, 0.6000000238418579, 539107332, 83903490, 0.25, 35000, 1, 1, 0},
    {94, 2100.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 85, 0.6899999976158142, 82, 68, 5, 285212672, 11.600000381469727, 190.0, 190.0, 5.0, 0.5, 28.0, 0.7200000286102295, 0.47999998927116394, 0.800000011920929, 0.20000000298023224, 0.0, 0.20000000298023224, -0.11999999731779099, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228224, 285212672, 0.4399999976158142, 16000, 1, 3, 0},
    {95, 5500.0, 65000.0, 3.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 512, 8.0, 21.0, 110.0, 3.1700000762939453, 0.4000000059604645, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, 0.0, 0.550000011920929, 0.0, 0.20000000298023224, 8, 512, 0.44999998807907104, 5000, 0, 1, 2},
    {96, 5500.0, 65000.0, 3.0, 0.0, 0.0, 0.0, 90, 0.5799999833106995, 82, 68, 4, 512, 8.0, 21.0, 110.0, 3.700000047683716, 0.6499999761581421, 30.0, 0.800000011920929, 0.5, 1.399999976158142, 0.05999999865889549, 0.0, 0.44999998807907104, 0.009999999776482582, 0.550000011920929, 0.0, 0.20000000298023224, 520, 512, 1.7999999523162842, 5000, 0, 1, 28},
    {97, 3385.0, 5100.0, 2.4000000953674316, 0.0, 0.0, -0.5, 85, 0.7799999713897705, 82, 80, 5, 16777216, 14.399999618530273, 174.0, 250.0, 5.0, 0.5, 35.0, 0.6800000071525574, 0.5, 0.800000011920929, 0.1599999964237213, 0.0, 0.20000000298023224, -0.16500000655651093, 0.44999998807907104, 0.30000001192092896, 0.30000001192092896, 2228224, 16777216, 0.4399999976158142, 16000, 1, 3, 0},
    {98, 2200.0, 4200.0, 2.4000000953674316, 0.0, 0.0, -0.20000000298023224, 70, 0.8999999761581421, 52, 68, 5, 24150019, 28.0, 135.0, 330.0, 11.100000381469727, 0.47999998927116394, 40.0, 0.8999999761581421, 0.44999998807907104, 0.800000011920929, 0.20000000298023224, 0.0, 0.05000000074505806, -0.10000000149011612, 0.6299999952316284, 0.30000001192092896, 0.5400000214576721, 2236420, 24150019, 0.4000000059604645, 16000, 1, 3, 0},
    {99, 3500.0, 11156.2001953125, 2.200000047683716, 0.0, 0.0, -0.4000000059604645, 80, 0.7200000286102295, 52, 80, 5, 24117248, 12.0, 129.0, 180.0, 5.0, 0.5, 30.0, 0.7200000286102295, 0.4650000035762787, 0.800000011920929, 0.18000000715255737, 0.0, 0.2800000011920929, -0.30000001192092896, 0.5, 0.5, 0.3499999940395355, 2228256, 24117248, 0.4399999976158142, 16000, 1, 3, 0}
};

stock GetVehicleHandling(model_index)
{
    for(new i; i < sizeof g_handling_data; i++)
    {
        if(g_handling_data[i][E_MODEL_INDEX] == model_index)
        {
            return i;
        }
    }

    return -1;
}

cmd:hangl(playerid, params[]) callcmd::sethandling(playerid, params);
CMD:sethandling(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 7) return 1;
	else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, используйте /alogin");

    extract params -> new model; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sethandling [id handling`a]");

    if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, 0x999999FF, "Вы должены находиться в транспорте");

    new vehicleid = GetPlayerVehicleID(playerid);

    SetVehicleHandling(playerid, vehicleid, model, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

    return 1;
}

public: SetTrailerHandling(playerid, vehicleid)
{
    new modelid = GetVehicleData(vehicleid, V_MODELID);

    if(GetVehicleHandlingID(modelid) == -1) return 0;

    new Float:value = 5000.0;

    if(GetPlayerJobLoadItems(playerid) > 1000) value = 10000.0;
    if(GetPlayerJobLoadItems(playerid) > 2000) value = 20000.0;
    if(GetPlayerJobLoadItems(playerid) > 3000) value = 30000.0;
    if(GetPlayerJobLoadItems(playerid) > 4000) value = 40000.0;
    if(GetPlayerJobLoadItems(playerid) > 5000) value = 50000.0;

    SetVehicleHandling(playerid, vehicleid, GetVehicleHandlingID(modelid), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, value);
    return true;
}

public: SetVehicleHandling(playerid, vehicleid, model_index, Float:value, Float:value1, Float:value2, Float:value3, Float:value4, Float:value5, Float:value6)
{   
    new modelid = GetVehicleData(vehicleid, V_MODELID);

    if(GetVehicleHandlingID(modelid) == -1) return 0;

    new
        BitStream:bsn = BS_New();

    if(GetVehicleHandling(model_index) == -1) return 0;

    new handling = GetVehicleHandling(model_index);

    BS_WriteValue(bsn, PR_UINT8, 215);
    BS_WriteValue(bsn, PR_UINT16, 7);
	BS_WriteValue(bsn, PR_UINT32, vehicleid);
    BS_WriteValue(bsn, PR_UINT32, model_index);
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_MASS] + value6); //fMass
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_TURNMASS]); // fTurnMass
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_DRAGMULT] + value4); // fDragMult
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_CENTRE_OF_MASS_X]); // vecCentreOfMassX
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_CENTRE_OF_MASS_Y]); // vecCentreOfMassY
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_CENTRE_OF_MASS_Z]); // vecCentreOfMassZ
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_PERCENT_SUBMERGED]); // nPercentSubmerged
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_TRACTION_MULTIPLIER]); // fTractionMultiplier
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_DRIVE_TYPE]); // transmissionData_m_nDriveType
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_ENGINE_TYPE]); // transmissionData_m_nEngineType
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_NUMBER_OF_GEARS]); // transmissionData_m_nNumberOfGears
    BS_WriteValue(bsn, PR_UINT32, g_handling_data[handling][E_TRANSIMISSION_HANDLING_FLAGS]); // transmissionData_m_nHandlingFlags
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_ENGINE_ACCELERATION] + value2); // transmissionData_m_fEngineAcceleration
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_ENGINE_INERT] + value3); // transmissionData_m_fEngineInertia
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_MAXGEAR_VELOCITY] + value5); // transmissionData_m_fMaxGearVelocity
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_BRAKE_DECELERATION]); // fBrakeDeceleration
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_BRAKE_BIAS]); // fBrakeBias
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_STEERING_LOCK]); // fSteeringLock
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_TRACTION_LOSS]); // fTractionLoss
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_TRACTION_BIAS]); // fTractionBias
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_FORCE_LEVEL] + value1); // fSuspensionForceLevel
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_DAMPING_LEVEL]); // fSuspensionDampingLevel
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_HIGH]); // fSuspensionHighSpdComDamp
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_UPPER]); // fSuspensionUpperLimit
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_LOWER]); // fSuspensionLowerLimit
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_BIAS] + value); // fSuspensionBiasBetweenFrontAndRear
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SUSPENSION_ANTI_DRIVE]); // fSuspensionAntiDiveMultiplier
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_COLLISION_DAMAGE]); // fCollisionDamageMultiplier
    BS_WriteValue(bsn, PR_UINT32, g_handling_data[handling][E_MODEL_FLAGS]); // nModelFlags
    BS_WriteValue(bsn, PR_UINT32, g_handling_data[handling][E_HANDLING_FLAGS]); // nHandlingFlags
    BS_WriteValue(bsn, PR_FLOAT, g_handling_data[handling][E_SEAT_OFFSET]); // fSeatOffsetDistance
    BS_WriteValue(bsn, PR_UINT32, g_handling_data[handling][E_MONETARY_VALUE]); // nMonetaryValue
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_FRONT_LIGHTS]); // nFrontLights
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_REAR_LIGHTS]); // nRearLights
    BS_WriteValue(bsn, PR_UINT8, g_handling_data[handling][E_ANIM_GROUP]); // nAnimGroup

    PR_SendPacket(bsn, playerid);

    BS_Delete(bsn);

    return 1;
}

stock Handling(playerid, vehicleid, handling)
{
	new BitStream:bsn = BS_New();

	BS_WriteValue(bsn, PR_UINT8, PACKET);
	BS_WriteValue(bsn, PR_UINT16, 7);
	BS_WriteValue(bsn, PR_UINT32, vehicleid);
	BS_WriteValue(bsn, PR_UINT32, handling, PR_STRING, handling);

	PR_SendPacket(bsn, playerid);
	BS_Delete(bsn);
}

new g_vehicle_handling_id[][2] =
{
    {400,0},
    {401,1},
    {402,2},
    {403,3},
    {404,4},
    {405,5},
    //{406,0},
    //{407,0},
    //{408,0},
    {409,9},
    {410,10},
    {411,11},
    {412,12},
    {413,13},
    {414,14},
    {415,15},
    {416,16},
    //{417,0},
    {418,17},
    {419,18},
    {420,19},
    {421,20},
    {422,21},
    {423,22},
    {424,23},
    //{425,0},
    {426,24},
    //{427,0},
    {428,25},
    {429,26},
    //{430,0},
    {431,27},
    {432,28},
    {433,29},
    {434,30},
    {435,31},
    {436,32},
    {437,33},
    {438,34},
    //{439,0},
    {440,35},
    {441,36},
    {442,37},
    {443,38},
    {444,39},
    {445,40},
    {449,41},
    {450,31},
    {451,43},
    {455,44},
    {456,45},
    {457,46},
    {458,47},
    {459,48},
    {464,503},
    {465,503},
    {466,49},
    {467,50},
    {469,494},
    {470,51},
    {471,466},
    {473,478},
    {474,52},
    {475,53},
    {476,484},
    {477,54},
    {478,55},
    {479,56},
    {480,57},
    {481,458},
    {482,58},
    {483,59},
    {484,479},
    {485,60},
    {486,61},
    {487,496},
    {489,62},
    {490,64},
    {491,65},
    {492,66},
    //{493,0},
    {494,67},
    {495,68},
    {496,69},
    {497,498},
    {498,70},
    {499,71},
    {500,72},
    {501,503},
    //{502,0},
    {503,366},
    {504,73},
    {505,63},
    {506,74},
    {507,75},
    {508,76},
    {509,447},
    {510,447},
    {511,485},
    {512,482},
    {513,487},
    {514,77},
    {515,78},
    {516,79},
    {517,80},
    {518,81},
    {519,484},
    {520,489},
    {521,450},
    {522,451},
    //{523,0},
    {524,82},
    {525,83},
    {526,84},
    {527,85},
    {528,86},
    {529,87},
    {530,88},
    {531,89},
    {532,90},
    {533,91},
    {534,92},
    {535,93},
    {536,94},
    {537,95},
    {538,96},
    {539,483},
    {540,97},
    {541,98},
    {542,393},
    {543,100},
    {544,268},
    {545,396},
    {546,397},
    {547,398},
    {548,501},
    {549,399},
    {550,116},
    {551,102},
    {552,172},
    {553,490},
    //{554,403},
    {555,404},
    {556,405},
    //{557,406},
    {558,407},
    {559,408},
    {560,409},
    {561,183},
    {562,398},
    {563,410},
    {564,504},
    {565,412},
    {566,413},
    {567,414},
    {568,415},
    {569,416},
    {570,417},
    {571,418},
    {572,419},
    {573,420},
    {574,421},
    {575,422},
    {576,423},
    {577,491},
    {578,424},
    {579,425},
    {580,426},
    {581,461},
    {582,427},
    {583,428},
    {584,429},
    {585,430},
    {586,455},
    {587,431},
    {588,432},
    {589,433},
    //{590,0},
    {591,434},
    {592,492},
    {593,493},
    {594,435},
    {595,473},
    //{596,0},
    //{597,0},
    //{598,0},
    //{599,0},
    {600,437},
    {601,438},
    {602,439},
    {603,340},
    {604,314},
    {605,133},
    {606,441},
    {607,442},
    //{608,0},
    {609,444},
    {610,445},
    {611,446},
    {612,408},
    {613,109},
    {614,113},
    //{699,0},
    {793,105},
    {794,106},
    {795,121},
    {796,108},
    {797,111},
    {798,110},
    {799,126},
    {907,123},
    {908,107},
    {909,312},
    {965,117},
    {999,101},
    {1326,302},
    //{15065,0},
    {15066,104},
    {15067,124},
    //{15068,0},
    {15069,125},
    {15070,128},
    {15071,130},
    {15072,131},
    {15073,127},
    {15074,119},
    //{15075,0},
    {15076,99},
    {15077,114},
    //{15078,0},
    //{15079,0},
    {15080,118},
    {15081,129},
    {15082,132},
    {15083,134},
    {15084,135},
    {15085,136},
    {15086,137},
    {15087,138},
    {15088,139},
    {15089,140},
    {15090,141},
    {15091,142},
    {15092,122},
    {15093,144},
    {15094,145},
    {15095,148},
    {15096,149},
    {15097,150},
    {15098,151},
    {15099,152},
    {15100,153},
    {15101,154},
    {15102,155},
    {15103,156},
    {15104,157},
    {15105,158},
    {15106,159},
    {15107,160},
    {15108,161},
    {15109,162},
    {15110,163},
    //{15111,0},
    //{15112,0},
    {15113,206},
    {15114,164},
    {15115,258},
    {15116,166},
    {15117,167},
    {15118,168},
    {15119,176},
    {15120,160},
    {15121,169},
    //{15122,0},
    //{15123,0},
    {15124,351},
    {15125,145},
    {15126,173},
    {15127,454},
    {15128,177},
    {15129,465},
    {15130,468},
    {15131,178},
    {15132,462},
    {15133,467},
    {15134,464},
    {15135,466},
    {15136,463},
    {15137,179},
    //{15138,0},
    {15139,458},
    {15140,180},
    {15141,181},
    {15142,301},
    //{15143,0},
    {15144,182},
    {15145,183},
    {15146,325},
    {15147,185},
    {15148,186},
    {15149,187},
    {15150,188},
    {15151,188},
    {15152,189},
    {15153,190},
    {15154,191},
    {15155,192},
    {15156,193},
    {15157,194},
    {15158,195},
    {15159,196},
    {15160,197},
    {15161,198},
    {15162,199},
    {15163,200},
    {15164,201},
    {15165,202},
    {15166,203},
    {15167,204},
    {15168,205},
    {15169,206},
    {15170,207},
    {15171,208},
    {15172,209},
    {15173,210},
    {15174,211},
    {15175,212},
    {15176,213},
    {15177,214},
    {15178,215},
    {15179,216},
    {15180,223},
    {15181,217},
    {15182,218},
    {15183,219},
    {15184,220},
    {15185,221},
    {15186,222},
    {15187,224},
    {15188,225},
    {15189,226},
    {15190,227},
    {15191,228},
    {15192,229},
    {15193,230},
    {15194,231},
    {15195,232},
    {15196,233},
    {15197,234},
    {15198,235},
    {15199,236},
    {15200,237},
    {15201,238},
    {15202,239},
    {15203,240},
    {15204,241},
    {15205,242},
    {15206,243},
    {15207,244},
    {15208,245},
    {15209,246},
    {15210,247},
    {15211,248},
    {15212,249},
    {15213,250},
    {15214,251},
    {15215,252},
    {15216,253},
    {15217,254},
    {15218,255},
    {15219,256},
    {15220,257},
    {15221,258},
    {15222,259},
    {15223,260},
    {15224,261},
    {15225,262},
    {15226,263},
    {15227,264},
    {15228,265},
    {15229,266},
    {15230,278},
    {15231,267},
    {15232,268},
    {15233,269},
    {15234,258},
    {15235,270},
    {15236,271},
    {15237,272},
    {15238,273},
    {15239,274},
    {15240,275},
    {15241,277},
    {15242,276},
    //{15243,0},
    //{15244,0},
    {15245,419},
    {15246,279},
    {15247,280},
    {15248,281},
    {15249,282},
    {15250,317},
    {15251,283},
    {15252,284},
    {15253,285},
    {15254,286},
    {15255,287},
    {15256,288},
    {15257,289},
    {15258,290},
    {15259,291},
    {15260,292},
    {15261,293},
    {15262,294},
    {15263,295},
    {15264,296},
    {15265,297},
    {15266,298},
    {15267,299},
    {15268,300},
    {15269,301},
    {15270,302},
    {15271,303},
    {15272,304},
    {15273,305},
    {15274,306},
    {15275,307},
    {15276,308},
    {15277,309},
    {15278,310},
    {15279,311},
    {15280,126},
    {15281,313},
    {15282,318},
    {15283,319},
    {15284,320},
    //{15285,0},
    {15286,321},
    {15287,322},
    {15288,323},
    {15289,324},
    {15290,325},
    //{15291,0},
    {15292,32},
    {15293,326},
    {15294,318},
    {15295,328},
    {15296,329},
    {15297,330},
    {15298,331},
    {15299,332},
    {15600,333},
    {15601,334},
    {15602,335},
    {15603,336},
    {15604,337},
    {15605,338},
    {15606,339},
    {15607,340},
    {15608,341},
    {15609,342},
    //{15610,0},
    {15611,348},
    {15612,343},
    {15613,344},
    {15614,346},
    {15615,466},
    {15616,345},
    {15617,347},
    {15618,349},
    {15619,350},
    {15620,350},
    {15621,351},
    {15622,352},
    {15623,353},
    {15624,354},
    {15625,355},
    {15626,356},
    {15627,357},
    {15628,358},
    {15629,359},
    {15630,360},
    {15631,363},
    {15632,361},
    {15633,364},
    {15634,365},
    {15635,363},
    {15636,366},
    {15637,367},
    {15638,368},
    {15639,369},
    {15640,370},
    {15641,371},
    {15642,372},
    {15643,373},
    //{15644,0},
    {15645,374},
    {15646,375},
    {15647,376},
    {15648,377},
    {15649,378},
    {15650,379},
    {15651,380},
    {15652,381},
    {15653,382},
    {15654,383},
    {15655,384},
    {15656,385},
    //{15657,0},
    {15658,385},
    {15659,385},
    {15660,386},
    {15661,387},
    {15662,388},
    {15663,377},
    //{15664,0},
    {15665,389},
    {15666,390},
    {15667,391},
    {15668,392},
    {15669,201},
    {15670,155},
    //{15671,0},
    //{15672,0},
    //{15673,0},
    //{15674,0},
    //{15675,0},
    {15676,106},
    {15677,63},
    {15678,321},
    {15679,433},
    {15680,315},
    {15681,357},
    {15682,295},
    //{15683,},
	{15684, 201},
	{15685, 366},
	{15686, 229},
	{15687, 168},
	{15689, 366},
	{15696, 366},
	{15697, 366},
	{17400, 366},
	{17408, 366},
	{17409, 366}
};

#include "systems/register.inc"

stock GetVehicleHandlingID(model_id)
{
    for(new i; i < sizeof g_vehicle_handling_id; i++)
    {
        if(g_vehicle_handling_id[i][0] != model_id) continue;

        return g_vehicle_handling_id[i][1];
    }
    return -1;
}

stock UpdateVehicleHandling(playerid, vehicleid)
{
    new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new modelid = GetVehicleData(vehicleid, V_MODELID);

    SetVehicleHandling(playerid, vehicleid, GetVehicleHandlingID(modelid), GetOwnableCarData(index, OC_PNEWMA_1), GetOwnableCarData(index, OC_PNEWMA_2), GetOwnableCarData(index, OC_ENGINE_ACCELERATION), GetOwnableCarData(index, OC_ENGINE_ACCELERATION) * 3, 0.0, GetOwnableCarData(index, OC_MAX_VELOCITY), 0.0);
	return 1;
}

stock ShowPlayerCasinoRollMenu(playerid)
{
	CEF_CREATE(playerid, 1, 2, "openInterface('CasinoRoll')");

	new query[128];
	format(query, sizeof(query), "interface('CasinoRoll').score = %d", QueryPlayerDonationBalance(playerid));
	CEF_CREATE(playerid, 1, 2, query);

	SetPlayerCameraPos(playerid, 214.4004, -282.7726, 1012.3878);
	SetPlayerCameraLookAt(playerid, 214.4717, -281.7766, 1012.4283);
}


stock StartFortuneWheel(playerid)
{
	new Float:pos[3];
    GetDynamicObjectRot(fortune_wheel_object, pos[0], pos[1], pos[2]);

    new Float:rX = pos[0] += 18.0;
    fortune_wheel_position += rX;
    MoveDynamicObject(fortune_wheel_object, 214.907, -276.686, 1012.76, 1.0, 0.000000, 0.000000 + fortune_wheel_position, 0.000000);
    //Streamer_SetIntData(STREAMER_TYPE_OBJECT, fortune_wheel_object, E_STREAMER_EXTRA_ID, OBJECT_FORTUNE);

    fortune_timer = SetTimer_("UpdateFortuneWheel", 10, 1, -1);

	fortune_wheel_player = playerid;

    rand_stop = RandomEx(700, 1000);

	SendClientMessage(playerid, 0xFFA500FF, "Колесо запущено. Списание с донат-счета: 50.00 руб.");
}


public: UpdateFortuneWheel()
{
    new Float:pos[3];
    GetDynamicObjectRot(fortune_wheel_object, pos[0], pos[1], pos[2]);

    if(fortune_wheel_position >= 360.0)
    {
        SetDynamicObjectRot(fortune_wheel_object, 0.0, 0.0, 0.0);
        fortune_wheel_position = 0.0;
    }
    new Float:rX = pos[0] += 1.0;
    fortune_wheel_position += rX;
    MoveDynamicObject(fortune_wheel_object, 214.907, -276.686, 1012.76, 1.0, 0.000000, 0.000000 + fortune_wheel_position, 0.000000);

    fortune_wheel_status++;
    if(fortune_prize >= 20.0) fortune_prize = 1.0;
    else fortune_prize += 0.5;

    if(fortune_wheel_status >= rand_stop)
    {
        KillTimer(fortune_timer);
        fortune_wheel_status = 0;
        new Float:prize = floatdiv(fortune_wheel_position, 18.0);
        new result = floatround(prize, floatround_round);

		fortune_prize_id = result;

		ShowPlayerPrizeRoll(fortune_wheel_player, fortune_prize_id);
    }
    if(fortune_wheel_status == RandomEx(100, 150) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 11, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(200, 260) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 12, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(300, 380) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 13, 1, -1);
    }
    if(fortune_wheel_status == RandomEx(400, 420) )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 14, 1, -1);
    }
    if(fortune_wheel_status == 420 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 15, 1, -1);
    }
    if(fortune_wheel_status == 430 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 16, 1, -1);
    }
    if(fortune_wheel_status == 440 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 18, 1, -1);
    }
    if(fortune_wheel_status == 470 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 20, 1, -1);
    }
    if(fortune_wheel_status == 550 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 25, 1, -1);
    }
    if(fortune_wheel_status == 600 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 28, 1, -1);
    }
    if(fortune_wheel_status == 650 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 30, 1, -1);
    }
    if(fortune_wheel_status == 670 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 32, 1, -1);
    }
    if(fortune_wheel_status == 680 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 35, 1, -1);
    }
    if(fortune_wheel_status == 690 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 40, 1, -1);
    }
    if(fortune_wheel_status == 695 )
    {
        KillTimer(fortune_timer);
        fortune_timer = SetTimer_("UpdateFortuneWheel", 42, 1, -1);
    }

    return 1;
}

enum E_PRIZE_STRUCT
{
	E_PRIZE_ID,
	E_PRIZE_NAME[13]
}


new const g_prize_id[21][E_PRIZE_STRUCT] =
{
	{0, "Iridium VIP"},
	{5, "Деньги"},
	{2, "Игровой опыт"},
	{3, "Автомобиль"},
	{0, "Iridium VIP"},
	{5, "Деньги"},
	{1, "Desert Eagle"},
	{4, "Одежда"},
	{5, "Деньги"},
	{3, "Автомобиль"},
	{2, "EXP"},
	{4, "Одежда"},
	{1, "Desert Eagle"},
	{5, "Деньги"},
	{2, "Игровой опыт"},
	{4, "Одежда"},
	{0, "Iridium VIP"},
	{4, "Одежда"},
	{3, "Автомобиль"},
	{1, "Desert Eagle"},
	{0, "Iridium VIP"}
};

stock ShowPlayerPrizeRoll(playerid, prize_id)
{
	STRING_GLOBAL[0] = EOS;

	new item_id;
	new prize_name[32];
	new param_value = -1;

	new const car_id[37] = {
		15077, 15081, 15084, 15108, 15126, 15148, 15152, 15163, 15171, 15172, 15181, 15220, 15235, 15246,
		15259, 15262, 15271, 15272, 15274, 15600, 15602, 15603, 15605, 419, 436, 445, 474, 479, 491, 533,
		546, 555, 560, 573, 589, 699, 799
	};
	new const skin_id[11] = {
		217, 202, 91, 117, 193, 295, 185, 263, 110, 120, 12
	};
	new const money_prize[21] = {
		10000, 15000, 25000, 35000, 55000, 100000, 250000, 350000, 400000, 450000,
		500000, 550000, 700000, 850000, 1500000, 2000000, 3500000, 4000000, 5000000, 6000000, 7000000
	};

	if(g_prize_id[prize_id][E_PRIZE_ID] == 3) item_id = random(37);
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 4) item_id = random(11);
	else item_id = 0;

	if(g_prize_id[prize_id][E_PRIZE_ID] == 5)
	{
		fortune_wheel_amount = money_prize[RandomEx(0, 20)];
		format(prize_name, 32, "%s $%d", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 2)
	{
		fortune_wheel_amount = RandomEx(1, 7);
		format(prize_name, 32, "%s %d exp", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 1)
	{
		fortune_wheel_amount = RandomEx(12, 150);
		format(prize_name, 32, "%s %d пт.", g_prize_id[prize_id][E_PRIZE_NAME], fortune_wheel_amount);
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 3)
	{
		fortune_wheel_amount = car_id[item_id];
		param_value = car_id[item_id];
		format(prize_name, 32, "%s", GetVehicleInfo(car_id[item_id], VI_NAME));
	}
	else if(g_prize_id[prize_id][E_PRIZE_ID] == 4)
	{
		fortune_wheel_amount = skin_id[item_id];
		param_value = skin_id[item_id];
		format(prize_name, 32, "Одежда");
	}
	else
	{
		format(prize_name, 32, "%s", g_prize_id[prize_id][E_PRIZE_NAME]);
	}

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoRoll').showResult(%d, '%s', 25, %d)", g_prize_id[prize_id][E_PRIZE_ID], prize_name, param_value);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
}

public: OnPlayerFortuneWheelMenu(playerid, fortun)
{
	switch(fortun)
	{
		case 1:
		{
			if(ActiveRoll[playerid] == 1) return 1;
			if(fortune_wheel_active == true) return SCM(playerid, 0xCECECEFF, "Колесо сейчас занято, подождите.");

			if(GetPlayerData(playerid, P_FORTUNE_WHEEL) == 0)
			{
				if(QueryPlayerDonationBalance(playerid) < FORTUNE_WHEEL_PRICE) return SendClientMessage(playerid, 0x66CC00FF, "У Вас недостаточно средств");
				ProcessPlayerCredit(playerid, -FORTUNE_WHEEL_PRICE, "Рулетка", true, true);
				SetPVarInt(playerid, "sell_roll_bet", 25);
			}
			else
			{
				SetPlayerData(playerid, P_FORTUNE_WHEEL, 0);
				UpdatePlayerDatabaseInt(playerid, "ruletka", 0);
				SetPVarInt(playerid, "sell_roll_bet", 0);
			}

			fortune_wheel_active = true;
			
			ActiveRoll[playerid] = 1;

			StartFortuneWheel(playerid);

			AddPlayerAchiv(playerid, 18);

			new query[128];
			format(query, sizeof(query), "interface('CasinoRoll').score = %d", QueryPlayerDonationBalance(playerid));
			CEF_CREATE(playerid, 1, 2, query);

			CEF_CREATE(playerid, 1, 2, "window.playSound('casino/fortune_wheel/moved.wav')");

			return 1;
		}
		case 2:
		{
			if(g_player[playerid][P_FORTUNE_KD] > gettime()) return 1;

			if(fortune_prize_id == 1 || fortune_prize_id == 5 || fortune_prize_id == 8 || fortune_prize_id == 13)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");
				GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, fortune_wheel_amount, 0);
			}
			if(fortune_prize_id == 2 || fortune_prize_id == 10 || fortune_prize_id == 14)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на Ваш аккаунт.");
				AddPlayerData(playerid, P_EXP, +, fortune_wheel_amount);
			}
			if(fortune_prize_id == 3 || fortune_prize_id == 9 || fortune_prize_id == 18)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");

				new query[64];
				format(query, sizeof query, "Транспорт[№%d]", fortune_wheel_amount),
				GivePlayerMyPrizes(playerid, query, 3, fortune_wheel_amount, 0, 1, -1);
			}
			if(fortune_prize_id == 6 || fortune_prize_id == 12 || fortune_prize_id == 19)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на Ваш аккаунт.");
				GivePlayerWeapon(playerid, 24, fortune_wheel_amount);
			}
			if(fortune_prize_id == 7 || fortune_prize_id == 11 || fortune_prize_id == 15 || fortune_prize_id == 17)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Награда была добавлена на 'Мои награды'.");
				
				new query[64];
				format(query, sizeof query, "Одежда[№%d]", fortune_wheel_amount),
				GivePlayerMyPrizes(playerid, query, 4, fortune_wheel_amount, 0, 1, 0);
			}

			fortune_wheel_active = false;
			
			ActiveRoll[playerid] = 0;

			g_player[playerid][P_FORTUNE_KD] = gettime() + 20;

			return 1;
		}
		case 3:
		{
			if(g_player[playerid][P_FORTUNE_KD] > gettime()) return 1;

			ProcessPlayerCredit(playerid, GetPVarInt(playerid, "sell_roll_bet"), "Возврат с рулетки");
			fortune_wheel_active = false;

			if(GetPVarInt(playerid, "sell_roll_bet") == 25) SCM(playerid, 0x66CC00FF, "Вы отказались от награды и вернули часть средств: 25.00 руб.");

			SetPVarInt(playerid, "sell_roll_bet", 0);

			ActiveRoll[playerid] = 0;

			new query[128];
			format(query, sizeof(query), "interface('CasinoRoll').score = %d", QueryPlayerDonationBalance(playerid));
			CEF_CREATE(playerid, 1, 2, query);

			g_player[playerid][P_FORTUNE_KD] = gettime() + 20;

			return 1;

		}
		case 4:
		{
			if(ActiveRoll[playerid] == 0)
			{
                CEF_CREATE(playerid, 1, 2, "closeInterface('CasinoRoll')");
			    SetCameraBehindPlayer(playerid);
			}
			else SendClientMessage(playerid, 0x66CC00FF, "Вы уже крутите рулетку");

			return 1;
		}
	}
	return 1; // 1 - прокрутка 2 - оставить 3 - вернуть 4 - закрыть
}

#define MAX_PROMOCODE_ACTIVATION 500

#define GetPlayerPromo(%0,%1) 		    g_player_promocode[%0][%1]
#define SetPlayerPromo(%0,%1,%2)		g_player_promocode[%0][%1] = %2
#define AddPlayerPromo(%0,%1,%2,%3)	    g_player_promocode[%0][%1] %2= %3

new g_player_load_promo[MAX_PLAYERS];

enum E_PROMOCODE_ACTIVATION
{
    PA_ID,
    PA_OWNER_ID,
    PA_NAME[32],
    PA_TIME,
    PA_STATUS,
};
new g_player_promocode[MAX_PROMOCODE_ACTIVATION][E_PROMOCODE_ACTIVATION];


stock DestroyPlayerPromo(playerid)
{
	for(new i; i < MAX_PROMOCODE_ACTIVATION; i++)
	{
		if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		DestroyPromo(i);
	}
}

stock DestroyPromo(id)
{
    SetPlayerPromo(id, PA_ID, 		0);
    SetPlayerPromo(id, PA_OWNER_ID, 	0);
    SetPlayerPromo(id, PA_TIME, 	    0);
    SetPlayerPromo(id, PA_STATUS, 	0);
}
stock GetFreePromoID()
{
	for(new i; i < MAX_PROMOCODE_ACTIVATION; i ++)
	{
		if(GetPlayerPromo(i, PA_ID) != 0) continue;
		if(GetPlayerPromo(i, PA_OWNER_ID) != 0) continue;
		return i;
	}

	return -1;
}

stock CreatePlayerPromo(playerid, name[], time)
{
    new query[124];
    new Cache: result;

    mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (owner_id, name, time, type, status) VALUES (%d, '%s', %d, 1, 1)", GetPlayerAccountID(playerid), name, time);
    result = mysql_query(mysql, query);

    new i = GetFreePromoID();

    SetPlayerPromo(i, PA_ID, 		cache_insert_id());
    cache_delete(result);

    SetPlayerPromo(i, PA_OWNER_ID, 	GetPlayerAccountID(playerid));
    SetPlayerPromo(i, PA_TIME, 	    time);
    SetPlayerPromo(i, PA_STATUS, 	1);

    format(g_player_promocode[i][PA_NAME], 32, "%s", name);
    return true;
}

public: LoadPlayerPromocode(playerid)
{
	new	Cache: result;
	new query[96];

	format(query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id=%d AND type=1 AND (status=1 OR status=0)", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(rows > MAX_PROMOCODE_ACTIVATION)
	{
		rows = MAX_PROMOCODE_ACTIVATION;
		print("[PlayerPromo] Привышен лимит предметов (MAX_PROMOCODE_ACTIVATION)");
	}

	if(rows)
	{
		for(new idx; idx < rows; idx++)
		{	
			new i = GetFreePromoID();

			SetPlayerPromo(i, PA_ID, 		cache_get_field_content_int(idx, "id"));
			SetPlayerPromo(i, PA_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
			SetPlayerPromo(i, PA_TIME, 	    cache_get_field_content_int(idx, "time"));
            SetPlayerPromo(i, PA_STATUS, 	cache_get_field_content_int(idx, "status"));

			cache_get_field_content(idx, "name", g_player_promocode[i][PA_NAME], mysql, 32);
            g_player_load_promo[playerid]++;
		}
	}
	cache_delete(result);
	//printf("[PlayerPromo] Промокоды игрока %s загружены: %d", GetPlayerNameEx(playerid), rows);
	return 1;
}

//#include "systems/anti_cheat.inc"

stock GetPlayerTimePromo(playerid)
{
    for(new i; i < MAX_PROMOCODE_ACTIVATION; i ++)
	{
		if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerPromo(i, PA_TIME) <= 0) continue;
        if(GetPlayerPromo(i, PA_STATUS) != 1) continue;

        SetPlayerPromo(i, PA_TIME, GetPlayerPromo(i, PA_TIME) - 1);

        if(GetPlayerPromo(i, PA_TIME) > 0)
        {
            new query[120];
            format(query, sizeof query, "UPDATE promocode_activations SET time='%d' WHERE id='%d'", GetPlayerPromo(i, PA_TIME), GetPlayerPromo(i, PA_ID));
            mysql_query(mysql, query, false);
        }
        else
        {
            SetPlayerPromo(i, PA_TIME, 0);
            SetPlayerPromo(i, PA_STATUS, 0);

            new query[120];
            format(query, sizeof query, "UPDATE promocode_activations SET time=0, status=0 WHERE id='%d'", GetPlayerPromo(i, PA_ID));
		    mysql_query(mysql, query, false);
        }
	}
    return true;
}

stock GetPromoPrize(playerid)
{
    for(new idx; idx < MAX_PROMOCODE_ACTIVATION; idx ++)
	{
		if(GetPlayerPromo(idx, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerPromo(idx, PA_STATUS) != 0) continue;

        new query[94],
        type_prize[6],
		id_prize[6],
		count_prize[6],
        Cache: result;

        format(query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' LIMIT 1", GetPlayerPromo(idx, PA_NAME));
		result = mysql_query(mysql, query, true);

		if(cache_num_rows())
		{
			type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
			id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
			count_prize[0] = cache_get_field_content_int(0, "count_prize_1");

			type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
			id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
			count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
			
			type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
			id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
			count_prize[2] = cache_get_field_content_int(0, "count_prize_3");

			type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
			id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
			count_prize[3] = cache_get_field_content_int(0, "count_prize_4");

			type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
			id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
			count_prize[4] = cache_get_field_content_int(0, "count_prize_5");

			type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
			id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
			count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
		}

		cache_delete(result);

        for(new i; i < MAX_PRIZES_CODE; i++)
		{	
			if(type_prize[i] == 1) 
            {
                GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0);
            }
			if(type_prize[i] == 2) 
            {
                GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0);
            }
			if(type_prize[i] == 3) 
            {
                AddPlayerData(playerid, P_EXP, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
            }
			if(type_prize[i] == 4) 
            {
                format(query, sizeof query, "%s", ItemsInfo[id_prize[i]][i_item_name]),
				GivePlayerMyPrizes(playerid, query, 8, id_prize[i], 0, count_prize[i], 0);
            }
			if(type_prize[i] == 5) 
            {
                format(query, sizeof query, "Транспорт[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 3, id_prize[i], 0, 1, -1);
            }
			if(type_prize[i] == 6) 
            {
                AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
            }
			if(type_prize[i] == 7) 
            {
                AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
            }
			if(type_prize[i] == 8) 
            {
                AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
            }
			if(type_prize[i] == 9) 
            {
                AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
            }
			if(type_prize[i] == 10) 
            {
                AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]);
                UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
            }
			if(type_prize[i] == 11) 
            {
                format(query, sizeof query, "Одежда[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 4, id_prize[i], 0, 1, 0);
            }
            if(type_prize[i] == 12) 
            {
                format(query, sizeof query, "Аксессуар[№%d]", id_prize[i]),
				GivePlayerMyPrizes(playerid, query, 6, id_prize[i], 0, 1, count_prize[i]);
            }
            if(type_prize[i] == 13 && id_prize[i] == 1) 
            {
                format(query, sizeof query, "Купон для выхода из тюрьмы Деморган (%d мин)", count_prize[i]);
                GivePlayerMyPrizes(playerid, query, 16, count_prize[i], 0, 0, 0);
            }
		}

        SCMF(playerid, 0x64be2fFF, "Вы получаете бонус за использование промокода \"%s\"", GetPlayerPromo(idx, PA_NAME));
        SCM(playerid, 0xFFFFFFFF, "Зайдите в {4a92eb}Игровое меню -> мои награды {FFFFFF}чтобы забрать вещи");

        format(query, sizeof query, "UPDATE promocode_activations SET status=-1 WHERE id=%d", GetPlayerPromo(idx, PA_ID));
		mysql_query(mysql, query, false);
        DestroyPromo(idx);
    }
    return true;
}

CMD:plist(playerid)
{
    string_dialog = "Промокод\tНаграда\tДоступность\tДо выполнения\n";
    for(new i, count; i < MAX_PROMOCODE_ACTIVATION; i ++)
	{
		if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

        new query[124];

        if(GetPlayerPromo(i, PA_TIME) > 3600) format(query, sizeof query, "{ffffff}%s\tПредмет\tбез ограничений\t{d8d0ab}%2d часов\n", GetPlayerPromo(i, PA_NAME), GetPlayerPromo(i, PA_TIME) / 3600);
        else if(GetPlayerPromo(i, PA_TIME) > 60) format(query, sizeof query, "{ffffff}%s\tПредмет\tбез ограничений\t{d8d0ab}%2d минут\n", GetPlayerPromo(i, PA_NAME), GetPlayerPromo(i, PA_TIME) / 60);
        else if(GetPlayerPromo(i, PA_TIME) > 0) format(query, sizeof query, "{ffffff}%s\tПредмет\tбез ограничений\t{d8d0ab}%d секунд\n", GetPlayerPromo(i, PA_NAME), GetPlayerPromo(i, PA_TIME));
        else format(query, sizeof query, "{ffffff}%s\tПредмет\tбез ограничений\t{d8d0ab}готов к получению\n", GetPlayerPromo(i, PA_NAME));
        strcat(string_dialog, query);
        
        SetPlayerListitemValue(playerid, count ++, i);
    }
    IntfDialogCallRemote(playerid, DIALOG_PROMO_LIST, DIALOG_STYLE_TABLIST_HEADERS,"{FFFFFF}Активированные промокоды",string_dialog,"", "Закрыть", 0, 0, "Нажмите на выполненный промокод для получения награды");

    return true;
}

stock OnPlayerOpenMainMenuPromocodes(playerid)
{
    new i;
    new promocodesStr[2048];
    new temp[512];
    new query[256];
    new promoCount = 0;

    promocodesStr[0] = EOS;
    strcat(promocodesStr, "[");

    for(i = 0; i < MAX_PROMOCODE_ACTIVATION; i++)
    {
        if(GetPlayerPromo(i, PA_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerPromo(i, PA_STATUS) != 1) continue;

        new name[246];
		format(name, sizeof(name), "%s", GetPlayerPromo(i, PA_NAME));
        new time = GetPlayerPromo(i, PA_TIME);

        format(query, sizeof(query), "SELECT * FROM prizes_code WHERE name='%s' LIMIT 1", name);
        new Cache:result = mysql_query(mysql, query, true);
        
        if(cache_num_rows())
        {
            new prizesStr[512];
            prizesStr[0] = EOS;

            for(new j = 1; j <= 6; j++)
            {
				new field_name[32];

                format(field_name, sizeof(field_name), "type_prize_%d", j);
                new type_prize = cache_get_field_content_int(0, field_name);

				format(field_name, sizeof(field_name), "id_prize_%d", j);
				new id_prize = cache_get_field_content_int(0, field_name);

                format(field_name, sizeof(field_name), "count_prize_%d", j);
                new count_prize = cache_get_field_content_int(0, field_name);

                if(type_prize == 0) continue;

                if(strlen(prizesStr) > 0) strcat(prizesStr, ",");

                new prizeName[64];
                new prizeDesc[64];
				new send_type;

				//size - Это тип предмета (0 - значек вопроса | 1 - оружие | 2 - ехp | 3 - авто | 4 - скин | 5 - деньги | 6 - аксессуар | 7 - вип | 8 - предмет | 9 - патроны | 10 - донат)

                switch(type_prize)
                {
                    case 1:{
						format(prizeName, sizeof(prizeName), "Деньги");
                        format(prizeDesc, sizeof(prizeDesc), "%d руб", count_prize);
						send_type = 5;
					}
					case 2:{
					    format(prizeName, sizeof(prizeName), "Донат");
                        format(prizeDesc, sizeof(prizeDesc), "%d DCOINS", count_prize);
						send_type = 10;
				    }
					case 3:{
					    format(prizeName, sizeof(prizeName), "EXP");
                        format(prizeDesc, sizeof(prizeDesc), "%d ед.", count_prize);
						send_type = 2;
				    }
					case 4:{
					    format(prizeName, sizeof(prizeName), "%s", ItemsInfo[id_prize][i_item_name]);
                        format(prizeDesc, sizeof(prizeDesc), "%d ед.", count_prize);
						send_type = 8;
				    }
                }

                format(temp, sizeof(temp), "[%d,%d,0,0,\"%s\",\"%s\"]", send_type, count_prize, prizeName, prizeDesc);
                strcat(prizesStr, temp);
            }

            cache_delete(result);

            if(promoCount > 0) strcat(promocodesStr, ",");

            format(temp, sizeof(temp), "[%d,\"%s\",[%s]]", time * 1000, name, prizesStr);
            strcat(promocodesStr, temp);

            promoCount++;
        }
        else
        {
            cache_delete(result);
        }
    }

    strcat(promocodesStr, "]");

    STRING_GLOBAL[0] = EOS;
    format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface(\"MainMenu\").updatePromocodes(%s);", promocodesStr);

    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    return 1;
}

enum E_QUEST_PRIZE_STRUCT
{
    Q_PRIZE_TYPE,
    Q_PRIZE_ID,
    Q_PRIZE_INDX,
    Q_PRIZE_NAME[32],
    Q_PRIZE_PRICE
}

new g_quest_prize[6][E_QUEST_PRIZE_STRUCT] =
{
    {6, 15885, 3, "Ушки кролика", 180},
    {6, 15876, 2, "Маска кролика", 225},
    {6, 15875, 2, "Маска петушка", 225},
    {6, 16994, 5, "Бананка с зайцем", 500},
    {6, 16993, 8, "Рюкзак золотое яйцо", 675},
    {4, 17049, 0, "Костюм акулы", 1200}
};

#define MAX_EASTER	40

new sphereQuestEaster[MAX_EASTER];
new sphereQuestEasterStatus[MAX_EASTER];

new Float:g_quest_pos[MAX_EASTER][3] = 
{
    {405.8157,1530.2253,12.1411},
    {247.9012,1572.3905,11.7500},
    {34.7200,1886.3428,9.4134},
    {-111.9273,1417.9915,15.2352},
    {-378.7231,1151.4092,12.0010},
    {-1046.7841,2153.6995,38.4606},
    {-725.6577,2491.8669,39.9467},
    {940.8427,1181.5464,10.5770},
    {31.3997,353.8857,11.2723},
    {-212.2979,531.3956,12.7327},
    {-530.1825,176.3043,6.7896},
    {-2277.7302,-236.2278,23.2009},
    {-2345.5886,105.4481,21.3281},
    {-2737.1858,676.2784,10.5865},
    {-2535.7114,1266.0731,15.8215},
    {-2572.8293,1664.8823,53.1848},
    {-2433.7471,2084.8296,54.4129},
    {-2521.6775,2643.1724,46.1381},
    {-2448.9529,3006.0869,36.4623},
    {-2215.4487,2876.5684,5.9972},
    {-503.6184,3378.4810,29.6006},
    {802.5385,2288.6743,12.3480},
    {1636.3425,2202.1711,14.3863},
    {1864.1917,1890.0414,13.2155},
    {1660.2444,1704.3616,16.8935},
    {1314.8208,2234.1863,6.1997},
    {1164.6685,2955.5818,3.7632},
    {2168.8540,2380.7830,13.5938},
    {2713.4922,706.9277,14.1873},
    {3138.0042,-52.9769,5.1772},
    {2440.7419,-637.3056,12.0020},
    {2730.8159,-1362.3979,7.9387},
    {2669.9509,-2195.1055,21.8275},
    {2682.5786,-2535.1570,21.9636},
    {2442.1233,-2313.3123,21.9721},
    {1904.9688,-1838.0099,34.8091},
    {1763.3615,-2224.3879,10.8341},
    {1759.5582,-2503.7095,10.9982},
    {1856.9648,-2867.1038,5.0086},
    {541.3211,-2458.9744,34.7706}
};

stock CreateQuestEaster()
{
	for(new i; i < sizeof g_quest_pos; i++)
	{
		new randomtype = RandomEx(1, 2);

		sphereQuestEasterStatus[i] = 0;

		if(randomtype == 1) 
		{
			sphereQuestEaster[i] = CreateDynamicSphere(g_quest_pos[i][0], g_quest_pos[i][1], g_quest_pos[i][2], 4.5, -1, -1);
			sphereQuestEasterStatus[i] = 1;
		}
	}
}

stock GetQuestEaster()
{
	new status;
	for(new i; i < sizeof g_quest_pos; i++)
	{
		if(sphereQuestEasterStatus[i] == 0) continue;
		status = 1;
	}
	
	if(status == 1)
	{
		CreateQuestEaster();
	}
}

stock OpenQuestEasterPhone(playerid)
{
	new query[148];

	STRING_GLOBAL[0] = EOS;
	for(new i; i < sizeof g_quest_pos; i++)
	{
		if(sphereQuestEasterStatus[i] != 1) continue;

		format(query, sizeof query, "[%f,%f],", g_quest_pos[i][0], g_quest_pos[i][1]);
		strcat(STRING_GLOBAL, query);
	}
	strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

	new fmt_text[560];
	for(new i; i < sizeof g_quest_prize; i++)
	{
		format(query, sizeof query, "[\"%s\",%d,%d,%d],", g_quest_prize[i][Q_PRIZE_NAME], g_quest_prize[i][Q_PRIZE_TYPE], g_quest_prize[i][Q_PRIZE_ID], g_quest_prize[i][Q_PRIZE_PRICE]);
		strcat(fmt_text, query);
	}
	strdel(fmt_text, strlen(fmt_text) - 1, strlen(fmt_text));

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('easter').onServerResponse(0, '[%d,5,%d,5,1,10,0,[%s],[%s]]')", GetPlayerData(playerid, P_EASTER), gettime(), STRING_GLOBAL, fmt_text);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	return true;
}

stock PhoneMinigame_OnReceivedEvent(playerid, type[], event[], status)
{
	printf("PhoneMinigame_OnReceivedEvent(playerid, %s, %s, %d)", type, event, status);

	if(strcmp(event, "buy_item", true) == 0)
	{
		if(GetPlayerData(playerid, P_EASTER) < g_quest_prize[status][Q_PRIZE_PRICE]) return GameText(playerid, "~r~У вас недостаточно~n~очков: `Конфеты`", 4000, 3), SCM(playerid, 0x73aefdFF, "У вас недостаточно очков: \"Конфеты\"");

		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 4000, 3);

		if(g_quest_prize[status][Q_PRIZE_TYPE] == 6) GiveAcs(playerid, g_quest_prize[status][Q_PRIZE_ID], g_quest_prize[status][Q_PRIZE_INDX]);
		if(g_quest_prize[status][Q_PRIZE_TYPE] == 4) GiveSkin(playerid, g_quest_prize[status][Q_PRIZE_ID]);

		AddPlayerData(playerid, P_EASTER, -, g_quest_prize[status][Q_PRIZE_PRICE]);
		
		new query[64];
		format(query, sizeof query, "~r~-%s очков: `Конфеты`", formatInt(g_quest_prize[status][Q_PRIZE_PRICE]));
		GameText(playerid, query, 3000, 2);
	}
	if(strcmp(event, "take_point", true) == 0)
	{
		new countEaster = RandomEx(4,19);

		new query[94];
		format(query, sizeof query, "interface('Phone').getApp('easter').onServerResponse(2, '[1,%d]')", countEaster);
		CEF_CREATE(playerid, 1, 2, query);

		GameText(playerid, "~b~Вы нашли бонус: `Конфеты`", 4000, 3);

		AddPlayerData(playerid, P_EASTER, +, countEaster);

		for(new i; i < sizeof sphereQuestEaster; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.5, g_quest_pos[i][0], g_quest_pos[i][1], g_quest_pos[i][2]))
			{
				sphereQuestEasterStatus[i] = 0;
				GetQuestEaster();
				break;
			}
		}
		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			
			if(GetPVarInt(i, "Phone_open") != 1) continue;
	
			OpenQuestEasterPhone(i);
		}
	}
	return true;
}
#define MAX_MONEY_SYMBOLS	23

new player_int_count_1[MAX_PLAYERS][MAX_MONEY_SYMBOLS];
new player_int_count_2[MAX_PLAYERS][MAX_MONEY_SYMBOLS];

new player_length_count_1[MAX_PLAYERS];
new player_length_count_2[MAX_PLAYERS];

stock EditCountSInteger(playerid, count_1[], count_2[])
{
	new fmt_text[MAX_MONEY_SYMBOLS];
	if(strlen(count_1) > 0 && strlen(count_1) < 18 && strlen(count_2) < 18)
	{
		new status = 1;

		if(strfind(count_2,"-") != -1) 
		{
			status = 0;
			strdel(count_2, 0, 1);
		}
		
		SettingsCountSInteger(playerid, count_1, count_2);
		
		if(status == 1)
		{
			if(player_length_count_1[playerid] >= player_length_count_2[playerid])
			{
				for(new i; i < player_length_count_1[playerid]; i++)
				{
					if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] <= 9)
					{
						player_int_count_1[playerid][i] = player_int_count_1[playerid][i] + player_int_count_2[playerid][i];
					}
					else if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] > 9)
					{
						player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + player_int_count_2[playerid][i]) - 10;
						if(player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]++;
						player_int_count_1[playerid][i + 1]++;
					}
				}
			}
			else
			{
				for(new i; i < player_length_count_2[playerid]; i++)
				{
					if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] <= 9) 
					{
						player_int_count_1[playerid][i] = player_int_count_2[playerid][i] + player_int_count_1[playerid][i];
					}
					else if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] > 9)
					{
						player_int_count_1[playerid][i] = (player_int_count_2[playerid][i] + player_int_count_1[playerid][i]) - 10;
						if(player_length_count_2[playerid] == i + 1) player_length_count_2[playerid]++;
						player_int_count_1[playerid][i + 1]++;
					}
				}
				player_length_count_1[playerid] = player_length_count_2[playerid];
			}
		}
		else if(status == 0)
		{
			new get_count_int = GetCountSInteger(playerid);
			
			if(get_count_int != 0)
			{
				if(get_count_int == 1)
				{
					for(new i; i < player_length_count_1[playerid]; i++)
					{
						if(player_int_count_1[playerid][i] >= player_int_count_2[playerid][i])
						{
							player_int_count_1[playerid][i] = player_int_count_1[playerid][i] - player_int_count_2[playerid][i];
							
							if(player_int_count_1[playerid][i] == 0 && player_length_count_1[playerid] == i) player_length_count_1[playerid]--;
						}
						else if(player_int_count_1[playerid][i] < player_int_count_2[playerid][i])
						{
							player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + 10) - player_int_count_2[playerid][i];
							player_int_count_1[playerid][i + 1]--;
							if(player_int_count_1[playerid][i + 1] == 0 && player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]--;
						}
					}
					new i = player_length_count_1[playerid];
					while(0 < i)
					{
						i--;
						if(player_int_count_1[playerid][i] == 0) player_length_count_1[playerid]--;
						else break;
					}
				}
				else if(get_count_int == 2)
				{
					player_int_count_1[playerid][0] = 0;
					player_length_count_1[playerid] = 1;
				}
			}
		}

		format(fmt_text, MAX_MONEY_SYMBOLS, "%s", SettingsCountSString(playerid));

		return fmt_text;
	}
	return fmt_text;
}
stock SettingsCountSString(playerid)
{
	new integer_count[MAX_MONEY_SYMBOLS];
	for(new i; i < player_length_count_1[playerid]; i ++)
	{
		new count_id = player_length_count_1[playerid] - 1;
		new query[MAX_MONEY_SYMBOLS];
		format(query, sizeof query, "%d", player_int_count_1[playerid][count_id - i]);
		strcat(integer_count, query);
	}
	return integer_count;
}
stock SettingsCountSInteger(playerid, count_1[], count_2[])
{
	for(new i; i < MAX_MONEY_SYMBOLS; i++)
	{
		player_int_count_1[playerid][i] = 0;
		player_int_count_2[playerid][i] = 0;
	}

	new format_count[MAX_MONEY_SYMBOLS];

	player_length_count_1[playerid] = strlen(count_1);

	for(new i; i < player_length_count_1[playerid]; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_1);

		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		player_int_count_1[playerid][i] = strval(format_count);
	}

	player_length_count_2[playerid] = strlen(count_2);

	for(new i; i < player_length_count_2[playerid]; i ++)
	{
		format(format_count, sizeof format_count, "%s", count_2);

		strdel(format_count, 0, strlen(format_count) - (i + 1));
		strdel(format_count, strlen(format_count) - i, strlen(format_count));
		player_int_count_2[playerid][i] = strval(format_count);
	}
}

stock GetCountSInteger(playerid)
{
    if(player_length_count_1[playerid] < player_length_count_2[playerid]) return 0;

    new id = player_length_count_1[playerid];
    while(0 < id)
    {
        id--;

        if(player_int_count_1[playerid][id] > player_int_count_2[playerid][id]) return 1; 
        else if(player_int_count_1[playerid][id] < player_int_count_2[playerid][id]) return 0;
    }
    if(id == 0) return 2;
 
    return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stock SetILPlayerInt(playerid, count_1[], count_2)
{
	new query[MAX_MONEY_SYMBOLS];

	format(query, sizeof query, "%d", count_2);
	format(query, sizeof query, "%s", EditCountSInteger(playerid, count_1, query));
	return query;
	
}

stock SetILPlayerStr(playerid, count_1[], count_2[])
{
	new query[MAX_MONEY_SYMBOLS];
	format(query, sizeof query, "%s", EditCountSInteger(playerid, count_1, count_2));
	return query;
}

stock VerifyIntString(count_1[], count_2)
{
	new query[MAX_MONEY_SYMBOLS];
	format(query, sizeof query, "%d", count_2);

	if(IsILStringStatus(count_1, query)) return 1;
	else return 0;
}
stock GetILPlayerStr(count_1[], count_2[])
{
	if(IsILStringStatus(count_1, count_2)) return 1;
	else return 0;
}

stock IsILStringStatus(const count_1[], const count_2[])
{
    new len1 = strlen(count_1);
    new len2 = strlen(count_2);

    new start1 = 0;
    while(start1 < len1 - 1 && count_1[start1] == '0') start1++;
    new start2 = 0;
    while(start2 < len2 - 1 && count_2[start2] == '0') start2++;

    len1 -= start1;
    len2 -= start2;

    if(len1 < len2) return false;
    if(len1 > len2) return true;

    for(new i = 0; i < len1; i++)
    {
        if(count_1[start1 + i] > count_2[start2 + i]) return true;
        if(count_1[start1 + i] < count_2[start2 + i]) return false;
    }

    return true;
}

//проверка на лишние символы
stock IsILNumeric(const str[])
{
    new
        inc,
		status,
        num = strlen(str);

	if(num > 17) return 0;

    if(num == 0 || num == 1 && (str[0] == '-' || str[0] == '+'))
        return 0;

    for(; inc < num; inc++)

		if((str[inc] == '-' && inc != 0))
			return 0;

		else if(str[inc] == '+')
			return 0; 

       	else if(('0' <= str[inc] <= '9' && str[inc] != '-' && str[inc] != '+'))
            status = 1; 
		
		else 
			return 0; 
                
    return status;
}

//форматирование стринга с разделением на точки
stock formatStr(amount[], delimiter[2] = ".")
{
	new money[32];
	if(strlen(amount) < 18)
	{
		new int_string[MAX_MONEY_SYMBOLS];
		format(int_string, sizeof(int_string), "%s", amount);

		new status;

		if(strfind(int_string,"-") != -1) strdel(int_string, 0, 1), status = 1;

		new value = strlen(int_string);

		switch(value)
		{
			case 4..6:
				strins(int_string, delimiter, value - 3, 1);

			case 7..9:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1);

			case 10..12:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1);
			case 13..15:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1),
				strins(int_string, delimiter, value - 12, 1);
			case 16..18:
				strins(int_string, delimiter, value - 3, 1),
				strins(int_string, delimiter, value - 6, 1),
				strins(int_string, delimiter, value - 9, 1),
				strins(int_string, delimiter, value - 12, 1),
				strins(int_string, delimiter, value - 15, 1);
		}

		if(status == 1) strins(int_string, "-", 0);

		format(money, sizeof(money), "%s", int_string);

		return money;
	}
	return money;
}

stock SetIntegerMultiply(playerid, count_1[], count_2)
{
	SettingsCountSInteger(playerid, count_1, count_1);
	
	if(player_length_count_1[playerid] >= player_length_count_2[playerid])
	{
		for(new i; i < player_length_count_1[playerid]; i++)
		{
			for(new idx; idx < count_2 - 1; idx++)
			{
				if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] <= 9)
				{
					player_int_count_1[playerid][i] = player_int_count_1[playerid][i] + player_int_count_2[playerid][i];
				}
				else if(player_int_count_1[playerid][i] + player_int_count_2[playerid][i] > 9)
				{
					player_int_count_1[playerid][i] = (player_int_count_1[playerid][i] + player_int_count_2[playerid][i]) - 10;
					if(player_length_count_1[playerid] == i + 1) player_length_count_1[playerid]++;
					player_int_count_1[playerid][i + 1]++;
				}
			}
		}
	}
	else
	{
		for(new i; i < player_length_count_2[playerid]; i++)
		{
			for(new idx; idx < count_2 - 1; idx++)
			{
				if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] <= 9) 
				{
					player_int_count_1[playerid][i] = player_int_count_2[playerid][i] + player_int_count_1[playerid][i];
				}
				else if(player_int_count_2[playerid][i] + player_int_count_1[playerid][i] > 9)
				{
					player_int_count_1[playerid][i] = (player_int_count_2[playerid][i] + player_int_count_1[playerid][i]) - 10;
					if(player_length_count_2[playerid] == i + 1) player_length_count_2[playerid]++;
					player_int_count_1[playerid][i + 1]++;
				}
			}
		}
		player_length_count_1[playerid] = player_length_count_2[playerid];
	}

	new fmt_text[MAX_MONEY_SYMBOLS];
	format(fmt_text, MAX_MONEY_SYMBOLS, "%s", SettingsCountSString(playerid));

	return fmt_text;
}

stock ShowDialogDonatePerfect(playerid, type, page)
{
	if(type == 1) type_page_cars[playerid] = 10;
	if(type == 2) type_page_cars[playerid] = 11;
	if(type == 3) type_page_cars[playerid] = 12;
	if(type == 4) type_page_cars[playerid] = 13;
	if(type == 5) type_page_cars[playerid] = 14;

	new	query[148],
		Cache: result,
		index,
		page_1,
		page_2, 
		next;

	format(query, sizeof query, "SELECT * FROM donate_items WHERE type=%d", type);
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	ClearPlayerListitemValues(playerid);


	string_dialog[0] = EOS;
	format(string_dialog, sizeof string_dialog, "Название\tКоличество\tЦена\n");
	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			if(i >= (page * 20) && i < (page * 20) + 20)
            next++;

			if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        	{
				new name[48];

				cache_get_field_content(i, "name", name);
				new item_id = cache_get_field_content_int(i, "item_id");
				new price = cache_get_field_content_int(i, "price");
				new count = cache_get_field_content_int(i, "count");

				if(type != 4) 
				{
					format(query, sizeof query, "{FFFFFF}%s [№%d]\t%d шт.\t{"SERVER_COLOR"}%d "SERVER_DONATE"\n", name, item_id, count, price);
				}
				else 
				{
					format(query, sizeof query, "{FFFFFF}%s\t%d шт.\t{"SERVER_COLOR"}%d "SERVER_DONATE"\n", name, count, price);
				}
				strcat(string_dialog, query);

				g_player_listitem[playerid][index] = cache_get_field_content_int(i, "id");

				index++;
			}
		}
	}
	else format(string_dialog, sizeof string_dialog, "На данный момент этот список пуст");

	cache_delete(result);

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}

	if(type == 1) IntfDialogCallRemote(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Эксклюзивный транспорт",string_dialog,"Купить", "Назад", page_1, page_2);

	if(type == 2) IntfDialogCallRemote(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка эксклюзивной одежды",string_dialog,"Купить", "Назад", page_1, page_2);

	if(type == 3) IntfDialogCallRemote(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Эксклюзивные аксессуары",string_dialog,"Купить", "Назад", page_1, page_2);
	
	if(type == 4) IntfDialogCallRemote(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка дополнительных слотов",string_dialog,"Купить", "Назад", page_1, page_2);
	
	if(type == 5) IntfDialogCallRemote(playerid, DIALOG_DONATE_BUY, DIALOG_STYLE_TABLIST_HEADERS,"{FFFF00}Покупка предметов",string_dialog,"Купить", "Назад", page_1, page_2);
	
	return true;
}

cmd:createcoinsitem(playerid)
{
	if(IsPlayerAdminLevel(playerid) < 8) return 1;
 	    else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

	if(GetPlayerMinEx(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У вас нет мин доступа.");

	if(GetPlayerData(playerid, P_BUYADMIN) == 1) return SCM(playerid, 0x999999FF, "Покупным администраторам недоступна данная функция");

	g_donate_create[playerid][DC_TYPE] = 0;
	g_donate_create[playerid][DC_ITEM_ID] = 0;
	g_donate_create[playerid][DC_PRICE] = 0;
	g_donate_create[playerid][DC_COUNT] = 1;
	g_donate_create[playerid][DC_INDX] = 0;

	IntfDialogCallRemote(playerid, DIALOG_CREATE_DONATE_1, DIALOG_STYLE_LIST,"{FFCD00}Создание предмета в меню "SERVER_DONATE"","{AFAFAF}Выберите тип предмета\n{FFFFFF}Транспорт\nОдежда\nАксессуар\nПредмет", "Выбрать", "Закрыть");
	return 1;
}

stock CreateDonateItems(playerid)
{
	string_dialog[0] = EOS;

	if(g_donate_create[playerid][DC_TYPE] == 1) format(string_dialog, sizeof string_dialog, "Транспорт");
	if(g_donate_create[playerid][DC_TYPE] == 2) format(string_dialog, sizeof string_dialog, "Одежда");
	if(g_donate_create[playerid][DC_TYPE] == 3) format(string_dialog, sizeof string_dialog, "Аксессуар");
	if(g_donate_create[playerid][DC_TYPE] == 5) format(string_dialog, sizeof string_dialog, "Предмет");

	format
	(
		string_dialog, sizeof string_dialog, 
		"{FFFFFF}Информация о предмете:\n\n\
		{FFFFFF}Тип: {"SERVER_COLOR"}%s\n\
		{FFFFFF}Название: {"SERVER_COLOR"}%s\n\
		{FFFFFF}Индификатор: {"SERVER_COLOR"}%d\n\
		{FFFFFF}Цена: {"SERVER_COLOR"}%d "SERVER_DONATE"\n\
		{FFFFFF}Количество: {"SERVER_COLOR"}%d шт.\n\
		{FFFFFF}Индекс: {"SERVER_COLOR"}%d\n\n\
		{FFFFFF}Вы действительно хотите создать данный предмет в "SERVER_DONATE" меню?",
		string_dialog,
		g_donate_create[playerid][DC_NAME], 
		g_donate_create[playerid][DC_ITEM_ID],
		g_donate_create[playerid][DC_PRICE],
		g_donate_create[playerid][DC_COUNT],
		g_donate_create[playerid][DC_INDX]
	);

	IntfDialogCallRemote(playerid, DIALOG_CREATE_DONATE_FINISH, DIALOG_STYLE_MSGBOX, "{FFCD00}Создание предмета в меню "SERVER_DONATE"", string_dialog, "Создать", "Назад");
	return true;
}
CMD:donatemenu(playerid, params[]) callcmd::donate(playerid, params);
CMD:donate(playerid, params[])
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_DONATE_CHENOSTI, DIALOG_STYLE_TABLIST,
        "{FFA500}Донат-Каталог",
		"{FF0000}REDAGE {FFFFFF}ONLINE\n"\ 
        "{FFD700}[•] {FFFFFF}Предметы > [Разные предметы]\n"\
        "{FFA500}[•] {FFFFFF}Кейсы > [Разновидность кейсов с ценными наградами]\n"\
        "{FFD700}[•] {FFFFFF}Игровой уровень > [Открывает новые возможности]\n"\
        "{00BFFF}[•] {FFFFFF}Одежда > [Стильная одежда на любой вкус]\n"\
        "{00BFFF}[•] {FFFFFF}Эксклюзивные аксессуары > [Множество крутых акссесуаров]\n"\
        "{00BFFF}[•] {FFFFFF}Аксессуары на транспорт > [Уникальные украшения для твоего авто]\n"\
        "{00BFFF}[•] {FFFFFF}Эксклюзивный транспорт > [Редкие и эксклюзивные автомобили на любой вкус]\n"\
		"{00BFFF}[•] {FFFFFF}Украшения для дома > [Разные украшения для твоего дома]",
        "Выбрать", "Закрыть"
	);
	return true;
}

#include "systems/training_role.inc"

enum E_BLACKJACK_TABLET_STRUCT
{
	Float: BJT_ACTOR_POS[4],
	Float: BJT_TABLET_POS[3]
}
new g_blackjack_tablet[6][E_BLACKJACK_TABLET_STRUCT] = 
{
	{{202.2909, -311.5019, 1011.0156, 261.1411}, {203.0826, -311.5590, 1011.7958}},
	{{202.4330, -316.4642, 1011.0156, 244.9081}, {203.1743, -316.7673, 1011.7958}},
	{{200.4600, -306.5779, 1011.0156, 71.19670}, {199.7251, -306.3018, 1011.7958}},
	{{200.1114, -311.7568, 1011.0156, 87.28130}, {199.3137, -311.7275, 1011.7958}},
	{{202.7577, -306.4828, 1011.0156, 281.9049}, {203.5401, -306.3388, 1011.7958}},
	{{200.2847, -316.8316, 1011.0156, 101.7575}, {199.5047, -316.9757, 1011.7958}}

};

stock CreateCasinoBlackJack()
{
	for(new i; i < sizeof g_blackjack_tablet; i++)
	{
		new casino_actor_1 = CreateActor(171, g_blackjack_tablet[i][BJT_ACTOR_POS][0],g_blackjack_tablet[i][BJT_ACTOR_POS][1],g_blackjack_tablet[i][BJT_ACTOR_POS][2],g_blackjack_tablet[i][BJT_ACTOR_POS][3]);
		SetActorVirtualWorld(casino_actor_1, 273);

		new casino_actor_2 = CreateActor(171, g_blackjack_tablet[i][BJT_ACTOR_POS][0],g_blackjack_tablet[i][BJT_ACTOR_POS][1],g_blackjack_tablet[i][BJT_ACTOR_POS][2],g_blackjack_tablet[i][BJT_ACTOR_POS][3]);
		SetActorVirtualWorld(casino_actor_2, 274);

		CreateDynamic3DTextLabel("{F6D900}BlackJack \n{FFFFFF}Начните играть", 0xFFFFFFFF, g_blackjack_tablet[i][BJT_TABLET_POS][0],g_blackjack_tablet[i][BJT_TABLET_POS][1],g_blackjack_tablet[i][BJT_TABLET_POS][2], 5.0);
		
		g_blackjack_alt[i] = CreateDynamicSphere(g_blackjack_tablet[i][BJT_TABLET_POS][0],g_blackjack_tablet[i][BJT_TABLET_POS][1],g_blackjack_tablet[i][BJT_TABLET_POS][2], 2.0, -1, -1);
	}
}

#define MAX_CARDS 3

enum E_BLACKJACK_STRUCT
{
	BJ_BET,
	BJ_STATUS,
	BJ_TIMER,
	BJ_T_CARD_1[MAX_CARDS],
	BJ_E_CARD_1[MAX_CARDS],
	BJ_T_CARD_2[MAX_CARDS],
	BJ_E_CARD_2[MAX_CARDS]
}
new g_blackjack[MAX_PLAYERS][E_BLACKJACK_STRUCT];

new g_blackjack_type_card[5][7] = {"bubna", "cherva", "chrest", "pika", "stub"};
new g_blackjack_event_card[15][6] = {"10", "2", "3", "4", "5", "6", "7", "8", "9", "ace", "jack", "joker", "king", "queen", "stub"};


stock OpenCasinoBlackJack(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.0826, -311.5590, 1011.7958))
		SetPlayerCameraPos(playerid, 204.3899, -311.6614, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.0826, -311.5590, 1011.1958);

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.1743, -316.7673, 1011.7958))
		SetPlayerCameraPos(playerid, 204.3045, -317.4069, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.1743, -316.7673, 1011.1958);

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.7251, -306.3018, 1011.7958))
		SetPlayerCameraPos(playerid, 198.4963, -305.8195, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.7251, -306.3018, 1011.1958);

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.3137, -311.7275, 1011.7958))
		SetPlayerCameraPos(playerid, 198.0064, -311.7337, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.3137, -311.7275, 1011.1958);

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.5401, -306.3388, 1011.7958))
		SetPlayerCameraPos(playerid, 204.8314, -306.1266, 1012.5156),
		SetPlayerCameraLookAt(playerid, 203.5401, -306.3388, 1011.1958);

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 199.5047, -316.9757, 1011.7958))
		SetPlayerCameraPos(playerid, 198.2032, -317.0863, 1012.5156),
		SetPlayerCameraLookAt(playerid, 199.5047, -316.9757, 1011.1958);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[[200,300,500,1000,\"ВА-БАНК\"], 20, %d]", GetIteam(playerid, 293));
	CEF_CREATE(playerid, 2, 4, "CasinoBlackjack", STRING_GLOBAL);
	return true;
}

public: OnBlackJackBetConfirm(playerid, bet)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;

	if(bet < 200 && bet > 1000)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Ставка от 200 до 1000 фишек')");

	if(GetIteam(playerid, 293) < bet)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Недостаточно фишек')");

	GiveIteam(playerid, 293, 0, bet, 0);

	g_blackjack[playerid][BJ_STATUS] = 1;
	g_blackjack[playerid][BJ_BET] = bet;

	g_blackjack[playerid][BJ_T_CARD_1][0] = random(3);
	g_blackjack[playerid][BJ_E_CARD_1][0] = random(13);

	g_blackjack[playerid][BJ_T_CARD_1][1] = random(3);
	g_blackjack[playerid][BJ_E_CARD_1][1] = random(13);

	g_blackjack[playerid][BJ_T_CARD_2][0] = random(3);
	g_blackjack[playerid][BJ_E_CARD_2][0] = random(13);

	g_blackjack[playerid][BJ_T_CARD_2][1] = random(3);
	g_blackjack[playerid][BJ_E_CARD_2][1] = random(13);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').start('[[0,\"%s\",\"%s\",0],[0,\"%s\",\"%s\",0]]', '[%d]', 0, %d)", 
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][0]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][0]],
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][1]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][1]],
	BlackJack_CountingCards(playerid, 0),
	g_blackjack[playerid][BJ_BET]
	);
	
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(0, 0, '[[\"%s\",\"%s\",0],[\"stub\",\"stub\",0]]')", 
	g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][0]],
	g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][0]]
	);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return true;
}

public: OnBlackJackStop(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;

	g_blackjack[playerid][BJ_STATUS] = 4;

	if(BlackJack_CountingCards(playerid, 1) < 17)
		BlackJack_AddCards(playerid, 1);
	else
	{
		STRING_GLOBAL[0] = EOS;

		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;

			new query[48];
			format(query, sizeof query, "[\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][i]]);
			strcat(STRING_GLOBAL, query);
		}

		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(%d, %d, '[%s]')", BlackJack_CountingCards(playerid, 1), g_blackjack[playerid][BJ_BET], STRING_GLOBAL);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}

	if(BlackJack_CountingCards(playerid, 1) > 21)
	{
		CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setGameOverStatus(1, 2)");
		
		new bet = g_blackjack[playerid][BJ_BET] * 2;

		GiveIteam(playerid, 293, 1, (bet * 90) / 100, 0);
		
		g_blackjack[playerid][BJ_TIMER] = 4;

		return true;
	}

	if(BlackJack_CountingCards(playerid, 1) > BlackJack_CountingCards(playerid, 0)) 
	{
		CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setGameOverStatus(2, 3)");
		g_blackjack[playerid][BJ_TIMER] = 4;
		return true;
	}

	if(BlackJack_CountingCards(playerid, 1) < BlackJack_CountingCards(playerid, 0))
	{
		CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setGameOverStatus(1, 2)");
		
		new bet = g_blackjack[playerid][BJ_BET] * 2;

		GiveIteam(playerid, 293, 1, (bet * 90) / 100, 0);
		
		g_blackjack[playerid][BJ_TIMER] = 4;

		return true;
	}

	if(BlackJack_CountingCards(playerid, 1) == BlackJack_CountingCards(playerid, 0))
	{
		CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setGameOverStatus(3, 0)");
		g_blackjack[playerid][BJ_TIMER] = 4;
		GiveIteam(playerid, 293, 1, g_blackjack[playerid][BJ_BET], 0);
	}
	return true;
}

public: OnBlackJackSplit(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;

	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('После удвоения нельзя разделить карты')");

	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('После добавления нельзя разделить карты')");


	return true;
}

public: OnBlackJackDouble(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;

	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Вы уже удвоили ставку')");

	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Была добавлена карта')");

	if(GetIteam(playerid, 293) < g_blackjack[playerid][BJ_BET])
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Недостаточно фишек')");

	GiveIteam(playerid, 293, 0, g_blackjack[playerid][BJ_BET], 0);

	g_blackjack[playerid][BJ_BET] = g_blackjack[playerid][BJ_BET] * 2;

	g_blackjack[playerid][BJ_STATUS] = 2;

	BlackJack_AddCards(playerid, 0);

	return true;
}

public: OnBlackJackPlusCard(playerid)
{
	if(g_blackjack[playerid][BJ_STATUS] == 4) return true;

	if(g_blackjack[playerid][BJ_STATUS] == 2)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Ставка была удвоена')");

	if(g_blackjack[playerid][BJ_STATUS] == 3)
		return CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setNotification('Вы уже добавили карту')");

	g_blackjack[playerid][BJ_STATUS] = 3;

	BlackJack_AddCards(playerid, 0);
	return true;
}

public: OnBlackJackClose(playerid)
{
	BlackJack_ClearInfo(playerid);

	CEF_HIDE(playerid, "CasinoBlackjack");

	SetCameraBehindPlayer(playerid);
	return true;
}

stock BlackJack_ClearInfo(playerid)
{
	g_blackjack[playerid][BJ_BET] = 0;
	g_blackjack[playerid][BJ_STATUS] = 0;
	g_blackjack[playerid][BJ_TIMER] = 0;
	
	for(new i; i < MAX_CARDS; i++)
	{
		g_blackjack[playerid][BJ_T_CARD_1][i] = -1;
		g_blackjack[playerid][BJ_T_CARD_2][i] = -1;

		g_blackjack[playerid][BJ_E_CARD_1][i] = -1;
		g_blackjack[playerid][BJ_E_CARD_2][i] = -1;
	}

	return true;
}

stock BlackJack_AddCards(playerid, type)
{
	if(type == 0)
	{
		g_blackjack[playerid][BJ_E_CARD_1][2] = random(13);
		g_blackjack[playerid][BJ_T_CARD_1][2] = random(3);

		STRING_GLOBAL[0] = EOS;

		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_1][i] == -1) continue;

			new query[48];
			format(query, sizeof query, "[0,\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_1][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_1][i]]);
			strcat(STRING_GLOBAL, query);
		}

		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseMyCards('[%s]', '[%d]', 0, %d)", STRING_GLOBAL, BlackJack_CountingCards(playerid, 0), g_blackjack[playerid][BJ_BET]);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

		if(BlackJack_CountingCards(playerid, 0) > 21) 
		{
			CEF_CREATE(playerid, 1, 2, "interface('CasinoBlackjack').setGameOverStatus(2, 1)");
			g_blackjack[playerid][BJ_TIMER] = 4;
			g_blackjack[playerid][BJ_STATUS] = 4;
		}
	}
	else
	{
		g_blackjack[playerid][BJ_E_CARD_2][2] = random(13);
		g_blackjack[playerid][BJ_T_CARD_2][2] = random(3);

		STRING_GLOBAL[0] = EOS;

		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;

			new query[48];
			format(query, sizeof query, "[\"%s\",\"%s\",0],", g_blackjack_event_card[g_blackjack[playerid][BJ_E_CARD_2][i]], g_blackjack_type_card[g_blackjack[playerid][BJ_T_CARD_2][i]]);
			strcat(STRING_GLOBAL, query);
		}

		strdel(STRING_GLOBAL, strlen(STRING_GLOBAL) - 1, strlen(STRING_GLOBAL));

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').parseOpponent(%d, %d, '[%s]')", BlackJack_CountingCards(playerid, 1), g_blackjack[playerid][BJ_BET], STRING_GLOBAL);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
	return 1;
}

stock BlackJack_CountingCards(playerid, type)
{
	new count;

	if(type == 0)
	{
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_1][i] == -1) continue;

			if(g_blackjack[playerid][BJ_E_CARD_1][i] == 0) count = count + 10;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 1) count = count + 2;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 2) count = count + 3;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 3) count = count + 4;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 4) count = count + 5;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 5) count = count + 6;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 6) count = count + 7;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 7) count = count + 8;
			else if(g_blackjack[playerid][BJ_E_CARD_1][i] == 8) count = count + 9;
			else count = count + 10;
		}
	}
	else 
	{
		for(new i; i < MAX_CARDS; i++)
		{
			if(g_blackjack[playerid][BJ_T_CARD_2][i] == -1) continue;

			if(g_blackjack[playerid][BJ_E_CARD_2][i] == 0) count = count + 10;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 1) count = count + 2;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 2) count = count + 3;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 3) count = count + 4;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 4) count = count + 5;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 5) count = count + 6;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 6) count = count + 7;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 7) count = count + 8;
			else if(g_blackjack[playerid][BJ_E_CARD_2][i] == 8) count = count + 9;
			else count = count + 10;
		}
	}
	return count;
}

stock BlackJack_Timer(playerid)
{
	if(g_blackjack[playerid][BJ_TIMER] > 0)
	{
		g_blackjack[playerid][BJ_TIMER]--;

		if(g_blackjack[playerid][BJ_TIMER] == 0)
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CasinoBlackjack').stopGame(20, %d)", GetIteam(playerid, 293));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			BlackJack_ClearInfo(playerid);
		}
	}
}

public OnGameModeExit()
{
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		SaveFamilyCar(i);
		SaveRentCar(i);
	}
	KillTimer(fortune_timer);
	KillTimer(dtimer);
	KillTimer(atimer);
	SaveRepository();
	mysql_close(mysql);
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);
    if(!IsPlayerLogged(playerid)) return false;
	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);
	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Для игры на сервере Вы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироваться"));

			IntfDialogCallRemote
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF6600}Ошибка",
				fmt_str,
				"Закрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xFF6600FF, fmt_str[8]);
		}
	}
	else if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
	}

	return 1;
}

new LastConnectTime[MAX_PLAYERS];

public OnPlayerConnect(playerid)
{
	g_player_status_fish[playerid] = 0;
	g_player_status_primanka[playerid] = 0;
	g_player_fishing_zone[playerid] = 0;
	g_player_type_fish_rod[playerid] = 0;
	g_player_type_fish[playerid] = 0;
	g_player_type_fish_ves[playerid] = 0;
	g_player_fish_timer[playerid] = 0;

	//Voice_OnPlayerConnect(playerid);

	PreLoadPlayerAnims(playerid);

	weaponPreviewObject[playerid] = INVALID_STREAMER_ID;

	camera_detailyng[playerid] = 0;

	player_decoration_page[playerid] = 0;
	player_acs_page[playerid] = 0;
	player_car_acs_page[playerid] = 0;

	SelectedCraft[playerid] = 0;
	CraftSet[playerid] = 0;
	CraftError[playerid] = 0;
	CraftModel[playerid] = 0;
	CraftDialog[playerid] = 0;

	SelectedCarCount[playerid] = 0;
	CraftModelCount[playerid] = 0;

    for(new i = 0; i < 25; i++)
    {
        SelectedCars[playerid][i] = 0;
    }

	for(new i = 0; i < 25; i++)
    {
        CraftModelList[playerid][i] = 0;
    }

	g_player_use_editing[playerid] = false;

	if(detector[playerid] != 0){
		Garbage:ClearGarbageInfo(playerid);
		e_PlayerGarbage[playerid][ePGarbageBatter] = 0;
	}

	if(g_player_use_editing[playerid] == true)
	{
		for(new i; i < TOTALDECOR; i++)
		{
			DeletePlayer3DTextLabel(playerid, g_object_text[playerid][i]);
			g_object_text[playerid][i] = PlayerText3D: -1;
		}
		g_player_use_editing[playerid] = false;
	}
	
	//NewYearGift[playerid] = 0;

	TotalEarnings[playerid] = 0;

	BlackJack_ClearInfo(playerid);

	vehicle_house_status[playerid] = 0;

	vehicle_house_id[playerid] = 0;
	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;

	active_acs_id[playerid] = -1;
	active_acs[playerid] = INVALID_VEHICLE_ID;

	SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);

	g_player_mine_cp[playerid] = 0;
	g_player_mine_status[playerid] = 0;
	g_player_mine_object[playerid] = INVALID_OBJECT_ID;
	g_player_mine_sphere[playerid] = 0;
	g_player_mine_rack[playerid] = 0;
	g_player_mine_ore[playerid] = -1;

	SetPVarInt(playerid, "lli", INVALID_VEHICLE_ID);

	inventory_load_status[playerid] = 0;

	//player_previous_speed[playerid] = 0.0;

	if(g_player[playerid][P_FAM_LABEL] != Text3D: -1)
	{
		DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
		g_player[playerid][P_FAM_LABEL] = Text3D: -1;
    }

	SetPlayerTimer(playerid, "DeleteSkinIznos", 10000, true);

	wosh_status[playerid] = 0;

	g_svalka_playerid_svalka_id_car[playerid] = -1;
	g_svalka_playerid_svalka_item[playerid] = -1;

    scores[playerid] = 0;
    chets[playerid] = 1;
    scplay[playerid] = 1;

    new hour, minute;
	g_player_auth_inputs[playerid] = 0;
	gettime(hour, minute);

	RouletteStarted[playerid] = 0;//fix ruletki

	SetPVarInt(playerid, "mechanic", 0);
	SetPVarInt(playerid, "Login", 0);
	SetPVarInt(playerid, "Login_1", 0);

	//==============================================================================
	RemoveBuildingForPlayer(playerid, 2215, 2453.8201, -1405.9500, 75.0750, 0.25);
    RemoveBuildingForPlayer(playerid, 2217, 2526.5701, -1455.0500, 61.2412, 0.25);
    RemoveBuildingForPlayer(playerid, 2219, 2477.0400, -1459.2000, 59.6698, 0.25);
    RemoveBuildingForPlayer(playerid, 2226, 2453.8201, -1405.9500, 75.0750, 0.25);
    RemoveBuildingForPlayer(playerid, 2228, 2526.5701, -1455.0500, 61.2412, 0.25);
    RemoveBuildingForPlayer(playerid, 2230, 2477.0400, -1459.2000, 59.6698, 0.25);
    RemoveBuildingForPlayer(playerid, 1245, 2474.6699, -1430.9900, 80.7800, 0.25);
    RemoveBuildingForPlayer(playerid, 5447, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5448, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5449, 753.9680, -2649.0300, 36.0030, 0.25);
    RemoveBuildingForPlayer(playerid, 5452, 753.9680, -2649.0300, 36.0030, 0.25);

	RemoveBuildingForPlayer(playerid, 4031, -86.0283, 960.4030, 25.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4031, -141.4970, 987.1750, 25.7900, 0.25);
	
	RemoveBuildingForPlayer(playerid, 1716, 2300.4299, -1684.8000, 20.9500, 0.25);
	
	RemoveBuildingForPlayer(playerid, 1484, 0.000000, 0.000000, 0.000000, 10.000000);
    RemoveBuildingForPlayer(playerid, 1485, 0.000000, 0.000000, 0.000000, 10.000000); //demorgan
    RemoveBuildingForPlayer(playerid, 1486, 0.000000, 0.000000, 0.000000, 10.000000);
	
	RemoveBuildingForPlayer(playerid, 4342, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4356, 413.1420, 752.0520, 17.8500, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 134.3870, 607.9220, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 142.3250, 628.6840, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 150.1590, 648.9010, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 156.4950, 665.2200, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 162.6760, 680.4710, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 168.8510, 696.3920, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4100, 176.5950, 716.2870, 16.3000, 0.25);
	RemoveBuildingForPlayer(playerid, 4447, 362.0260, 812.1090, 12.5400, 0.25);
	RemoveBuildingForPlayer(playerid, 4443, 133.8530, 641.3940, 12.9200, 0.25);
	RemoveBuildingForPlayer(playerid, 4431, -102.6940, 954.9450, 12.9900, 0.25);
	RemoveBuildingForPlayer(playerid, 4432, 135.4660, 652.2210, 12.7900, 0.25);
	RemoveBuildingForPlayer(playerid, 4432, -116.5360, 955.0590, 12.9900, 0.25);
	
	RemoveBuildingForPlayer(playerid, 641, 2137.3494, 1387.6998, 22.6629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2120.6721, 1362.4197, 25.5629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2118.6516, 1371.9425, 25.5629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2130.1104, 1369.4949, 25.3629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2137.8013, 1373.5449, 22.2629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2124.0774, 1378.1780, 25.6629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2128.9607, 1389.7159, 25.4629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2117.1870, 1384.8115, 25.4629, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2131.7351, 1380.8224, 24.6629, 0.25);
	
	gettime(hour, minute);

	SetPlayerTime(playerid, hour, minute);

	SetPlayerColor(playerid, 0x999999FF);

	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);
	RPPoint[playerid] = 0;
	GetPlayerName(playerid, g_player[playerid][P_NAME], 20 + 1);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);

	new IP1[16],IP2[16];
    GetPlayerIp(playerid, IP1, sizeof(IP1));
    new ipcount = 0;
    for(new i=0; i<GetMaxPlayers(); i++)
    {
        if(playerid == i || !IsPlayerConnected(i)) continue;
        GetPlayerIp(i, IP2, sizeof(IP2));
        if(!strcmp(IP1, IP2, true))ipcount++;
        if(ipcount > 3)
        {
			SendClientMessage(playerid, COLOR_RED, "С одного IP-адреса возможно не более 3 подключения одновременно.");
        	Kick(playerid);
			break;
		}
    }

	if(GetTickCount() - LastConnectTime[playerid] < 5000)
    {
        Kick(playerid);
        return 0;
    }
    LastConnectTime[playerid] = GetTickCount();

	GameText(playerid, "~y~Загрузка", 3500, 1);
	ShowGangZonesForPlayer(playerid);

    #if defined _GANG_ZONES_INC
	ShowForPlayerGangZonesCR(playerid);
	#endif

	InitFly(playerid);
    if(Test_server == 1)
	{
		new query[144],
		Cache: result,
		rows;

		mysql_format(mysql, query, sizeof query, "SELECT * FROM test_user WHERE name='%s'", g_player[playerid][P_NAME]);
		result = mysql_query(mysql, query, true);

		rows = cache_num_rows();

		cache_delete(result);

		if(!rows)
		{
            Kick(playerid);
			return 1;
		}
	}
	
	SetPVarInt(playerid, "ferma_id", 0);
	callcmd::unrentmoto(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));

		SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
	}

	if(playerid == HackerID || playerid == HackerID2 || playerid == HackerID3 || playerid == HackerID4)
    {
        foreach(new i: Player) 
        {
	        CEF_HIDE(i, "GangTimer");
		}

		CEF_HIDE(playerid, "Hacking");

		DestroyZaxvat(playerid);
	}

	if(gPlayerTuningMenu_2[playerid] == 1)
	{
		new sto_exit_1 = GetPVarInt(playerid, "sto_id_exit_1");
		new sto_exit_2 = GetPVarInt(playerid, "sto_id_exit_2");

		UpdateStoGarage(sto_exit_1, sto_exit_2, 0);
				
		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);

		gPlayerTuningMenu[playerid] = 0;
		gPlayerTuningMenu_2[playerid] = 0;
	}
	
	SetPlayerData(playerid, P_MOBILE, 0);
	UpdatePlayerDatabaseInt(playerid, "mobile", GetPlayerData(playerid, P_MOBILE));

	if(IsValidObject(ObjectCamera[playerid])) DestroyObject(ObjectCamera[playerid]);
	if(IsValidObject(ObjectTrain[playerid])) DestroyObject(ObjectTrain[playerid]);
	DestroyRegActor(playerid);

	TotalEarnings[playerid] = 0; // При отключении

	player_job_active[playerid] = 0;

	player_decoration_page[playerid] = 0;
	player_acs_page[playerid] = 0;
	player_car_acs_page[playerid] = 0;

	stop_bus_job[playerid] = 0;

	camera_detailyng[playerid] = 0;

	weaponPreviewObject[playerid] = INVALID_STREAMER_ID;

	SetPVarInt(playerid, "CaptchaInProgress", 0);

	Notary_HidePlayerPanel(playerid);
	OnTradeItemsCancel(playerid);

	UpdateWeapons(playerid);

	if(detector[playerid] != 0){
		Garbage:ClearGarbageInfo(playerid);
		e_PlayerGarbage[playerid][ePGarbageBatter] = 0;
	}

	g_player_trailer_status[playerid] = 0;
	g_player_trailer_type[playerid] = 0;
	TestDrive[playerid] = 0;
	PosTestDrive[playerid] = 0;
	AmmoAssemblyType[playerid] = 0;
	AssemblyComplete[playerid] = 0;
	Ozerolodka[playerid] = 0;
	g_cursor[playerid] = 0;
	ActiveRoll[playerid] = 0;

    SelectedCraft[playerid] = 0;
	CraftSet[playerid] = 0;
	CraftError[playerid] = 0;
	CraftModel[playerid] = 0;
	CraftDialog[playerid] = 0;

	SelectedCarCount[playerid] = 0;
	CraftModelCount[playerid] = 0;

	DestroyAuth(playerid);

    for(new i = 0; i < 25; i++)
    {
        SelectedCars[playerid][i] = 0;
    }

	for(new i = 0; i < 25; i++)
    {
        CraftModelList[playerid][i] = 0;
    }

	if(GetPVarInt(playerid, "SpawnToExit") == 1)
	{
        DeletePVar(playerid, "SpawnToExit");
	}

	Lesopilka[playerid] = 0;
	
	ElectrikUse[playerid] = 0;
    ElectrikActive[playerid] = 0;

	DestroyVehicle(g_player_trailer[playerid]);
	g_player_trailer[playerid] = INVALID_VEHICLE_ID;

	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	if(GetPlayerData(playerid, P_ORDER) != -1) 
	{
		SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		SetPlayerData(playerid, P_ORDER, -1);
	}

	if(GetPlayerData(playerid, P_FUELORDER) != -1) 
	{
		SetFuelOrderData(GetPlayerData(playerid, P_FUELORDER), F_USED, false);
		SetPlayerData(playerid, P_FUELORDER, -1);
	}

	DestroyPlayerPromo(playerid);
	DestroyPlayerItems(playerid);

	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;
	g_player_auth_inputs[playerid] = 0;

	g_svalka_playerid_bet[playerid][0] = 0;
	g_svalka_playerid_bet[playerid][1] = 0;
    g_svalka_playerid_svalka_id_car[playerid] = -1;
	g_svalka_playerid_svalka_item[playerid] = -1;

	if(fortune_wheel_player == playerid)
	{
		fortune_wheel_active = false;
	}

	if(GetPVarInt(playerid, "sto_id_exit_1") != 0 && GetPVarInt(playerid, "sto_id_exit_2") != 0)
	{
		UpdateStoGarage(GetPVarInt(playerid, "sto_id_exit_1"), GetPVarInt(playerid, "sto_id_exit_2"), 0);

		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);
	}

	open_auction[playerid] = 0;

	UpdatePlayerDatabaseInt(playerid, "last_exit", gettime());

	OwnerJoinDiceGame[playerid] = 0;
	DiceTrowPlayer[playerid][0] = 0;
	DiceTrowPlayer[playerid][1] = 0;
	DiceTable[playerid] = 0;

	admin_logged[playerid] = false;
	status_authorization[playerid] = 0;
	PositionChip[playerid] = -1;
	RouletteTable[playerid] = 0;
	RouletteStatus[playerid] = 0;
	StatusChip[playerid] = 0;
	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;

	SetPVarInt(playerid,"black_market_open",0);

	DeletePVar(playerid, "black_market_open");

    if(GetPVarInt(playerid,"medhelp") == 1) DestroyDynamic3DTextLabel(medhelplabel[playerid]);

    if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
	}
	
	SavePlayerAfterPos(playerid);
	 
	if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	{
	    new index = GetVehicleData(GetPlayerData(playerid, P_CARSH_CAR), V_ACTION_ID);

	    new typeauto[24];

	    KillTimer(timecarsharingprice[playerid]);
		ModifyCashBalance(playerid, -GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid], "аренда авто", true, true);

	    if(GetCarshCarData(index, OC_VINIL) == 0)
	    {
	        format(typeauto, 7, "Бип Drive");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 1)
	    {
	        format(typeauto, 7, "Кар Шеринг");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 2)
	    {
	        format(typeauto, 7, "Crown Car");
	    }
	    if(GetCarshCarData(index, OC_VINIL) == 3)
	    {
	        format(typeauto, 7, "WOW Drive");
	    }

	    SetCarshCarData(index, OC_RENT_OWNER, -1);
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(index, OC_MODEL_ID), VI_NAME), GetCarshCarData(index, OC_MODEL_ID), GetCarshCarData(index, OC_PRICE));
	   	CreateVehicleLabel(GetPlayerData(playerid, P_CARSH_CAR), STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);
	    SetPlayerData(playerid, P_CARSH_CAR, INVALID_VEHICLE_ID);
	}
    if(GetPVarInt(playerid,"Metro_start") == 1)
	{
		metro_status = 0;
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DeletePVar(playerid, "Metro_start");
		DestroyVehicle(metro_train[playerid]);
		DisablePlayerCheckpoint(playerid);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		ModifyCashBalance(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_zarplata[playerid] = -0;
	}
	if(spike_objects[playerid] != 0)
    {
        DestroyObject(spike_objects[playerid]);
        DestroyDynamicArea(spike_areas[playerid]);
    }
    if(radar_objects[playerid] != 0)
    {
        DestroyObject(radar_objects[playerid]);
        DestroyDynamicArea(radar_areas[playerid]);
    }
	if(GetPVarInt(playerid,"Metro_work") == 1)
	{
		metro_user -= 1;
		DisablePlayerRaceCheckpoint(playerid);
		DestroyVehicle(metro_train[playerid]);
		ModifyCashBalance(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = -0;
		KillTimer(metro_taimer[playerid][0]);
		DeletePVar(playerid, "Metro_work");
	}
    if(GetPVarInt(playerid,"fermawork") == 1)
	{
		DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "fermawork");
	}
	if(GetPVarInt(playerid, "LoginPlayer") != 1)
	{
		new buffer = GetPlayerLastVehicle(playerid);

		new Float:X, Float:Y, Float:Z;
	  	GetPlayerPos(playerid, X, Y, Z);
	  	SetPVarInt(playerid, "ferma_id", 0);

		for(new i = 1; i < MAX_VEHICLES; i++)
		{
		    if(!IsValidVehicle(i)) continue;
		    if(GetVehicleData(i, V_OWRENT) == 0) continue;
		    if(GetVehicleData(i, V_OWRENT) != GetPlayerNameEx(playerid)) continue;
	     	SetVehicleData(i, V_OWRENT, 0);
		    SetVehicleToRespawn(i);
		}

		if(buffer != INVALID_VEHICLE_ID)
		{
			if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					SetVehicleToRespawn(buffer);
				}
			}
		}
		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			SetVehicleToRespawn(is);
		}
		if(IsPlayerInJob(playerid))
		{
			buffer = GetPlayerJobCar(playerid);
			if(buffer != INVALID_VEHICLE_ID)
			{
				new modelid = GetVehicleModel(buffer);

                if(modelid == 431)
                {
                    DestroyVehicle(buffer);
                }
				else
				{
                    SetVehicleToRespawn(buffer);
				}
			}

			if(GetPlayerData(playerid, P_ORDER) != -1)
				SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);

			if(GetPlayerData(playerid, P_FUELORDER) != -1)
				SetFuelOrderData(GetPlayerData(playerid, P_FUELORDER), F_USED, false);
		}
		KillEndJobTimer(playerid);
		KillCarJobTimer(playerid);

		buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
		SetPlayerFactoryDeskUse(playerid, buffer, false);

		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		if(g_player[playerid][P_FAM_LABEL] != Text3D: -1)
		{
			DestroyDynamic3DTextLabel(g_player[playerid][P_FAM_LABEL]);
			g_player[playerid][P_FAM_LABEL] = Text3D: -1;
	    }

		if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
			SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
		}
		if(IsPlayerAdminLevel(playerid) == 6 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, ADMIN_LABEL));
			SetPlayerData(playerid, ADMIN_LABEL, Text3D: -1);
		}
		if(IsPlayerAdminLevel(playerid) == 5 && IsValidDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(playerid, GAADMIN_LABEL));
			SetPlayerData(playerid, GAADMIN_LABEL, Text3D: -1);
		}

		for(new i = 0; i < MAX_VEHICLES; i++)
		{
		    if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		    {
			    new iddx = GetVehicleData(i, V_ACTION_ID);
		        if(GetOwnableCarData(iddx,OC_OWNER_ID) == GetPlayerAccountID(playerid))
		        {
		            UnloadPlayerOwnableCar(true, i);
		        }
	        }
		}

		if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(GetPlayerRentCar(playerid));
		}

		if(GetPlayerRentMop(playerid) != INVALID_VEHICLE_ID)
		{
			DestroyVehicle(GetPlayerRentMop(playerid));
		}

		new fmt_text[95];

		if(GetPlayerData(playerid, P_CUFFED) && reason != 2)
		{
			new arrest_time = (GetPlayerSuspect(playerid) * 5 + 30) * 60;

			SetPlayerData(playerid, P_ARREST, arrest_time);
	        UpdatePlayerDatabaseInt(playerid, "arrest", arrest_time);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			format(fmt_text, sizeof fmt_text, "%s выходит при аресте (+30 минут заключения)", GetPlayerNameEx(playerid));
			SendClientMessageToAll(0xFF99AADD, fmt_text);
		}
		for(new idx; idx < g_advert_created; idx ++)
		{
			if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

			DeleteAdvert(idx);
		}

		SavePlayerAccount(playerid);
		ClearPlayerInfo(playerid);

		UpdateSpectate(playerid, true);

	}
	else
	{
	    ClearPlayerInfo(playerid);
	}
	return 1;
}

stock SavePlayerAfterPos(playerid)
{
	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	{
		GetPlayerPos(playerid, g_player[playerid][P_EXIT_X], g_player[playerid][P_EXIT_Y], g_player[playerid][P_EXIT_Z]);
	}

	new Float:x = g_player[playerid][P_EXIT_X];
	new Float:y = g_player[playerid][P_EXIT_Y];
	new Float:z = g_player[playerid][P_EXIT_Z];

	new query[148];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET exit_x='%f',exit_y='%f',exit_z='%f' WHERE id=%d", x, y, z, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return true;
}
public: SavePlayerAccount(playerid)
{
	new query[480];

	mysql_format
	(
		mysql, query, sizeof query,
		"UPDATE accounts_canvasdev SET last_login=%d,game_for_hour=%d,game_for_day=%d,game_for_day_prev=%d,\
		exp=%d,health=%f,hospital=%d,mute=%d,jail=%d,money='%s' WHERE id=%d LIMIT 1",
		gettime(),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_EXP),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerData(playerid, P_JAIL),
		QueryPlayerBalance(playerid),
		GetPlayerAccountID(playerid)
	);

	mysql_query(mysql, query, false);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{	
	if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));
		
		SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
	}

	if(playerid == HackerID || playerid == HackerID2 || playerid == HackerID3 || playerid == HackerID4)
    {
        foreach (new i: Player) 
        {
	        CEF_HIDE(i, "GangTimer");
		}

		CEF_HIDE(playerid, "Hacking");

		DestroyZaxvat(playerid);
	}

	if(gPlayerTuningMenu_2[playerid] == 1)
	{
		new sto_exit_1 = GetPVarInt(playerid, "sto_id_exit_1");
		new sto_exit_2 = GetPVarInt(playerid, "sto_id_exit_2");

		UpdateStoGarage(sto_exit_1, sto_exit_2, 0);
				
		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);

		gPlayerTuningMenu[playerid] = 0;
		gPlayerTuningMenu_2[playerid] = 0;
	}

	if(g_player_status_fish[playerid] != 0)
	{	
		g_player_status_fish[playerid] = 0;
		g_player_status_primanka[playerid] = 0;
		g_player_fishing_zone[playerid] = 0;
		g_player_type_fish_rod[playerid] = 0;
		g_player_type_fish[playerid] = 0;
		g_player_type_fish_ves[playerid] = 0;
		g_player_fish_timer[playerid] = 0;

		TogglePlayerControllable(playerid,true);
		SetCameraBehindPlayer(playerid);

		CEF_HIDE(playerid, "Fishing");
		CEF_HIDE(playerid, "Interactions");
	}

	Notary_HidePlayerPanel(playerid);
	OnTradeItemsCancel(playerid);

	if(g_blackjack[playerid][BJ_STATUS] > 0)
		OnBlackJackClose(playerid);

	g_player_mine_cp[playerid] = 0;
	g_player_mine_status[playerid] = 0;
	g_player_mine_object[playerid] = INVALID_OBJECT_ID;
	g_player_mine_sphere[playerid] = 0;
	g_player_mine_rack[playerid] = 0;
	g_player_mine_ore[playerid] = -1;
	
	Ozerolodka[playerid] = 0;
	g_cursor[playerid] = 0;

	Lesopilka[playerid] = 0;

	TotalEarnings[playerid] = 0; // При смерти
	
	ElectrikUse[playerid] = 0;
    ElectrikActive[playerid] = 0;

	SetPVarInt(playerid, "OnPlayerDeath", 1);

	if(killerid != INVALID_PLAYER_ID && IsPlayerLogged(killerid) && (reason >= 0 && reason <= 38))
    {
        if(!IsPlayerLogged(killerid)) return 0; // Завершаем выполнение функции с возвратом 0, если убийца не авторизован

        foreach(new i: Player)
        {
            if(!IsPlayerConnected(i)) continue;
            if(!IsPlayerLogged(i)) continue;  // Проверяем, чтобы отправлять сообщения только авторизованным игрокам
            if(IsPlayerAdminLevel(i) < 1) continue;

            SendDeathMessageToPlayer(i, killerid, playerid, reason);
        }
    }

	g_player_trailer_status[playerid] = 0;
	g_player_trailer_type[playerid] = 0;

	DestroyVehicle(g_player_trailer[playerid]);
	g_player_trailer[playerid] = INVALID_VEHICLE_ID;

	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	if(GetPlayerData(playerid, P_ORDER) != -1) 
	{
		SetOrderData(GetPlayerData(playerid, P_ORDER), O_USED, false);
		SetPlayerData(playerid, P_ORDER, -1);
	}

	if(GetPlayerData(playerid, P_FUELORDER) != -1) 
	{
		SetFuelOrderData(GetPlayerData(playerid, P_FUELORDER), F_USED, false);
		SetPlayerData(playerid, P_FUELORDER, -1);
	}

	containers_id[playerid] = -1;
	containers_bet[playerid] = 0;

	if(GetPVarInt(playerid, "sto_id_exit_1") != 0 && GetPVarInt(playerid, "sto_id_exit_2") != 0)
	{
		UpdateStoGarage(GetPVarInt(playerid, "sto_id_exit_1"), GetPVarInt(playerid, "sto_id_exit_2"), 0);

		SetPVarInt(playerid, "sto_id_exit_1", 0);
		SetPVarInt(playerid, "sto_id_exit_2", 0);
	}

	open_auction[playerid] = 0;

	OwnerJoinDiceGame[playerid] = 0;
	DiceTrowPlayer[playerid][0] = 0;
	DiceTrowPlayer[playerid][1] = 0;
	DiceTable[playerid] = 0;

	StatusChip[playerid] = 0;

	if(IsValidDynamicObject(RouletteChip[playerid])) DestroyDynamicObject(RouletteChip[playerid]);
	RouletteChip[playerid] = INVALID_OBJECT_ID;

	if(killerid != INVALID_PLAYER_ID)
	{
		if(g_war[W_STATUS])
		{
			new gang_id[2];

			gang_id[0] = GetPlayerFamily(killerid);
			gang_id[1] = GetPlayerFamily(playerid);
			if(GetPlayerData(playerid,P_KILL_CAPT) == 0)
			{
				SetPlayerData(playerid,P_KILL_CAPT,1);
				if(GetPlayerFamily(killerid) == g_war[W_ATTACK_TEAM])
				{
					if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
					{
						g_war[W_ATTACKER_KILLS] += 1;
						SCM(playerid, -1, "ATTACK TEAM +1");
					}
				}
				else if(GetPlayerFamily(killerid) == g_war[W_PROTECT_TEAM])
				{
					if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
					{
						g_war[W_PROTECTOR_KILLS] += 1;
						SCM(playerid, -1, "PROTECT TEAM +1");
					}
				}

				UpdateCaptureTextDraw();
			}
		}
		if(GetPlayerData(killerid, P_SUSPECT) != 6)
		{
			AddPlayerData(killerid, P_SUSPECT, +, 1);
			SetPlayerSuspectInit(killerid);
			UpdatePlayerDatabaseInt(killerid, "suspect", GetPlayerData(killerid, P_SUSPECT));
		}
	}
    if(GetPVarInt(playerid, "medhelp") == 1)
	{
		DeletePVar(playerid, "medhelp");
		DestroyDynamic3DTextLabel(medhelplabel[playerid]);
		CEF_HIDE(playerid, "Death");
	}
    if(GetPVarInt(playerid,"Metro_start") == 1)
	{
		metro_status = 0;
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DeletePVar(playerid, "Metro_start");
		DestroyVehicle(metro_train[playerid]);
		DisablePlayerCheckpoint(playerid);
		new fmt_str[130];

		format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы заработали %d руб.", metro_zarplata[playerid]);
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);

		ModifyCashBalance(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = 0;

	}
	if(GetPVarInt(playerid,"Metro_work") == 1)
	{
		metro_user -= 1;
		DeletePVar(playerid, "Metro_work");
		DisablePlayerRaceCheckpoint(playerid);
		DestroyVehicle(metro_train[playerid]);
		new fmt_str[130];

		format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы заработали %d руб.", metro_zarplata[playerid]);
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
		ModifyCashBalance(playerid, metro_zarplata[playerid], "Работа метро", true, true);
		metro_train[playerid] = INVALID_VEHICLE_ID;
		metro_zarplata[playerid] = 0;
		CEF_CREATE(playerid, 1, 2, "closeInterface('Machinist')");
		KillTimer(metro_taimer[playerid][0]);
	}
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	RouletteStatus[playerid] = 0;

	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(IsPlayerInJob(playerid)) EndPlayerJob(playerid);

	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR, -1);
	SetPlayerData(playerid, P_IN_GARAGE, 		-1);

	SpeedometrHideForPlayer(playerid);

	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY) CancelFlyMode(playerid);

	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerSuspect(playerid) && IsPlayerInPoliceTeam(killerid))
		{
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[Всем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(STRING_GLOBAL, 0x3399FFFF);

			ArrestPlayer(playerid, GetPlayerSuspect(playerid) * 5);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			SetPlayerSuspectInit(playerid);

			SendClientMessage(playerid, 0x66CC33FF, "Вы были нейтрализованы сотрудником правоохранительных органов");
			SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
		}
	}
	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

	}

	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);

	SetPlayerData(playerid, P_HOSPITAL, true);
	SpawnPlayer(playerid);
	SetPlayerSpawnPos(playerid);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{ 
	if(GetPVarInt(playerid, "OnPlayerDeath") == 1)
    {
        SetPVarInt(playerid, "OnPlayerDeath", 0);
        SetPlayerSpawnPos(playerid);
        return 1;
    }

    new Float: health;
    GetPlayerHealth(playerid, health);

    if(issuerid == INVALID_PLAYER_ID) return 1;

	if(GetPlayerLevel(issuerid) == 1)
    {
        return 0;
    }

    if(GetPVarInt(playerid, "player_in_green_zone"))
    {
        if(!(TEAM_MVD <= GetPlayerTeamEx(issuerid)))
        {
            ClearPlayerAnim(issuerid);
            TogglePlayerControllable(issuerid, false);

            SetTimerEx("UnfreezePlayer", 2000, false, "i", issuerid);
            return 0;
        }
    }

    new fmt_str[64];
    format(fmt_str, sizeof fmt_str, "{d6b00c}-%.2f HP по %s", amount, GetPlayerNameEx(playerid));
    SetPlayerChatBubble(issuerid, fmt_str, 0xFF5533FF, 10.5, 1500);

    format(fmt_str, sizeof fmt_str, "{e48d3c}-%.2f HP от %s", amount, GetPlayerNameEx(issuerid));
    SetPlayerChatBubble(playerid, fmt_str, 0xFF5533FF, 10.5, 1500);

    if(TEAM_MVD <= GetPlayerTeamEx(issuerid))
    {
        if(weaponid == WEAPON_NITESTICK)
        {
            SetPlayerAnimation(playerid, 21);
            TogglePlayerControllable(playerid, false);

            SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

            new fmt_text[90];

            format(fmt_text, sizeof fmt_text, "Вы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
            SendClientMessage(issuerid, 0x3399FFFF, fmt_text);

            format(fmt_text, sizeof fmt_text, "%s оглушил Вас на 15 секунд", GetPlayerNameEx(issuerid));
            SendClientMessage(playerid, 0x3399FFFF, fmt_text);

            CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
        }
    }

    if(TEAM_MVD <= GetPlayerTeamEx(issuerid))
    {
        if(weaponid == 23)
        {
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, false, 1, 1, 1, 1);
            TogglePlayerControllable(playerid, false);

            SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

            new fmt_text[90];

            format(fmt_text, sizeof fmt_text, "Вы нейтрализовали %s на 15 секунд", GetPlayerNameEx(playerid));
            SendClientMessage(issuerid, 0x3399FFFF, fmt_text);

            format(fmt_text, sizeof fmt_text, "%s нейтрализовал Вас на 15 секунд", GetPlayerNameEx(issuerid));
            SendClientMessage(playerid, 0x3399FFFF, fmt_text);

            SetPlayerData(playerid, P_OGLOX, 1);

            CEF_CREATE(playerid, 1, 4, "Stun");

            CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
        }
    }

    if(GetPlayerData(issuerid, P_POWER))
    {
        if(!weaponid)
        {
            new Float: armour,
                Float: taken_health;

            GetPlayerArmour(playerid, armour);

            taken_health = GetPlayerData(issuerid, P_POWER) * 0.05;

            if (armour) SetPlayerArmour(playerid, armour - taken_health);
            else SetPlayerHealthEx(playerid, health - taken_health);
        }
    }

    if(health < 10)
    {
        if(GetPVarInt(playerid, "medhelp") == 0)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 100.0, 433.0270, 1704.9852, 1001.0000) || !IsPlayerInRangeOfPoint(playerid, 100.0, 431.1976, 1732.5670, 1301.0000))
            {
                RemovePlayerFromVehicle(playerid);

                SetPVarInt(playerid, "medhelp", 1);

                ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, true, 0, 0, 0, 0);

                CEF_CREATE(playerid, 2, 4, "Death", "[600, 5000]");

                SetPlayerHealthEx(playerid, 10);

                new Float: x, Float: y, Float: z;
                GetPlayerPos(playerid, x, y, z);

                medhelplabel[playerid] = CreateDynamic3DTextLabel("{ffffff}Нажмите {FAAC58}ALT {ffffff}чтобы\nпомочь", 0xff9500FF, x, y, z, 2.0);
            }
        }
    }

    return 1;
}

public: KDSet(playerid)
{
    SetPlayerData(playerid, P_KDSET, 0);
    return 1;
}

stock SetBlockColor(blockid, color) {
	if(g_arena_created) {
		b_has_color[blockid] = color;
		SetDynamicObjectMaterial(b_objectid[blockid], 0, 8398, "luxorland", "des_dirt1", color);
	}
}
stock GetBlockColor(blockid) {
	if(g_arena_created) return b_has_color[blockid];
	return -1;
}

stock GetBlockPos(blockid, &Float:pos_x, &Float:pos_y, &Float:pos_z) {
	if(g_arena_created) GetDynamicObjectPos(b_objectid[blockid], pos_x, pos_y, pos_z);
}

stock GetRandomBlock() {
	if(g_arena_created) return random(64);
	return -1;
}

stock SetBlockUniqueID(blockid, uniqueid) {
	if(g_arena_created) b_unique_id[blockid] = uniqueid;
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
	    return DestroyVehicle(vehicleid);

    foreach(new playerid: Player)
    {
		if(IsARentCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SetVehicleVirtualWorld(vehicleid, GetRentCarData(index, R_RENT_BIZ));
			if(GetRentCarData(index, R_RENT_OWNER) != -1)
			{
				SetPlayerData(GetRentCarData(index, R_RENT_OWNER), P_RENT_CAR, INVALID_VEHICLE_ID);
			}
			SetRentCarData(index, R_RENT_OWNER, -1);
		}
		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			SetVehiclePos
			(
				vehicleid,
				GetOwnableCarData(index, OC_POS_X),
				GetOwnableCarData(index, OC_POS_Y),
				GetOwnableCarData(index, OC_POS_Z)
			);
			SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
			
			if(GetOwnableCarData(index, OC_GIDRA) != 0)
			{
			AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_GIDRA));
			}

			if(GetOwnableCarData(index, OC_NITRO) != 0)
			{
			AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_NITRO));
			}
			if(GetOwnableCarData(index, OC_FAM_CAR) == 0)
			{
				ChangeVehicleColor(vehicleid, GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
			}
			else
			{
				new color = family_color_car[GetFamilyData(GetOwnableCarData(index, OC_FAM_CAR), F_COLOR)][0];
				ChangeVehicleColor(vehicleid, color, color);
			}
		}
		SetVehicleData(vehicleid, V_LIMIT, true);
		SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);

		if(IsAOwnableCar(vehicleid)) SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));

		if(IsACarshCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			SetVehiclePos
			(
				vehicleid,
				GetCarshCarData(index, OC_POS_X),
				GetCarshCarData(index, OC_POS_Y),
				GetCarshCarData(index, OC_POS_Z)
			);
			SetVehicleZAngle(vehicleid, GetCarshCarData(index, OC_ANGLE));
			ChangeVehicleViniljob(vehicleid, GetCarshCarData(index, OC_VINIL));
		}
		if(IsAFamilyCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			SetVehiclePos
			(
				vehicleid,
				GetOwnableCarData(index, OC_POS_X),
				GetOwnableCarData(index, OC_POS_Y),
				GetOwnableCarData(index, OC_POS_Z)
			);

			if(GetOwnableCarData(index, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));
			if(GetOwnableCarData(index, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(index, OC_VINIL));

			if(GetOwnableCarData(index, OC_DISKI) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_DISKI));
			}

			if(GetOwnableCarData(index, OC_GIDRA) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_GIDRA));
			}

			if(GetOwnableCarData(index, OC_NITRO) != 0)
			{
				AddVehicleComponent(vehicleid, GetOwnableCarData(index, OC_NITRO));
			}
			new color = family_color_car[GetFamilyData(GetOwnableCarData(index, OC_OWNER_ID), F_COLOR)][0];
			ChangeVehicleColor(vehicleid, color, color);
			SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
		}
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case
			    VEHICLE_ACTION_TYPE_BUS_DRIVER,
				VEHICLE_ACTION_TYPE_TAXI,
				VEHICLE_ACTION_TYPE_RERFECT,
				VEHICLE_ACTION_TYPE_TRUCKER_1,
				VEHICLE_ACTION_TYPE_TRUCKER_2,
				VEHICLE_ACTION_TYPE_TRUCKER_3,
				VEHICLE_ACTION_TYPE_FERMA_CAR,
				VEHICLE_ACTION_TYPE_ELECTRICIAN:
			{
				SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);

				foreach(new i : Player)
				{
					if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
					if(GetPlayerJobCar(i) != vehicleid) continue;

					SetPlayerData(i, P_JOB_CAR, INVALID_VEHICLE_ID);
				}
			}
		}
	}
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
    if(GetVehicleCarMarketID(vehicleid) != -1)
    {
        if(IsAOwnableCar(vehicleid)) 
        {
            SetVehicleData(vehicleid, V_HEALTH, 300.0);
        }
    }
    return 1;
}

public OnPlayerText(playerid, text[])
{
    if(strfind(text, "http", true) != -1) return false;
    if(strfind(text, ".ru", true) != -1) return false;
    if(strfind(text, ".com", true) != -1) return false;
    if(strfind(text, ".ua", true) != -1) return false;
    if(strfind(text, "\\", true) != -1) return false;
    if(strfind(text, ":", true) != -1) return false;
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}
	if(strlen(text) > 90) return 0;

	new caps;
	if(text[++caps])
	{
		if('A'<=text[caps]<='Z' || 'А'<=text[caps]<='Я')
		{
		    new str_query[144];
			format(str_query, sizeof(str_query), "[{ff0000}CAPS{AFAFAF}] %s[%d] написал капсом %s . ", GetPlayerNameEx(playerid), playerid, text);
			SendMessageToAdmins(str_query, 0x999999FF);
		}
	}

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);

		return 0;
	}

	if(!IsPlayerLogged(playerid)) return 0;
	//--------
	if(strcmp(text, "маму ебал", true) == 0 || strcmp(text, "Без мамы", true) == 0)
	{
		SetPlayerData(playerid, P_MUTE,  60 * 60);
		UpdatePlayerDatabaseInt(playerid, "mute", 60 * 60);
		SendClientMessage(playerid, COLOR_RED, "Ваш чат был заблокирован на 60 минут за отправку запретного слова!");
		SendClientMessage(playerid, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");
		return false;
	}
	if(strfind(text,"|") != -1 || strfind(text,"&") != -1 || strfind(text,"#") != -1 || strfind(text,"@") != -1 || strfind(text,"%") != -1)
	{
		SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}

	if(strcmp(text, "#", true) == 0 || strcmp(text, "|", true) == 0 || strcmp(text, "%", true) == 0 || strcmp(text, "@", true) == 0 || strcmp(text, "&", true) == 0)
	{
	    SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}

	if(!IsPlayerLogged(playerid)) return 0;

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);

		return 0;
	}
		else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроился", _, false);
	}
		else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 0);

		Action(playerid, "сильно расстроился", _, false);
	}
		else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбается", _, false);
	}
		else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеётся", _, false);
	}
		else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивился", _, false);
	}
		else if(!strcmp(text, "xD", true))
	{
		Action(playerid, "валяется от смеха", _, false);
	}
		else SendMessageInChat(playerid, text);

	return 0;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(IsAOwnableCar(vehicleid))
	{
		new idxd = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(idxd,OC_OWNER_ID) == GetPlayerAccountID(playerid)) SetPVarInt(playerid, "lli", vehicleid);
	}

	if(IsACarshCar(vehicleid))
	{
	    new idx = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetPlayerAccountID(playerid) != GetCarshCarData(idx, OC_RENT_OWNER))
		{
		    if(GetCarshCarData(idx, OC_RENT_OWNER) == -1)
		    {
				ClearAnimations(playerid);
				SendClientMessage(playerid, 0xBE2D2DFF, "Для аренды данного транспорта воспользуйтесь приложением в телефоне");
		    }
		    else
		    {
		        ClearAnimations(playerid);
		        SendClientMessage(playerid, 0xBE2D2DFF, "Данный транспорт уже арендован");
		    }
		    return 1;
		}
	}
	new Float:health; GetVehicleHealth(vehicleid,health);
    if(health<=250) RepairVehicle(vehicleid);
    
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "При продолжении Вы будете отключены от сервера");

		ClearAnimations(playerid);

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}
	if(!ispassenger)
	{
		new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BLACKMARKET:
			{
				ClearAnimations(playerid);
			}
			case VEHICLE_ACTION_TYPE_RAFFLE_SHOP:
			{
				ClearAnimations(playerid);
			}
		}

		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			if(GetOwnableCarData(index, OC_BY_ID) != 0)
			{
				if(GetPlayerOwnableCarLast(playerid) == vehicleid)
				{
					if(GetOwnableCarData(index, OC_BY_ID) == 1)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
					if(GetOwnableCarData(index, OC_BY_ID) == 3)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT_NIZ, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
					if(GetOwnableCarData(index, OC_BY_ID) == 2)
					{
						ClearAnimations(playerid);
						SetPVarInt(playerid, "veh_id", vehicleid);
						DLGF(playerid, DIALOG_BY_EXIT_SR, DIALOG_STYLE_MSGBOX, "{FFCD00}Авторынок", "{FFFFFF}Хотите снять с продажи и отменить аренду места {FFCD00}\'%s\'?", "Да", "Нет", GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_NAME));
					}
				}
				else
				{
					ClearAnimations(playerid);
				}
			}
		}
		if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
		{
			if(!IsABike(vehicleid))
			{
				ClearAnimations(playerid);
				return SendClientMessage(playerid, 0xCECECEFF, "У вас нет водительских прав.");
			}
		}
		if(HasJob(playerid, 15))
		{
			if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 2)
			{
				if(GetPlayerOwnableCarLast(playerid) == vehicleid)
				{
					new modelid = GetVehicleData(vehicleid, V_MODELID);
					if(IsCustomCarTkModel(modelid))
					{
						if(GetPlayerData(playerid, P_IN_JOB) == false) SCM(playerid, 0xd4a599FF, "Начать работу внештатного дальнобойщика можно с помощью команды /trucker");
					}
				}
			}
		}
		if(GetPlayerData(playerid, P_CUFFED))
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return SendClientMessage(playerid, 0x999999FF, "Вы закованы в наручники");
		}
		if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return GameText(playerid, "~r~Транспорт используется", 1000, 2);
		}
	}
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);

		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		new temp;
		temp = GetVehicleModel( GetPlayerVehicleID( playerid ) );
		BE_Play_Check[ playerid ] = true;
		for(new i; i != sizeof( BE_Bad_Vehs ); i++ )
		{
			if( temp == BE_Bad_Vehs[ i ] )
			{
				BE_Play_Check[ playerid ] = false;
				break;
			}

		}
	}
	if( oldstate == PLAYER_STATE_DRIVER )
	{
		BE_Play_Check[ playerid ] = false;
	}
	UpdateSpectate(playerid, false);
	return 1;
}

public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	if(vehicle_house_status[playerid] == 1)
	{
		CEF_HIDE(playerid, "Interactions");
		vehicle_house_status[playerid] = 0;
	}

	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);

	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	if(is_driver)
	{
		SetVehicleData(vehicleid, V_DRIVER_ID, playerid);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ORG_CARS)
		{
			new idx = GetVehicleData(vehicleid, V_ACTION_ID);

			if(GetPlayerTeamEx(playerid) != org_cars_canvasdev[idx][ORG_CARS_ID])
			{
				RemovePlayerFromVehicle(playerid);
				return 0;				
			}

			new rang = GetPlayerJob(playerid);

			if(rang < org_cars_canvasdev[idx][ORG_CARS_RANG])
			{
				RemovePlayerFromVehicle(playerid);
				SCMF(playerid, 0xB9C1B8FF, "Этот транспорт доступен с %d ранга", org_cars_canvasdev[idx][ORG_CARS_RANG]);
				return 0;				
			}

			switch(org_cars_canvasdev[idx][ORG_CARS_ID])
			{
				case TEAM_MVD:
				{
					if(GetPlayerInterior(playerid) == 4) return IntfDialogCallRemote(playerid, DIALOG_BY_EXIT_MVD, DIALOG_STYLE_MSGBOX, "{FFD83D}Парковка", "{ffffff}Вы действительно хотите выехать с парковки на данном траспорте?", "Да", "Отмена");	
				}
				case TEAM_HOSPITAL:
				{
					if(GetPlayerInterior(playerid) == 4 && GetPlayerVirtualWorld(playerid) == 2) return IntfDialogCallRemote(playerid, DIALOG_BY_EXIT_HOSPITAL, DIALOG_STYLE_MSGBOX, "{FFD83D}Парковка", "{ffffff}Вы действительно хотите выехать с парковки на данном траспорте?", "Да", "Отмена");
				}
				case TEAM_FSB:
				{
					if(GetPlayerInterior(playerid) == 4 && GetPlayerVirtualWorld(playerid) == 9) return IntfDialogCallRemote(playerid, DIALOG_BY_EXIT_FSB, DIALOG_STYLE_MSGBOX, "{FFD83D}Парковка", "{ffffff}Вы действительно хотите выехать с парковки на данном траспорте?", "Да", "Отмена");	
				}
			}
		}

		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(GetPlayerData(playerid, P_DRIVING_LIC) > 0)
			{
				if(!IsABike(vehicleid)) SpeedometrShowForPlayer(playerid);

				if(GetVehicleData(vehicleid, V_RENT) != -1)
				{
				    string_dialog[0] = EOS;
				    if(GetVehicleData(vehicleid, V_OWRENT) == 0 && GetVehicleData(vehicleid, V_RENT) != -1)
					{
			            format(string_dialog, sizeof(string_dialog), "{ffffff}Тип транспорта:\tПремиум класс\nНазвание:\t\t%s\nНомер модели:\t%d\nСтоимость аренды:\t{33AA33}%s руб{ffffff}\n\nЧтобы взять транспорт в аренду нажмите 'Аренда'", GetVehicleName(vehicleid), vehicleid, formatInt(GetVehicleData(vehicleid, V_RENTP)));
						IntfDialogCallRemote(playerid, R_F, DIALOG_STYLE_MSGBOX,"{FF8800}Аренда транспорта",string_dialog,"Аренда","Отмена");
					}
				}
			    //if(GetPVarInt(playerid,"ygon") == 1 && GetVehicleModel(vehicleid) == 15164 || GetVehicleModel(vehicleid) == 15093 || GetVehicleModel(vehicleid) == 15072 || GetVehicleModel(vehicleid) == 504 || GetVehicleModel(vehicleid) == 15184 || GetVehicleModel(vehicleid) == 500) IntfDialogCallRemote(playerid, DIALOG_MAFIA_YGON, DIALOG_STYLE_MSGBOX,"{"#cW"}Заказ на транспорт","{"#cW"}На данный автомобиль есть заказ. Вы хотите угнать его?","Далее", "Отмена");

                switch(vehicle_type)
				{
					case VEHICLE_ACTION_TYPE_RENT_MOPED:
					{
						if(GetPlayerData(playerid, P_RENT_MOPED) != vehicleid) return RemovePlayerFromVehicle(playerid);

						SCMF(playerid, 0xe3bb42FF, "Срок аренды скутера истекает через {FFFFFF}%d мин{e3bb42}.", (GetPVarInt(playerid, "rent_moped_time") - gettime()) / 60);
					}
					case VEHICLE_ACTION_TYPE_DONATE:
					{
					    SCM(playerid, 0x42B02CFF, "{ffffff}Данный транспорт вам не доступен.");
					    RemovePlayerFromVehicle(playerid);
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER: // Водитель автобуса
					{
						if(HasJob(playerid, 7))
						{
						    new job_car = GetPlayerJobCar(playerid);
 
						    if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
						    {
							    IntfDialogCallRemote
							    (
								    playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
								    "{"#cGold"}Стоимость проезда",
								    "{"#cW"}Сколько будет стоить проезд?\n"\
								    "Укажите цену от 0 до 50000 рублей",
								    "Далее", "Отмена"
							    );
						    }
						    else if(vehicleid != job_car)
						    {
							    RemovePlayerFromVehicle(playerid);
							    SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
						    }
						    else 
							{
								KillEndJobTimer(playerid);
								stop_bus_job[playerid] = 0;
								CEF_HIDE(playerid, "Interactions");
							}
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не водитель автобуса");
						}
					}
					case VEHICLE_ACTION_TYPE_FIRE_CAR:
					{
					    if(GetPlayerJob(playerid) != JOB_FIREMAN) return RemovePlayerFromVehicle(playerid),SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете пожарником");
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: // Таксист
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{"#cGold"}Таксопарк",
									"{"#cW"}Чтобы взять машину, необходимо заплатить городскому таксопарку 200 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Вы не таксист");
						}
					}
					case VEHICLE_ACTION_TYPE_RERFECT: // Автомеханик
					{
					 	if(GetPVarInt(playerid,"mechanic") == 1) return SendClientMessage(playerid, 0xFF6600FF, "Вам нужно переодется");
						{
						if(GetPlayerJob(playerid) == JOB_RERFECT_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_RERFECT_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFD83D}Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Вы не механик");
						}
					}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_1: // Дальнобойщик
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 129 && HasJob(playerid, 15))
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");

							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");

							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_2: // Дальнобойщик
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 130 && HasJob(playerid, 15))
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");
							
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");

							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_TRUCKER_3: // Дальнобойщик
					{
						if(GetPlayerData(playerid, P_TK_JOB) == 131 && HasJob(playerid, 15))
						{
							if(GetPlayerData(playerid, P_TK_JOB_TYPE) != 1) return SCM(playerid, COLOR_GREY, "Доступно только штатным дальнобойщикам (сотрудники могут взять транспорт на парковке)");
							
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX, 
									"{FFFFFF}Работа в транспортной компании", 
									"{FFFFFF}Вы действительно хотите начать свой рабочий день?\n\n\
									В качестве залога с Вас снимут {E6CE7B}2.000.000 руб. {FFFFFF}Если Вы не получите штрафов, то деньги будут возвращены.",
									"Начать", "Отмена"
								);
							}
							else if(vehicleid != job_car) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Данный транспорт занят другим игроком");

							else KillEndJobTimer(playerid);
						}
						else RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, 0xFF6600FF, "Вы не работаете в данной транспортной компании");
					}
					case VEHICLE_ACTION_TYPE_TAXI:
					{
						new job_car = GetPlayerJobCar(playerid);
						if(job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
						{
				            if(!HasJob(playerid, 8)) return SCM(playerid, COLOR_GREY, "* Вы не работаете таксистом"), RemovePlayerFromVehicle(playerid);
						    IntfDialogCallRemote(playerid, DIALOG_TAXI, DIALOG_STYLE_MSGBOX, "Таксопарк", "{ffffff}Желаете арендовать транспорт?\n{ffffff}Стоимость аренды: {FAAC58}15.000 руб.", "Да", "Нет");
						}
						else if(vehicleid != job_car)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
						}
					}
					case VEHICLE_ACTION_TYPE_CARSH_CAR:
					{
					    new idx = GetVehicleData(vehicleid, V_ACTION_ID);
						if(GetPlayerAccountID(playerid) != GetCarshCarData(idx, OC_RENT_OWNER))
						{
						    if(GetCarshCarData(idx, OC_RENT_OWNER) == -1)
						    {
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xBE2D2DFF, "Для аренды данного транспорта воспользуйтесь приложением в телефоне");
						    }
						    else
						    {
						        RemovePlayerFromVehicle(playerid);
						        SendClientMessage(playerid, 0xBE2D2DFF, "Данный транспорт уже арендован");
						    }
						    return 1;
						}
					}
					case VEHICLE_ACTION_TYPE_PRIZE:
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_TAKE_CAR_PRIZE, DIALOG_STYLE_MSGBOX,
							"Подтверждение",
							"Данный транспорт созданный администратором активен в розыгрыше.\n\n\
							Вы действительно хотите забрать этот транспорт себе?",
							"Да", "Отмена"
						);
					}
					case VEHICLE_ACTION_TYPE_FERMA_CAR:
					{
					    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
					    {
					        new job_car = GetPlayerJobCar(playerid);
							if(job_car != vehicleid && job_car != INVALID_VEHICLE_ID)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
								return 1;
							}
					        if(job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
					        {
                                SetPlayerData(playerid, P_JOB_CAR, vehicleid);
                                if(GetPVarInt(playerid,"fermawork") == 1)
                                {
                                   PoleFerma(playerid);
								}
					        }
							else KillCarJobTimer(playerid);
					    }
					    else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете фермером");
						}
					}
					case VEHICLE_ACTION_TYPE_SVALKA_CAR:
					{
						RemovePlayerFromVehicle(playerid);
					}
					case VEHICLE_ACTION_TYPE_BLACKMARKET:
					{
						RemovePlayerFromVehicle(playerid);
					} 
					case VEHICLE_ACTION_TYPE_AUTOSALON:
					{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
					}
					case VEHICLE_ACTION_TYPE_ARZ_CAR:
					{
						new fam_id = GetPlayerData(playerid, P_FAMILY);

						if(GetFamilyData(fam_id, F_CENTRAL_MANSION) != 1)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_ELECTRICIAN:
					{
					    if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
					    {
							new job_car = GetPlayerJobCar(playerid);
							if(job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_ELECTRICIAN_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"Работа электрика",
									"Чтобы взять машину, необходимо заплатить за нее 1500 руб\n\
									Вы действительно хотите взять транспорт в аренду?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else
							{
                                KillEndJobTimer(playerid);
                                if(ElectrikUse[playerid] == 1)
                                {
                                    if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCarLast(playerid)))
	                                {
		                                if(IsPlayerInVehicle(playerid, job_car))
		                                {
                                            if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
			                                {
                                                new query[512], randomed, count;

				                                if(Iter_Count(ElectricanPlayerBiz[playerid]) <= 0)
                                                {
					                                Iter_Clear(ElectricanPlayerBiz[playerid]);
					                                for(new i; i < 5; i++)
					                                {
						                                randomed = RandomEx(1, 105);
						                                g_electrician_generated[playerid] = 1;
						                                Iter_Add(ElectricanPlayerBiz[playerid], g_business[randomed][B_SQL_ID]);
				                                    }
                                                }

                                                foreach(new i : ElectricanPlayerBiz[playerid])
				                                {
					                                if(i == 0) continue;
					                                SetPlayerListitemValue(playerid, count, i);

					                                format(query, sizeof query, "%s %s (№:%d) \t %.2f м. \n", query, g_business[i][B_NAME], g_business[i][B_SQL_ID], GetPlayerDistanceFromPoint(playerid, g_business[i][B_POS_X], g_business[i][B_POS_Y], g_business[i][B_POS_Z]));
				                                    count++;
				                                }
				                                IntfDialogCallRemote(playerid, DIALOG_ELECT_BUSINESS, DIALOG_STYLE_LIST, "Список бизнесов", query, "Выбрать", "Закрыть");
										    }
				                        }
			                        }
                                }
							}
						}
  						else
						{
							RemovePlayerFromVehicle(playerid);
       						SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете электриком");
						}
					}
					case VEHICLE_ACTION_TYPE_ACTIVE_ACS:
					{
						KillTimer(ActiveAcsTimer);
					}
					case VEHICLE_ACTION_TYPE_BAT_CAR:
					{
						new fam_id = GetPlayerData(playerid, P_FAMILY);
						
						if(GetFamilyData(fam_id, F_NORTH_MANSION) != 1)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
                    case VEHICLE_ACTION_TYPE_PEL_BASE:
					{
						new fam_id = GetPlayerData(playerid, P_FAMILY);

						if(GetFamilyData(fam_id, F_PELA_BASE) != 1)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_LYT_CAR:
					{
						new fam_id = GetPlayerData(playerid, P_FAMILY);

						if(GetFamilyData(fam_id, F_WEST_MANSION) != 1)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(action_id != 1)
						{
							if(!IsPlayerAdminLevel(playerid) && GetPlayerYAdminEx(playerid))
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
							}
						}
					}
					case VEHICLE_ACTION_TYPE_OWNABLE_CAR:
                    {
		
                    }
					case VEHICLE_ACTION_TYPE_FAMILY_CAR:
                    {
                        //new fam_id = GetPlayerData(playerid, P_FAMILY);
                        action_id = GetVehicleData(vehicleid, V_ACTION_ID);
						if(GetOwnableCarData(action_id, OC_OWNER_ID) == GetPlayerData(playerid, P_FAMILY))
						{
                            if(GetOwnableCarData(action_id, OC_RANG) > GetPlayerData(playerid, P_FAMILY_RANK))
                            {
                                RemovePlayerFromVehicle(playerid);
                                SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
                            }

						}
						else
						{
						    SendClientMessage(playerid, 0xCECECEFF, "* Данный транспорт принадлежит банде!");
						    RemovePlayerFromVehicle(playerid);
						}

                    }
				}
			}
			else
			{
				if(!IsABike(vehicleid))
				{
					switch(vehicle_type)
					{
						case VEHICLE_ACTION_TYPE_DRIVING_SCH:
						{
							if(!IsABike(vehicleid)) SpeedometrShowForPlayer(playerid);
							
							if(GetPVarInt(playerid, "autoschool_point") >= 9)
							{
								SetPVarFloat(playerid, "car_damage", 1000.0);

								SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
								NextDrivingExamRouteCP(playerid);

								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}приветствую на практической части экзамена по вождению, выслушайте мои инструкции, так вот, кхм...");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}вам необходимо ехать следуя моим указаниям, я буду говорить, где и когда нужно повернуть.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}и аккуратней! Если попадете в аварию или выйдите из машины, экзамен будет завершен.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}а также не забывайте о сигналах светофора и знаках STOP.");
								SendClientMessage(playerid, 0x42B02CFF, "[Инструктор]: {FFFFFF}как будете готовы, выдвигайтесь, но не забудьте пристегнуть ремень {42B02C}(( /rem )).");
							}
							return 1;
						}
					}
					if(GetVehicleModel(vehicleid) == 462) return SpeedometrShowForPlayer(playerid);

					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, 0xCECECEFF, "У вас нет водительских прав.");
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);

						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(VerifyIntString(QueryPlayerBalance(playerid), tariff))
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;

								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. Счетчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x3399FFFF, fmt_str);

								format(fmt_str, sizeof fmt_str, "Вы сели в такси %s. Тариф: %d рублей (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);

								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты тарифа");
							}
						}
						else
						{
							if(VerifyIntString(QueryPlayerBalance(playerid), tariff))
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								ModifyCashBalance(driver, tariff, "+ Оплата проезда в автобусе", true, true);
								ModifyCashBalance(playerid, -tariff, "- Оплата проезда в автобусе", true, true);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для оплаты проезда");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(GetPVarInt(playerid, "EditObjectAcsInv"))
		{
			new query[256];

			format(query, sizeof query, "UPDATE items SET status=1, foffset_x=%f, foffset_y=%f, foffset_z=%f, frot_x=%f, frot_y=%f, frot_z=%f, fscale_x=%f, fscale_y=%f, fscale_z=%f WHERE type=%d AND slots=%d AND owner_id=%d", 
			fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, GetPVarInt(playerid, "EditObjectAcsType"), GetPVarInt(playerid, "EditObjectAcsSlots"), GetPlayerAccountID(playerid));
			mysql_query(mysql, query, false);

			for(new i; i < MAX_PLAYER_ITEMS; i++)
			{
				if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
				if(GetPlayerItem(i, PI_SLOTS) != GetPVarInt(playerid, "EditObjectAcsSlots")) continue;
				if(GetPlayerItem(i, PI_TYPE) != GetPVarInt(playerid, "EditObjectAcsType")) continue;

				SetPlayerItem(i, PI_STATUS, 1);
				
				SetPlayerItem(i, PI_FOFFSET_X, 	fOffsetX);
				SetPlayerItem(i, PI_FOFFSET_Y, 	fOffsetY);
				SetPlayerItem(i, PI_FOFFSET_Z, 	fOffsetZ);
				SetPlayerItem(i, PI_FROT_X, 		fRotX);
				SetPlayerItem(i, PI_FROT_Y, 		fRotY);
				SetPlayerItem(i, PI_FROT_Z, 		fRotZ);
				SetPlayerItem(i, PI_FSCALE_X, 	fScaleX);
				SetPlayerItem(i, PI_FSCALE_Y, 	fScaleY);
				SetPlayerItem(i, PI_FSCALE_Z, 	fScaleZ);
				break;
			}

			callcmd::return_acsses(playerid);
		}
		if(GetPVarInt(playerid, "EditObjectAcs"))
		{
			if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);
			new businessid = GetPlayerInBiz(playerid);
			if(businessid != -1)
			{
               CEF_CREATE(playerid, 2, 4, "Accessories", "[[[\"Очки\",0],[\"Банданы\",1],[\"Маски\",2],[\"Береты\",3],[\"Шляпы\",4],[\"Сумка\",5],[\"Аксессуар на пояс\",6],[\"Часы\",7],[\"Рюкзак\",8],[\"Чокер\",10]],[[19006,\"Красные\",300000,0,0],[19007,\"Желтые\",350000,0,1],[19008,\"Зеленые\",350000,0,2],[19009,\"Синие\",350000,0,3],[19010,\"Розовые\",350000,0,4],[19011,\"Гипноз\",350000,0,5],[19012,\"Черные\",350000,0,6],[19013,\"Глаза\",350000,0,7],[19014,\"Шахматы\",350000,0,8],[19015,\"Обычные\",350000,0,9],[19016,\"X-ray\",350000,0,10],[13953,\"Для сноуборда\",8750000,0,11],[13995,\"Gucci\",1050000,0,12],[13996,\"American\",1050000,0,13],[13997,\"С обводкой\",1050000,0,14],[13998,\"Синий тигр\",1050000,0,15],[13999,\"Желтые\",1050000,0,16],[14462,\"Модные очки\",1665000,0,187]]]");
			}
			SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
			SetPlayerFacingAngle(playerid, 89.0);
			SetPlayerAnimation(playerid, 57);
			SetPlayerAnimation(playerid, 57);
			SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
			SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
			SetPlayerAnimation(playerid, 57);
			ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
			ModifyCashBalance(playerid, -GetPVarInt(playerid, "price_acs"), "Покупка аксессуара");
			SendClientMessage(playerid, 0xabababFF, "Поздравляем вас с приобретением нового аксессуара");
			callcmd::return_acsses(playerid);

			new price = (GetPVarInt(playerid, "price_acs") / 100) * 20;

			AddBusinessProfit(playerid, GetPlayerInBiz(playerid), price);

			new type;
			new td = GetPVarInt(playerid, "akstype");
			if(td == 0) type = 181;
			if(td == 1) type = 182;
			if(td == 2) type = 183;//маска
			if(td == 3) type = 184;
			if(td == 4) type = 185;
			if(td == 5) type = 219;
			if(td == 6) type = 220;
			if(td == 7) type = 221;
			if(td == 8) type = 222;
			if(td == 9) type = 246;

			CreateItemsAcs(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), modelid, type, 1, index, -1, -1, 0, 2);

			SetPVarInt(playerid, "akstype", 0);

			OnBattlePass_Perfomance(playerid, 7, 1);
		}
	}
	else
	{
		if(GetPVarInt(playerid, "EditObjectAcsInv"))
		{
			RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "EditObjectAcsIndex"));
			DeletePVar(playerid, "EditObjectAcsIndex"); DeletePVar(playerid, "EditObjectAcsInv");
			DeletePVar(playerid, "aks_id");
			callcmd::return_acsses(playerid);
		}
	}
	return 1;
}
public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{
    CEF_HIDE(playerid, "MusicPlayer");
    
    if(TestDrive[playerid] == 1)
    {
        DestroyVehicle(g_temp_vehicle2[playerid]);
        g_temp_vehicle2[playerid] = INVALID_VEHICLE_ID;
	    CEF_HIDE(playerid, "Interactions");
	    SCM(playerid, 0x6699CCFF, "{ecf96a}Тест-драйв {FFFFFF}донат-пакета {ecf96a}был завершён.");
	    GameText(playerid, "~g~Тест-Драйв Завершён", 3000, 2);
	    TestDrive[playerid] = 0;
	    KillTimer(testdrive_timer[playerid]);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetVehicleVirtualWorld(g_temp_vehicle2[playerid], 0);
	    CEF_HIDE(playerid, "InformationTimer");
	    if(PosTestDrive[playerid] == 1)
        {
            SetPlayerPos(playerid, 1919.7533,-1978.5594,31.5505);
            SetPlayerFacingAngle(playerid, 142.9231);
            PosTestDrive[playerid] = 0;
        }
        if(PosTestDrive[playerid] == 2)
        {
            SetPlayerPos(playerid, 1867.2260,2803.1262,12.0000);
            SetPlayerFacingAngle(playerid, 125.4598);
            PosTestDrive[playerid] = 0;
        }
        if(PosTestDrive[playerid] == 3)
        {
            SetPlayerPos(playerid, -1938.8820,2909.1531,5.9990);
            SetPlayerFacingAngle(playerid, 264.6414);
            PosTestDrive[playerid] = 0;
        }
        if(PosTestDrive[playerid] == 4)
        {
            SetPlayerPos(playerid, -1912.2034,1917.0387,175.2322);
            SetPlayerFacingAngle(playerid, 0.0000);
            PosTestDrive[playerid] = 0;
        }
        if(PosTestDrive[playerid] == 5)
        {
            SetPlayerPos(playerid, -406.2524,746.5653,12.2882);
            SetPlayerFacingAngle(playerid, 75.3678);
            PosTestDrive[playerid] = 0;
        }
	}
	if(remen[playerid] == 1)
	{
		Action(playerid, "отстегнул ремень безопасности");
		GameText(playerid, "~r~Ремень безопасности расстегнут", 4000, 1);
     	remen[playerid] = 0;
	}

    if(GetPVarInt(playerid,"spil") == 1)
	{
		new vehicleid1 = GetPlayerOwnableCarLast(playerid);
		PutPlayerInVehicle(playerid, vehicleid1, 0);
		SetVehiclePos(vehicleid, 2564.9683,-1996.5657,1000.2740);
		SetVehicleZAngle(vehicleid, 358.9472);
		TogglePlayerControllable(playerid, 0);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, playerid + 1);

		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, playerid + 1);

		SetPlayerCameraPos(playerid,2567.752685, -1993.758789, 1001.270874);
		SetPlayerCameraLookAt(playerid,2563.825439, -1996.851196, 1001.153442);
		SpeedometrHideForPlayer(playerid);
		CEF_CREATE(playerid, 1, 2, "openInterface('TuningSprings')");
		CEF_CREATE(playerid, 1, 2, "interface('TuningSprings').springsSlices = [{diameter: 0.8}, {diameter: 0.7}, {diameter: 0.6}, {diameter: 0.5}, {diameter: 0.4}]");

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningSprings').balance = %s", QueryPlayerBalance(playerid));
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

		CEF_CREATE(playerid, 1, 2, "interface('TuningSprings').customPrice = 1000000");

		CEF_CREATE(playerid, 1, 2, "interface('TuningSprings').stockPrice = 500000");
		
		DeletePVar(playerid, "spil");
	}
	if(soundveh[vehicleid] == 1)
	{
		new Float: x, Float: y, Float: z;
		GetVehiclePos(vehicleid, x,y,z);
		soundveh[vehicleid] = 0;
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
	        format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.destroySound(%d, 30)",vehicleid);

			if(beepplayer[vehicleid][i] == 1)CEF_CREATE(i, 1, 2,STRING_GLOBAL);

			if(kryak[vehicleid][i] == 1)CEF_CREATE(i, 1, 2,STRING_GLOBAL);
	    }
    }
	//==============================================================================
    if(vehicleid == snoybord[playerid])
	{
		DestroyVehicle(snoybord[playerid]);
		snoybord[playerid] = -1;
	}
	//
	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);

	if(is_driver)
	{
	    if(GetPVarInt(playerid, "in_test_drive") == 1)
	    {
	        SetPVarInt(playerid, "in_test_drive", 0);
		 	new index = GetVehicleData(vehicleid, V_ACTION_ID);
			SendClientMessage(playerid, 0x66CC00FF, "Тест-драйв закончен!");
			KillTimer(timertest[playerid]);
			if(GetOwnableCarData(index, OC_BY_ID) == 2)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
                SetPlayerPosAcc(playerid, 1587.1755,1834.1040,996.5703,179.1926);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 21)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_1],g_load_car_market[indx][POS_MESTO_Y_1],g_load_car_market[indx][POS_MESTO_Z_1],g_load_car_market[indx][POS_MESTO_ANGEL_1]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				}
			}
			if(GetOwnableCarData(index, OC_BY_ID) == 1)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
                SetPlayerPosAcc(playerid, -1587.7893,998.9899,1001.1563, 0.0);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 20)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_2],g_load_car_market[indx][POS_MESTO_Y_2],g_load_car_market[indx][POS_MESTO_Z_2],g_load_car_market[indx][POS_MESTO_ANGEL_2]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				}
			}
			if(GetOwnableCarData(index, OC_BY_ID) == 3)
			{
			    SetVehicleParam(vehicleid, V_ENGINE, false);
			    SetPlayerPosAcc(playerid, 2290.1001,1803.0746,1000.9609, 270.0);
				new indx = GetOwnableCarData(index, OC_MESTOID);
				if(indx >= 1 || indx <= 13)
				{
					SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_3],g_load_car_market[indx][POS_MESTO_Y_3],g_load_car_market[indx][POS_MESTO_Z_3],g_load_car_market[indx][POS_MESTO_ANGEL_3]);
					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, 4);
					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, 4);
				} 
			}
	    }
		SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

		if(vodila[vehicleid] == playerid && GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
		{
			StartCarJobTimer(playerid, 15000, vehicleid);
			SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
			if(GetPVarInt(playerid,"fermawork") == 1)
	        {
		        DisablePlayerCheckpoint(playerid);
		        DeletePVar(playerid, "fermawork");
	        }
		}

		if(!IsABike(vehicleid))
			SpeedometrHideForPlayer(playerid);

		if(GetPVarInt(playerid, "autoschool_point") >= 9)
		{
			DisablePlayerRaceCheckpoint(playerid);

			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				DestroyVehicle(vehicleid);
			}
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerData(playerid, P_DRIVING_LIC, 0);
			ClearPlayerDrivingExamInfo(playerid);
            SetPlayerPos(playerid, 1916.3922,1925.9412,15.6825);
			SendClientMessage(playerid, 0xFF6600FF, "Вы покинули учебный автомобиль");
			SendClientMessage(playerid, 0xFF0000FF, "Экзамен провален!");
   			SetPVarInt(playerid, "autoschool_point", 0);

			DeletePVar(playerid, "car_damage");
		}

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_TRUCKER_1:
			{
				if(GetPlayerJobCar(playerid) == vehicleid)
				{
					StartEndJobTimer(playerid);

					STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Вернуться в транспорт\",%d]", 120);
					CEF_CREATE(playerid, 2, 4, "InformationTimer", STRING_GLOBAL);

					SCM(playerid, COLOR_RED, "У вас есть 2 минуты чтобы вернуться в транспорт, иначе он пропадет");
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(HasJob(playerid, 7))
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimerBus(playerid);
						    STRING_GLOBAL[0] = EOS;
					        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Вернуться в транспорт\",%d]", 50);
					        CEF_CREATE(playerid, 2, 4, "InformationTimer", STRING_GLOBAL);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 50 секунд чтобы вернуться в автобус");
							stop_bus_job[playerid] = 1;
							CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Закончить работу\"]]");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_ELECTRICIAN:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
				{
					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimerElektrik(playerid);
						STRING_GLOBAL[0] = EOS;
					    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Вернуться в транспорт\",%d]", 180);
					    CEF_CREATE(playerid, 2, 4, "InformationTimer", STRING_GLOBAL);
						SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 3 минуты чтобы вернуться в транспорт, иначе он пропадёт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_ACTIVE_ACS:
			{
				ActiveAcsTimer = SetTimerEx("DeleteActiveAcs", 3600000, false, "i", playerid);
			}
			case VEHICLE_ACTION_TYPE_SKATEBOARD:
			{
				for(new i; i < MAX_PLAYER_ITEMS; i++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_RETURN_ITEMS) != 0) continue;
					if(GetPlayerItem(i, PI_TYPE) != 0) continue;
					if(GetPlayerItem(i, PI_TYPEACS) != 324) continue;
					if(GetPlayerItem(i, PI_STATUS) != 2) continue;

					SetPlayerItem(i, PI_STATUS, 1);
					if(skateboard[playerid] != INVALID_VEHICLE_ID)
					{
						DestroyVehicle(skateboard[playerid]);
						skateboard[playerid] = INVALID_VEHICLE_ID;
					}
					callcmd::return_acsses(playerid);
					break;
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_RERFECT:
			{
				if(GetPlayerJob(playerid) == JOB_RERFECT_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "У Вас есть 15 секунд чтобы вернуться в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new Float: hp_vehicle;
    new veh_id = GetPlayerVehicleID(playerid);
    
    if(GetVehicleData(vehicleid, V_MODELID) == 15282)
	{
	    SetVehicleHealth(veh_id, 1000);
	}
    if(GetVehicleData(vehicleid, V_MODELID) == 15283)
	{
	    SetVehicleHealth(veh_id, 1000);
	}
    if(GetVehicleData(vehicleid, V_MODELID) == 15117)
	{
	    SetVehicleHealth(veh_id, 1000);
	}
	if(GetVehicleData(vehicleid, V_MODELID) == 17404)
	{
	    SetVehicleHealth(veh_id, 1000);
	}

	new Float:health;
    GetVehicleHealth(vehicleid, health);

    if(health < 350.0) // Если ниже 300, восстанавливаем
    {
        SetVehicleHealth(vehicleid, 1000.0);
    }

    GetVehicleHealth(veh_id, hp_vehicle);

    //if (hp_vehicle < 400) SetVehicleHealth(veh_id, 450);

	if(remen[playerid] == 0 && IsPlayerDriver(playerid)) 
	{
		new Float:Health;
		GetPlayerHealth(playerid, Health);
		SetPlayerHealthEx(playerid, Health - (hp_vehicle / 150));
	}
    return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);

	if(g_player_mine_cp[playerid] != 0)
	{
		if(g_player_mine_cp[playerid] == 1)
		{
			SCM(playerid, -1, "Если лифт еще не приехал, ожидайте, он прибудет в течении минуты.");
			g_player_mine_cp[playerid] = 2;

			DisablePlayerCheckpoint(playerid);
		}
		else if(g_player_mine_cp[playerid] == 2)
		{
			DisablePlayerCheckpoint(playerid);
			g_player_mine_cp[playerid] = 3;
		}
		else if(g_player_mine_cp[playerid] == 3)
		{
			DisablePlayerCheckpoint(playerid);
		}
		else if(g_player_mine_cp[playerid] == 4)
		{
			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObjectEx(playerid, 0, 6);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 17109, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, -0.2, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
			ApplyAnimationEx(playerid, "PED", "BOMBER", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
			GameText(playerid, "Вы взяли инструмент~n~Возвращайтесь к месту добычи", 3000, 2);
			g_player_mine_status[playerid] = 4;

			new id = g_player_mine_ore[playerid];

			g_player_mine_cp[playerid] = 5;
			SetPlayerCheckpoint(playerid, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2] + 0.5, 1.0);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 5)
		{
			DisablePlayerCheckpoint(playerid);
			Progress_Bar_Menu(playerid, 12, 20, 20);

			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			return 1;
		}
		else if(g_player_mine_cp[playerid] == 6)
		{
			DisablePlayerCheckpoint(playerid);
			GameText(playerid, "Вы взяли инструмент~n~Возвращайтесь к месту добычи", 3000, 2);
			g_player_mine_status[playerid] = 2;

			new id = g_player_mine_ore[playerid];

			g_player_mine_cp[playerid] = 7;
			SetPlayerCheckpoint(playerid, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2] + 0.5, 1.0);

			GivePlayerWeapon(playerid, 6, 1);
			SetPlayerAmmo(playerid, 6, 1);

			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, 0);

			ApplyAnimationEx(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);

			return 1;
		}
		else if(g_player_mine_cp[playerid] == 7)
		{
			DisablePlayerCheckpoint(playerid);

			new id = g_player_mine_ore[playerid];

			RemovePlayerAttachedObjects(playerid);

			g_player_mine_object[playerid] = CreateDynamicObject(1458, g_mine_ore_pos[id][MOP_CART][0], g_mine_ore_pos[id][MOP_CART][1], g_mine_ore_pos[id][MOP_CART][2], g_mine_ore_pos[id][MOP_CART][3], 0.0, 0.0);

			zagruz_timer[playerid] = SetTimerEx("MinerTimer", 1000, true, "ii", playerid, 2);

			CEF_CREATE(playerid, 2, 4, "ProgressBar", "[[\"Загрузка\", 0, 1000]]");

			TogglePlayerControllable(playerid, false);

			ApplyAnimationEx(playerid, "ped", "a_dig", 4.0, true, 0, 0, 1, 0, 0, USE_ANIM_TYPE_NONE);

			return 1;
		}
		else if(g_player_mine_cp[playerid] == 8)
		{
			DisablePlayerCheckpoint(playerid);

            new rand = random(45) + 16;
            new items = GetPlayerJobLoadItems(playerid) + rand;

			SetPlayerJobLoadItems(playerid, items);

            SCMF(playerid, 0xf49810FF, "Вы доставили {FFFFFF}\"Каменный уголь\" (%d.0 кг).", rand);

            if(GetPlayerLevel(playerid) > 4)
			{
                AddPlayerData(playerid, P_ACHIV_4, +, rand);
                UpdatePlayerDatabaseInt(playerid, "achiv_4", GetPlayerData(playerid, P_ACHIV_4));
        
		        if(GetPlayerData(playerid, P_ACHIV_4) >= 1000 && GetPlayerData(playerid, P_ACHIV_4_COMPLETED) == 0)
		        {
			        GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
                    SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Алмазная кирка\"");
			        SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			        SetPlayerData(playerid, P_ACHIV_4_COMPLETED, 1);
                    UpdatePlayerDatabaseInt(playerid, "achiv_4_completed", 1);

				    CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[4, 0, \"Вы получили достижение!\"]");
			    }
			}

            new oreIndex = g_player_mine_ore[playerid];
			new rack = g_player_mine_rack[playerid];

            if(oreIndex != -1)
            { 
                switch(g_mine_ore[oreIndex][MO_TYPE])
                {
                    case 2: // Железная руда
                    {
						new gram = RandomEx(1, 20);
                        new ryda;

                        switch(gram)
                        {
                            case 1: ryda = 1;
                            case 2: ryda = 2;
                            case 3: ryda = 3;
                            case 4: ryda = 4;
                            case 5: ryda = 5;
                            case 6: ryda = 6;
							case 7: ryda = 7;
							case 8: ryda = 8;
							case 9: ryda = 9;
							case 10: ryda = 10;
							case 11: ryda = 11;
							case 12: ryda = 12;
							case 13: ryda = 13;
							case 14: ryda = 14;
							case 15: ryda = 15;
							case 16: ryda = 16;
							case 17: ryda = 17;
							case 18: ryda = 18;
							case 19: ryda = 19;
							case 20: ryda = 20;
                        }

                        new totalRyda = GetPlayerJobLoadItems(playerid) + ryda;
                        SCMF(playerid, 0xf49810FF, "Вам повезло найти {FFFFFF}\"Железную руду\" весом {FFFFFF}%d гр.", gram);
						SetPlayerJobLoadItems(playerid, totalRyda);
                    }
                    case 3: // Серебряная руда
                    {
						new gram = RandomEx(1, 15);
                        new ryda;

                        switch(gram)
                        {
                            case 1: ryda = 2;
                            case 2: ryda = 4;
                            case 3: ryda = 5;
                            case 4: ryda = 6;
                            case 5: ryda = 7;
                            case 6: ryda = 8;
							case 7: ryda = 9;
							case 8: ryda = 10;
							case 9: ryda = 11;
							case 10: ryda = 12;
							case 11: ryda = 13;
							case 12: ryda = 14;
							case 13: ryda = 15;
							case 14: ryda = 16;
							case 15: ryda = 17;
                        }

                        new totalRyda = GetPlayerJobLoadItems(playerid) + ryda;
                        SCMF(playerid, 0xf49810FF, "Вам повезло найти {FFFFFF}\"Серебряную руду\" весом {FFFFFF}%d гр.", gram);
						SetPlayerJobLoadItems(playerid, totalRyda);
                    }
                    case 4: // Золотая руда
                    {
						new gram = RandomEx(1, 6);
                        new ryda;

                        switch(gram)
                        {
                            case 1: ryda = 4;
                            case 2: ryda = 8;
                            case 3: ryda = 12;
                            case 4: ryda = 15;
                            case 5: ryda = 19;
                            case 6: ryda = 26;
                        }

                        new totalRyda = GetPlayerJobLoadItems(playerid) + ryda;
                        SCMF(playerid, 0xf49810FF, "Вам повезло найти {FFFFFF}\"Золотую руду\" весом {FFFFFF}%d гр.", gram);
                        SetPlayerJobLoadItems(playerid, totalRyda);
                    }
                } 
            }

            SCM(playerid, 0xf49810FF, "Теперь вы можете взять перфоратор и найти новое месторождение либо закончить работу.");

            GiveRandCase(playerid);
            RemovePlayerAttachedObjects(playerid);
            ApplyAnimationEx(playerid, "MISC", "CASE_PICKUP", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);

            new fmt_text[128];
            format(fmt_text, sizeof fmt_text, "~y~+%d руб.~n~~w~Заработано: ~y~%d руб.", GetTempJobInfo(TEMP_JOB_MINER, TJ_PAY_FOR_LOAD), items * GetTempJobInfo(TEMP_JOB_MINER, TJ_PAY_FOR_LOAD));
            GameText(playerid, fmt_text, 3000, 2);

			SetPlayerCheckpoint(playerid, g_mine_rack[rack][0], g_mine_rack[rack][1], g_mine_rack[rack][2], 2.0);

            g_mine_ore[oreIndex][MO_STATUS] = 0;
            g_player_mine_status[playerid] = 0;
            g_player_mine_object[playerid] = INVALID_OBJECT_ID;
            g_player_mine_sphere[playerid] = 0;
            g_player_mine_ore[playerid] = -1;
            g_player_mine_cp[playerid] = 3;
			return 1;
		}
	}

	if(neft_cp[playerid] == 1)
	{
	     IntfDialogCallRemote
		 (
			playerid, DIALOG_NEFT, DIALOG_STYLE_TABLIST_HEADERS,
			"{FFFFFF}Выберите желаемый тип строительства",
			"Тип\tДлительность\tСтоимость\n\
			1.Обычное\t{ffa500} 29 минут\t{ffa500} 1.000.000 руб\n\
			2.Ускоренное\t{ffa500} 1 минута\t{ffa500} 5.000.000 руб\n",
			"Далее", "Закрыть"
	     );
	}
	if(lesopilka_cp[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
		lesopilka_cp[playerid] = 0;
	}
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
		    case CP_ACTION_TYPE_PUT_TRAIN:
			{
				if(GetPVarInt(playerid,"metro_work") == 1)
				{
					if(metro_status != 1) return SendClientMessage(playerid, 0x66CC00FF, "Произошла ошибка.Обратитесь к разработчику проекта");
					if(!IsValidVehicle(metro_train[playerid])) return SendClientMessage(playerid, 0xFF6600FF, "Произошла ошибка.Обратитесь к разработчику проекта");
					PutPlayerInVehicle(playerid, metro_train[playerid], 0);
					DisablePlayerCheckpoint(playerid);
					metro_status = 0;
					DeletePVar(playerid, "Metro_start");
					SetPlayerRaceCheckpoint
					(
						playerid,
						0,
						-382.2303,
						555.6013,
						8.0086,
						0,
						0,
						0,
						4.0,
						RCP_ACTION_TYPE_METRO_TRAIN_1
					);

					new fmt_td_text[250];
					//
				    CEF_CREATE(playerid, 1, 2, "openInterface('Machinist')");
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
					CEF_CREATE(playerid, 1, 2, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
					CEF_CREATE(playerid, 1, 2, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.type = 1");
					CEF_CREATE(playerid, 1, 2, fmt_td_text);
					format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
					CEF_CREATE(playerid, 1, 2, fmt_td_text);

				}
			}
			case CP_ACTION_TYPE_PUT_FERMA:
			{
				if(GetPVarInt(playerid,"fermawork") == 1)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerRaceCheckpoint
					(
						playerid,
						0,
						1555.0364,
						679.0833,
						16.5127,
						0,
						0,
						0,
						2.0,
						RCP_ACTION_TYPE_FERMA_1
					);
				}
			}
			case CP_ACTION_TYPE_LUMBERJACK_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerLumberJackTakeWood", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_TAKE:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
			    {
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);
						   	
						   	SetPlayerFermerTake(playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_PUT:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_PUT)
					{
                        if(!IsPlayerInAnyVehicle(playerid))
						{
						    SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);

						    RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

						    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						    new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

						    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount + 1);
						
						    DisablePlayerCheckpoint(playerid);

						    SetPlayerFermerChopCP(playerid);
					    }
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_TAKE_SBOR:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
			    {
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_SBOR)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

						   	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerFermerTakeSbor", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_POLE:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
			    {
				    if(GetPVarInt(playerid,"fermawork") == 1)
					{
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                        DisablePlayerCheckpoint(playerid);
						PoleFerma(playerid);
					}
				}
			}
			case CP_ACTION_TYPE_FERMER_PUT_SBOR:
			{
			    if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FERMER_PUT_SBOR)
					{
                        if(!IsPlayerInAnyVehicle(playerid))
						{
						    SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_SBOR);

						    RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

						    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 2);

						    new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

						    SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);

						    DisablePlayerCheckpoint(playerid);

						    SetPlayerFermerChopCPSbor(playerid);
					    }
					}
				}
			}
			case CP_ACTION_TYPE_LOADER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							Progress_Bar_Menu(playerid, 2, 15, 15);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
                            Progress_Bar_Menu(playerid, 4, 15, 15);
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{
		    case RCP_ACTION_TYPE_METRO_TRAIN_1:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-77.5733,
					824,
					-31.5574,
					-77.5733,
					824,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_2
				);
				OnFirstPersonMetro(playerid);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_2:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					107.3856,
					803.6250,
					-31.5574,
					107,
					803,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_3
				);
				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_3:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-260.1489,
					375.7960,
					-31.9455,
					-260,
					375,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_4
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Арзамас-Сити'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_4:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					4.2539,
					320.6250,
					-31.5574,
					4,
					320,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_5
				);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_5:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					655.7362,
					443.1285,
					-31.5574,
					655,
					443,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_6
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Вокзальная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);


				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_6:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					769.3750,
					777.3989,
					-31.5574,
					769,
					777,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_7
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_7:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
                if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					312.8916,
					1238,
					-31.5574,
					312,
					1238,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_8
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",  10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Союзная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_8:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-9.1982,
					1453,
					-31.5574,
					-9,
					1453,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_9
				);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_9:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					157.1733,
					1625.6865,
					-31.5574,
					157.1733,
					1625,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_10
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Больничная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_10:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					312.7500,
					1870.4987,
					-31.5574,
					312,
					1870.4987,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_11
				);

				new fmt_td_text[300];

    			format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_11:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					329.0008,
					2153.1912,
					-31.5574,
					329,
					2153,
					-31,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_12
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

    			format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Больничная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_12:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					295.0000,
					1804.9170,
					-31.5574,
					295,
					1804.9170,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_13
				);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_13:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
                if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-160.7650,
					1613.0304,
					-31.5574,
					68.8101,
					-160.7650,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_14
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Союзная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_14:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					68.8101,
					1430.3750,
					-31.5574,
					68.8101,
					1430.3750,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_15
				);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_15:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					694.0261,
					1001.7910,
					-31.5574,
					694.0261,
					1001.7910,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_16
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ",10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Вокзальная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_16:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					749.8750,
					707.6361,
					-31.5574,
					749.8750,
					707.6361,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_17
				);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_17:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					271.0938,
					365.3865,
					-31.5574,
					271.0938,
					365.3865,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_18
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Арзамас-Сити'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_18:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-69.5696,
					338.5000,
					-31.5574,
					-69.5696,
					338.5000,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_19
				);

				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_19:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					358.4632,
					722.5936,
					-31.5574,
					358.4632,
					722.5936,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_20
				);
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_20:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					35.0479,
					820.5000,
					-31.5574,
					35.0479,
					820.5000,
					-31.5574,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_21
				);
				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);

			}
			case RCP_ACTION_TYPE_METRO_TRAIN_21:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				if(GetVehicleSpeed(metro_train[playerid]) < 3)
				{
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-383.7589,
					571.2349,
					6.8831,
					-383.7589,
					571.2349,
					6.8831,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_22
				);//////////////////////////////////////////////////////////
				GameText(playerid, "~g~~h~ОЖИДАЙТЕ", 10000, 1);

				metro_taimer[playerid][0] = SetTimerEx("Metro_Ostanovka", 10000, false, "i", playerid);

				new fmt_td_text[300];

				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Депо'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [0,0,0,0]");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				}
				//DestroyPickup
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_22:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-480.8936,
					283.3649,
					12.3176,
					-480.8936,
					283.3649,
					12.3176,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_23
				);
				new fmt_td_text[300];
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '0-2'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				OffFirstPerson(playerid);
			}
			case RCP_ACTION_TYPE_METRO_TRAIN_23:
			{
				if(vehicleid != metro_train[playerid]) return SendClientMessage(playerid, 0x3399FFFF, "Вы не в вашем поезде!");
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
					-382.2303,
					555.6013,
					8.0086,
					0,
					0,
					0,
					4.0,
					RCP_ACTION_TYPE_METRO_TRAIN_1
				);

				new fmt_str[130];

				format(fmt_str, sizeof fmt_str, "Вы заработали %d руб.", metro_zarplata[playerid]);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
				ModifyCashBalance(playerid, metro_zarplata[playerid], "Работа метро", true, true);

				metro_zarplata[playerid] = 0;

				new fmt_td_text[300];
				//
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').station.name = 'Центральная'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
				format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
				CEF_CREATE(playerid, 1, 2, fmt_td_text);
			}
			case RCP_ACTION_TYPE_DRIVING_EXAM:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
				    if(remen[playerid] == 0)
				    {
				        SendClientMessage(playerid, 0xBE2D2DFF, "[Инструктор]: {FFFFFF}вы не пристегнули ремень безопасности.");
				        SendClientMessage(playerid, 0xBE2D2DFF, "[Инструктор]: {FFFFFF}к сожалению, вы провалили практическую часть экзамена по вождению.");
				        ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);
						SetPVarInt(playerid, "autoschool_point", 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						DestroyVehicle(vehicleid);
						SetPlayerData(playerid, P_DRIVING_LIC, 0);
				        return 1;
				    }
					new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

					if(step >= sizeof driving_exam_route - 1)
					{
						ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);

						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);

						new Float: health = GetPVarFloat(playerid, "car_damage");
						SetPVarInt(playerid, "autoschool_point", 0);
						DestroyVehicle(vehicleid);

						if(health < 900.0)
						{
							IntfDialogCallRemote
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Экзамен провален",
								"{FFFFFF}К сожалению, Вам не удалось справиться с практической частью экзамена.\n"\
								"Уровень повреждений машины слишком высокий.\n\n"\
								"В сдедующий раз постарайтесь ехать аккуратнее, соблюдая ПДД.\n"\
								"Ждем Вас на пересдаче!",
								"Ок", ""
							);
						}
						else
						{
							SetPlayerData(playerid, P_DRIVING_LIC, 1);
							
							UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));

							if(!mysql_errno())
							{
								IntfDialogCallRemote
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{66CC00}Экзамен пройден успешно",
									"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n"\
									"и получаете водительское удостоверение!\n"\
									"{9999FF}На Вашей машине не обнаружено никаких повреждений, либо\n"\
									"они незначительны.\n"\
									"{FFFFFF}Не забывайте клавиши управления транспортом, а также\n"\
									"правила дорожного движения. Они будут постоянно нужны\n"\
									"Вам на дороге. Обучающий раздел в автошколе будет все\n"\
									"время доступен если понадобится какая-либо помощь.",
									"Ок", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, обратитесь к администрации {FF0000}(equ-code 07)");
							}
	  					}
					}
					else if(step >= 0)
					{
						NextDrivingExamRouteCP(playerid);
					}
				}
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);

						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}

						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							new fmt_str[90];
							DisablePlayerRaceCheckpoint(playerid);

							GameText(playerid, "~r~Остановитесь", 3000, 2);
							SendClientMessage(playerid, COLOR_GOLD, "Остановка. Ждите пассажиров");

							format(fmt_str, sizeof fmt_str, "Автобус по маршруту %s отправляется через 10 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);

							SetTimerEx("NextBusRouteCP", 10_000, false, "i", playerid);
							GiveRandCase(playerid);
						}
						else
						{
							DisablePlayerRaceCheckpoint(playerid);
							AddPlayerData(playerid, P_JOB_WAGE, +, 250000);
							NextBusRouteCP(playerid);
							GiveRandCase(playerid);
						}
					}
				}
			}
			
			case RCP_ACTION_TYPE_ORDER_INVITE:
			{
                new modelid = GetVehicleData(vehicleid, V_MODELID);

				if(!IsNoTrailerTruck(modelid, 0)) if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "У вас нет прицепа для загрузки.");

				string_dialog[0] = EOS;

				format
				(
					string_dialog, sizeof string_dialog,
					"{FFFFFF}Ваш грузовой отсек заполнен на {f0d474}%d {FFFFFF}ед. (максимум: {f0d474}5300 {FFFFFF}ед.)\n\
				    Производитель рекомендует придерживаться {b8d469}4080 {FFFFFF}ед.\n\n\
					Выберите необходимое действие с товаром:",
					GetPlayerJobLoadItems(playerid)
				);

				IntfDialogCallRemote(playerid, DIALOG_JOB_ITEM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Действие на заводе", string_dialog, "Погрузка", "Разгрузка");
			}
			case RCP_ACTION_TYPE_ORDER2_INVITE:
			{
                new modelid = GetVehicleData(vehicleid, V_MODELID);

	            if(!IsNoTrailerTruck(modelid, 1)) if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "У вас нет прицепа для загрузки.");
				
				string_dialog[0] = EOS;

				format
				(
					string_dialog, sizeof string_dialog,
					"{FFFFFF}Ваш грузовой отсек заполнен на {f0d474}%d {FFFFFF}ед. (максимум: {f0d474}5300 {FFFFFF}ед.)\n\
				    Производитель рекомендует придерживаться {b8d469}4080 {FFFFFF}ед.\n\n\
					Выберите необходимое действие с топливом:",
					GetPlayerJobLoadItems(playerid)
				);

				IntfDialogCallRemote(playerid, DIALOG_JOB2_ITEM, DIALOG_STYLE_MSGBOX, "{FFFFFF}Действие на заводе", string_dialog, "Погрузка", "Разгрузка");
			}
			case RCP_ACTION_TYPE_ORDER:
			{
				if(!HasJob(playerid, 15)) return true;
				if(GetPlayerData(playerid, P_IN_JOB) == false) return true;

				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3 || vehicleid == GetPlayerData(playerid, P_JOB_CAR))
				{
                    new modelid = GetVehicleData(vehicleid, V_MODELID);

	                if(!IsNoTrailerTruck(modelid, 0)) if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "Невозможно начать разгрузку, так как у вас отсутствует прицеп с товаром");
					
					new order_id = GetPlayerData(playerid, P_ORDER);

					if(IsPlayerInJob(playerid) && order_id != -1)
					{
						new biz_id = GetOrderData(order_id, O_COMPANY_ID);

						if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetBusinessData(biz_id, B_EXIT_POS_X), GetBusinessData(biz_id, B_EXIT_POS_Y), GetBusinessData(biz_id, B_EXIT_POS_Z))) return 1;

						if(!GetPlayerJobLoadItems(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет товара");

						g_player_order_time[playerid][2] = GetPlayerJobLoadItems(playerid) / 180;

						SCMF(playerid, 0xFFFFFFFF, "Разгрузка товара началась, примерное время: {abc77a}%d сек{FFFFFF}, не покидайте свой транспорт", g_player_order_time[playerid][2]);

						TogglePlayerControllable(playerid,false);
					}
				}
			}
			case RCP_ACTION_TYPE_ORDER2:
			{
				if(!HasJob(playerid, 15)) return true;
				if(GetPlayerData(playerid, P_IN_JOB) == false) return true;

				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3 || vehicleid == GetPlayerData(playerid, P_JOB_CAR))
				{
                    new modelid = GetVehicleData(vehicleid, V_MODELID);

	                if(!IsNoTrailerTruck(modelid, 1)) if(!IsTrailerAttachedToVehicle(vehicleid)) return SCM(playerid, COLOR_GREY, "Невозможно начать разгрузку, так как у вас отсутствует прицеп с топливом");

					new order_id = GetPlayerData(playerid, P_FUELORDER);

					if(IsPlayerInJob(playerid) && order_id != -1)
					{
						new biz_id = GetFuelOrderData(order_id, F_COMPANY_ID);

						if(!IsPlayerInRangeOfPoint(playerid, 4.5, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z))) return 1;

						if(!GetPlayerJobLoadItems(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "В Вашем транспорте нет товара");

						g_player_order_time_fuel[playerid][2] = GetPlayerJobLoadItems(playerid) / 180;

						SCMF(playerid, 0xFFFFFFFF, "Разгрузка топлива началась, примерное время: {abc77a}%d сек{FFFFFF}, не покидайте свой транспорт", g_player_order_time_fuel[playerid][2]);

						TogglePlayerControllable(playerid,false);
					}
				}
			}
			case RCP_ACTION_TYPE_ELECT:
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
					{
						DisablePlayerRaceCheckpoint(playerid);
						CEF_CREATE(playerid, 1, 4, "Wires");
						ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 1, 1, USE_ANIM_TYPE_NONE - 1);
					}
					else SCM(playerid, COLOR_RED, "Вы не работаете электриком");
				}
				else SCM(playerid, COLOR_RED, "Вы не должны быть в транспорте");
			}
			case RCP_ACTION_TYPE_FERMA_1:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1514.0677,
					664.5661,
					16.5088,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_2
				);
			}
			case RCP_ACTION_TYPE_FERMA_2:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1502.4069,
					638.0404,
					16.5105,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_3
				);
			}
			case RCP_ACTION_TYPE_FERMA_3:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1470.3733,
					641.9553,
					16.5097,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_4
				);
			}
			case RCP_ACTION_TYPE_FERMA_4:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1472.7223,
					694.0268,
					16.5142,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_5
				);
			}
			case RCP_ACTION_TYPE_FERMA_5:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1431.9135,
					735.8588,
					16.5088,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_6
				);
			}
			case RCP_ACTION_TYPE_FERMA_6:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1423.5615,
					762.5255,
					16.5125,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_7
				);
			}
			case RCP_ACTION_TYPE_FERMA_7:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1405.3258,
					734.3431,
					16.5125,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_8
				);
			}
			case RCP_ACTION_TYPE_FERMA_8:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1416.6438,
					641.8513,
					16.5122,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_9
				);
			}
			case RCP_ACTION_TYPE_FERMA_9:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1451.1217,
					601.3340,
					16.5107,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_10
				);
			}
			case RCP_ACTION_TYPE_FERMA_10:
			{
                SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 4);
                new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount + 1);
                new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);

                SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount2 + 1);
                DisablePlayerRaceCheckpoint(playerid);
				SetPlayerRaceCheckpoint
				(
					playerid,
					0,
                    1477.0015,
					600.6426,
					16.5097,
					0,
					0,
					0,
					1.0,
					RCP_ACTION_TYPE_FERMA_1
				);
			}
			default:
			{

			}
		}

	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}

	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);

	return 1;
}

stock UpdateMedBed(bedid)
{
	new fmt_text[85];

	format(fmt_text, sizeof fmt_text, "Койка №%d\n{00CC00}Свободна", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_text);

	return 1;
}

public: HospitalTreatment()
{
	foreach(new playerid: Player)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000) && !IsPlayerInRangeOfPoint(playerid, 70.0, 431.1976,1732.5670,1301.0000))
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}
		else
		{
			if(GetPlayerPremium(playerid) < 1)
			{
				GameText(playerid, "~g~+ 1 Здоровье", 1000, 2);
				SetPlayerChatBubble(playerid, "+1 hp", 0x33CC33FF, 5.0, 1000);

				SetPlayerHealthEx(playerid, 1.0, true);
			}
			else
			{
				GameText(playerid, "~g~+ 10 Здоровье", 1000, 2);
				SetPlayerChatBubble(playerid, "+10 hp", 0x33CC33FF, 5.0, 1000);

				SetPlayerHealthEx(playerid, 10.0, true);
			}
		}
	}
	SetTimer("HospitalTreatment", 5000, false);
	return 1;
}

public: OnPlayerChangeWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_NECK);

	new player_tint = GetPlayerData(playerid, P_WEAPON_TINT)[ GetTintIDByWeapon(weaponid) ];

	if(player_tint)
		SetPlayerWeaponTint(playerid, weaponid, player_tint);
}

stock SetPlayerWeaponTint(playerid, weaponid, player_tint)
{
	new tintid = GetTintIDByWeapon(weaponid);

	SetPlayerAttachedObject
	(
		playerid,
		A_OBJECT_SLOT_NECK,
		GetWeaponTintData(tintid, WT_OBJECT),
		A_OBJECT_BONE_RIGHT_HAND,
		GetWeaponTintData(tintid, WT_X),
		GetWeaponTintData(tintid, WT_Y),
		GetWeaponTintData(tintid, WT_Z),
		GetWeaponTintData(tintid, WT_RX),
		GetWeaponTintData(tintid, WT_RY),
		GetWeaponTintData(tintid, WT_RZ),
		GetWeaponTintData(tintid, WT_SCALE_X),
		GetWeaponTintData(tintid, WT_SCALE_Y),
		GetWeaponTintData(tintid, WT_SCALE_Z),
		GetWeaponTint(player_tint)
	);

	return 1;
}

stock GetTintIDByWeapon(weaponid)
{
	new tint;

	switch(weaponid)
	{
		case 22: tint = 0;
		case 23: tint = 1;
		case 24: tint = 2;
		case 25: tint = 3;
		case 27: tint = 4;
		case 28: tint = 5;
		case 29: tint = 6;
		case 30: tint = 7;
		case 31: tint = 8;
		case 32: tint = 9;
		case 33: tint = 10;
		case 35: tint = 11;
		case 36: tint = 12;
		case 38: tint = 13;
	}

	return tint;
}

stock GetWeaponIDByTint(tintid)
{
	new weapon;

	switch(tintid)
	{
		case 0: weapon = 22;
		case 1: weapon = 23;
		case 2: weapon = 24;
		case 3: weapon = 25;
		case 4: weapon = 27;
		case 5: weapon = 28;
		case 6: weapon = 29;
		case 7: weapon = 30;
		case 8: weapon = 31;
		case 9: weapon = 32;
		case 10: weapon = 33;
		case 11: weapon = 35;
		case 12: weapon = 36;
		case 13: weapon = 38;
	}

	return weapon;
}

public: ChangeColorPTDUpdate(playerid)
{
	return 1;
}
public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{
	if(pickupid < 0 || pickupid >= MAX_PICKUPS) return 0;

	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}
	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}

	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
		SetPlayerData(playerid, P_LAST_PICKUP, pickupid);

		switch(action_type)
		{
			case PICKUP_ACTION_TYPE_SVALKA:
			{
				IntfDialogCallRemote
				(
					playerid, -1, DIALOG_STYLE_MSGBOX, 
					"Информация", 
					"{E9E9E9}Регулярно, на свалку сбывают большие партии мусора и различного <n>ценного груза которым можно овладеть за маленькую цену а продать \n\
					за большую, или оставить себе. Речь идёт не только о каких-либо вещах \n\
					но и о транспортных средствах.\n\n\
					Чтобы заполучить тот или иной предмет, транспорт, сначала найдите его \n\
					или присоединитесь к уже существующему аукциону. Ознакомьтесь с информаци\n\
					ей по аукциону и назначайте свою цену, опережая старую.\n\n\
					Некоторые вещи содержат в себе определенную награду: деньги, патроны, а\n\
					некоторые придется продать в магазине антиквара, по цене которая регуля\n\
					рно меняется, в данном магазине.\n\n\
					График поставок мусора: {E7B378}с 10:00 до 22:00 {E9E9E9}и 1 поставка в случайное\n\
					время, в течение дня.\n",
					"", "Закрыть"
				);
			}
			case PICKUP_ACTION_TYPE_TK_MENU:
			{
				if(!HasJob(playerid, 15))
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_TK_MENU_INVITE_1, DIALOG_STYLE_MSGBOX, 
						"{FFFFFF}Трудоустройство в компанию", 
						"{FFFFFF}Критерии для вступления в транспортную компанию:\n\n\
						- {BEC58C}4 {FFFFFF}игровой уровень\n\
						- Водительское удостоверение\n\
						- Опыт работы и репутация не имеют значения\n\n\
						Желаете посмотреть список вакантных мест?",
						"Далее", "Закрыть"
					);
				}
			}
			case PICKUP_ACTION_TYPE_NEFT:
			{
				new neft = GetNearestNeft(playerid, 12.0);
				SetPVarInt(playerid, "ownableneft", neft);
				if(GetNeftData(neft, N_OWNER_ID) == GetPlayerAccountID(playerid)) ShowMenuNeft(playerid);
				else SendClientMessage(playerid, -1, "*Вы не владелец данного нефтенасоса.");
			}
			case PICKUP_ACTION_TYPE_BANDRUSSIA: IntfDialogCallRemote(playerid, DIALOG_SET_TOPBANDRUSSIA, DIALOG_STYLE_LIST,"{FFD83D}Список банд","1. Топ по Русская мафия\n2. Общий топ","Далее", "Отмена");
			case PICKUP_ACTION_TYPE_TOPBANDITALY: IntfDialogCallRemote(playerid, DIALOG_SET_TOPBANDITALY, DIALOG_STYLE_LIST,"{FFD83D}Список банд","1. Топ по Итальянская мафия\n2. Общий топ","Далее", "Отмена");
			case PICKUP_ACTION_TYPE_TOPBANDJAPAN: IntfDialogCallRemote(playerid, DIALOG_SET_TOPBANDJAPAN, DIALOG_STYLE_LIST,"{FFD83D}Список банд","1. Топ по Японская мафия\n2. Общий топ","Далее", "Отмена");
			case PICKUP_ACTION_TYPE_LIFTRUSSIA: IntfDialogCallRemote(playerid, DIALOG_SET_LIFTMAFIARUSSIA, DIALOG_STYLE_LIST,"{FFD83D}Место выхода из лифта","1. Подвал для сборки оружия\n2. Лабаратория для готовки наркотиков","Выбрать", "Отмена");
			case PICKUP_ACTION_TYPE_LIFTITALY: IntfDialogCallRemote(playerid, DIALOG_SET_LIFTMAFIAITALY, DIALOG_STYLE_LIST,"{FFD83D}Место выхода из лифта","1. Подвал для сборки оружия\n2. Лабаратория для готовки наркотиков","Выбрать", "Отмена");
			case PICKUP_ACTION_TYPE_LIFTJAPAN: IntfDialogCallRemote(playerid, DIALOG_SET_LIFTMAFIAJAPAN, DIALOG_STYLE_LIST,"{FFD83D}Место выхода из лифта","1. Подвал для сборки оружия\n2. Лабаратория для готовки наркотиков","Выбрать", "Отмена");
			case PICKUP_ACTION_INFO_B:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_INFOMVD, DIALOG_STYLE_MSGBOX,
					"{"#cW"}Городская больница",
					"{"#cW"}Государство бесплатно предоставляет медицинские услуги в\n"\
					"{"#cW"}городских больницах. Однако бесплатный курс может занять\n"\
					"{"#cW"}время, поэтому за определенную сумму медперсонал готов\n"\
					"{"#cW"}провести для Вас экспресс-лечение.",
					"Закрыть", ""
				);
				//return 1;
			}
            case PICKUP_ACTION_TYPE_MUSOR:
			{
                if(!VerifyIntString(QueryPlayerBalance(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Deagle стоит 100.000р");
				IntfDialogCallRemote(playerid, DIALOG_SORTIROVKA_MUSOR, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Deagle","{"#cW"}Вы хотите скрафтить Deagle?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK2:
			{
                if(!VerifyIntString(QueryPlayerBalance(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Deagle стоит 100.000р");
				IntfDialogCallRemote(playerid, DIALOG_CREATE_GUN1, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Deagle","{"#cW"}Вы хотите скрафтить Deagle?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK3:
			{
                if(!VerifyIntString(QueryPlayerBalance(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка AK-47 стоит 100.000р");
				IntfDialogCallRemote(playerid, DIALOG_CREATE_GUN, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт АК-47","{"#cW"}Вы хотите скрафтить АК-47?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK:
			{
                if(!VerifyIntString(QueryPlayerBalance(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка Shotgun стоит 100.000р");
				IntfDialogCallRemote(playerid, DIALOG_CREATE_GUN3, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт Shotgun","{"#cW"}Вы хотите скрафтить Shotgun?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_AK1:
			{
                if(!VerifyIntString(QueryPlayerBalance(playerid), 100000)) return SCM(playerid, 0xCECECEFF, "Сборка M4 стоит 100.000р");
				IntfDialogCallRemote(playerid, DIALOG_CREATE_GUN2, DIALOG_STYLE_MSGBOX,"{"#cW"}Крафт M4","{"#cW"}Вы хотите скрафтить M4?\n\n{"#cW"}Стоимость: {FAAC58}100.000 руб\n{"#cW"}Количество патрон: {FFFF00}100.","Крафт", "Отмена");
			}
			case PICKUP_ACTION_TYPE_MVD: IntfDialogCallRemote(playerid, DIALOG_MVDPICKUP, DIALOG_STYLE_LIST,"{"#cW"}Полицейский отдел","{"#cW"}Явка с повинной\n{"#cW"}Заявление на угон транспорта","Далее", "Отмена");
			case PICKUP_ACTION_TYPE_PARKING_ENT:
            {
                new team = GetPlayerTeamEx(playerid);

                for(new i = 0; i < MAX_ORG_PARKING; i++)
                {
                    if(org_park_canvasdev[i][ORG_PARK_ID] == team)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 5.0, org_park_canvasdev[i][ORG_PARK_POS_ENTER][0], org_park_canvasdev[i][ORG_PARK_POS_ENTER][1], org_park_canvasdev[i][ORG_PARK_POS_ENTER][2])) 
						{
                            IntfDialogCallRemote(playerid, DIALOG_PARKING, DIALOG_STYLE_MSGBOX, "{FFD83D}Парковка", "{ffffff}Желаете посетить парковку автотранспорта?", "Да", "Отмена");
                        }
                    }
                }
            }
			case PICKUP_ACTION_TYPE_PARKING_EXT:
            {
                new team = GetPlayerTeamEx(playerid);

                for(new i = 0; i < MAX_ORG_PARKING; i++)
                {
                    if(org_park_canvasdev[i][ORG_PARK_ID] == team)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 5.0, org_park_canvasdev[i][ORG_PARK_POS_EXIT][0], org_park_canvasdev[i][ORG_PARK_POS_EXIT][1], org_park_canvasdev[i][ORG_PARK_POS_EXIT][2])) 
						{
                            new Float:x = org_park_canvasdev[i][ORG_PARK_POS_PLAYER_EXIT][0];
                            new Float:y = org_park_canvasdev[i][ORG_PARK_POS_PLAYER_EXIT][1];
                            new Float:z = org_park_canvasdev[i][ORG_PARK_POS_PLAYER_EXIT][2];
                            new Float:a = org_park_canvasdev[i][ORG_PARK_POS_PLAYER_EXIT][3];

							SetPlayerPosEx(playerid, x, y, z, a, 0, 0);
						    OverlayScreen(playerid);
                        }
                    }
                }
            }
			case PICKUP_ACTION_TYPE_TELEPORT:
			{
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				{
					switch(GetTeleportData(action_id, T_ACTION_TYPE))
					{
						case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
						{
							SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
						}
						case T_ACTION_TYPE_END_JOB:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
						}
						case T_ACTION_TYPE_LEAVE_HOSPITAL:
						{
							if(GetPlayerData(playerid, P_HOSPITAL))
							{
								if(GetPlayerHealthEx(playerid) < 65.0) return SendClientMessage(playerid, -1, "Медперсонал не может отпустить Вас в таком состоянии. Отправляйтесь на лечение");
								else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									SendClientMessage(playerid, 0x66CC00FF, "Вы выписались из больницы");
									ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
								}
								SetPlayerData(playerid, P_HOSPITAL, false);
							}
						}
						case T_ACTION_TYPE_BANDA_WEAPON:
						{
							if(!GetPlayerFamily(playerid)) return SCM(playerid, 0xCECECEFF, "* Вы не состоите в банде!");
						}
						case T_ACTION_TYPE_LEAVE_FSIN:
						{
							if(GetPlayerTeamEx(playerid) != TEAM_FSIN) return SendClientMessage(playerid, 0xFF6600FF, "Сейчас вам недоступно данное действие");
						}
						case T_ACTION_TYPE_LEAVE_PPS:
						{
							if(GetPlayerData(playerid, P_ARREST))
							{
								SendClientMessage(playerid, 0x999999FF, "Время заключения не истекло");

								SetPlayerSpawnPos(playerid);

								return 1;
							}
						}
						case T_ACTION_TYPE_ENTER_FSB: if(GetPlayerTeamEx(playerid) != TEAM_FSB) return SendClientMessage(playerid, 0xFF6600FF, "Вход доступен только для сотрудников");
					}

					SetPlayerPosEx
					(
						playerid,
						GetTeleportData(action_id, T_POS_X),
						GetTeleportData(action_id, T_POS_Y),
						GetTeleportData(action_id, T_POS_Z),
						GetTeleportData(action_id, T_ANGLE),
						GetTeleportData(action_id, T_INTERIOR),
						GetTeleportData(action_id, T_VIRTUAL_WORLD)
					);

					OverlayScreen(playerid);
				}
			}
			case PICKUP_ACTION_TYPE_FREE_HEAL:
            {
				if(GetPlayerHealthEx(playerid) == 100) return SendClientMessage(playerid, 0xFF6600FF, "Вы не нуждаетесь в лечении");

                IntfDialogCallRemote
                (
                    playerid, DIALOG_FREE_HEAL, DIALOG_STYLE_MSGBOX,
                    "Экспресс лечение",
                    "Курс экспресс-лечения стоит 2.000.000 руб. и восполняет здоровье до 70%\n\n"\
                    "Хотите пройти его?",
                    "Да", "Нет"
                );
            }
			case PICKUP_ACTION_TYPE_FREE_EAT:
			{
				if(GetPlayerLevel(playerid) > 3) return SendClientMessage(playerid, 0xFF6600FF, "* Бесплатная еда доступна только до 3-го уровня");
				if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");
                Action(playerid, "взял(а) бесплатную еду для бедных");
				SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
			    SetPVarInt(playerid,"respeat",1);
				SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			    CEF_CREATE(playerid, 2, 4, "Interactions", "[[5, \"Перекусить\"], [6, \"Выбросить поднос\"]]");
			    g_cursor[playerid] = 1;
			}
			case PICKUP_ACTION_TYPE_GOVS_EAT:
			{
				if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FSIN)) return
				   SendClientMessage(playerid, 0xFF6600FF, "* Вы не состоите в гос. структурах");
				if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");
                Action(playerid, "взял(а) картошку фри со спранком");
				SendClientMessage(playerid, 0x999999FF, "{CECECE}Используйте {6699FF}/eat {CECECE}чтобы поесть или {6699FF}/put {CECECE}чтобы положить поднос с едой");
			    SetPVarInt(playerid,"respeat",1);
				SetPlayerAttachedObject(playerid, 5, 10024, 1, 0.104, 0.365, -0.267, 109.5, 126.1, -43.5, 1.0, 1.0, 1.0);
			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			    CEF_CREATE(playerid, 2, 4, "Interactions", "[[5, \"Перекусить\"], [6, \"Выбросить поднос\"]]");
			    g_cursor[playerid] = 1;
			}
			case PICKUP_ACTION_TYPE_FIX_CAR:
			{
				ShowPlayerFixCar(playerid);
			}
			case PICKUP_ACTION_TYPE_DRIVING_TUTO:
			{
				ShowPlayerDrivingTutorial(playerid);
			}
			case PICKUP_ACTION_TYPE_SKLAD:
			{
				new fam_id = GetPlayerFamily(playerid);

				if(!GetPlayerData(playerid, P_FAMILY)) return GameText(playerid, "~r~Доступ~n~Запрещен", 3000, 2);

				if(GetPlayerInterior(playerid) != 4)
                {
                    if(GetPlayerInHouse(playerid) != -1 && g_family[fam_id][F_HOUSE_ID] != GetPlayerInHouse(playerid))
                    {
                        return GameText(playerid, "~r~Доступ~n~Запрещен", 3000, 2);
                    }
                }

				if(g_family[fam_id][F_GANG] == 1)
				{
					if(GetFamilyData(fam_id, F_SKLAD_ST) == 1) return GameText(playerid, "~r~Закрыто", 3000, 2);

					if(status_authorization[playerid] != 1) return true;

					inventory_sklad_id[playerid] = fam_id;

					UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);

					STRING_GLOBAL[0] = EOS;

					if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24],[3,\"Склад\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, QueryPlayerBalance(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), load_inventory[playerid]);
					else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%s,%d,%d,%d,%d.00,30.00,20],[[3,\"Склад\",0.10,50.00,24]],[%s]]", GetPlayerNameEx(playerid), playerid, QueryPlayerBalance(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), load_inventory[playerid]);

					CEF_CREATE(playerid, 2, 4, "InventoryNew", STRING_GLOBAL);
				}
			}
			case PICKUP_ACTION_TYPE_ATM:
			{
				ShowPlayerATMDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_VIXOD_RUSSIA:
			{
			    if(GetPlayerData(playerid, P_TURMA)) return SCM(playerid, 0xCECECEFF, "* Вас не посадили в тюрьму");
			    {
				    IntfDialogCallRemote
					(
						playerid, DIALOG_POBEG_MAFIA_RUSSIAN, DIALOG_STYLE_MSGBOX,
						"{ffa228}Побег из подвала мафии",
						"{FFFFFF}Стоимость побега: {00f502}15.000.000\n"\
						"{FFFFFF}Вы хотите сбежать из плена?",
						"Да", "Нет"
					);
				}
			}
			case PICKUP_ACTION_TYPE_VIXOD_ITALIA:
			{
				if(GetPlayerData(playerid, P_TURMA)) return SCM(playerid, 0xCECECEFF, "* Вас не посадили в тюрьму");
			    {
				    IntfDialogCallRemote
					(
						playerid, DIALOG_POBEG_MAFIA_ITALIA, DIALOG_STYLE_MSGBOX,
						"{ffa228}Побег из подвала мафии",
						"{FFFFFF}Стоимость побега: {00f502}15.000.000\n"\
						"{FFFFFF}Вы хотите сбежать из плена?",
						"Да", "Нет"
					);
				}
			}
			case PICKUP_ACTION_TYPE_VIXOD_JAPAN:
			{
			    if(GetPlayerData(playerid, P_TURMA)) return SCM(playerid, 0xCECECEFF, "* Вас не посадили в тюрьму");
			    {
				    IntfDialogCallRemote
					(
						playerid, DIALOG_POBEG_MAFIA_JAPAN, DIALOG_STYLE_MSGBOX,
						"{ffa228}Побег из подвала мафии",
						"{FFFFFF}Стоимость побега: {00f502}15.000.000\n"\
						"{FFFFFF}Вы хотите сбежать из плена?",
						"Да", "Нет"
					);
				}
			}
			case PICKUP_ACTION_TYPE_STOYNKA:
			{
				IntfDialogCallRemote(playerid, DIALOG_STOYANKA, DIALOG_STYLE_MSGBOX, "Штрафстоянка", "Вы хотите забрать личный транспорт с штрафстоянки?", "Далее", "Отмена");
			}
			case PICKUP_ACTION_TYPE_CONTRABAND:
			{
				if(!GetPlayerFamily(playerid)) return SCM(playerid, 0xCECECEFF, "* Вы не состоите в банде!");
				if(contraband_amount < 1) return SCM(playerid, 0xCECECEFF, "* Контрабанда закончилась!");
				
				if(contraband_block_time[playerid] == 0) ContraUse(playerid);
				else SCMF(playerid, COLOR_RED, "Контрабанду можно подобрать только через 5 минут, осталось %d минут.", contraband_block_time[playerid] / 60);
			}
			case PICKUP_ACTION_TYPE_WEARSPORT:
			{
				new random1 = random(sizeof(gRandom));
				SetPlayerSkin(playerid, gRandom[random1]);
			}

			case PICKUP_ACTION_TYPE_SHIPM:
			{
   				CEF_CREATE(playerid, 2, 4, "MiamiTicket", "{\"playerPrice\": 100000, \"vehiclePrice\": 150000}");
			}
			case PICKUP_ACTION_TYPE_1:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_2:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_ARMY)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_3:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_HOSPITAL)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_4:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_TRK)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_6:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_MVD)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_7:
			{
                if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
                {
                    IntfDialogCallRemote(playerid, DIALOG_RAZDEVALKA, DIALOG_STYLE_MSGBOX, "Раздевалка", "Вы действительно хотите переодеться в рабочую форму?", "Да", "Нет");
                }
                else SendClientMessage(playerid, -1, "Вам не доступна данная функция");
			}
			case PICKUP_ACTION_TYPE_MANSION:
			{
                new fam_id = GetPlayerData(playerid, P_FAMILY);

                if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
                {
					if(GetPlayerVirtualWorld(playerid) != 4) return 1;
			
                    IntfDialogCallRemote
		            (
			            playerid, DIALOG_SKIN_MANSION, DIALOG_STYLE_LIST,
			            "Раздевалка",
			            "Обычная одежда\n"\
						"Скин 2 (id 111)\n"\
						"Скин 3 (id 112)\n"\
						"Скин 4 (id 117)\n"\
						"Скин 5 (id 125)\n"\
						"Скин 6 (id 15459)\n"\
						"Скин 7 (id 15460)\n"\
						"Скин 8 (id 15461)\n"\
						"Скин 9 (id 15462)\n"\
						"Скин 10 (id 15463)\n"\
						"Скин 11 (id 15464)",
			            "Выбрать", "Закрыть"
		            );
                }
				if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
                {
					if(GetPlayerVirtualWorld(playerid) != 6) return 1;

                    IntfDialogCallRemote
		            (
			            playerid, DIALOG_SKIN_MANSION, DIALOG_STYLE_LIST,
			            "Раздевалка",
			            "Обычная одежда\n"\
						"Скин 2 (id 124)\n"\
						"Скин 3 (id 126)\n"\
						"Скин 4 (id 127)\n"\
						"Скин 5 (id 15474)\n"\
						"Скин 6 (id 161)\n"\
						"Скин 7 (id 114)\n"\
						"Скин 8 (id 15451)\n"\
						"Скин 9 (id 15450)\n"\
						"Скин 10 (id 163)",
			            "Выбрать", "Закрыть"
		            );
                }
				if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
                {
					if(GetPlayerVirtualWorld(playerid) != 5) return 1;

                    IntfDialogCallRemote
		            (
			            playerid, DIALOG_SKIN_MANSION, DIALOG_STYLE_LIST,
			            "Раздевалка",
			            "Обычная одежда\n"\
						"Скин 2 (id 121)\n"\
						"Скин 3 (id 122)\n"\
						"Скин 4 (id 123)\n"\
						"Скин 5 (id 15465)\n"\
						"Скин 6 (id 15467)\n"\
						"Скин 7 (id 15466)\n"\
						"Скин 8 (id 120)\n"\
						"Скин 9 (id 15472)\n"\
						"Скин 10 (id 15473)\n"\
						"Скин 11 (id 15468)",
			            "Выбрать", "Закрыть"
		            );
                }
				if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
                {
					if(GetPlayerVirtualWorld(playerid) != 7) return 1;

                    IntfDialogCallRemote
		            (
			            playerid, DIALOG_SKIN_MANSION, DIALOG_STYLE_LIST,
			            "Раздевалка",
			            "Обычная одежда\n"\
						"Скин 2 (id 15407)\n"\
						"Скин 3 (id 15406)\n"\
						"Скин 4 (id 15424)\n"\
						"Скин 5 (id 15425)\n"\
						"Скин 6 (id 15448)\n"\
						"Скин 7 (id 15486)",
			            "Выбрать", "Закрыть"
		            );
                }
			}
			case PICKUP_ACTION_TYPE_TEMP_JOB:
			{
				new job = GetPlayerTempJob(playerid);
				if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
				{
					job = TEMP_JOB_NONE - 1;
				}

				switch(action_id)
				{
					case TEMP_JOB_MINER:
					{
						if(job == TEMP_JOB_NONE)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа шахтера",
								"{FFFFFF}Вы хотите устроиться на работу шахтера?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Работа шахтера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY_TRUCKER:
					{
						if(job == TEMP_JOB_NONE)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Вы хотите начать работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Закончить работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_FACTORY:
					{
						if(job == TEMP_JOB_NONE)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Вы хотите начать работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFD83D}Завод",
								"{FFFFFF}Закончить работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
                    case TEMP_JOB_LUMBERJACK:
					{
						if(job == TEMP_JOB_NONE)
						{
							IntfDialogCallRemote
							(
							    playerid, DIALOG_TEMP_JOB_LUMBERJACK_ST, DIALOG_STYLE_MSGBOX,
								"Лесопилка",
								"Вы действительно желаете переодеться в рабочую одежду?",
                                "Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							IntfDialogCallRemote
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_END, DIALOG_STYLE_MSGBOX,
								"Лесопилка",
								"Вы действительно желаете переодеться в обычную одежду?",
                                "Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_ELECTRICIAN:
					{
						 if(job == TEMP_JOB_NONE)
						 {
                             if(!HasJob(playerid, 6)) return SCM(playerid, COLOR_GREY, "* Вы не работаете электриком");
							 IntfDialogCallRemote
							 (
							    playerid, DIALOG_TEMP_JOB_ELECTRICIAN_ST, DIALOG_STYLE_MSGBOX,
								"Раздевалка",
								"Вы действительно хотите переодеться в рабочую одежду?",
                                "Да", "Нет"
							 );
					     }
						 else if(job == action_id)
						 {
							 IntfDialogCallRemote
							 (
								 playerid, DIALOG_TEMP_JOB_ELECTRICIAN_END, DIALOG_STYLE_MSGBOX,
						         "Раздевалка",
						         "Вы действительно хотите переодеться в обычную одежду?",
							     "Да", "Нет"
							 );
					     }
					     else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
					}
					case TEMP_JOB_FERMER:
					{
						 if(job == TEMP_JOB_NONE)
						 {
							 IntfDialogCallRemote
							 (
							    playerid, DIALOG_TEMP_JOB_FERMER_ST, DIALOG_STYLE_MSGBOX,
								"Раздевалка",
								"Вы действительно хотите начать работу на ферме?",
                                "Да", "Нет"
							 );
					     }
						 else if(job == action_id)
						 {
							 IntfDialogCallRemote(playerid,DIALOG_FERMER_END,DIALOG_STYLE_LIST,"Раздевалка","1. Выбрать другое занятие\n2. Закончить работу","Выбрать","Закрыть");
					     }
					     else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
					}
					case TEMP_JOB_LOADER:
					{
						 if(job == TEMP_JOB_NONE)
						 {
							 IntfDialogCallRemote
							 (
							    playerid, DIALOG_TEMP_JOB_LOADER_ST, DIALOG_STYLE_MSGBOX,
								"Раздевалка",
								"Вы действительно хотите переодеться в рабочую одежду?",
                                "Да", "Нет"
							 );
					     }
						 else if(job == action_id)
						 {
							 IntfDialogCallRemote
							 (
								 playerid, DIALOG_TEMP_JOB_LOADER_END, DIALOG_STYLE_MSGBOX,
						         "Раздевалка",
						         "Вы действительно хотите переодеться в обычную одежду?",
							     "Да", "Нет"
							 );
					     }
					     else SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться сюда закончите текущую работу");
					}
				}
			}
			case PICKUP_ACTION_TYPE_INFO_PICKUP:
			{
				IntfDialogCallRemote
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					GetInfoPickupData(action_id, IP_TITLE),
					GetInfoPickupData(action_id, IP_INFO),
					"Ок", ""
				);
			}
			case PICKUP_ACTION_TYPE_MINER_SELL_M:
			{
				ShowPlayerBuyMetalDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_FACTORY_MET:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					new j_state = GetPlayerTempJobState(playerid);
					switch(j_state)
					{
						case TEMP_JOB_STATE_FACTORY_TAKE_MET:
						{
							new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
							new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

							new take_metall = random(2) + 1;
							if(factory_metal > take_metall && factory_fuel > (take_metall * 6))
							{
								SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
								UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

								new fmt_str[16];
								SetPVarInt(playerid, "factory_take_metall", take_metall);

								format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
								GameText(playerid, fmt_str, 4000, 2);

								SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
							}
							else GameText(playerid, "~r~нет топлива или металла", 4000, 3);
						}
						case TEMP_JOB_STATE_FACTORY_CREATE_P:
						{
							SendClientMessage(playerid, 0x999999FF, "Вы уже взяли металл");
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_LUMBERJACK_P:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
					{
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 0);

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						new fmt_text[65];

						format(fmt_text, sizeof fmt_text, "Дрова доставлены на склад! Всего перенесено дров: {FFFFFF}%d шт", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0xB0C4DEFF, fmt_text);

						SetPlayerLumberJackChopCP(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_SHIN:
			{
                IntfDialogCallRemote(playerid, DIALOG_SHINOMONTAJ, DIALOG_STYLE_LIST, "Шиномонтаж","1. Заказать смену дисков","Далее", "Закрыть");
			}
			case PICKUP_ACTION_TYPE_BIZ_ENTER:
			{
				SetPVarInt(playerid, "pickup_biz", action_id);
				ShowBussinesInfo(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_BIZ_EXIT:
			{
				new in_biz = GetPlayerInBiz(playerid);
				if(in_biz != -1)
				{
					new type = GetBusinessData(in_biz, B_INTERIOR);
					if(action_id == type)
					{
						SetPlayerPosEx
						(
							playerid,
							GetBusinessData(in_biz, B_EXIT_POS_X),
							GetBusinessData(in_biz, B_EXIT_POS_Y),
							GetBusinessData(in_biz, B_EXIT_POS_Z),
							GetBusinessData(in_biz, B_EXIT_ANGLE),
							0,
							0
						);
						SetPlayerInBiz(playerid, -1);
                        if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY || GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY_NIZ || GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_BY_SRED)
						{
						    SetPVarInt(playerid, "in_by", 0);
                           // timerbyexit[playerid] = SetTimerEx("timerby_exit", 180000, false, "i", playerid);
						}
                        if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_WOSH)
						{
							
						}
						
						if(GetBusinessData(in_biz, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
						{
							new vehicleid = GetPlayerOwnableCarLast(playerid);

							if(vehicleid != INVALID_VEHICLE_ID)
							{
								SetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][1], vehicle_temp_position[playerid][2]);
								SetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

								LinkVehicleToInterior(vehicleid, 0);
								SetVehicleVirtualWorld(vehicleid, 1);
							}
						}
						CEF_HIDE(playerid, "Darkness");
						OverlayScreen(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_HEALTH:
			{
			    IntfDialogCallRemote
				(
					playerid, DIALOG_HEALTH_BUSINESS, DIALOG_STYLE_MSGBOX,
					"Услуги медпункта",
	                "{FFFFFF}Услуги медпункта стоят {9ACD32}3500 рублей\n"\
					"{FFFFFF}Вы хотите ими воспользоваться?",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_APTEKA:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_APTEKA)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_GARDEN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_GARDEN)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			/*case PICKUP_ACTION_TYPE_HOUSE:
			{
			    SetPVarInt(playerid, "pickup_house", action_id);
			}*/
            case PICKUP_ACTION_TYPE_GARAGE:
			{
			    SetPVarInt(playerid, "pickup_garage", action_id);
			}
			case PICKUP_ACTION_TYPE_GARAGE_SKLAD:
			{
			    
			}
			case PICKUP_ACTION_TYPE_GARAGE_EXIT:
			{
			    callcmd::exit(playerid, "");
			}
			case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
			{
				new houseid = GetPlayerInHouse(playerid);
				if(houseid != -1)
				{
					new type = GetHouseData(houseid, H_TYPE);

					if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
					{
						SetPlayerHealthEx(playerid, 100.0);
						GameText(playerid, "~b~~h~Вы успешно вылечились", 3000, 2);
					}
				}
			}
			case PICKUP_ACTION_TYPE_REALTOR_HOME:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_REALTOR_HOME)
					{
						IntfDialogCallRemote
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{99CC00}Номера свободных домов",
							g_house_realtor_list,
							"Закрыть", ""
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_SELLSIM:
			{
			    IntfDialogCallRemote
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					"{FF6666}Продажа SIM-карты игроку",
					"}Продать SIM-карту можно в любом магазине 24/7\n\n\
					Для того чтобы продать SIM-карту используйте: /sellsim\n\
					{Вы и покупатель должны находиться в магазине.",
					"Закрыть", ""
				);
			}
			case PICKUP_ACTION_TYPE_INFO_BOLKA:
			{
			    ShowPlayerInfoHospital(playerid);
			}
			case PICKUP_ACTION_BLACK_MARKET:
            {
                IntfDialogCallRemote
                (
                    playerid, -1, DIALOG_STYLE_MSGBOX,
                    "Чёрный рынок",
                    "Чёрный рынок представляет собой подпольный аукцион, на который периодически\n"\
                    "привозятся лоты в виде транспорта, одежды или аксессуаров. Порой аукцион\n"\
                    "за более эксклюзивные лоты может проходить не за игровую валюту, а за\n"\
                    "донат рубли.\n\n"\
                    "Вам не обязательно иметь свободное место в инвентаре либо свободные слоты\n"\
                    "личного транспорта для участия в аукционе: после выигрыша лот отправляется\n"\
                    "на склад (жёлтая стрелка), где вы и сможете забрать его в любое время.\n"\
                    "Если до конца аукциона осталось мало времени и произошёл рестарт\n"\
                    "аукцион будет продлен на 15 минут автоматически.\n\n"\
                    "При наличии лотов аукцион начинается в 12:00.\n"\
                    "Длительность аукциона: 12 часов.",
                    "Закрыть", ""
                );
            }

			case PICKUP_ACTION_TYPE_SELL_CAR:
			{
				page_cars[playerid] = 1;
				type_page_cars[playerid] = 2;
				ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
				
			}
			case PICKUP_ACTION_TYPE_TRAILER:
			{
				CEF_CREATE(playerid, 1, 4, "TrailerShop");
				CEF_CREATE(playerid, 1, 2, "interface('TrailerShop').trailers = [{ name:\"SWIFT QUATTRO\", image:\"1.png\",price:1400000}, { name:\"HOBBY 440\", image:\"2.png\",price:1600000},{ name:\"BUERSTNER\", image:\"3.png\",price:1200000}]");

			}
			case PICKUP_ACTION_TYPE_FREE_VELIK:
			{
                new level = GetPlayerLevel(playerid); // Получаем уровень игрока
                new price;

                if(level == 1) {
                    price = 100; // Цена для 1 уровня
                } else if(level == 2) {
                    price = 250; // Цена для 2 уровня
                } else if(level == 3) {
                    price = 500; // Цена для 3 уровня
                } else if(level == 4) {
                    price = 500; // Цена для 4 уровня
                } else {
                    SCM(playerid, 0xeed985FF, "Аренда скутеров доступно только новичкам.");
				    SCM(playerid, 0xeed985FF, "Вы можете воспользоваться услугами такси при помощи приложения в телефоне");
                    return true;
                }
                
                string_dialog[0] = EOS;
 	            format(string_dialog, sizeof string_dialog,
	            "{"#cW"}Вы хотите арендовать скутер?\n\n"\
	            "{"#cW"}Стоймость: {d2a906}%d руб\n"\
	            "{"#cW"}Длительность аренды: {e3e001}60 мин\n\n"\
	            "{"#cW"}Данное транспортное средство предназначено для выгодного\n"\
	            "{"#cW"}использования на начальных уровнях.",
	            price);

	            IntfDialogCallRemote(playerid, DIALOG_RENT_MOP, DIALOG_STYLE_MSGBOX, "Аренда скутера", string_dialog, "Аренда", "Отмена");
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_SRED:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CAR_MARKET_SRED, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_GRUZ:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CAR_MARKET_GRUZ, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BUS_JOB:
			{
				if(HasJob(playerid, 7))
	            {
					if(!IsPlayerInJob(playerid))
		            {
				        IntfDialogCallRemote
				        (
					        playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST,
					        "Аренда автобуса",
					        "{FFFFFF}1. Кольцевой маршрут\n"\
							"{FFFFFF}2. Междугородний маршрут",
					        "Выбрать", "Закрыть"
				        );
					}
					else SCM(playerid, -1, "{CECECE}Вы не можете начать работу, пока не закончите старую!");
				}
				else SCM(playerid, -1, "{CECECE}* Вы не работаете водителем автобуса");
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_HOME:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CAR_MARKET_HOME, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}Нажмите кнопку 'Далее'\n\
					Чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_NIZ:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CAR_MARKET_NIZ, DIALOG_STYLE_MSGBOX,
					"{FFCC00}Покупка транспорта",
					"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
					можно приобрести (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
					Нажмите кнопку 'Далее' чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_INFOMVD:
			{
				IntfDialogCallRemote
			 	(
					playerid, DIALOG_INFOMVD, DIALOG_STYLE_MSGBOX,
				    "{"#cGold"}Информация о организации",
					"{"#cW"}Министерство внутренних дел\n"\
					"{"#cW"}Данная организация занимается обеспечением безопасности и охраной жизни граждан области, поимкой\n"\
					"{"#cW"}преступников, раскрытием преступлений, пресечение беспорядков на улицах и в общественных местах.\n\n"\
					"{"#cW"}Дополнительная информация:\n"\
					"{"#cW"}Номер телефона для связи с МВД: 02\n\n"\
					"{"#cW"}Бюджет организации: {66CC00}446.113.533 руб\n\n"\
					"{"#cW"}Должность \t Зарплата\n"\
					"{"#cW"}Рядовой \t {66CC00}33.300 руб\n"\
					"{"#cW"}Сержант \t {66CC00}40.360 руб\n"\
					"{"#cW"}Старшина \t {66CC00}45.420 руб\n"\
					"{"#cW"}Прапорщик \t {66CC00}50.485 руб\n"\
					"{"#cW"}Лейтенант \t {66CC00}55.540 руб\n"\
					"{"#cW"}Капитан \t {66CC00}60.600 руб\n"\
					"{"#cW"}Майор \t {66CC00}70.725 руб\n"\
					"{"#cW"}Подполковник \t {66CC00}80.840 руб\n"\
					"{"#cW"}Полковник \t {66CC00}101.565 руб\n"\
					"{"#cW"}Генерал \t {66CC00}121.130 руб",
					"Хорошо",""
				);
   			}
			case PICKUP_ACTION_TYPE_POPOLNENIE:
			{
   				SendClientMessage(playerid, 0x888888FF, "* Информация о пополнениях временно недоступна");
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
			{
				SetPlayerPosEx(playerid, 5.4881, -27.7033, 1085.9291, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
			{
				SetPlayerPosEx(playerid, 5.4975, -26.3967, 1080.9968, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_MINER_CARRI:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER
				&& GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!miner_carriage[0][MC_STATUS])
					{
						new fmt_str[64];

						new rand = random(45) + 16;
						new items = GetPlayerJobLoadItems(playerid) + rand;

						RemovePlayerAttachedObjects(playerid);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
						SetPlayerJobLoadItems(playerid, items);
                        SetPVarInt(playerid, "miner_1",0);
						format(fmt_str, sizeof fmt_str, "Вы доставили в вагонетку {FF9900}%d кг {66CC00}руды", rand);
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						OnBattlePass_Perfomance(playerid, 12, rand);

						format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
						SetPlayerChatBubble(playerid, fmt_str, 0x66CC00FF, 10.0, 2000);

						miner_carriage[0][MC_ORE_COUNT] += rand;

						if(miner_carriage[0][MC_ORE_COUNT] >= 10000)
						{
							DestroyPickup(miner_carriage[0][MC_PICKUP_ID]);
							miner_carriage[0][MC_PICKUP_ID] = -1;

							SetTimerEx("MinerCarriageMove", 7_000, false, "i", 0);

							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0xFFFF00FF, "Ожидание...");
						}
						else
						{
							format(fmt_str, sizeof fmt_str, "Загрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[0][MC_ORE_COUNT]);
							UpdateDynamic3DTextLabelText(miner_carriage[0][MC_LABEL], 0x66CC00FF, fmt_str);
						}

						SetPlayerMinerJobLoadCP(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_ARMORY:
			{
				switch(action_id)
				{
					case ARMORY_TYPE_ARMOR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMY_TEAM, DIALOG_STYLE_LIST,
							"{FFD83D}Армия",
							"1. Аптечка\n"\
							"2. Лопата\n"\
							"3. Бронежилет\n"\
							"4. Desert Eagle\n"\
							"5. AKM\n"\
							"6. АКС-74У\n"\
							"7. Remington 870\n"\
							"8. Патроны (.44 Magnum)\n"\
							"9. Патроны (7.62x39)\n"\
							"10. Патроны (5.45x39)\n"\
							"11. Патроны (12x70)",
							"Взять", "Закрыть"
						);
					}
					case ARMORY_TYPE_SECURITY:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(1 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам службы охраны");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMORY2, DIALOG_STYLE_LIST,
							"{FFD83D}Правительство области",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Desert Eagle\n"\
							"4. Тайзер\n"\
							"6. АКM\n"\
							"7. Фотоаппарат\n"\
							"8. Патроны (.44 Magnum)\n"\
							"9. Патроны (7.62x39)",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_DPS:
					{
						//if(GetPlayerTeamEx(playerid) != TEAM_MVD)
							//return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMORY2, DIALOG_STYLE_LIST,
							"{FFD83D}Дорожно-патрульная служба",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Desert Eagle\n"\
							"4. Тайзер\n"\
							"6. АКM\n"\
							"7. Фотоаппарат\n"\
							"8. Патроны (.44 Magnum)\n"\
							"9. Патроны (7.62x39)",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_POLICE:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_MVD)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMORY1, DIALOG_STYLE_LIST,
							"{FFD83D}Полицейская служба",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Desert Eagle\n"\
							"4. Тайзер\n"\
							"5. AKM\n"\
							"6. Жезл\n"\
							"7. Фотоапарат\n"\
							"8. Тауметр\n"\
							"9. Аппарат для диагностики\n"\
							"10. Патроны (.44 Magnum)\n"\
							"11. Патроны (7.62x39)",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_MCHS:
					{
						//if(GetPlayerTeamEx(playerid) != TEAM_PJ)
							//return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMORY2, DIALOG_STYLE_LIST,
							"{FFD83D}МЧС",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Desert Eagle\n"\
							"4. Тайзер\n"\
							"6. АКM\n"\
							"7. Фотоаппарат\n"\
							"8. Патроны (.44 Magnum)\n"\
							"9. Патроны (7.62x39)",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_FSIN:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_FSIN)
							return SendClientMessage(playerid, 0x999999FF, "У Вас нет доступа к этому");

						if(!(2 <= GetPlayerJob(playerid) <= 10))
							return SendClientMessage(playerid, 0x999999FF, "Оружейный склад доступен только сотрудникам высшего ранга");

						IntfDialogCallRemote
						(
							playerid, DIALOG_ARMORY3, DIALOG_STYLE_LIST,
							"{FFD83D}Фсин",
							"1. Дубинка\n"\
							"2. Бронежилет\n"\
							"3. Desert Eagle\n"\
							"4. Тайзер\n"\
							"5. АКM\n"\
							"6. Патроны (.44 Magnum)\n"\
							"7. Патроны (7.62x39)",
							"Взять", "Отмена"
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_TUN:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
					"{FFD83D}Станция тех.обслуживания",
					"1. Перекраска транспорта\t{00CC00}100000 руб\n"\
					"2. Смена дисков\t\t\t{00CC00}250000 руб",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_TIR:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_TIR, DIALOG_STYLE_LIST,
					"{FFD83D}Тир",
					"1. Desert-Eagle\t\t{FFD700}2000 руб\n"\
					"2. ShotGun\t\t\t{FFD700}2000 руб\n"\
					"3. Снайперская винтовка\t{FFD700}2000 руб\n"\
					"4. MP-5\t\t\t\t{FFD700}2000 руб\n"\
					"5. SD-Pistol\t\t\t{FFD700}2000 руб",
					"Купить", "Отмена"
				);
   			}
   		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{	
	if(GetPVarInt(playerid, "Login_1") != 1) 
	{
		Kick(playerid);
		printf("ID:%d кикнут за попытку спавна без авторизации", playerid);
		return 1;
	}

	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);

	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(!newinteriorid)
    {
        new hour;
        gettime(hour, _, _);
        SetPlayerTime(playerid, hour, 0);
        return 1;
    }
    SetPlayerTime(playerid, 12, 0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	Garbage:OnPlayerKeyStateChange(playerid, newkeys,oldkeys);
	if(newkeys & KEY_HANDBRAKE || PRESSED(KEY_HANDBRAKE))
	{
		if(GetPlayerData(playerid, P_TARGET_ID) == INVALID_PLAYER_ID)
		{
			new targetid = GetPlayerTargetPlayer(playerid);

			if(targetid != INVALID_PLAYER_ID)
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);
				CEF_CREATE(playerid, 1, 2, "interface('ScreenNotification').add('[1,\"Взаимодействие с человеком\",\"Для взаимодействия используйте клавишу {FF5B1D}R\",\"F9B82E\",5000]')");
				SCM(playerid, 0xf9b82eFF, "[Взаимодействие с человеком] {FFFFFF}Для взаимодействия используйте клавишу {ff5b1d}R");
			}
		}
	}

	if(GetPVarInt(playerid, "progress_bar_type") != 0)
	{
		if(newkeys & 65536)
		{
			OnPlayerProgressBar(playerid);
		}
	}
	if(newkeys == 320 && GetPlayerTeamEx(playerid) == TEAM_MVD)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ORG_CARS)
		{
			if(!IsPlayerDriver(playerid)) return 1;

			if(org_cars_canvasdev[GetVehicleData(vehicleid, V_ACTION_ID)][ORG_CARS_ID] != TEAM_MVD) return 1;

			new RandomSound = RandomEx(0, 4);
			new Float:x, Float:y, Float:z;
			STRING_GLOBAL[0] = EOS;
			GetVehiclePos(vehicleid, x,y,z);

			foreach(new i : Player)
			{
				if(IsPlayerInRangeOfPlayer(playerid, i, 25.0))
				{
					format(STRING_GLOBAL, sizeof STRING_GLOBAL,"playSound('police_speaker/%d.wav', 0, %d, 10)", RandomSound + 1, vehicleid);
					CEF_CREATE(i, 1, 2, STRING_GLOBAL);
				}
			}
			switch(RandomSound)
			{
				case 0: callcmd::m(playerid, "Прижаться к обочине!");
				case 1: callcmd::m(playerid, "Остановите машину!");
				case 2: callcmd::m(playerid, "Остановите машину справа!");
				case 3: callcmd::m(playerid, "Справа, останавливаемся к обочине!");
			}
		}
	}
	if(newkeys == 1024)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -2898.9446,1698.5298,1001.0000)) KeyWalkWeaponShop(playerid);
	}
	if(newkeys == 1024)//Weaponcreate
	{
		AltAssembly(playerid);
	}
    if(newkeys & 1024)
	{
		if(vehicle_house_id[playerid] != 0) ExitVehicleHouse(playerid);
		else if(IsVehicleIdHouse(playerid)) EnterVehicleHouse(playerid);
	}
	if(newkeys & 1024)
    {
		if(GetPVarInt(playerid, "CameraActive") == 1)
		{
	        new Float:x, Float:y, Float:z; 
	        new Float:lock_x, Float:lock_y, Float:lock_z;

	        GetPlayerCameraPos(playerid, x, y, z);
	        GetPlayerCameraLookAt(playerid, lock_x, lock_y, lock_z);

	        SetPlayerCameraPos(playerid, x, y, z);
		    SetPlayerCameraLookAt(playerid, lock_x, lock_y, lock_z);

		    DiskiStyling(playerid);
			DeletePVar(playerid, "CameraActive"); 
			CEF_HIDE(playerid, "Interactions");
		}
	}
	if(newkeys & 1024)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
		{
			for(new i; i < sizeof g_mine_rack; i++)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_rack[i][0], g_mine_rack[i][1], g_mine_rack[i][2])) continue;

				if(g_player_mine_status[playerid] == 0)
				{
					g_player_mine_status[playerid] = 1;
					g_player_mine_rack[playerid] = i;
					SCM(playerid, 0xb1cbe5FF, "Теперь вам необходимо найти рудное месторождение: осматривайте стены.");
					GameText(playerid, "Вы взяли инструмент~n~Отыщите рудное месторождение", 3000, 2);

					//прописать инструмент
					RemovePlayerAttachedObjects(playerid);
					SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.0290, 0.1280, 0.1020, -24.0000, -14.8000, 0.0000, 1.0000, 1.0000, 1.0000, 0, 0);
					ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);

					CEF_HIDE(playerid, "Interactions");
				}
			}

			for(new i; i < MAX_MINE_ORE; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_ore_pos[i][MOP_DOWN][0], g_mine_ore_pos[i][MOP_DOWN][1], g_mine_ore_pos[i][MOP_DOWN][2]))
				{
					if(g_player_mine_status[playerid] == 1)
					{
						if(g_mine_ore[i][MO_OWNER_ID] != -1 && g_mine_ore[i][MO_OWNER_ID] != playerid) return 1;

						if(g_mine_ore[i][MO_OWNER_ID] == -1)
							g_player_mine_ore[playerid] = i,
							g_mine_ore[i][MO_OWNER_ID] = playerid;

						g_player_mine_status[playerid] = 2;

						byr_timer[playerid] = SetTimerEx("MinerTimer", 1000, true, "ii", playerid, 1);

				        CEF_CREATE(playerid, 2, 4, "ProgressBar", "[[\"Бурение\", 0, 1000]]");

						TogglePlayerControllable(playerid, false);

						ApplyAnimationEx(playerid, "SHOP", "SHP_GUN_AIM", 4.0, true, 0, 0, 1, 0, 0, USE_ANIM_TYPE_NONE);

						SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.010, -0.02, 0.02, 64.0, -100.8, 0.0, 1.0, 1.0, 1.0, 0, 0);

						CEF_HIDE(playerid, "Interactions");
					}
					break;
				}
			}
		}
	}
	if(newkeys & 1024)
	{
		//openRaffleShop(playerid);

		OpenPlayersContainers(playerid);

		OpenItemContainers(playerid);

		for(new i; i < MAX_SVALKA_CARS; i++)
		{
			if(g_svalka_cars[i][S_CAR_TIME] == 0) continue;
			if(IsPlayerInRangeOfPoint(playerid, 4.0, g_svalka_pos_cars[i][0], g_svalka_pos_cars[i][1], g_svalka_pos_cars[i][2])) return OnPlayerOpenDump(playerid, i, 1);
		}
		for(new i; i < MAX_SVALKA_ITEMS; i++)
		{
			if(g_svalka_items[i][S_ITEM_TIME] == 0) continue;
			if(IsPlayerInRangeOfPoint(playerid, 2.0, g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2])) return OnPlayerOpenDump(playerid, i, 2);
		}

		ChestUse(playerid);

        if(IsPlayerInRangeOfPoint(playerid, 6.0, -1759.6050,2894.0237,5.9712)) OnPlayerOpenBlackMarket(playerid);

        if(IsPlayerInRangeOfPoint(playerid, 4.0, 222.2848,-324.3180,1011.3044))
		{
			STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[1000,980],[%s,%d]]", QueryPlayerBalance(playerid), GetIteam(playerid, 293));
            CEF_CREATE(playerid, 2, 4, "CasinoExchange", STRING_GLOBAL);
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.0826, -311.5590, 1011.7958) ||
		IsPlayerInRangeOfPoint(playerid, 2.5, 203.1743, -316.7673, 1011.7958) ||
		IsPlayerInRangeOfPoint(playerid, 2.5, 199.7251, -306.3018, 1011.7958) ||
		IsPlayerInRangeOfPoint(playerid, 2.5, 199.3137, -311.7275, 1011.7958) ||
		IsPlayerInRangeOfPoint(playerid, 2.5, 203.5401, -306.3388, 1011.7958) ||
		IsPlayerInRangeOfPoint(playerid, 2.5, 199.5047, -316.9757, 1011.7958))
		OpenCasinoBlackJack(playerid);

		callcmd::dice(playerid);

		for(new i; i < sizeof g_business_interiors; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, GetBusinessInteriorInfo(i, BT_BUY_POS_X), GetBusinessInteriorInfo(i, BT_BUY_POS_Y), GetBusinessInteriorInfo(i, BT_BUY_POS_Z))) callcmd::buy(playerid, "");
		}

		if(IsPlayerInRangeOfPoint(playerid, 3.5, -2508.9167,1478.8176,1080.4944))
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_BUY_LIC, DIALOG_STYLE_TABLIST_HEADERS, 
				"{FFFFFF}Список лицензий", 
				"Название\tЦена\tТребования\n\
				Водительские права\t150.000 руб\tОтсутствуют\n\
				Разрешение на оружие\t350.000 руб\tОтсутствуют\n\
				Проф. права\t200.000 руб\tОтсутствуют\n",
				"Далее", "Закрыть"
			);
		}
	}
	if(newkeys == 1024 || PRESSED(KEY_SECONDARY_ATTACK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 441.1497,1703.6257,1001.0000))
        {
            SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid, 5);
            SetPlayerPos(playerid, 439.4017,1732.8656,1301.0000);
            SetPlayerFacingAngle(playerid, 90.000);
        }
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 441.1340,1731.1715,1301.0000))
        {
            SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid, 5);
            SetPlayerPos(playerid, 440.5286,1704.8746,1001.0000);
            SetPlayerFacingAngle(playerid, 90.000);
        }
		if(GetPlayerTeamEx(playerid) == TEAM_HOSPITAL)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 421.7701,1707.1627,1001.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[0], 422.904815,1707.659667,1000.000244, 2.0 ,0.0000, 0.0000, -106.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[0], 422.904815,1707.659667,1000.000244, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 421.6207,1734.7429,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[1], 422.900177,1735.241333,1299.986328, 2.0 ,0.0000, 0.0000, -114.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[1], 422.900177,1735.241333,1299.986328, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 416.2188,1734.7461,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[2], 417.507476,1735.245117,1299.988647, 2.0 ,0.0000, 0.0000, -114.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[2], 417.507476,1735.245117,1299.988647, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 422.9263,1730.4324,1301.0000))
			{
				if(vorota_status == 0) return MoveDynamicObject(door_mz[3], 424.124816,1729.922485,1299.998291, 2.0 ,0.0000, 0.0000, 118.0), vorota_status = 1;
				else return MoveDynamicObject(door_mz[3], 424.124816,1729.922485,1299.998291, 2.0, 0.0000, 0.0000, 0.00), vorota_status = 0;
			}
		}
	}
	if(newkeys == 1024) OpenVorota(playerid);
	if(newkeys == 1024) OpenVorotaDef(playerid);
	if(newkeys == 1024) 
	{
		for(new i; i < MAX_ITEMS; i++)
		{
			if(items_objs[i] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2])) OnPlayerTakeIteam(playerid);
		}
		
	}
	/*if(newkeys & 1024) //25
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0, -3626.5842,3229.5154,317.6395))
		{
            STRING_GLOBAL[0] = EOS;
	        format(STRING_GLOBAL,sizeof STRING_GLOBAL,"[0,\"Зарабатывайте ${359} Ледяные механизмы и покупайте предметы\",[[359,%d]],[[17405,\"Gaz-24-95 Кочевник\",17405,2,[[359,40000]]],[17989,\"Посох Щелкунчик\",289,0,[[359,11500]]],[17008,\"Костюм Гусара\",100,1,[[359,8500]]],[11006,\"Снеговик на плечо\",275,0,[[359,6000]]],[17984,\"Рюкзак Щелкунчик\",222,0,[[359,3500]]],[17992,\"Рюкзак Ёлка\",222,0,[[359,3500]]],[17996,\"Коричневая Ушанка\",185,0,[[359,3500]]],[17997,\"Синяя Ушанка\",185,0,[[359,3500]]],[17976,\"Аксессуар на Транспорт\",285,0,[[359,3000]]],[15752,\"Шапка Бинни\",185,0,[[359,1750]]],[18297,\"Декоративный Поезд Для Дома\",41,0,[[359,1000]]],[18296,\"Декоративный Мопед Для Дома\",41,0,[[359,950]]],[18298,\"Декоративные Лединцы\",41,0,[[359,950]]],[14793,\"Шапка Ушанка Серая\",185,0,[[359,750]]],[17995,\"Ободок Единорога\",185,0,[[359,650]]],[17988,\"Ободок Рожки\",185,0,[[359,650]]]]]", GetIteam(playerid, 359));
            CEF_CREATE(playerid, 2, 4, "Helloween", STRING_GLOBAL);
		}
	}*/
	if(newkeys & 1024) //25
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0, -393.5845,2530.3093,5.3718))
		{
            if(Ozerolodka[playerid] == 0)
            {
                IntfDialogCallRemote
	            (
		           playerid, DIALOG_OZERO, DIALOG_STYLE_MSGBOX,
		           "",
		           "\n"\
		           "{FFFFFF}Для того чтобы охотиться на уток Вам понадобиться развернуть надувную лодку!\n"\
		           "\n"\
		           "{FFFFFF}Желаете развернуть надувную лодку?",
		           "Да", "Нет"
               );
            }
            else
		    {
				IntfDialogCallRemote
	            (
		           playerid, DIALOG_OZERO_END, DIALOG_STYLE_MSGBOX,
		           "",
		           "\n"\
		           "{FFFFFF}Уже уходите? Не забудьте забрать надувную лодку!\n"\
		           "\n"\
		           "{FFFFFF}Желаете собрать надувную лодку?",
		           "Да", "Нет"
               );
		    }
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(stop_bus_job[playerid] == 1)
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
			    "{"#cGold"}Диспетчер автопарка",
				"{"#cW"}Вы уверены, что хотите завершить рабочий день?",
				"Да", "Нет"
			);
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, -1612.5540,1578.8273,2005.7100) || IsPlayerInRangeOfPoint(playerid, 3.0, -1666.1964,-460.3410,1001.0000) || IsPlayerInRangeOfPoint(playerid, 3.0, 2893.3259,2890.6304,1001.0000))
        {
	        new garage_id = GetPlayerInGarage(playerid);

			if(garage_id == -1) return FAIL;

	        if(GetGarageData(garage_id, G_IMPROVEMENTS) < 3) return 1;

	        if(GetGarageData(garage_id, G_OWNER_ID) != GetPlayerAccountID(playerid)) return SCM(playerid, 0xead671FF, "У вас нет доступа к этой доске.");

	        if(status_authorization[playerid] != 1) return true;

			new garage_type = GetGarageData(garage_id, G_TYPE);

			new slot = number_board_slot[garage_type - 1];

	        inventory_plate_id[playerid] = garage_id;

	        UpdateWeapons(playerid), LoadInventory(playerid), StateCheck(playerid);

	        if(inventory_bag_id[playerid] == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[2,\"Рюкзак\",%d.00,50.00,24],[3,\"Доска номерных знаков\",0.10,12.00,%d]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), GetWorkLoadItems(playerid, 1), slot, load_inventory[playerid]);
	        else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[\"%s\",%d,%d,%d,%d,%d,%d.00,30.00,20],[[3,\"Доска номерных знаков\",0.10,12.00,%d]],[%s]]", GetPlayerNameEx(playerid), playerid, GetPlayerMoney(playerid), GetPlayerSkin(playerid), GetIteam(playerid, 293), GetPlayerPremium(playerid), GetWorkLoadItems(playerid, 0), slot, load_inventory[playerid]);

	        CEF_CREATE(playerid, 2, 4, "InventoryNew", STRING_GLOBAL);
	    }
	}
	if(PRESSED(KEY_WALK))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, -2660.35, 2189.84, 1001.67))
		{
            new fam_id = GetPlayerData(playerid, P_FAMILY);

	        if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
			{
                if(GetPlayerVirtualWorld(playerid) == 4)
				{
					if(mansiondver1_status == 0) return MoveDynamicObject(Mansion1, -2660.9, 2189.62, 1001.89, 0.4, 0, 0, 93.1), mansiondver1_status = 1;
                    else return MoveDynamicObject(Mansion1, -2660.35, 2189.84, 1001.67, 0.4, 0, 0.0, 0.0), mansiondver1_status = 0;
				}
			}
			if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
			{
                if(GetPlayerVirtualWorld(playerid) == 6)
				{
					if(mansiondver2_status == 0) return MoveDynamicObject(Mansion2, -2660.9, 2189.62, 1001.89, 0.4, 0, 0, 93.1), mansiondver2_status = 1;
                    else return MoveDynamicObject(Mansion2, -2660.35, 2189.84, 1001.67, 0.4, 0, 0.0, 0.0), mansiondver2_status = 0;
				}
			}
			if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
			{
                if(GetPlayerVirtualWorld(playerid) == 5)
				{
					if(mansiondver3_status == 0) return MoveDynamicObject(Mansion3, -2660.9, 2189.62, 1001.89, 0.4, 0, 0, 93.1), mansiondver3_status = 1;
                    else return MoveDynamicObject(Mansion3, -2660.35, 2189.84, 1001.67, 0.4, 0, 0.0, 0.0), mansiondver3_status = 0;
				}
			}
			if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
			{
                if(GetPlayerVirtualWorld(playerid) == 7)
				{
					if(mansiondver4_status == 0) return MoveDynamicObject(Mansion4, -2660.9, 2189.62, 1001.89, 0.4, 0, 0, 93.1), mansiondver4_status = 1;
                    else return MoveDynamicObject(Mansion4, -2660.35, 2189.84, 1001.67, 0.4, 0, 0.0, 0.0), mansiondver4_status = 0;
				}
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.5, 1949.5688,35.8776,8.1148))
		{
	        if(GetFamilyData(GetPlayerFamily(playerid), F_GANG) == 1)
			{
				if(CentralMansionCapture == true)
                {
					if(HackerID == INVALID_PLAYER_ID)
                    {
					    Gang_CentralMansionCapture = CreateDynamicSphere(1949.5688,35.8776,8.1148, 2.0);
						
						foreach(new i:Player)
                        {
			                STRING_GLOBAL[0] = EOS;
						    format(STRING_GLOBAL, 150, "[\"%s\", \"#ffffff\", \"Проводят захват: Особняк мафии №1\", %d]", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), gettime() + 300);
						    CEF_CREATE(i, 2, 4, "GangTimer", STRING_GLOBAL);
						}

						Timer_CentralMansionCapture[playerid] = 300;
						new fmt_text[144];
						format(fmt_text, sizeof fmt_text, "{FFFFFF}%s[%d] из группировки {FFFF00}%s", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
						SendClientMessageToAll(0xFFFFFFFF, fmt_text);
						SendClientMessageToAll(0xFFFFFFFF, "Пытается взломать охранную систему особняка {5db7e7}\"Особняк мафии №1\"");

						SCM(playerid, 0xa9acafFF, "Не покидайте место компьютера чтобы взломать охранную систему");

						CEF_CREATE(playerid, 1, 4, "Hacking");
	            	    hackinghouse[playerid][0] = 1;

						HackerID = playerid;

						ActiveWar = true;
					}
				}
			}
			else SCM(playerid, -1, "Вы не в банде");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.5, -3251.9282,851.0476,7.8388))
		{
	        if(GetFamilyData(GetPlayerFamily(playerid), F_GANG) == 1)
			{
				if(WestMansionCapture == true)
                {
					if(HackerID2 == INVALID_PLAYER_ID)
                    {
					    Gang_WestMansionCapture = CreateDynamicSphere(-3251.9282,851.0476,7.8388, 2.0);

						foreach(new i:Player)
                        {
			                STRING_GLOBAL[0] = EOS;
						    format(STRING_GLOBAL, 150, "[\"%s\", \"#ffffff\", \"Проводят захват: Особняк мафии №2\", %d]", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), gettime() + 300);
						    CEF_CREATE(i, 2, 4, "GangTimer", STRING_GLOBAL);
						}
		
						Timer_WestMansionCapture[playerid] = 300;
						new fmt_text[144];
						format(fmt_text, sizeof fmt_text, "{FFFFFF}%s[%d] из группировки {FFFF00}%s", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
						SendClientMessageToAll(0xFFFFFFFF, fmt_text);
						SendClientMessageToAll(0xFFFFFFFF, "Пытается взломать охранную систему особняка {5db7e7}\"Особняк мафии №2\"");

						SCM(playerid, 0xa9acafFF, "Не покидайте место компьютера чтобы взломать охранную систему");

						CEF_CREATE(playerid, 1, 4, "Hacking");
	            	    hackinghouse[playerid][0] = 1;

						HackerID2 = playerid;

						ActiveWar = true;
					}
				}
			}
			else SCM(playerid, -1, "Вы не в банде");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.5, 4048.1741,3834.2500,9.1017))
		{
	        if(GetFamilyData(GetPlayerFamily(playerid), F_GANG) == 1)
			{
				if(NorthMansionCapture == true)
                {
					if(HackerID3 == INVALID_PLAYER_ID)
                    {
					    Gang_NorthMansionCapture = CreateDynamicSphere(4048.1741,3834.2500,9.1017, 2.0);

			            foreach(new i:Player)
                        {
			                STRING_GLOBAL[0] = EOS;
						    format(STRING_GLOBAL, 150, "[\"%s\", \"#ffffff\", \"Проводят захват: Особняк мафии №3\", %d]", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), gettime() + 300);
						    CEF_CREATE(i, 2, 4, "GangTimer", STRING_GLOBAL);
						}

						Timer_NorthMansionCapture[playerid] = 300;
						new fmt_text[144];
						format(fmt_text, sizeof fmt_text, "{FFFFFF}%s[%d] из группировки {FFFF00}%s", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
						SendClientMessageToAll(0xFFFFFFFF, fmt_text);
						SendClientMessageToAll(0xFFFFFFFF, "Пытается взломать охранную систему особняка {5db7e7}\"Особняк мафии №3\"");

						SCM(playerid, 0xa9acafFF, "Не покидайте место компьютера чтобы взломать охранную систему");

						CEF_CREATE(playerid, 1, 4, "Hacking");
	            	    hackinghouse[playerid][0] = 1;

						HackerID3 = playerid;

						ActiveWar = true;
					}
				}
			}
			else SCM(playerid, -1, "Вы не в банде");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.5, 2330.5688,1540.4658,14.0565))
		{
	        if(GetFamilyData(GetPlayerFamily(playerid), F_GANG) == 1)
			{
				if(PelaBaseCapture == true)
				{
					if(HackerID4 == INVALID_PLAYER_ID)
                    {
					    Gang_PelaBaseCapture = CreateDynamicSphere(2330.5217,1540.9606,14.0506, 2.0);
			            foreach(new i:Player)
                        {
			                STRING_GLOBAL[0] = EOS;
						    format(STRING_GLOBAL, 150, "[\"%s\", \"#ffffff\", \"Проводят захват: Особняк мафии №4\", %d]", GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME), gettime() + 300);
						    CEF_CREATE(i, 2, 4, "GangTimer", STRING_GLOBAL);
						}
						
						Timer_PelaBaseCapture[playerid] = 300;
						new fmt_text[144];
						format(fmt_text, sizeof fmt_text, "{FFFFFF}%s[%d] из группировки {FFFF00}%s", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
						SendClientMessageToAll(0xFFFFFFFF, fmt_text);
						SendClientMessageToAll(0xFFFFFFFF, "Пытается взломать охранную систему особняка {5db7e7}\"Особняк мафии №4\"");

						SCM(playerid, 0xa9acafFF, "Не покидайте место компьютера чтобы взломать охранную систему");

						CEF_CREATE(playerid, 1, 4, "Hacking");
	            	    hackinghouse[playerid][0] = 1;

						HackerID4 = playerid;

						ActiveWar = true;
					}
				}
			}
			else SCM(playerid, -1, "Вы не в банде");
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, -2513.2151,-605.9794,1001.0547))
		{
            for(new i; i < sizeof g_load_sto_garage; i++)
		    {
			    for(new idx; idx < 4; idx++)
			    {
		            if(gPlayerTuningMenu_2[playerid] == 1)
		            {
					    TogglePlayerControllable(playerid, 0);

					    //SetPlayerCameraPos(playerid, -2502.4258, -601.2964, 1004.5900);
					    //SetPlayerCameraLookAt(playerid, -2498.8938, -597.7574, 1001.0900);

						InterpolateCameraPos(playerid, -2512.693603, -602.628479, 1002.466491, -2502.893554, -600.904663, 1002.672180, 3000);
                        InterpolateCameraLookAt(playerid, -2513.408203, -607.478332, 1001.482360, -2499.434814, -597.581665, 1001.259887, 3000);

					    gPlayerTuningMenu[playerid] = 1;

						CEF_HIDE(playerid, "Interactions");

					    CEF_CREATE(playerid, 2, 4, "TuningMenu", "[11298, []]");
					    CEF_CREATE(playerid, 1, 2, "interface('TuningMenu').setItems('[3500, -1, -1]')");
					    break;
					}
				}
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0, 477.9655,-2438.9414,34.7629))
		{
			if(Lesopilka[playerid] == 1)
			{
                SendClientMessage(playerid, 0xabcdefFF, "Отнесите бревно на пилораму.");
        
		        SetPlayerAttachedObject(playerid, 2, 14039, 1, 0.226999, 0.513001, -0.026, -89.6, 132.2, -89.1, 0.472, 0.593, 0.594);
			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                SetPlayerCheckpoint(playerid, 470.9107, -2371.8191, 34.778301, 2.0);
				lesopilka_cp[playerid] = 1;
			    Lesopilka[playerid] = 2;
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0, 470.9422,-2371.9453,34.7626))
		{
			if(Lesopilka[playerid] == 2)
			{
                Progress_Bar_Menu(playerid, 5, 15, 15);
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0, 488.5046,-2383.2627,34.7459))
		{
			if(Lesopilka[playerid] == 3)
			{
				ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				lesopilka_cp[playerid] = 1;
			    Lesopilka[playerid] = 4;
			}
			else if(Lesopilka[playerid] == 5)
			{
			    ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				lesopilka_cp[playerid] = 1;
			    Lesopilka[playerid] = 6;
			}
			else if(Lesopilka[playerid] == 7)
			{
			    ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				lesopilka_cp[playerid] = 1;
			    Lesopilka[playerid] = 8;
			}
			else if(Lesopilka[playerid] == 9)
			{
			    ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
			    lesopilka_cp[playerid] = 1;
			    Lesopilka[playerid] = 10;
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0, 505.4260,-2376.7654,34.7800))
		{
			if(Lesopilka[playerid] == 4)
			{
				new pay_sum = 50000;
                new final_pay = pay_sum * g_xbonus;

                TotalEarnings[playerid] += final_pay;

				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                STRING_GLOBAL[0] = EOS;
	            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	            GameText(playerid, STRING_GLOBAL, 3000, 2);
			    ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				RemovePlayerAttachedObject(playerid, 2);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    Lesopilka[playerid] = 5;
			}
			else if(Lesopilka[playerid] == 6)
			{
				new pay_sum = 50000;
                new final_pay = pay_sum * g_xbonus;

                TotalEarnings[playerid] += final_pay;

				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                STRING_GLOBAL[0] = EOS;
	            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	            GameText(playerid, STRING_GLOBAL, 3000, 2);
			    ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				RemovePlayerAttachedObject(playerid, 2);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    Lesopilka[playerid] = 7;
			}
			else if(Lesopilka[playerid] == 8)
			{
				new pay_sum = 50000;
                new final_pay = pay_sum * g_xbonus;

                TotalEarnings[playerid] += final_pay;

				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                STRING_GLOBAL[0] = EOS;
	            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	            GameText(playerid, STRING_GLOBAL, 3000, 2);
			    ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				RemovePlayerAttachedObject(playerid, 2);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    Lesopilka[playerid] = 9;
				lesopilka_cp[playerid] = 1;
			}
			else if(Lesopilka[playerid] == 10)
			{
				new pay_sum = 50000;
                new final_pay = pay_sum * g_xbonus;

                TotalEarnings[playerid] += final_pay;

				SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

				SendClientMessage(playerid, 0xabcdefFF, "Вы перенесли все распиленные брёвна, отправляйтесь на склад за новым бревном.");

				SetPlayerCheckpoint(playerid, 477.8635, -2439.0234, 34.762901, 2.0);

                STRING_GLOBAL[0] = EOS;
	            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	            GameText(playerid, STRING_GLOBAL, 3000, 2);
			    ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				RemovePlayerAttachedObject(playerid, 2);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    Lesopilka[playerid] = 1;
				lesopilka_cp[playerid] = 1;
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0, -646.0148,-1735.2281,40.8792))
		{
            CEF_CREATE(playerid, 2, 4, "ActorDialog","[0,1, \"Чем могу помочь?\", \"\", \"Алексей\", [[\"У вас вроде как есть тайное слово от пиратского тайника\",\"Agressive\",\"\"],[\"Ничего\",\"Quit\",\"\"]],[\"\"]]");   
		}
	}
	if(PRESSED(KEY_WALK))
	{
		if(GetPVarInt(playerid, "kiosk_inter") != 0)
		{
			DestroyPlayerObject(playerid, GetPVarInt(playerid, "kiosk_object"));
			SetCameraBehindPlayer(playerid);
			SetPVarInt(playerid, "kiosk_inter", 0);
			CEF_HIDE(playerid, "Interactions");
		}
		new kiosk_id = GetNearestKiosk(playerid, 4.0);
		if(kiosk_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetKioskData(kiosk_id, K_POS_X), GetKioskData(kiosk_id, K_POS_Y), GetKioskData(kiosk_id, K_POS_Z)))
			{

				if(!IsKioskOwned(kiosk_id))
				{
					SetPVarInt(playerid, "buy_kiosk_id", kiosk_id);

					IntfDialogCallRemote(playerid, DIALOG_KIOSK_BUY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Выберите действие", "{FFFFFF}Киоск на продаже<n>{FFDD00}Хотите приобрести его?", "Да", "Нет");
				}
				else
				{
					CEF_HIDE(playerid, "StallCard");
					CEF_HIDE(playerid, "Interactions");
					CEF_CREATE(playerid, 1, 4, "StallCard");
				}
			}
		}
	}
	if(newkeys & 1024) //AltSklad
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1602.51, -629.67, 1017.17)) SkladAssembly(playerid);
	}
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid))
	{
        if(TestDrive[playerid] == 1)
        {
           IntfDialogCallRemote(playerid, DIALOG_STOP_TESTDRIVE, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы уверены, что желаете закончить тест-драйв?", "Подтвердить", "Отмена");
        }

		if(IsPlayerInRangeOfPoint(playerid, 3.0, 208.3309,1392.5912,12.1928) || IsPlayerInRangeOfPoint(playerid, 3.0, 653.0317,1778.7460,12.1472) || IsPlayerInRangeOfPoint(playerid, 3.0, 2349.8325,-1712.1898,20.6685))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ORG_CARS) IntfDialogCallRemote(playerid, DIALOG_PARKING_RESPAWN, DIALOG_STYLE_MSGBOX, "Парковка", "Вы действительно хотите вернуть данный транспорт на парковку?", "Да", "Отмена");
		}
	}
	if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
    {
		if(GetPVarInt(playerid, "livery") != 0)
		{
            StartPainting(playerid);
		}
    }
    if(!(newkeys & KEY_FIRE) && (oldkeys & KEY_FIRE))
    {
		if(GetPVarInt(playerid, "livery") != 0)
		{
            gIsPainting[playerid] = false;
            KillTimer(gPaintTimer[playerid]);
            gPaintTimer[playerid] = -1;
		}
    }
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		if(gPlayerTuningMenu_2[playerid] == 1)
		{
			new sto_exit_1 = GetPVarInt(playerid, "sto_id_exit_1");
			new sto_exit_2 = GetPVarInt(playerid, "sto_id_exit_2");
		
			new vehicleid = GetPlayerOwnableCarLast(playerid);

			SetVehiclePos(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][0], g_exit_sto_garage[sto_exit_1][sto_exit_2][1], g_exit_sto_garage[sto_exit_1][sto_exit_2][2]);
			SetVehicleZAngle(vehicleid, g_exit_sto_garage[sto_exit_1][sto_exit_2][3]);

			UpdateStoGarage(sto_exit_1, sto_exit_2, 0);
				
			SetPVarInt(playerid, "sto_id_exit_1", 0);
			SetPVarInt(playerid, "sto_id_exit_2", 0);

			SetPlayerInterior(playerid, 0);

			gPlayerTuningMenu[playerid] = 0;
			gPlayerTuningMenu_2[playerid] = 0;

			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			LinkVehicleToInterior(vehicleid, 0);
			CEF_HIDE(playerid, "TuningMenu");
		}
	}
    if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 2559.9539,-1891.7540,21.9640))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, 2564.9683,-1996.5657,1000.2740);
			SetVehicleZAngle(vehicleid, 358.9472);
			TogglePlayerControllable(playerid, 0);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 1);

			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);

			SetPlayerCameraPos(playerid,2567.752685, -1993.758789, 1001.270874);
			SetPlayerCameraLookAt(playerid,2563.825439, -1996.851196, 1001.153442);
			SpeedometrHideForPlayer(playerid);
			CEF_CREATE(playerid, 1, 2, "openInterface('TuningSprings')");
			CEF_CREATE(playerid, 1, 2, "interface('TuningSprings').springsSlices = [{diameter: 0.8}, {diameter: 0.7}, {diameter: 0.6}, {diameter: 0.5}, {diameter: 0.4}]");

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningSprings').balance = %s", QueryPlayerBalance(playerid));
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningSprings').customPrice = 1000000");
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('TuningSprings').stockPrice = 500000");
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
	}
	if(PRESSED(KEY_LOOK_LEFT)) // Q
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(turn[playerid] == 0)
			{
				PACKET_215(playerid, 15, vehicleid, 0, "", "", 1);
				turn[playerid] = 1;
			}
			else if(turn[playerid] == 1)
			{
				PACKET_215(playerid, 15, vehicleid, 0, "", "", 0);
				turn[playerid] = 0;
			}
		}
	}
	if(PRESSED(KEY_LOOK_RIGHT)) // E
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(turn[playerid] == 0)
			{
				PACKET_215(playerid, 15, vehicleid, 1, "", "", 1);
				turn[playerid] = 1;
			}
			else if(turn[playerid] == 1)
			{
				PACKET_215(playerid, 15, vehicleid, 1, "", "", 0);
				turn[playerid] = 0;
			}
		}
	}
	if(PRESSED(KEY_WALK))
	{
         if(g_player_status_fish[playerid] != 0)
		 {
			if(g_player_status_fish[playerid] == 1) return SCM(playerid, 0xfcdb70FF, "Сначала намотайте леску на вашу удочку.");
			//if(g_player_status_fish[playerid] == 2) return SCM(playerid, 0xfcdb70FF, "Сначала насадите наживку на вашу удочку.");

			if(g_player_status_primanka[playerid] == 1) 
			{
				if(GetIteamIndx(playerid, 326, 0) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 0);
			}
			else if(g_player_status_primanka[playerid] == 2) 
			{
				if(GetIteamIndx(playerid, 326, 1) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 1);
			}
			else if(g_player_status_primanka[playerid] == 3) 
			{
				if(GetIteamIndx(playerid, 326, 2) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 2);
			}
			else if(g_player_status_primanka[playerid] == 4) 
		    {
				if(GetIteamIndx(playerid, 326, 3) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 3);
			}
			else if(g_player_status_primanka[playerid] == 5) 
			{
				if(GetIteamIndx(playerid, 326, 4) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 4);
			}
			else if(g_player_status_primanka[playerid] == 6) 
			{
				if(GetIteamIndx(playerid, 326, 5) < 1) return g_player_status_fish[playerid] = 2, g_player_status_primanka[playerid] = 0;
				g_player_status_fish[playerid] = 3, GiveIteam(playerid, 326, 0, 1, 5);
			}
			else SCM(playerid, 0xfcdb70FF, "Сначала насадите наживку на вашу удочку.");

			if(g_player_status_fish[playerid] == 3)
			{
				TogglePlayerControllable(playerid, false);
				
				ApplyAnimation(playerid, "SWORD", "SWORD_BLOCK", 4.0, 0, 1, 1, 1, 0);
			}
		}
	}
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid)) OpenVorota(playerid);
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid)) OpenVorotaDef(playerid);
	if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid))
	{
		for(new i; i < sizeof g_carwash_object_pos; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z])) continue;

			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

			if(g_carwash_status[i] == 1) return SendClientMessage(playerid, 0xCECECEFF, "Данная автомойка уже моет");

			new business = GetNearestBusiness(playerid, 18.0);

			if(business == -1) return 1;

			DLGF(playerid, DIALOG_CARWASH_START, DIALOG_STYLE_MSGBOX,"{ffffff}Автомойка","{ffffff}Вы хотите помыть свой транспорт?\n{eaaf55}Стоимость услуги на данной автомойке составляет: %d руб", "Далее", "Отмена", GetBusinessData(business, B_PROD_PRICE));

			g_carwash_player_id[playerid] = i;

			return 1;
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
        if(IsPlayerInRangeOfPoint(playerid, 50, -1888.1816,1888.4098,175.9297))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 2) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");

			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);

			DLGF(playerid, DIALOG_SELL_CAR_ELITE, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
		if(IsPlayerInRangeOfPoint(playerid, 50, 2206.7478,2335.3818,13.5938))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 0) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");

			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);

			DLGF(playerid, DIALOG_SELL_CAR_NIZ, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
		if(IsPlayerInRangeOfPoint(playerid, 50, 2728.6340,-2443.7852,21.8427))
		{
			new vehicleid = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			if(vehicleid != GetPlayerVehicleID(playerid)) return SCM(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");
			if(GetVehicleInfo(GetOwnableCarData(index, OC_MODEL_ID), VI_TYPE) != 1) return SCM(playerid, 0xFF6600FF, "Данный класс авто не подходит под этот авторынок!");

			new business = GetNearestBusiness(playerid, 60.0);
			SetPVarInt(playerid, "by_id", business);
			new price = GetBusinessData(business, B_ARENDA_PRICE);

			DLGF(playerid, DIALOG_SELL_CAR_SR, DIALOG_STYLE_INPUT, "{FFCD00}Авторынок", "{FFFFFF}Хотите выставить свой транспорт на продажу?<n>Рынок взимает {FFCD00}%s {FFFFFF}руб за каждые {FFCD00}60 {FFFFFF}минут аренды места.<n><n>За сколько вы хотите продать своё транспортное средство?", "Готово", "Закрыть", formatInt(price));
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, -420.4103,583.2513,11.7573)) IntfDialogCallRemote(playerid, DIALOG_REMONT, DIALOG_STYLE_LIST, "Станция тех. обслуживания","Заменить моторное масло\nЗаменить маслянный фильтр\nЗаменить воздушный фильтр","Далее", "Закрыть");
			
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 174.3045,1575.0177,-48.3422))
	    {
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehicleid, 210.4814,1367.2345,12.1203);
			SetVehicleZAngle(vehicleid, 169.9973);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 0);

			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 0);
		}
	}
	if(newkeys & 1024)
	{
		new garage_id = GetPlayerInGarage(playerid);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.5, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2]))
				{
					callcmd::craft(playerid);
				}
			}
		}

		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(playerid)) continue;
			
			if(playerid == i) continue;
			if(GetPVarInt(i, "medhelp") != 1) continue;
			
			new Float: x, Float: y, Float: z;
			GetPlayerPos(i, x, y, z);

			if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
			{
				if(GetIteam(playerid, 2) > 0)
				{
					Medhelp(i);

					new fmt_str[128];
					format(fmt_str, sizeof fmt_str, "Игрок: %s помог вам подняться", GetPlayerNameEx(playerid));
					SendClientMessage(i, 0x3399FFFF, fmt_str);

					GiveIteam(playerid, 2, 0, 1, 0);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой аптечки");

				break;
			}
		}
		callcmd::radar22(playerid);

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2492.6079, 1394.9854, 1000.0214))
		{
			if(GetPlayerOwnableCarLast(playerid) == 0)
				SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
			else 
			{
				page_cars[playerid] = 1;
				type_page_cars[playerid] = 9;
				ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			}
		}

	    if(GetPVarInt(playerid,"spikespawn") == 1) callcmd::block(playerid);

		if(IsPlayerInRangeOfPoint(playerid, 3.0, -2503.8015,1479.2994,1080.4944)) PlayerFamilyCreate(playerid);
		
		if(IsPlayerInRangeOfPoint(playerid,2.0, 4008.3857,3860.5872,8.0616) || IsPlayerInRangeOfPoint(playerid,2.0, -3180.8489,825.0446,6.4200) || IsPlayerInRangeOfPoint(playerid,2.0, 1944.6792,-46.1749,6.4177)) PlayerGangCreate(playerid);

		if(IsPlayerInRangeOfPoint(playerid,2.0, -1633.3900,947.4431,147.8163)) 
		{
			if(GetPlayerInBiz(playerid) != -1) 
			{
				if(IsPlayerInBuyPosBiz(playerid, GetPlayerInBiz(playerid), 36)) 
				{
					Progress_Bar_Menu(playerid, 8, 50, 50);
				}
			}
		}
	
		if(IsPlayerInRangeOfPoint(playerid,2.0, 3771.1826,3877.6079,7.9300)) 
		{
			SCM(playerid, COLOR_ORANGE, "Если хотите продать урожай государству - откройте инвентарь, выберите продукт и нажмите \"Продать\".");
			SCM(playerid, COLOR_ORANGE, "Если хотите продать урожай игроку - сделайте тоже самое,но в любом другом месте, кроме этой палатки.");
		}
		if(IsPlayerInRangeOfPoint(playerid,2.0, 2188.9487,1371.6503,11.4361))
		{
			SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}эй... да, ты-ты... не интересует немного счастья?");
			SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}счастье у каждого своё, хех, поэтому я пытаюсь угодить всем...");
			SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}кто-то хочет поднять денег, кто-то провести хорошо время... а ладно, о чем это я.");
			IntfDialogCallRemote(playerid, DIALOG_BUY_MARIH, DIALOG_STYLE_INPUT, "{FFFFFF}Покупка семян конопли", "{FFFFFF}Давай шустрее... пока полицаи не приехали\n{FFFFFF}Сколько пачек семян берёшь? Продаю по {FFD83D}300 {FFFFFF}руб за пачку\nНе больше {FFD83D}20 {FFFFFF}пачек за раз", "Купить", "Закрыть");
		}
	}
	if(PRESSED(KEY_WALK))
	{

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 223.4474,-302.4741,1012.0385)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 223.1531,-296.3004,1012.0284)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.7382,-296.5287,1012.0684)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 207.9463,-303.3881,1012.0385)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 191.6914,-293.2050,1012.8684)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 201.4565,-331.6115,1012.0385)) IntfDialogCallRemote(playerid, DIALOG_RULLET_SHOW, DIALOG_STYLE_MSGBOX,"{ffffff}Рулетка","{ffffff}Хотите присоединиться к игре?","Да", "Нет");
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		new garage_id = GetNearestGarage(playerid, 10.0);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;

			if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
			{
				ShowPlayerGarageZaezd(playerid, garage_id);
			}
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		new garage_id = GetPlayerInGarage(playerid);
		if(garage_id != -1)
		{
			if(GetGarageData(garage_id, G_TYPE) == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, -1616.2706,1579.1246,2005.5372))
				{
					SetPlayerInGarage(playerid, -1);

					new vehicleid = GetPlayerVehicleID(playerid);

					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

					SetVehicleVirtualWorld(vehicleid, 0);

					LinkVehicleToInterior(vehicleid, 0);

					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
			if(GetGarageData(garage_id, G_TYPE) == 2)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, 2897.3401,2888.8042,1001.0000))
				{
					SetPlayerInGarage(playerid, -1);

					new vehicleid = GetPlayerVehicleID(playerid);

					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

					SetVehicleVirtualWorld(vehicleid, 0);

					LinkVehicleToInterior(vehicleid, 0);

					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
			if(GetGarageData(garage_id, G_TYPE) == 3)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, -1657.9447,-467.8287,1001.0000))
				{
					SetPlayerInGarage(playerid, -1);

					new vehicleid = GetPlayerVehicleID(playerid);

					SetVehiclePos
					(
						vehicleid,
						GetGarageData(garage_id, G_CAR_POS_X),
						GetGarageData(garage_id, G_CAR_POS_Y),
						GetGarageData(garage_id, G_CAR_POS_Z)
					);
					SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

					SetVehicleVirtualWorld(vehicleid, 0);

					LinkVehicleToInterior(vehicleid, 0);

					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
			}
		}
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
    {
		if(IsPlayerInRangeOfPoint(playerid, 30.0, 2393.3320,-625.3054,12.2941) || IsPlayerInRangeOfPoint(playerid, 30.0, 2130.0791,1808.9280,15.2734) || IsPlayerInRangeOfPoint(playerid, 30.0, -2516.3953,-13.5609,13.9453))
	    {
			if(!HasJob(playerid, 15)) return true;
			if(GetPlayerData(playerid, P_IN_JOB) == false) return true;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2 || GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3 || vehicleid == GetPlayerData(playerid, P_JOB_CAR))
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_TK_MENU_H, DIALOG_STYLE_LIST, 
					"{FFFFFF}Гараж транспортной компании", 
					"{FFFFFF}1. {ac876a}Поместить транспорт {FFFFFF}на парковку\n\
					{FFFFFF}2. {ac876a}Поместить прицеп {FFFFFF}в гараж\n\
					{FFFFFF}3. {c5c27c}Вывезти из гаража {FFFFFF}прицеп для груза\n\
					{FFFFFF}4. {c5c27c}Вывезти из гаража {FFFFFF}цистерну для топлива\n\
					{FFFFFF}5. Информация о транспорте",
					"Далее", "Закрыть"
				);
			}
		}
	}
    if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, -397.3741,1009.9180,12.1382))
	    {
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

			new vehicleid = GetPlayerVehicleID(playerid);
			new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);

			if(vehicleid1 != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

			SetVehiclePos(vehicleid, -313.3054,355.2758,12.9868);
			SetVehicleZAngle(vehicleid, 169.9994);

			SetPlayerCameraPos(playerid,-311.7177,348.9213,14.1133);
			SetPlayerCameraLookAt(playerid,-313.3054,355.2758,12.9868);

			SetPlayerVirtualWorld(playerid, playerid + 1);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);

			if(GetOwnableCarData(index, OC_PNEWMA) == 0) CEF_CREATE(playerid, 2, 4, "TuningPneuma", "[0, [1000000]]");
			else CEF_CREATE(playerid, 2, 4, "TuningPneuma", "[1]");

			SpeedometrHideForPlayer(playerid);
		}
	}
	if(PRESSED(KEY_WALK))
	{
		new enter_id = GetPVarInt(playerid, "pickup_house");
		
		if(IsPlayerInRangeOfPoint(playerid, 2.0, GetHouseData(enter_id, H_POS_X), GetHouseData(enter_id, H_POS_Y), GetHouseData(enter_id, H_POS_Z)))
		{
			HouseInfoBuy(playerid, enter_id);
		}

		new garden = GetNearestGarden(playerid, 6.0);
			
		if(garden != -1)
		{
			new idgarden;
			if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
			if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;
				
			for(new i; i < idgarden; i ++)
			{
				if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1)) continue;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[i][2] + 1)) continue;
				if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[i][2] + 1)) continue;
					
				if(G_STATUS_YAM[garden][i] == 0)
				{
					if(GetPlayerWeapon(playerid) != 6) return SCM(playerid, 0xead671FF, "У вас нет лопаты.");

					SetPVarInt(playerid, "garden_id", garden);
					SetPVarInt(playerid, "yamka_id", i);

	                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 1, 1, 0);

					Progress_Bar_Menu(playerid, 11, 50, 50);
				}
				else if(G_STATUS_YAM[garden][i] == 1)
				{
					if(GetIteam(playerid, 333) < 1) return SCM(playerid, 0xead671FF, "У вас нет извести (вы можете приобрести её в магазине садоводов).");

                    if(garden_kd[playerid] != 0) 
		                return SCM(playerid, 0xead671FF, "В данный момент вы уже заняты работой на грядке.");
        
	                garden_kd[playerid] = 2;

					TogglePlayerControllable(playerid, false);

					ApplyAnimationEx(playerid, "BOMBER", "BOM_PLANT_LOOP", 2.0, 0, 0, 0, 0, 0, 0);
					SetTimerEx("StopFreeze", 2000, false, "i", playerid);
					UpdateDynamic3DTextLabelText(gardendyamkalab[garden][i], 0xFFFF00FF, "{FFA500}Свободная ямка\n{FFFFFF}Готова к посадке");
					GiveIteam(playerid, 333, 0, 1, 0);
					G_STATUS_YAM[garden][i] = 2;
				}
				else if(G_STATUS_YAM[garden][i] == 2)
				{
					if(garden_kd[playerid] != 0) 
		                return SCM(playerid, 0xead671FF, "В данный момент вы уже заняты работой на грядке.");

					SetPVarInt(playerid, "garden_id",garden);
					SetPVarInt(playerid, "yamka_id",i);

					IntfDialogCallRemote
					(
						playerid, DIALOG_GARDEN, DIALOG_STYLE_LIST,
						"Какое растение вы хотите посадить?",
						"Название\tВремя роста\tИнтервал полива\n\
						{FFFFFF}Помидоры\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Огурцы\t{"#cGold"}20 мин.\t4 мин.\n\
						{FFFFFF}Марихуана\t{"#cGold"}30 мин.\t4 мин.\n\
						{FFFFFF}Картофель\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Свёкла\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Перец\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Баклажан\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Капуста\t{"#cGold"}10 мин.\t4 мин.\n\
						{FFFFFF}Морковь\t{"#cGold"}10 мин.\t4 мин.",
						"Готово", "Закрыть"
					);
				}
				else if(G_STATUS_YAM[garden][i] == 3)
				{
                    new fmt_text[148];

					if(G_STATUS_WOTER[garden][i] == 2) return 1;

					if(GetIteam(playerid, 247) < 1) return SCM(playerid, 0xead671FF, "У вас нет лейки с водой.");

					if(garden_kd[playerid] != 0) 
		                return SCM(playerid, 0xead671FF, "В данный момент вы уже заняты работой на грядке.");
        
	                garden_kd[playerid] = 2;

					if(G_WT_ST[garden][i] == 0)
					{
						G_WT_ST[garden][i] = 1;
						if(G_TYPE_YAM[garden][i] == 1) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
						if(G_TYPE_YAM[garden][i] == 2) rost[garden][i] = SetTimerEx("gardengryadka", 12000, true, "ii", garden,i);
						if(G_TYPE_YAM[garden][i] == 3) rost[garden][i] = SetTimerEx("gardengryadka", 18000, true, "ii", garden,i);
						if(G_TYPE_YAM[garden][i] > 3) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
					}

                    if(G_STATUS_WOTER[garden][i] == 0 || G_STATUS_WOTER[garden][i] == 1)
                    {
                        G_STATUS_WOTER[garden][i] = 2;
						format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.0%\n{FFFFFF}Почва: {FF8800}очень мокрая",garden_name[G_TYPE_YAM[garden][i]-1],G_STATUSS[garden][i]);
					}
				
				    TogglePlayerControllable(playerid, false);
					ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
				    SetTimerEx("StopFreeze", 2000, false, "i", playerid);
					UpdateDynamic3DTextLabelText(gardendyamkalab[garden][i], 0xFFFF00FF, fmt_text);
					GiveIteam(playerid,247, 0, 1, 0);
					if(GetIteam(playerid, 247) == 0) GiveIteam(playerid,168, 1, 1, 0);
				}
				else if(G_STATUS_YAM[garden][i] == 4)
				{
                    SetPVarInt(playerid, "g_garden_loaded", garden + 1);
					SetPVarInt(playerid, "idgarden", i + 1);
					CEF_CREATE(playerid, 1, 4, "Harvesting");
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 1, 0, 0);
				}
				break;
			}
			if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1)) return 1;
			if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z) + 1)) return 1;
			if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z) + 1)) return 1;
			
			new ownerID = GetGardenData(garden, G_OWNER_ID);
            new renterID = GetGardenData(garden, G_OREND_ID);
            new playerID = GetPlayerAccountID(playerid);

            if(renterID != 0)
            {
                if(playerID != renterID)
                    return GameText(playerid, "~r~У вас нет ключей от теплицы так как вы сдали её в аренду.", 3000, 2);
            }
            else
            {
                if(playerID != ownerID)
                    return 1;
            }
			
			if(GetGardenData(garden, G_LOCK_STATUS) != 0) return SCM(playerid, 0xABCDEFFF,"Дверь заперта.");

			if(Garden_Status[garden] == 1)
			{
				if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				Garden_Status[garden] = 0;
			}
			else
			{
				if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				Garden_Status[garden] = 1;
			}
		}
	}

    if(PRESSED(KEY_FIRE) && IsPlayerInAnyVehicle(playerid))
    {
		for(new idx; idx < g_business_loaded; idx ++)
		{
			if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY || GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY_SRED || GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_BY_NIZ)
			{
				if(IsPlayerInRangeOfPoint(playerid, 13, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z)))
				{

				    SendClientMessage(playerid, 0xFFDAB9FF, "Вы встали слишком близко ко входу авторынка, отъедьте немного назад, чтобы не мешать остальным.");
				    CEF_CREATE(playerid, 1, 2, "window.closeLastDialog()");
					return 1;
			 	}
			}
		}
		for(new i; i < sizeof g_load_sto_garage; i++)
		{
			for(new idx; idx < 4; idx++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, g_load_sto_garage[i][idx][0], g_load_sto_garage[i][idx][1], g_load_sto_garage[i][idx][2]))
				{
					if(sto_garage_status[i][idx] == 1) return SCM(playerid, COLOR_GREY, "Данный гараж используется игроком.");

					new vehicleid = GetPlayerVehicleID(playerid);

					new vehicleid1 = GetPlayerOwnableCarLast(playerid);

					if(vehicleid1 != GetPlayerVehicleID(playerid))
						return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

					foreach(new idxx: Player)
					{
						if(!IsPlayerConnected(idxx)) continue;
						if(!IsPlayerLogged(idxx)) continue;
						if(idxx == playerid) continue;
						if(IsPlayerInVehicle(idxx, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
						break;
					}

					SetVehiclePos(vehicleid, -2498.8906, -597.7437, 1001.0588);
					SetVehicleZAngle(vehicleid, 89.6331);
					
					gPlayerTuningMenu_2[playerid] = 1;

					SetPlayerInterior(playerid, 4);
					SetPlayerVirtualWorld(playerid, playerid + 1);

					LinkVehicleToInterior(vehicleid, 4);
					SetVehicleVirtualWorld(vehicleid, playerid + 1);

					UpdateStoGarage(i, idx, 1);
                    SetPVarInt(playerid, "sto_id", GetNearestBusiness(playerid, 50.0));
					SetPVarInt(playerid, "sto_id_exit_1", i);
					SetPVarInt(playerid, "sto_id_exit_2", idx);
					SetPVarInt(playerid, "cl1", 1);
					SetPVarInt(playerid, "diski", -1);
					SetPVarInt(playerid, "vinil", -2);
					SetPVarInt(playerid, "color_id", -1);
					SetPVarInt(playerid, "color_id1", -1);
					printf("sto_id %d", GetPVarInt(playerid, "sto_id"));
					break;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 5, 1657.3654,692.2846,16.4430))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
            {
                if(ceno[vehicleid] > 0) return SendClientMessage(playerid, -1, "Вы должны сначало полностью выгрузиться.");
                new cenof = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);
                if(cenof <= 0)
                {
                    SendClientMessage(playerid, -1, "На складе нет сена");
                    return 1;
                }

				if(cenof < 10 && cenof >= 0)
				{
					ceno[vehicleid] = cenof;
				    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, 0);
				    SendClientMessage(playerid, -1, "Вы забрали всё сено со склада");
				    FermerRepositoryUpdate();
				    FermaCarUpdate(vehicleid);
					SetPVarInt(playerid,"zagruz",gettime() + 300);
				    SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						-1057.2186,
						2165.3706,
						38.0416,
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_FERMA
					);
				    return 1;
				}
				SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, cenof - 10);
				ceno[vehicleid] = 10;
				FermerRepositoryUpdate();
    			FermaCarUpdate(vehicleid);
    			SendClientMessage(playerid, -1, "Сено загружено в вашу машину. Отправляйтесь на отмеченое место.");
				SetPVarInt(playerid,"zagruz",gettime() + 300);
    			SetPlayerRaceCheckpoint
				(
					playerid,
					2,
					-1057.2186,
					2165.3706,
					38.0416,
					0.0,
					0.0,
					0.0,
					4.0,
					RCP_ACTION_TYPE_FERMA
				);
            }
        }
	}
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
    {
		if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849) || IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
   			new md = GetVehicleData(vehicleid, V_MODELID);

			if(md == 424 || md == 461 || md == 462 || md == 463 || md == 468 || md == 471 || md == 481 || md == 510 || md == 521 || md == 522
			|| md == 581 || md == 586 || md == 15127 || md == 15129 || md == 15130 || md == 15132 || md == 15133 || md == 15134 || md == 15135 || md == 15136 || md == 15139 || md == 15245)
			return SCM(playerid, COLOR_GREY, "Данный транспорт недоступен для установки stage.");

			if(GetVehicleHandlingID(md) == -1) return GameText(playerid, "~r~На данный транспорт невозможно установить stage", 3000, 1);

			new vehicleid1 = GetPlayerOwnableCarLast(playerid);
			if(vehicleid1 != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

			foreach(new i: Player){
				if(i == playerid) continue;
				if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
				break;
			}
			CEF_CREATE(playerid, 2, 4, "TuningStage", "[[70,1.350000],[[\"Уровень 1\",700000,10,10.000000],[\"Уровень 2\",2000000,20,20.000000],[\"Уровень 3\",4000000,30,30.000000]]]");
			SpeedometrHideForPlayer(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 10, 258.8138,703.6974,11.9849)) stagest[playerid] = 2;
			if(IsPlayerInRangeOfPoint(playerid, 10, 2345.3701,-2610.1836,21.7953)) stagest[playerid] = 1;
			SetVehiclePos(vehicleid, 2339.8787,-2612.8870,1002.2754);
			SetVehicleZAngle(vehicleid, 0);
			TogglePlayerControllable(playerid, 0);
			stagestats[playerid] = 1;
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid + 1);

			LinkVehicleToInterior(vehicleid, 0);
			SetVehicleVirtualWorld(vehicleid, playerid + 1);

			SetPlayerCameraPos(playerid,2342.3635,-2606.8323,1002.6982);
			SetPlayerCameraLookAt(playerid,2339.8787,-2611.8870,1002.2754);
		}
	}
	if(PRESSED(KEY_NO)) callcmd::no(playerid, "");
	if(PRESSED(KEY_YES)) callcmd::yes(playerid, "");
	if(PRESSED(KEY_CTRL_BACK)) if(!IsPlayerInAnyVehicle(playerid)) callcmd::trunk(playerid);

	if(GetPVarType(playerid, "FlyMode"))
	{
		if(newkeys & KEY_JUMP) ShowPlayerFlyPolet(playerid);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(GetPlayerSettingData(playerid, S_VEH_CONTROL) == SETTING_TYPE_ON)
			{
				if(PRESSED(KEY_HANDBRAKE | KEY_FIRE)) // правый ctrl
				{
					if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID) callcmd::lock(playerid, "1");
				}
				if(PRESSED(KEY_ACTION)) callcmd::e(playerid, "");
				if(PRESSED(KEY_FIRE)) callcmd::l(playerid, "");	
				if(PRESSED(KEY_ANALOG_DOWN)) callcmd::i(playerid, "");
				if(PRESSED(KEY_ANALOG_LEFT)) callcmd::sl(playerid, "");
				if(PRESSED(KEY_ANALOG_RIGHT)) callcmd::alarm(playerid, "");

				if(PRESSED(KEY_FIRE))
				{
					new businessid = GetNearestBusiness(playerid, 2.0);

                    if(businessid != -1)
                    {
                        new Float:bx = GetBusinessData(businessid, B_POS_X);
                        new Float:by = GetBusinessData(businessid, B_POS_Y);
                        new Float:bz = GetBusinessData(businessid, B_POS_Z);

                        if(IsPlayerInRangeOfPoint(playerid, 2.0, bx, by, bz))
                        {
                            if(GetBusinessData(businessid, B_TYPE) == 37)
                            {
                                callcmd::i(playerid, "");
                            }
                        }
                    }
					if(IsPlayerInRangeOfPoint(playerid, 15.0, 740.6722,2593.2686,12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.7357,1216.0225,4.9021) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.3786,407.8583,12.0000) 
					|| IsPlayerInRangeOfPoint(playerid, 15.0, -2603.8452,-11.4564,12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, 2222.0361,-1700.8455,22.0557) || IsPlayerInRangeOfPoint(playerid, 15.0, 1884.8348,-2943.7678,3.8352) 
					|| IsPlayerInRangeOfPoint(playerid, 15.0, 1912.0714,-848.0580,15.7839) || IsPlayerInRangeOfPoint(playerid, 15.0, -2557.9216,1946.0831,52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 3970.4331,4347.5366,7.9306) 
					|| IsPlayerInRangeOfPoint(playerid, 15.0, -2042.2933,-1984.5055,8.5077) || IsPlayerInRangeOfPoint(playerid, 15.0, 2553.3914,-2399.2551,21.8503))
					{
						callcmd::ic(playerid);
					}
				}
			}
			if(PRESSED(KEY_SUBMISSION))
			{
                if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCarLast(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car))
					{
                        if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN && player_job_active[playerid] == 6)
					    {
                            if(ElectrikActive[playerid] == 0)
                            {
                                new query[512], randomed, count;

						        if(Iter_Count(ElectricanPlayerBiz[playerid]) <= 0)
						        {
						            Iter_Clear(ElectricanPlayerBiz[playerid]);
							        for(new i; i < 5; i++)
							        {
						                randomed = RandomEx(1, 105);
								        g_electrician_generated[playerid] = 1;
								        Iter_Add(ElectricanPlayerBiz[playerid], g_business[randomed][B_SQL_ID]);
							        }
						        }

                                foreach(new i : ElectricanPlayerBiz[playerid])
						        {
							        if(i == 0) continue;
							        //randomed = g_electrician_random[playerid][i];
							        SetPlayerListitemValue(playerid, count, i);
							    
							        ElectrikUse[playerid] = 1;

                                    CEF_HIDE(playerid, "Interactions");

							        format(query, sizeof query, "%s %s (№:%d) \t %.2f м. \n", query, g_business[i][B_NAME], g_business[i][B_SQL_ID], GetPlayerDistanceFromPoint(playerid, g_business[i][B_POS_X], g_business[i][B_POS_Y], g_business[i][B_POS_Z]));
							        count++;
						        }
						        IntfDialogCallRemote(playerid, DIALOG_ELECT_BUSINESS, DIALOG_STYLE_LIST, "Список бизнесов", query, "Выбрать", "Закрыть");
							}
							else
							{
                                IntfDialogCallRemote
							    (
									playerid, DIALOG_END_JOB_ELECT, DIALOG_STYLE_MSGBOX,
									"{"#cGold"}Работа электрика",
									"{"#cW"}Вы уверены что хотите завершить рабочий день?",
									"Да", "Нет"
								);
							}
					    }
       					if(HasJob(playerid, 15) && player_job_active[playerid] == 4)
						{
							if(IsPlayerInJob(playerid))
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
									"{FFD83D}Диспетчер автопарка",
									"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
									"Да", "Нет"
								);
							}
							else
							{
								IntfDialogCallRemote
								(
									playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
									"{FFD83D}Дальнобойщик",
									"{FFFFFF}Вы хотите начать работу дальнобойщика?",
									"Да", "Нет"
								);
							}
						}
					}
				}
				else callcmd::car(playerid, "");
			}
		}
	}
	else
	{
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);

				SetPlayerHealthEx(playerid, 25.0, true);

				if(GetPlayerHealthEx(playerid) == 100) return SendClientMessage(playerid, 0xFF6600FF, "Вы не нуждаетесь в лечении");

				ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 0);
				SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				SetPlayerHealthEx(playerid, 25.0, true);
				if(GetPlayerHealthEx(playerid) > 100) return SetPlayerHealthEx(playerid, 100);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
		if(PRESSED(KEY_WALK)) if(IsPlayerUseAnim(playerid)) ClearPlayerUseAnim(playerid), CEF_HIDE(playerid, "Interactions");
		if(PRESSED(KEY_SPRINT))
		{

			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);

					TogglePlayerSpectating(playerid, false);

					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 331.0103, 662.5683, 49.7290, 67.7277);
						SetPlayerPosEx(playerid, 331.0103, 662.5683, 49.7290, 67.7277, interior, businessid + 255, false);
					}
					else
					{
						PlayerTeleportInit(playerid, 160.7020, 745.5962, 25.8272, 159.1750);
						SetPlayerPosEx(playerid, 160.7020, 745.5962, 25.8272, 159.1750, interior, businessid + 255, false);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}
		if(PRESSED(KEY_WALK))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, 214.88200, -276.60931, 1012.79022))
   			{
				ShowPlayerCasinoRollMenu(playerid);
   			}
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 428.8445,1704.5200,1001.0000) || IsPlayerInRangeOfPoint(playerid, 100.0, 431.1976,1732.5670,1301.0000))
			{
				new bedid = -1;

				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}

				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

					g_med_bed_used[bedid] = true;

					new fmt_msg[85];

					format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{FFCC00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);

					format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
					SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

					SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}

	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2674.4509,2189.0325,1000.9988)) callcmd::steal_cars(playerid);
			if(GetPlayerInHouse(playerid) != -1) ExitPlayerFromHouse(playerid, 1.1);
			
			if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
			{
				new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
				new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
				
				if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
				{
					switch(GetPickupInfo(pickupid, P_ACTION_TYPE))
					{
						case PICKUP_ACTION_TYPE_HOTEL_ROOM:
						{
							new hotel_id = GetPlayerInHotelID(playerid);
							new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
							
							if(hotel_id != -1 && floor >= 1)
							{
								new room_id = ((floor-1)*12) + action_id;
								EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
							}
						}
					}
				}
			}

			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1) ExitPlayerFromHotelRoom(playerid);	
		}
		//Магазин 24/7
		if(PRESSED(KEY_CTRL_BACK))
		{
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -502.3037, 1504.5017, 1001.0025))
	        {
				if(GetPlayerInBiz(playerid) != -1)
				{
					if(GetBusinessData(GetPlayerInBiz(playerid), B_TYPE) == BUSINESS_TYPE_SHOP_24_7) callcmd::buy(playerid, "");
				}
			}
		}
		if(PRESSED(KEY_WALK) || PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
		{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5,  -1789.5442,-2633.6689,9.9174) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana1_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin,-1786.51, -2634.84, 10.308,0.5, 0, 0, 170.4);
						GameText(playerid, "~r~Шлагбаум закрыт", 1000,1);
						obezyana1_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin,-1785.85, -2634.94, 11.263,0.5,0,-58.5,170.5);
						GameText(playerid, "~g~Шлагбаум открыт", 1000,1);
						obezyana1_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1771.5005,-2662.5586,10.9971) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana2_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin1,-1770.28, -2658.41, 11.2058,0.5, 0, 0, -100.7);
						GameText(playerid, "~r~Шлагбаум закрыт", 1000,1);
						obezyana2_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin1,-1770.18, -2657.94, 12.0993,0.5,0,-48.5,-100.9);
						GameText(playerid, "~g~Шлагбаум открыт", 1000,1);
						obezyana2_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1776.0507,-2665.8604,11.0982))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana3_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin2,-1775.28, -2666.39, 10.106,0.1, 0, 0, 167.7);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana3_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin2,-1775.24, -2666.47, 10.0946,0.1,0,0,67.2);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana3_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5,  -1675.5416,-2837.8823,1001.4022))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana4_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin3,-1675.19, -2837.32, 1000.46,0.2, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana4_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin3,-1675.11, -2837.32, 1000.46,0.2,0.100003,0,-134.4);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana4_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1793.2865,-2660.8682,11.1806) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana5_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin4,-1787.72, -2663.1, 12.1935,0.1, 0, 0, -17);
						MoveDynamicObject(vorota_fsin5,-1798.95, -2659.85, 12.2065,0.1,0,0,165.7);
						GameText(playerid, "~r~Ворота закрыты", 1000,1);
						obezyana5_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin4,-1787.99, -2663.1, 12.1718,0.1,0,0,-117.2);
						MoveDynamicObject(vorota_fsin5,-1798.68, -2659.8, 12.1524,0.1,0,0,-89.1001);
						GameText(playerid, "~g~Ворота открыты", 1000,1);
						obezyana5_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1807.8126,-2715.3821,11.5588) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana6_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin6,-1802.32, -2713.78, 12.5695,0.1, 0, 0, 21.1);
						MoveDynamicObject(vorota_fsin7,-1813.25, -2717.56, 12.5779,0.1,0,0,-162.3);
						GameText(playerid, "~r~Ворота закрыты", 1000,1);
						obezyana6_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin6,-1802.57, -2713.76, 12.5511,0.1,0,0,-93.3);
						MoveDynamicObject(vorota_fsin7,-1812.91, -2717.5, 12.5883,0.1,0,0,-67.2);
						GameText(playerid, "~g~Ворота открыты", 1000,1);
						obezyana6_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1675.6741,-2827.9246,1004.8238))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana9_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin8,-1675.32, -2827.38, 1003.88,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana9_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin8,-1675.35, -2827.39, 1003.91,0.1,0,0,107.2);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana9_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1677.5055,-2840.1748,1004.8162))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana8_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin9,-1677.99, -2840.77, 1003.89,0.1, 0, 0, 88.8999);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana8_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin9,-1675.35, -2840.77, 1003.88,0.1,0,0,89.9);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana8_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1802.9891,-2687.8933,11.4310) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana10_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin10,-1798.91, -2690.01, 10.4696,0.1, 0, 0, 159.1);
						MoveDynamicObject(vorota_fsin11,-1807.41, -2686.63, 10.4787,0.1, 0, 0, -20.6);
						GameText(playerid, "~r~Ворота закрыты", 1000,1);
						obezyana10_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin10,-1798.99, -2689.98, 10.4681,0.1, 0, 0, 63);
						MoveDynamicObject(vorota_fsin11,-1807.37, -2686.62, 10.4822,0.1, 0, 0, 80.7);
						GameText(playerid, "~g~Ворота открыты", 1000,1);
						obezyana10_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5,  -1756.1206,-2722.8430,11.6367) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana11_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin12,-1755.51, -2726.58, 12.0444,0.5, 0, 0, 105.1);
						GameText(playerid, "~r~Шлагбаум закрыт", 1000,1);
						obezyana11_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin12,-1755.34, -2727.15, 12.8429,0.5,0,-45.8,105.3);
						GameText(playerid, "~g~Шлагбаум открыт", 1000,1);
						obezyana11_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1769.5439,-2727.1360,11.6055) && !IsPlayerInAnyVehicle(playerid))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana10_status1 == 0)
					{
						MoveDynamicObject(vorota_fsin13,-1768.27, -2732.72, 12.3795,0.1, 0, 0, -72.3);
						MoveDynamicObject(vorota_fsin14,-1771.63, -2721.66, 12.395,0.1, 0, 0, 106.8);
						GameText(playerid, "~r~Ворота закрыты", 1000,1);
						obezyana10_status1 = 1;
						return 1;
					}
					else
					{
						MoveDynamicObject(vorota_fsin13,-1768.33, -2732.56, 12.3785,0.1, 0, 0, -165.4);
						MoveDynamicObject(vorota_fsin14,-1771.64, -2721.92, 12.3947,0.1, 0, 0, -160.5);
						GameText(playerid, "~g~Ворота открыты", 1000,1);
						obezyana10_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1694.4733,-2806.1184,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana12_status1 == 0)
					{
						MoveDynamicObject(door_fsin,-1695.03, -2806.47, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana12_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin,-1695.03, -2806.47, 1000.4,0.1,0,0,153.8);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana12_status1 = 0;
						return 1;
					}
				}
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, -1698.0138,-2806.1287,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana13_status1 == 0)
					{
						MoveDynamicObject(door_fsin1,-1698.54, -2806.48, 1000.41,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana13_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin1,-1698.54, -2806.47, 1000.42,0.1,0,0,148.2);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana13_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1701.5287,-2806.1558,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana14_status1 == 0)
					{
						MoveDynamicObject(door_fsin2,-1702.04, -2806.51, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana14_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin2,-1702.05, -2806.51, 1000.4,0.1,0,0,146.8);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana14_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1697.9526,-2797.6726,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana15_status1 == 0)
					{
						MoveDynamicObject(door_fsin3,-1698.55, -2797.23, 1000.41,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana15_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin3,-1698.47, -2797.3, 1000.39,0.1,0,-0.600001,-145.6);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana15_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1701.3197,-2797.6501,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana16_status1 == 0)
					{
						MoveDynamicObject(door_fsin4,-1702.05, -2797.21, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana16_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin4,-1701.99, -2797.29, 1000.4,0.1,0,0,-143.2);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana16_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1694.4430,-2797.6189,1001.4000))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana17_status1 == 0)
					{
						MoveDynamicObject(door_fsin5,-1695.06, -2797.18, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana17_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin5,-1694.99, -2797.3, 1000.41,0.1,0,0,-146.8);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana17_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1737.66, -2797.22, 1000.42)) //
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana18_status1 == 0)
					{
						MoveDynamicObject(door_fsin6,-1737.66, -2797.22, 1000.42,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana18_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin6,-1737.6, -2797.35, 1000.4,0.1,0,0,-149.8);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana18_status1 = 0;
						return 1;
					}
				}
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, -1747.08, -2797.22, 1000.41))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana19_status1 == 0)
					{
						MoveDynamicObject(door_fsin7,-1747.08, -2797.22, 1000.41,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana19_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin7,-1747.03, -2797.33, 1000.39,0.1,0,0,-150.7);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana19_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1747.08, -2806.48, 1000.4))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana20_status1 == 0)
					{
						MoveDynamicObject(door_fsin8,-1747.08, -2806.48, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana20_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin8,-1747.08, -2806.54, 1000.39,0.1,0,0,144.5);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana20_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1737.66, -2806.47, 1000.4))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana21_status1 == 0)
					{
						MoveDynamicObject(door_fsin9,-1737.66, -2806.47, 1000.4,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana21_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin9,-1737.66, -2806.48, 1000.39,0.1,0,0.0,155.6);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana21_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1737.66, -2797.23, 1003.8))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana22_status1 == 0)
					{
						MoveDynamicObject(door_fsin10,-1737.66, -2797.23, 1003.8,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana22_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin10,-1737.59, -2797.32, 1003.8,0.1,0,0,-145.1);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana22_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1747.08, -2797.21, 1003.82))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana23_status1 == 0)
					{
						MoveDynamicObject(door_fsin11,-1747.08, -2797.21, 1003.82,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana23_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin11,-1747, -2797.37, 1003.81,0.1,0,0,-153.9);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana23_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1747.07, -2806.48, 1003.81))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana24_status1 == 0)
					{
						MoveDynamicObject(door_fsin12,-1747.07, -2806.48, 1003.81,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana24_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin12,-1747.07, -2806.47, 1000.4,0.1,0,0,153.6);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana24_status1 = 0;
						return 1;
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 2.5, -1737.65, -2806.45, 1003.81))
				{
					ClearAnimations(playerid);
					if(GetPlayerTeamEx(playerid) == TEAM_FSIN)
					if(obezyana25_status1 == 0)
					{
						MoveDynamicObject(door_fsin13,-1737.65, -2806.45, 1003.81,0.1, 0, 0, 0);
						GameText(playerid, "~r~Дверь закрыта", 1000,1);
						obezyana25_status1 = 1;

						return 1;
					}
					else
					{
						MoveDynamicObject(door_fsin13,-1737.64, -2806.47, 1003.8,0.1,0,0,156.1);
						GameText(playerid, "~g~Дверь открыта", 1000,1);
						obezyana25_status1 = 0;
						return 1;
					}
				}
			}
		if(PRESSED(KEY_WALK))
	 	{
			//------------------------------------------------------------------
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8300,2236.7720,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1090.5043,2236.7720,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8397,2231.1621,2.0000)) callcmd::varkanarkoti(playerid);
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1091.9602,2231.1621,2.0000)) callcmd::varkanarkoti(playerid);
			//------------------------------------------------------------------

			//Закусочная
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -1852.6345,1277.0465,1115.8447))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_ZAKUS)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			//Кондитерская
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.7572,1801.3663,1031.0000))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_KONDITER)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			//Сотовый салон
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2708.6167, -0.1650, 1060.9922))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CELL_SALON)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			//Магазин одежды
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2003.4229,1901.8441,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CLOTHING_SHOP)
					{
						ShowPlayerClothingShopPanel(playerid);
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1238.5682,-2774.2454,1001.0000))
		    {
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					SetPVarInt(playerid, "akstype", 0);
					SetPVarInt(playerid, "category_bs", 0);
					CEF_CREATE(playerid, 2, 4, "Accessories", "[[[\"Очки\",0],[\"Банданы\",1],[\"Маски\",2],[\"Береты\",3],[\"Шляпы\",4],[\"Сумка\",5],[\"Аксессуар на пояс\",6],[\"Часы\",7],[\"Рюкзак\",8],[\"Чокер\",9]],[[19006,\"Красные\",300000,0,0],[19007,\"Желтые\",350000,0,1],[19008,\"Зеленые\",350000,0,2],[19009,\"Синие\",350000,0,3],[19010,\"Розовые\",350000,0,4],[19011,\"Гипноз\",350000,0,5],[19012,\"Черные\",350000,0,6],[19013,\"Глаза\",350000,0,7],[19014,\"Шахматы\",350000,0,8],[19015,\"Обычные\",350000,0,9],[19016,\"X-ray\",350000,0,10],[13953,\"Для сноуборда\",8750000,0,11],[13995,\"Gucci\",1050000,0,12],[13996,\"American\",1050000,0,13],[13997,\"С обводкой\",1050000,0,14],[13998,\"Синий тигр\",1050000,0,15],[13999,\"Желтые\",1050000,0,16],[14462,\"Модные очки\",1665000,0,187]]]");
					SetPlayerVirtualWorld(playerid, playerid + 10);
					SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
					SetPlayerFacingAngle(playerid, 89.0);
					SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
					SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
					ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1088.8263,2231.4502,2.0000))
		    {
			    callcmd::varkanarkoti(playerid);
			}
			//Банк
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.5571,304.2417,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 294.5605,304.2592,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 418.3971,572.8312,-36.6100) || IsPlayerInRangeOfPoint(playerid, 2.0, 412.5228,574.4662,-36.6100))
		    {
	            new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
	            new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
			    if(action_id) 
				{
					callcmd::bank(playerid, "");
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
			//Покупка трейлера
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2372.6082,206.8016,22.2022))
		    {
	            CEF_CREATE(playerid, 1, 4, "TrailerShop");
				CEF_CREATE(playerid, 1, 2, "interface('TrailerShop').trailers = [{ name:\"SWIFT QUATTRO\", image:\"1.png\",price:1400000}, { name:\"HOBBY 440\", image:\"2.png\",price:1600000},{ name:\"BUERSTNER\", image:\"3.png\",price:1200000}]");
			}
			//Магазин автозапчастей
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1555.7836,-2400.7815,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_AVTOZAP)
					{
						callcmd::buy(playerid, "");
					}
				}
			}
			//Машинист метро
	        /*if(IsPlayerInRangeOfPoint(playerid, 2.0, -359.7038,450.0506,12.6005))
			{
				if(GetPlayerData(playerid, P_DRIVING_LIC) == 2 && GetPlayerData(playerid, P_LEVEL) > 7) IntfDialogCallRemote(playerid, DIALOG_INVITE_METRO, DIALOG_STYLE_MSGBOX, "Работа машиниста", "Вы хотите устроиться на работу машиниста?", "Да", "Нет"); 
				else SCM(playerid, COLOR_GREY, "Вы не достигли 8 уровня или у Вас нет проф. лицензии");
			}*/
			//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 	    new garage_id = GetPVarInt(playerid, "pickup_garage");

			if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
			{
	            ShowPlayerGarageInfo(playerid, garage_id);
			}
			new biz_id = GetPVarInt(playerid, "pickup_biz");
			
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z)))
			{
				if(GetPlayerInBiz(playerid) == -1)
				{
					new i_paid_biz = GetPlayerUseListitem(playerid);

					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_TUNING)
					{
						new oc_id = GetPlayerOwnableCarLast(playerid);

						if(oc_id == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");

							return 1;
						}
						else
						{
							new Float: veh_x,
								Float: veh_y,
								Float: veh_z;

							GetVehiclePos(oc_id, veh_x, veh_y, veh_z);

							if(!IsPlayerInRangeOfPoint(playerid, 15.0, veh_x, veh_y, veh_z))
							{
								SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт слишком далеко от Вас");

								return 1;
							}
						}
					}

					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_TRUCK_TK || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_DET || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_SHIN || GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_WASH)
	 				{
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_SHOP_FISH)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_SHOP_FISH, DIALOG_STYLE_TABLIST_HEADERS,
							"Список товаров",
							"Товар \t Стоимость\n"\
							"Поплавочная удочка \t 25000 руб\n"\
							"Улучшенная удочка \t 40000 руб\n"\
							"Спиннинг \t 70000 руб\n"\
							"Леска 0.15мм \t 15000 руб\n"\
							"Леска 0.3мм \t 11000 руб\n"\
							"Леска 0.85мм \t 20000 руб\n"\
							"Кусочки хлеба \t 3500 руб\n"\
							"Лягушка \t 7000 руб\n"\
							"Кузнечик \t 7000 руб\n"\
							"Червь \t 1000 руб\n"\
							"Мотыль \t 1500 руб\n"\
							"Опарыш \t 1500 руб\n"\
							"Акваланг \t 35000 руб",
							"Выбор", "Закрыть"
						);
						return true;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_ARENDA)
					{
					    new rent;
						for(new i = 0; i < MAX_VEHICLES; i++)
						{
							if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
							{
							    new index = GetVehicleData(i, V_ACTION_ID);
							    if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
							    {
								    if(GetRentCarData(index, R_RENT_OWNER) == -1)
								    {
										rent = rent + 1;
								    }
								}
							 }
						}

					    new msg[400];
					    format(msg, sizeof msg, "{FFFFFF}Вы желаете перейти к просмотру доступного транспорта для аренды?<n><n>{E7D63E}Общее количество транспорта для аренды: {FFFFFF}%d шт.<n>{E7D63E}В данный момент {FFFFFF}%d транспорт(а) {E7D63E}доступно для аренды", GetBusinessCars(biz_id), rent);
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_ARENDA, DIALOG_STYLE_MSGBOX,
							"{FF9900}Аренда транспорта",
							msg,
							"Да", "Нет"
						);
						SetPVarInt(playerid, "arenda_id", biz_id);

						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_XZ)
					{
						SendClientMessage(playerid, -1, "Это предприятие находится на стадии строительства. Туда нельзя.");
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_NIZ)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_CAR_MARKET_NIZ, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_AVIA)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_CAR_MARKET_AVIA, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_VODA)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_CAR_MARKET_KATER, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CAR_MARKET_MOTO)
					{
						IntfDialogCallRemote
						(
							playerid, DIALOG_BIZ_CAR_MARKET_MOTO, DIALOG_STYLE_MSGBOX,
							"{FFCC00}Покупка транспорта",
							"{FFFFFF}Нажмите кнопку 'Далее'\n\
							Чтобы посмотреть весь доступный для покупки транспорт",
							"Далее", "Отмена"
						);
						return 1;
					}
					
					if(GetBusinessData(biz_id, B_TYPE) == 37) return IntfDialogCallRemote(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX,"Покупка канистры","Канистра на этой заправке стоит 500 000 руб\nВы хотите купить её?","Да", "Нет");

					if(GetBusinessData(biz_id, B_TYPE) == 36)
					{
						if(GetPlayerAccountID(playerid) != GetBusinessData(biz_id, B_OWNER_ID)) return GameText(playerid, "~r~Вход только~n~для сотрудников", 4000, 2);
					}
					if(IsBusinessOwned(biz_id))
					{
						if(GetBusinessData(biz_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
						{
							if(GetBusinessData(biz_id, B_LOCK_STATUS))
								return GameText(playerid, "~w~бизнес~n~~r~закрыт", 4000, 2);

							if(GetBusinessData(biz_id, B_ENTER_PRICE) > 0 && i_paid_biz != biz_id)
							{
								string_dialog[0] = EOS;
								SetPVarInt(playerid, "biz_enter", biz_id + 1);

								format
								(
									string_dialog, sizeof string_dialog,
									"{FFFFFF}Вход платный и составляет {FF9900}%d руб\n"\
									"{99FF00}Вы уверены что хотите войти сюда?",
									GetBusinessData(biz_id, B_ENTER_PRICE)
								);
								return IntfDialogCallRemote(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessData(biz_id, B_NAME), string_dialog, "Да", "Нет");
							}
						}
					}
					EnterPlayerToBiz(playerid, biz_id);
				}
			}
		}
		if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
		{
			new garage_id = GetNearestGarage(playerid, 10.0);
			if(garage_id != -1)
			{
				if(GetGarageData(garage_id, G_OWNER_ID) != GetPlayerAccountID(playerid)) return 1;
				if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z))) ShowPlayerGarageZaezd(playerid, garage_id);
			}
		}
		if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
		{
			new garage_id = GetPlayerInGarage(playerid);
			if(garage_id != -1)
			{
				if(GetGarageData(garage_id, G_TYPE) == 1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, -1616.2706,1579.1246,2005.5372))
					{
						SetPlayerInGarage(playerid, -1);

						new vehicleid = GetPlayerVehicleID(playerid);

						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

						SetVehicleVirtualWorld(vehicleid, 0);

						LinkVehicleToInterior(vehicleid, 0);

						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				if(GetGarageData(garage_id, G_TYPE) == 2)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, 2897.3401,2888.8042,1001.0000))
					{
						SetPlayerInGarage(playerid, -1);

						new vehicleid = GetPlayerVehicleID(playerid);

						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

						SetVehicleVirtualWorld(vehicleid, 0);

						LinkVehicleToInterior(vehicleid, 0);

						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				if(GetGarageData(garage_id, G_TYPE) == 3)
				{
					if(IsPlayerInRangeOfPoint(playerid, 20.0, -1657.9447,-467.8287,1001.0000))
					{
						SetPlayerInGarage(playerid, -1);

						new vehicleid = GetPlayerVehicleID(playerid);

						SetVehiclePos
						(
							vehicleid,
							GetGarageData(garage_id, G_CAR_POS_X),
							GetGarageData(garage_id, G_CAR_POS_Y),
							GetGarageData(garage_id, G_CAR_POS_Z)
						);
						SetVehicleZAngle(vehicleid, GetGarageData(garage_id, G_CAR_ANGLE));

						SetVehicleVirtualWorld(vehicleid, 0);

						LinkVehicleToInterior(vehicleid, 0);

						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
			}
		}
		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);

			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);

				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "{FFCD00}Действия (%s)", GetPlayerNameEx(targetid));

				IntfDialogCallRemote
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. Приветствие\n\
					2. Показать паспорт\n\
					3. Показать лицензии\n\
					4. Показать навыки",
					"Выбрать", "Закрыть"
				);
			}
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);
					IntfDialogCallRemote
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCarLast(playerid) != INVALID_VEHICLE_ID)
			{
				callcmd::car(playerid, "");
			}
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if((newkeys & KEY_FIRE || (oldkeys & 128 && newkeys & 16)))
			{
				if(GetPlayerWeapon(playerid)!=43 && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_SPRUNK &&  GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid)!= SPECIAL_ACTION_SMOKE_CIGGY && GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_DRINK_BEER)
				{
					if(!IsPlayerInPoliceTeam(playerid) && !GetPlayerData(playerid, P_LAST_DIALOG))
					{
						for(new i; i < 16; i++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 100.0, AntiDm[i][zX], AntiDm[i][zY], AntiDm[i][zZ]))
							{
							    if(AntiDm[i][zStatus] == 1)
							    {
									if(GetPlayerVirtualWorld(playerid)!=11 && GetPlayerVirtualWorld(playerid)!=12 && GetPlayerVirtualWorld(playerid)!=13)
									{
										if(DMStatus[playerid] == 1) return true;
	         							SetTimerEx("DialogDMZZ", 2000, false, "i", playerid);
										DMStatus[playerid] = 1;
										return true;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

stock DriftLoad(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new fmt_text[540];
		new query[170], driftload[1048];

		format(fmt_text, sizeof fmt_text, "");

		driftload = "";
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(GetPVarInt(i, "Driftshow") == 1)
			{
				new vehicleid = GetPlayerVehicleID(i);
				new index = GetVehicleData(vehicleid, V_MODELID);

				format(query, sizeof query, "[\"%s\", %d,%d, \"%s\"],", GetPlayerNameEx(i), GetPlayerData(i, P_SCORE), DriftPointsNow[i], GetVehicleInfo(index , VI_NAME_MARK));
				strcat(fmt_text, query);

				driftload = fmt_text;
			}
		}
		new str_len;
		str_len = strlen(driftload);
		strdel(driftload, str_len - 1, str_len);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Drift').loadPlayers('[%s]')", driftload);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
}
public OnPlayerUpdate(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		new Float:health;
		GetPlayerHealth(playerid, health);

		if(GetPVarInt(playerid, "Vignette") == 0)
		{
			if(health < 21)
			{
				SetPVarInt(playerid, "Vignette", 1);
				CEF_CREATE(playerid, 2, 4, "Vignette", "[0]");
			}
		}
		else
		{
			if(health > 20)
			{
				SetPVarInt(playerid, "Vignette", 0);
				CEF_HIDE(playerid, "Vignette");
			}
		}
	}

    if(GetPVarInt(playerid, "livery") != 0)
	{
        new vehicleid = GetNearestVehicleID(playerid, 10.0);

	    new Float:px, Float:py, Float:pz;
        new Float:vx, Float:vy, Float:vz;

        GetPlayerPos(playerid, px, py, pz);
        GetVehiclePos(vehicleid, vx, vy, vz);

        if(GetDistanceBetweenPoints(px, py, pz, vx, vy, vz) > 10.0)
        {
		    GameTextForParams(playerid, 1, "~r~Вы слишком далеко от ТС~n~~r~Процесс покраски закончен", 4500, 0, -1, 1, 0, 3.00);
            CancelPainting(playerid);
        }
	}

	if(GetPVarInt(playerid, "DayvingZone") == 1 && GetPlayerSkin(playerid) == 15576){ SetPlayerOxygen(playerid, 5000.0); }

	if(DiceTable[playerid] != 0 && s_dice[DiceTable[playerid]][DICE_GAME_STATUS] == 2) LoadThrow(playerid);

    /*new weapon, ammo;
    for(new slot = 0; slot < 13; slot++)
    {
        GetPlayerWeaponData(playerid, slot, weapon, ammo);

        if(weapon == 0) continue;

		if(!IsWeaponAllowed(weapon))
        {
            ShowCheatKickDialog(playerid);
            return false;
        }

		if(!IsWeaponAllowedInv(playerid, weapon))
		{
            ShowCheatKickDialog(playerid);
            return false;
        }

		new ammo_in_inv = GetAmmoCountFromInventory(playerid, weapon);
        new ammo_on_client = ammo;

        if(ammo_on_client > ammo_in_inv)
        {
            ShowCheatKickDialog(playerid);
            return false;
        }
    }*/

    if(IsPlayerInRangeOfPoint(playerid, 350.0, 3283.0530,-320.1913,14.9361))
    {
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPVarInt(playerid, "Driftshow") == 0)
			{	
				SetPVarInt(playerid, "Driftshow", 1);
				CEF_CREATE(playerid, 1, 2, "openInterface('Drift')");

				new name[32];

				new Cache: result = mysql_query(mysql, "SELECT * FROM accounts_canvasdev ORDER BY score DESC LIMIT 1", true);

				if(cache_num_rows())
				{
					new score = cache_get_field_content_int(0, "score");

					cache_get_field_content(0, "name", name);

					new fmt_text[64];
					format(fmt_text, sizeof fmt_text, "interface('Drift').best.name = '%s'", name);
					CEF_CREATE(playerid, 1, 2, fmt_text);

					format(fmt_text, sizeof fmt_text, "interface('Drift').best.sum = %d", score);
					CEF_CREATE(playerid, 1, 2, fmt_text);

					CEF_CREATE(playerid, 1, 2, "interface('Drift').best.car = 'None'");
				}
				cache_delete(result);
			}
			if(GetPVarInt(playerid, "Driftshow") == 1)
			{
				DriftLoad(playerid);
			}
		}
		else
		{
			if(GetPVarInt(playerid, "Driftshow") == 1)
			{
				DeletePVar(playerid, "Driftshow");
				CEF_CREATE(playerid, 1, 2, "closeInterface('Drift')");
			}
		}
    }
    else
    {
    	if(GetPVarInt(playerid, "Driftshow") == 1)
	    {
			DeletePVar(playerid, "Driftshow");
			CEF_CREATE(playerid, 1, 2, "closeInterface('Drift')");
	    }
    }
    if(GetPVarInt(playerid, "drift") == 1)
	{
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "interface('Drift').currentSum = %d", GetPlayerData(playerid, P_SCORE));
		CEF_CREATE(playerid, 1, 2, fmt_text);
    }

	SetPlayerData(playerid, P_AFK_TIME, 0);

	if(IsPlayerDriver(playerid))
	{
		new keys, gas_brake, left_right;

		GetPlayerKeys(playerid, keys, gas_brake, left_right);

		new pedal_type = PEDAL_TYPE_NONE;

		if((keys & KEY_SPRINT) && !(keys & KEY_JUMP || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_GAS;

		else if(keys & KEY_JUMP && !(keys & KEY_SPRINT || keys & KEY_HANDBRAKE))
			pedal_type = PEDAL_TYPE_BRAKE;

		player_press_pedal[playerid] = pedal_type;
	}
	//==================================================
	if(noclipdata[playerid][camera_mode] == CAMERA_MODE_FLY)
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);

		if(noclipdata[playerid][mode_mode] && (GetTickCount() - noclipdata[playerid][last_move] > 100))
		{
		    MoveCamera(playerid);
		}

		if(noclipdata[playerid][u_dold] != ud || noclipdata[playerid][l_rold] != lr)
		{
			if((noclipdata[playerid][u_dold] != 0 || noclipdata[playerid][l_rold] != 0) && ud == 0 && lr == 0)
			{
				StopPlayerObject(playerid, noclipdata[playerid][fly_object]);
				noclipdata[playerid][mode_mode]      = 0;
				noclipdata[playerid][acce_lmul]  = 0.0;
			}
			else
			{

				noclipdata[playerid][mode_mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][u_dold] = ud; noclipdata[playerid][l_rold] = lr;
		return 0;
	}
	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);

 		NoRoof(playerid);
		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_MINER:
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!(anim_index == 616 || anim_index == 1189 || anim_index == 1224))
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			case TEMP_JOB_LUMBERJACK:
			{
				if(!(anim_index == 1189 || anim_index == 1224 || anim_index == 260 || anim_index == 1275 || anim_index == 1276))
				{
					anim_index = -1;
				}

				if(anim_index == -1)
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_DROP);
			}
			default:
			{
				SetPlayerTempJobCheckAnim(playerid, false);
			}
		}
	}

	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);

		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;

						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));

						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;

						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));

						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;

						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));

						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;

						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));

						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;

						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));

						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;

						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));

						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;

						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));

						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;

						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));

						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;

						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));

						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;

						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));

						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;

						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));

						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	//Voice_OnPlayerStreamIn(playerid, forplayerid);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	//Voice_OnPlayerStreamOut(playerid, forplayerid);
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	UpdateOrgCars(forplayerid, vehicleid);

    if(IsAOwnableCar(vehicleid))
    {
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetOwnableCarData(index, OC_DISKI) != 0)
        {
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI));
		}
		
		UpdateVehicleHandling(forplayerid, vehicleid);

		if(GetOwnableCarData(index, OC_VINIL) != -1)
        {
            new vinilType = GetVehicleData(vehicleid, V_VINILTYPE);
            new vinilID = GetVehicleData(vehicleid, V_VINIL);
            new model = GetVehicleModel(vehicleid);

            new fmt[128];

            if(vinilType == 0) // Винилы
            {
                for(new i = 0; i < sizeof e_vinils; i++)
                {
                    if(e_vinils[i][eVinilModel] == model && e_vinils[i][eVinilID] == vinilID)
                    {
                        format(fmt, sizeof fmt, "setVehiclePaintJob(%d, \"individual/%d\", \"%s\")", vehicleid, model, e_vinils[i][eVinilName]);
                        break;
                    }
                }
            }
            else
            {
                format(fmt, sizeof fmt, "setVehiclePaintJob(%d, \"common/livery%d\", \"livery%d\")", vehicleid, vinilID, vinilID);
            }

            CEF_CREATE(forplayerid, 1, 2, fmt);
        }

		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];

			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]", obves);

			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i]);
				}
			}
		}
	}
	if(IsAFamilyCar(vehicleid))
    {
        new index = GetVehicleData(vehicleid, V_ACTION_ID);
        if(GetOwnableCarData(index, OC_DISKI) != 0)
        {
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI));
		}
        if(GetOwnableCarData(index, OC_GIDRA) != 0)
        {
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_GIDRA));
		}
        if(GetOwnableCarData(index, OC_NITRO) != 0)
        {
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_NITRO));
		}
		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];

			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]",obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i]);
				}
			}
		}
		UpdateVehicleHandling(forplayerid, vehicleid);
    }
	if(GetVehicleData(vehicleid, V_TYPENUM) == 1 || GetVehicleData(vehicleid, V_TYPENUM) == 2 || GetVehicleData(vehicleid, V_TYPENUM) == 3 || GetVehicleData(vehicleid, V_TYPENUM) == 4)
	{
		if(!strcmp(g_vehicle_data[vehicleid][V_NUMBER], "------") || !strcmp(g_vehicle_data[vehicleid][V_REGION], "------")) PACKET_215(forplayerid, 32, vehicleid, 0, "", "");

		else PACKET_215(forplayerid, 32, vehicleid, GetVehicleData(vehicleid, V_TYPENUM), g_vehicle_data[vehicleid][V_NUMBER], g_vehicle_data[vehicleid][V_REGION]);
	}
	else PACKET_215(forplayerid, 32, vehicleid, GetVehicleData(vehicleid, V_TYPENUM), g_vehicle_data[vehicleid][V_NUMBER], g_vehicle_data[vehicleid][V_REGION]);

	beepplayer[vehicleid][forplayerid] = 1;
    kryak[vehicleid][forplayerid] = 1;
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    beepplayer[vehicleid][forplayerid] = 0;
    kryak[vehicleid][forplayerid] = 0;

	if(IsAOwnableCar(vehicleid))
    {
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		UpdateVehicleHandling(forplayerid, vehicleid);

		if(GetOwnableCarData(index, OC_DISKI) != 0)
		{
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_DISKI), "", "", 1);
		}

		if(GetOwnableCarData(index, OC_GIDRA) != 0)
		{
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_GIDRA), "", "", 1);
		}

		if(GetOwnableCarData(index, OC_NITRO) != 0)
		{
			PACKET_215(forplayerid, 17, vehicleid, GetOwnableCarData(index, OC_NITRO), "", "", 1);
		}
		if(GetOwnableCarData(index, OC_OBVES) != -1)
		{
			new obves[17];

			sscanf(GetOwnableCarData(index, OC_OBVES), "P<|||||||||>a<i>[17]",obves);
			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(forplayerid, vehicleid, obves[i], 1);
				}
			}
		}
		if(GetOwnableCarData(index, OC_TONERINSTALL) != 0)
		{
			UpdateTinting(forplayerid, vehicleid);
		}
	}
	return 1;
}

stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);

			DestroyVehicleLabel(vehicleid);

			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: Ошибка удаления личного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock DestroyRentCar(vehicleid)
{
	if(IsARentCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM arenda_cars WHERE id=%d", GetRentCarData(index, R_SQL_ID));
		mysql_query(mysql, query, false);


		if(!mysql_errno())
		{
			SetRentCarData(index, R_SQL_ID, 	0);
			SetRentCarData(index, R_RENT_BIZ, 	0);

			DestroyVehicleLabel(vehicleid);

			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [RentCars]: Ошибка удаления ТС аренды: %d", GetRentCarData(index, R_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];

			valstr(fmt_str, clickedplayerid);
			callcmd::add(playerid, fmt_str);
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(IsPlayerAdminLevel(playerid) > 2)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
		}
		else
		{
			SetPlayerPos(playerid, fX, fY, fZ);
		}
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}
	new pos, command[64];
	format(command, sizeof(command), "%s", cmd);
	while(command[pos] > ' ')pos++;
	while(command[pos] == ' ')strdel(command, pos, strlen(command));
    return 1; // разрешить выполнение команды
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags, success)
{
	if(result == -1)
	{
		return 0;
	}
	if(success == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

			return 0;
		}
	}
    
	printf("%s[%d] использует команду: %s [%s]", GetPlayerNameEx(playerid), playerid, cmd, params);

    return 1; // разрешить выполнение команды
}
public: MetroStart(playerid)
{
    SendClientMessage(playerid, -1, "Вы успешно прибыли на вашу станцию.");
	new metro = GetPVarInt(playerid, "metrolist");
	SetPlayerPosEx(playerid, GetBusinessData(metro, B_EXIT_POS_X), GetBusinessData(metro, B_EXIT_POS_Y), GetBusinessData(metro, B_EXIT_POS_Z), GetBusinessData(metro, B_EXIT_ANGLE));
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
    //SetTimerEx("FlyStop", 185000, false, "i", playerid);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	for(new i = 0; i < 13;i++)
    {
        if(miner_job_load_cp[i] == checkpointid)
        {
            if(GetPVarInt(playerid, "miner_1") == 0)
            {
                SetPlayerMinerJobLoadCP(playerid, false);

                if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
                {
                    SetPVarInt(playerid, "miner_1",1);
                    ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
                    SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
                }
            }
        }
    }
	for(new i = 0; i < MAX_HOUSES;i++)
	{
	    if(checkpointid == House_CP[i])
		{
			SetPVarInt(playerid, "pickup_house", i);
			ShowHomeInfoPick(playerid, i);
		}
	}
 	for(new i = 0; i < MAX_GARAGE;i++)
    {
		if(checkpointid == Garage_CP[i])
 		{
 	        SetPVarInt(playerid, "pickup_garage", i);
			ShowPlayerGarageInfo(playerid, i);
		}
 	}
 	if(checkpointid == apteka_cp)
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_APTEKA)
			{
				callcmd::buy(playerid, "");
			}
		}
	}
    if(checkpointid == snoybord_cp)
	{
	    if(snoybord[playerid] == -1)
	    {
		snoybord[playerid] = CreateVehicle(509, -972.1597,321.0002,197.6490,21.2373, 1, 1, -1, 0);
		PutPlayerInVehicle(playerid, snoybord[playerid], 0);
		}
	}
	if(checkpointid == training[playerid])
	{
	    DestroyDynamicCP(training[playerid]);
		training[playerid] = -1;
	}
	if(checkpointid == help_info_CP)
	{
		callcmd::help(playerid, "");
	}
	else if(checkpointid == driving_exam_CP)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_MSGBOX,
			"{FFD83D}Экзамен по вождению",
			"{FFFFFF}Здравствуйте!\n"\
			"Вы готовы приступить к экзамену? Тогда начнем.\n"\
			"Экзамен будет состоять из практической части\n"\
			"В практике применить полученные знания за рулем учебного автомобиля.\n\n"\
			"{CC9900}Сдача на права стоит 2.500.000 рублей и в случае провала деньги не будут возвращены!\n"\
			"Поэтому перед сдачей внимательно прочитайте обучающий раздел",
			"Начать", "Отмена"
		);
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	
	else if(checkpointid == garage_elit_CP)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_GARAGE_BAR, DIALOG_STYLE_LIST,
			"{FFD83D}Гаражный бар",
			"1. Лимонад\n"\
			"2. Пиво\n"\
			"3. Вино\n"\
			"4. Шампанское\n"\
			"5. Водка\n"\
			"6. Коньяк\n"\
		    "7. Виски\n"\
			"8. Абсент\n"\
			"{FFD83D}9. Закуска\n"\
			"{FFD83D}10. Сигара",
			"Купить", "Отмена"
		);
	}
    else if(checkpointid == join_to_job_CP)
	{
        if(GetPVarInt(playerid,"pick_timer") > gettime()) return 1;
		if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
			return SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете устроиться на работу");

		IntfDialogCallRemote
		(
			playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Прием на работу",
			"{FFFFFF}Вы хотите просмотреть список доступных работ?",
			"Да", "Нет"
		);
		SetPVarInt(playerid,"pick_timer",gettime()+5); // 5 задержка в секундах
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}600 руб\n"\
					"2. Пиво\t\t\t{00CC00}1000 руб\n"\
					"3. Вино\t\t\t{00CC00}2000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}3000 руб\n"\
					"6. Коньяк\t\t{00CC00}4500 руб\n"\
					"7. Виски\t\t{00CC00}6300 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}500 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}800 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CASINO, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CASINO)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{00CC00}600 руб\n"\
					"2. Пиво\t\t\t{00CC00}1000 руб\n"\
					"3. Вино\t\t\t{00CC00}2000 руб\n"\
					"4. Шампанское\t\t{00CC00}2700 руб\n"\
					"5. Водка\t\t{00CC00}3000 руб\n"\
					"6. Коньяк\t\t{00CC00}4500 руб\n"\
					"7. Виски\t\t{00CC00}6300 руб\n"\
					"8. Абсент\t\t{00CC00}7500 руб\n"\
					"{CC9900}9. Закуска\t\t{00CC00}500 руб\n"\
					"{CC9900}10. Сигара\t\t{00CC00}800 руб",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Номера свободных бизнесов",
					g_business_realtor_list,
					"Инфо 70р", "Закрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}
	else if(checkpointid == stiliok)
	{
		callcmd::stili(playerid);
	}
	else if(checkpointid == samolet_CP)
	{
		if(GetPVarInt(playerid, "polet") != 1)
		{
		    if(GetPVarInt(playerid, "pos_polet") == 1)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в городе Южный");
		    	SetPlayerPosEx(playerid, 2768.6711,-2011.3108,26.8397,176.1862, 0, 0);
		    	DeletePVar(playerid, "pos_polet");
			}
			if(GetPVarInt(playerid, "pos_polet") == 2)
		    {
		    	SendClientMessage(playerid, -1, "Приветствуем Вас в Майами");
		    	SetPlayerPosEx(playerid, -3759.4082,-5715.5967,13.8423,53.9216, 0, 0);
				DeletePVar(playerid, "pos_polet");
			}
		}
		else
		{
		    SendClientMessage(playerid, -1, "Стюардеса: Ау, куда ты? Мы ещё летим. Совсем чтоли больной в воздухе дверь открывать?");
		}
	}
	
	else if(checkpointid == mia_bil_CP)
	{
	    new send_packet[150];
	    CEF_CREATE(playerid, 1, 2, "openInterface('Ticket')");
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketPrice = 10000");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketFromCountry = 'Russia'");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketToCountry =  'Miami'");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketHour = 12");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketMin = 21");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
 	}
	else if(checkpointid == yz_bil_CP)
	{
        new send_packet[150];
	    CEF_CREATE(playerid, 1, 2, "openInterface('Ticket')");
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketPrice = 10000");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketFromCountry = 'Russia'");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').this.ticketToCountry =  'Miami'");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketHour = 12");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	    format(send_packet, sizeof(send_packet), "interface('Ticket').ticketMin = 21");
	    CEF_CREATE(playerid, 1, 2, send_packet);
	    send_packet[0] =  EOS;
	}
	else if(miner_job_load_cp[0] <= checkpointid <= sizeof miner_job_load_cp - 1)
	{
		SetPlayerMinerJobLoadCP(playerid, false);

		if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
		{
			ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
			SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
		}
	}
	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1)
				{
					new fmt_str[80];

					SetPVarInt(playerid, "factory_skill", skill + 1);

					format(fmt_str, sizeof fmt_str, "Рабочий навык увеличен. Теперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x66CC00FF, 10.0, 1500);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameText(playerid, "~g~~h~УСПЕШНО", 4000, 1);

				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);
				SetPlayerTempJobCheckAnim(playerid, true);
			}
			else FactoryPlayerDrop(playerid);

			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP)
		DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(g_war[W_STATUS])
    {
	    for(new idx; idx < g_business_loaded; idx ++)
		{
		    if(zone_war_a[idx] == areaid)
		    {
		        if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_ATTACK_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s зашел на территорию капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		        if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_PROTECT_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s зашел на территорию капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		    }
		}
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		if(areaid == stationary_radars[0] || areaid == stationary_radars[1] || areaid == stationary_radars[2] || areaid == stationary_radars[3] || areaid == stationary_radars[4] || areaid == stationary_radars[5] || areaid == stationary_radars[6] || areaid == stationary_radars[7])
		{
			new Float: speed = GetPlayerSpeed(playerid);

			if(speed > 120)
			{
				new count = (GetPlayerSpeed(playerid) - 120) * 3500;

				SCMF(playerid, COLOR_ORANGE, "Вы получили штраф за превышение скорости в размере {ffffff}%d руб.", count);
				SendClientMessage(playerid, 0xCECECEFF, "{ffa500}Если вы не оплатите его в течение {ffffff}3 суток {ffa500}- вод.удостоверение будет аннулировано");
				SCMF(playerid, 0x1E90FFFF, "{a6caf0}Допустимая скорость: {ffffff}120 км/ч, {a6caf0}ваша скорость: {ffffff}%d км/ч.", GetPlayerSpeed(playerid));
				CreateTicket(playerid, count, "МВД", "Привышение скорости");
				
				GameText(playerid, "~r~Штраф", 5000, 1);
			}
		}

        foreach(new i:Player)
        {
            if(areaid == spike_areas[i])
            {
                new panels, doors, lights, tires;
                GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
                UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, 15);
                break;
            }
        }
    }

	if(areaid == area_koryakino)
    {
        if(!g_playerInZone[playerid])
        {
			if(detector[playerid] == 1)
            {
				ZoneShow(playerid, 0, "#FF9900", 211.28, -2040.31, 592.19, -1841.53);
                GameText(playerid, "~y~Вы вернулись в область поиска", 3000, 0);
			    g_playerInZone[playerid] = true;
            }
		    else
		    {   ZoneShow(playerid, 0, "#FF9900", 211.28, -2040.31, 592.19, -1841.53);
				CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~w~Поле для поиска металлолома~n~Используйте металлоискатель\",3500,0,-1,1,0,3.00]')");
				g_playerInZone[playerid] = true;
		    }
        }
    }
	if(areaid == area_uzniy)
    {
        if(!g_playerInZone[playerid])
        {
			if(detector[playerid] == 1)
            {
				ZoneShow(playerid, 1, "#FF9900", 2101.13, -2776.25, 2802.47, -2750.46);
                GameText(playerid, "~y~Вы вернулись в область поиска", 3000, 0);
			    g_playerInZone[playerid] = true;
            }
		    else
		    {   ZoneShow(playerid, 1, "#FF9900", 2101.13, -2776.25, 2802.47, -2750.46);
                CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~w~Поле для поиска металлолома~n~Используйте металлоискатель\",3500,0,-1,1,0,3.00]')");
				g_playerInZone[playerid] = true;
		    }
        }
    }

    for(new i = 0; i < MAX_ZONE_DAYVING; i++)
    {
	    if(areaid == dayving_zone[i])
	    {
		    if(GetPVarInt(playerid, "DayvingZone") != 1) SetPVarInt(playerid, "DayvingZone", 1);
			break;
		}
	}

    if(areaid == radar_areas[playerid])
    {
		new Float: speed = GetPlayerSpeed(playerid);
		new fmt_msg[500];
		new shtraf = GetPlayerSpeed(playerid) * 500;
		if(speed > 100)
		{
			format(fmt_msg, sizeof fmt_msg, "{ffa500}Вы получили штраф за превышение скорости в размере {ffffff}%d руб.", shtraf);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

			SendClientMessage(playerid, 0xCECECEFF, "{ffa500}Если вы не оплатите его в течение {ffffff}3 суток {ffa500}- вод.удостоверение будет аннулировано");

			format(fmt_msg, sizeof fmt_msg, "{a6caf0}Допустимая скорость: {ffffff}100 км/ч{a6caf0}, ваша скорость: {ffffff}%d км/ч.", GetPlayerSpeed(playerid));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

			GameText(playerid, "~r~Штраф", 5000, 1);
			CreateTicket(playerid, shtraf, "МВД", "Привышение скорости");
		}
    }

	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		new green_zone_id = areaid - g_green_zones[0][GZ_AREA];

		CEF_CREATE(playerid, 1, 2, "interface('Hud').showGreenZoneTab()");
		SetPVarInt(playerid, "player_in_green_zone", green_zone_id + 1);

		SetPlayerTeam(playerid, playerid + 1);

		if(IsPlayerDriver(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
			{
				//SetVehicleData(vehicleid, V_GZ_TIME, 300);
				SCM(playerid, 0xf3b557FF, "Вы заехали в непарковочную зону.");
				SCM(playerid, 0xf3b557FF, "Время стоянки ограничено до 5 мин."); 
			}
		}
	}
	for(new i = 0; i <= g_business_loaded; i++)
	{
		if(areaid == biz_area[i])
		{
           CefBiz(playerid, i);
		}
	}
	for(new i; i <= g_kiosk_loaded; i ++)
	{
		if(areaid == array_kiosk_data[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[9, \"Открыть меню киоска\"]]");
	}
	for(new i; i <= g_garden_loaded; i ++)
	{
		if(areaid == array_gardens_data[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[28, \"Взаимодействие с дверью\"]]");
		if(areaid == array_gardens_data_2[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[28, \"Взаимодействие с дверью\"]]");
		if(areaid == array_gardens_data_3[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[28, \"Взаимодействие с дверью\"]]");
		for(new idx = 0; idx < 10; idx ++)
		{
		   if(areaid == array_gardens_yamka[i][idx]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[29, \"Взаимодействие с грядкой\"]]");
		}
		for(new idx = 0; idx < 14; idx ++)
		{
		   if(areaid == array_gardens_yamka_2[i][idx]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[29, \"Взаимодействие с грядкой\"]]");
		}
		for(new idx = 0; idx < 20; idx ++)
		{
		   if(areaid == array_gardens_yamka_3[i][idx]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[29, \"Взаимодействие с грядкой\"]]");
		}
	}
	for(new i; i < sizeof diving_chest; i++)
    {
		if(areaid == diving_chest[i][E_INTERACTION]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[46, \"Открыть сундук\"]]");
	}
	for(new i; i < sizeof g_med_bed_pos; i++)
    {
		if(areaid == array_med_bed_data[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[13, \"Занять койку\"]]");
	}
	for(new i; i <= g_garage_loaded; i ++)
	{
		if(areaid == garage_area[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[25, \"Войти в гараж\"]]");
	}
	for(new i; i < sizeof sphereQuestEaster; i++)
    {
		if(areaid == sphereQuestEaster[i]) 
		{
			if(sphereQuestEasterStatus[i] == 1)
			{
				CEF_CREATE(playerid, 1, 2, "interface('Phone').getApp('easter').onServerResponse(2, '[0,-1]')");
			}
		}
	}
	for(new i; i < sizeof g_deteling_alt; i++)
    {
		if(areaid == g_deteling_alt[i]) g_cursor[playerid] = 1, CEF_CREATE(playerid, 2, 4, "Interactions", "[[1, \"Тонировка\"], [2, \"Винилы\"]]");
	}
	for(new i; i < sizeof g_zavod_alt; i++)
    {
		if(areaid == g_zavod_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[7, \"Начать производство\"]]");
	}
	/*for(new i; i < sizeof g_obmenik_alt; i++)
    {
		if(areaid == g_obmenik_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[20, \"Поговорить\"]]");
	}*/
	for(new i; i < sizeof g_blackmarket_alt; i++)
    {
		if(areaid == g_blackmarket_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[21, \"Открыть аукцион\"]]");
	}
	for(new i; i < sizeof g_sto_alt; i++)
    {
		if(areaid == g_sto_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[22, \"Заехать в мастерскую\"]]");
	}
	for(new i; i < sizeof g_obmenfishki_alt; i++)
    {
		if(areaid == g_obmenfishki_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[12, \"Обменять фишки\"]]");
	}
	for(new i; i < sizeof g_rullet_alt; i++)
    {
		if(areaid == g_rullet_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Играть в рулетку\"]]");
	}
	for(new i; i < sizeof g_blackjack_alt; i++)
    {
		if(areaid == g_blackjack_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[11, \"Играть в BlackJack\"]]");
	}
	for(new i; i < sizeof g_zavod_finish; i++)
    {
		if(areaid == g_zavod_finish[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[8, \"Взаимодействовать\"]]");
	}
	for(new i; i < sizeof g_bank_alt; i++)
    {
		if(areaid == g_bank_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[24, \"Взаимодействовать\"]]");
	}
	for(new i; i < sizeof g_craft_alt; i++)
    {
		if(areaid == g_craft_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[26, \"Использовать верстак\"]]");
	}
	for(new i; i < sizeof g_kolesofortynu_alt; i++)
    {
		if(areaid == g_kolesofortynu_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[27, \"Играть в Колесо Фортуны\"]]");
	}
	for(new i; i < sizeof g_azs_alt; i++)
    {
		if(areaid == g_azs_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[31, \"Заправить транспорт\"]]");
	}
	for(new i; i < sizeof g_electroazs_alt; i++)
    {
		if(areaid == g_electroazs_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[32, \"Зарядить транспорт\"]]");
	}
	for(new i; i < sizeof g_woshcar_alt; i++)
    {
		if(areaid == g_woshcar_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[33, \"Помыть транспорт\"]]");
	}
	for(new i; i < sizeof g_worota_org_alt; i++)
    {
		if(areaid == g_worota_org_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[14, \"Открыть/Закрыть\"]]");
	}
	for(new i; i < sizeof g_liftvetr_alt; i++)
    {
		if(areaid == g_liftvetr_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[34, \"Лифт\"]]");
	}
	for(new i; i < sizeof g_diagnostik_alt; i++)
    {
		if(areaid == g_diagnostik_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[35, \"Диагностика\"]]");
	}
	for(new i; i < sizeof g_givenomercar_alt; i++)
    {
		if(areaid == g_givenomercar_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[36, \"Взаимодействовать\"]]");
	}
	for(new i; i < sizeof g_donatecar_alt; i++)
    {
		if(areaid == g_donatecar_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[37, \"Подробнее\"]]");
	}
	for(new i; i < sizeof g_buylic_alt; i++)
    {
		if(areaid == g_buylic_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[38, \"Купить лицензию\"]]");
	}
	for(new i; i < sizeof g_dice_alt; i++)
    {
		if(areaid == g_dice_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[39, \"Играть в кости\"]]");
	}
	for(new i; i < sizeof g_exithome_alt; i++)
    {
		if(areaid == g_exithome_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[40, \"Использовать дверь\"]]");
	}
	for(new i; i < sizeof g_createfamily_alt; i++)
    {
		if(areaid == g_createfamily_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[41, \"Поговорить\"]]");
	}
	for(new i; i < sizeof g_creategang_alt; i++)
    {
		if(areaid == g_creategang_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[42, \"Поговорить\"]]");
	}
	for(new i; i < sizeof g_skyp_alt; i++)
    {
		if(areaid == g_skyp_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[50, \"Поговорить со скупщиком\"]]");
	}
	for(new i; i < sizeof g_dedmoroz_alt; i++)
    {
		if(areaid == g_dedmoroz_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[51, \"Поговорить\"]]");
	}
	for(new i; i < sizeof g_lesopilka1_alt; i++)
    {
		if(areaid == g_lesopilka1_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[52, \"Взять бревно со склада\"]]");
	}
	for(new i; i < sizeof g_lesopilka2_alt; i++)
    {
		if(areaid == g_lesopilka2_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[53, \"Положить бревно на станок\"]]");
	}
	for(new i; i < sizeof g_lesopilka3_alt; i++)
    {
		if(areaid == g_lesopilka3_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[54, \"Взять доску\"]]");
	}
	for(new i; i < sizeof g_lesopilka4_alt; i++)
    {
		if(areaid == g_lesopilka4_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[55, \"Положить доску на склад\"]]");
	}
	for(new i; i < sizeof g_podnos_alt; i++)
    {
		if(areaid == g_podnos_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[56, \"Поднять поднос\"]]");
	}
	for(new i; i < sizeof g_sto_enter_alt; i++)
    {
		if(areaid == g_sto_enter_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Взаимодействовать\"]]");
	}
	for(new i; i < sizeof g_mafia_dver_alt; i++)
    {
		if(areaid == g_mafia_dver_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Открыть/Закрыть\"]]");
	}
	for(new i; i < sizeof g_plate_alt; i++)
    {
		if(areaid == g_plate_alt[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Доска для номерных знаков\"]]");
	}
	for(new i; i < sizeof g_raffleShop; i++)
	{
		if(areaid == g_raffleShop[i][RS_AREA])
		{
			CEF_CREATE(playerid, 2, 4, "Interactions", "[[57, \"Принять участие в розыгрыше\"]]");
		}
	}
	for(new i; i < sizeof g_drag_racing; i++)
    {
		if(areaid == g_drag_racing[i][E_SPHERE])
		{
			if(GetPlayerOwnableCarLast(playerid) != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

			if(g_drag_racing[i][E_STATUS] == 0)
			{
				g_drag_racing[i][E_STATUS] = 1;
				g_drag_racing[i][E_PLAYER] = playerid;
				g_drag_racing[i][E_STATUS_PLAYER] = 0;
				g_drag_racing[i][E_BET_PLAYER] = 0;
				g_drag_racing[i][E_TYPE] = 0;
				g_drag_racing[i][E_WIN_PLAYER] = 0;
				g_drag_racing[i][E_BET] = 0;
				g_drag_racing_id[playerid] = i;

				SCM(playerid, 0x709CC9FF, "Вы въехали в зону ожидания заезда.");

				if(g_drag_racing[0][E_STATUS] == 1 && g_drag_racing[1][E_STATUS] == 1)
				{
					OpenDragRacingStart(g_drag_racing[0][E_PLAYER]);
					OpenDragRacingStart(g_drag_racing[1][E_PLAYER]);
				}
			}
		}
	}
	if(areaid == g_drag_racing_finish)
	{
		if(g_drag_racing[g_drag_racing_id[playerid]][E_STATUS] == 2)
		{
			if(g_drag_racing[0][E_WIN_PLAYER] == 0 && g_drag_racing[1][E_WIN_PLAYER] == 0)
			{
				g_drag_racing[g_drag_racing_id[playerid]][E_WIN_PLAYER] = 1;

				SCMF(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша первым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCMF(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша первым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));

				SCM(playerid, 0xEAC146FF, "Вы одержали победу в заезде.");

				AddPlayerAchiv(playerid, 11);

				if(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] != 0)
				{
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 0)
					{
						ModifyCashBalance(playerid, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2, "Победа в заезде драг рейсинга");
					}
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 1)
					{
						GiveIteam(playerid, 293, 1, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2, 0, "Победа в заезде [Драг рейсинг]");
					
						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s фишек", formatInt(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2));
						GameText(playerid, STRING_GLOBAL, 3000, 2);
					}
					if(g_drag_racing[g_drag_racing_id[playerid]][E_BET] == 2)
					{
						ProcessPlayerCredit(playerid, g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2);

						STRING_GLOBAL[0] = EOS;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%s донат-монет", formatInt(g_drag_racing[g_drag_racing_id[playerid]][E_BET_PLAYER] * 2));
						GameText(playerid, STRING_GLOBAL, 3000, 2);
					}
				}

				SCM(playerid, 0xEAC146FF, "Вы покинули заезд.");

				AddPlayerData(playerid, P_DRAG_SCORE, +, 1);
				UpdatePlayerDatabaseInt(playerid, "drag_score", GetPlayerData(playerid, P_DRAG_SCORE));
			}
			else
			{
				g_drag_racing[g_drag_racing_id[playerid]][E_WIN_PLAYER] = 1;

				SCMF(g_drag_racing[0][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша вторым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCMF(g_drag_racing[1][E_PLAYER], 0x709CC9FF, "Игрок {FFFFFF}%s {709CC9}достиг финиша вторым.", GetPlayerNameEx(g_drag_racing[g_drag_racing_id[playerid]][E_PLAYER]));
				SCM(playerid, 0xEAC146FF, "Вы покинули заезд.");
				FinishDragRacing();
			}
		}
	}
	for(new i; i < sizeof g_business_interiors; i ++)
	{
		if(areaid == array_business_interiors_data[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[23, \"Взаимодействовать\"]]");
	}
	for(new i; i < MAX_ITEMS; i ++)
    {
		if(areaid == ItemDropSphere[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[18, \"Подобрать предмет\"]]");
    }
	for(new i; i < MAX_SVALKA_ITEMS; i ++)
    {
		if(g_svalka_items[i][S_ITEM_TIME] == 0) continue;
		if(areaid == alt_svalka_items[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[19, \"Осмотреть мусор\"]]");
    }
	for(new i; i < MAX_CONTAINERS; i ++)
    {
		if(areaid == alt_containers_bet[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[15, \"Сделать ставку\"]]");

		if(s_containers[i][S_CT_WIN_ID] != playerid) continue;
		if(areaid == alt_containers_open[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[15, \"Снять замок\"]]");
		if(areaid == alt_containers_items[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[16, \"Разобрать содержимое\"]]");
    }
	for(new i; i < sizeof g_mine_rack; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;

		if(areaid == g_mine_rack_sphere[i])
		{
			if(g_player_mine_status[playerid] == 0) CEF_CREATE(playerid, 2, 4, "Interactions", "[[43, \"Взять инструмент\"]]");
		}
	}
	for(new i; i < sizeof g_mine_ore; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;

		if(areaid == g_mine_ore[i][MO_SPHERE])
		{
			if(g_player_mine_status[playerid] == 1) CEF_CREATE(playerid, 2, 4, "Interactions", "[[44, \"Взаимодействовать\"]]");
		}
	}
	if(areaid == g_player_mine_sphere[playerid])
	{
		CEF_CREATE(playerid, 2, 4, "Interactions", "[[45, \"Взаимодействовать\"]]");
	}
	for(new i; i < MAX_SVALKA_CARS; i ++)
    {
		if(g_svalka_cars[i][S_CAR_TIME] == 0) continue;
		if(areaid == alt_svalka_cars[i]) CEF_CREATE(playerid, 2, 4, "Interactions", "[[19, \"Осмотреть мусор\"]]");
    }
	for(new i; i < g_vorota_loaded; i ++)
    {
		if(areaid == array_vorota_data[i])
		{
			if(GetVorotaData(i, V_TYPE_OPEN) == 0 || GetVorotaData(i, V_TYPE_OPEN) == 1) 
            {
                new houseid = GetNearestHouse(playerid, 46.0);
                if(houseid != -1)
                {
                    if(GetHouseData(houseid, H_OWNER_ID) != GetPlayerAccountID(playerid) && GetPlayerFamilyHouse(playerid) != houseid) return 1;
                }
            }

			CEF_CREATE(playerid, 2, 4, "Interactions", "[[14, \"Открыть/Закрыть\"]]");
		}
    }
	for(new i; i < MAX_FISHING_ZONE; i++)
	{
		if(areaid == g_fishing_sphere[i])
		{
			CEF_CREATE(playerid, 1, 2, "interface('Hud').showFishingZone()");
			g_player_fishing_zone[playerid] = 1;
		}	
	}
	for(new i = 0; i <= g_house_loaded; i++)
	{
		if(areaid == home_area[i]) 
		{
			SetPVarInt(playerid, "pickup_house", i);
			ShowHomeInfoPick(playerid, i);
		}
	}
	if(areaid == factory_put_zone)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
			{
				new objectid;
				new items = GetPlayerJobLoadItems(playerid);
				new Float: x, Float: y, Float: z, Float: angle;

				SetPlayerTempJobCheckAnim(playerid, false);

				ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				TogglePlayerFactoryCP(playerid, true);
				SetPlayerJobLoadItems(playerid, items + 1);

				OnBattlePass_Perfomance(playerid, 1, 1);

				AddPlayerData(playerid, P_JOB_WAGE, +, random(500000) + 500000);
				SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

				AddPlayerAchiv(playerid, 6);

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, angle);

				objectid = CreateDynamicObject(1279, x, 406.7452, 995.7358, 0.9, 0.0, angle);
				MoveDynamicObject(objectid, 419.9673, -406.7452, 995.7358, 2.0, 0.9, 0.0, angle);

				Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == Gang_CentralMansionCapture && playerid == HackerID) 
	{
		foreach(new i:Player)
        {
	        CEF_HIDE(i, "GangTimer");
			DestroyZaxvat(playerid);
		}
	}
    if(areaid == Gang_WestMansionCapture && playerid == HackerID2) 
	{
		foreach(new i:Player)
        {
	        CEF_HIDE(i, "GangTimer");
			DestroyZaxvat(playerid);
		}
	}
	if(areaid == Gang_NorthMansionCapture && playerid == HackerID3) 
	{
		foreach(new i:Player)
        {
	        CEF_HIDE(i, "GangTimer");
			DestroyZaxvat(playerid);
		}
	}  
	if(areaid == Gang_PelaBaseCapture && playerid == HackerID4) 
	{
		foreach(new i:Player)
        {
	        CEF_HIDE(i, "GangTimer");
			DestroyZaxvat(playerid);
		}
	}
	if(g_war[W_STATUS])
    {
	    for(new idx; idx < g_business_loaded; idx ++)
		{
		    if(zone_war_a[idx] == areaid)
		    {
		        if(GetPlayerFamily(playerid) == g_war[W_PROTECT_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_ATTACK_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вышел из территории капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		        if(GetPlayerFamily(playerid) == g_war[W_ATTACK_TEAM])
		        {
		            foreach(new i: Player)
					{
						if(GetPlayerFamily(i) == g_war[W_PROTECT_TEAM])
						{
				            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вышел из территории капта",GetPlayerNameEx(playerid));
				            SendClientMessage(i, -1, STRING_GLOBAL);
				    	}
				    }
		        }
		    }
		}
	}
    if(IsPlayerDriver(playerid))
    {
        for(new i; i < sizeof TrafficLight; i++)
        {
            if(TrafficLight[i][TR_AreaID] == areaid)
            {
                if(TrafficLight[i][TR_ColorStatus] == 0)
                {
					new SumTicket = 5000;

                    SCMF(playerid, 0x3399ffFF, "Полиция выписала Вам штраф на сумму %d руб. Причина: проезд на красный", SumTicket);
					SCM(playerid, -1, "Оплатить штраф можно в любом банке и банкомате. Для просмотра Ваших неоплаченных штрафов используйте: {bbbb00}/mytickets");
					SCM(playerid, 0xfbfb00FF, "Обратите внимание: У Вас есть 3 дня чтобы оплатить штраф, иначе Ваше вод. удостоверение будет аннулировано");

					CreateTicket(playerid, SumTicket, "МВД", "Проезд на красный");

					GameText(playerid, "~r~Штраф", 4000, 1);
                }
            }
        }
    }
	new player_last_pickup = GetPlayerData(playerid, P_LAST_PICKUP);

	if(player_last_pickup != -1 && GetPickupInfo(player_last_pickup, P_DYNAMIC_ZONE) == areaid) SetPlayerData(playerid, P_LAST_PICKUP, -1);

	if(areaid == platkadorogi[0] || areaid == platkadorogi[1])
	{
		if(IsPlayerDriver(playerid))
		{
			if(VerifyIntString(QueryPlayerBalance(playerid), 4000000))
			{
				ModifyCashBalance(playerid, -4000000);
			}
		}
	}

	for(new i = 0; i < MAX_ZONE_DAYVING; i++)
    {
	    if(areaid == dayving_zone[i])
	    {
		    if(GetPVarInt(playerid, "DayvingZone") != 0) DeletePVar(playerid, "DayvingZone");
			break;
		}
	}

    if(areaid == area_koryakino)
	{
        if(g_playerInZone[playerid])
        {
			if(detector[playerid] == 1)
            {
				ZoneHide(playerid, 0);
                GameText(playerid, "~r~Вы покинули область поиска", 3000, 0);
				g_playerInZone[playerid] = false;
			}
			else
			{
				ZoneHide(playerid, 0);
				g_playerInZone[playerid] = false;
				CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~w~Вы покинули поле с металлоломом\",3500,0,-1,1,0,3.00]')");
			}
        }
	}
	if(areaid == area_uzniy)
	{
        if(g_playerInZone[playerid])
        {
			if(detector[playerid] == 1)
            {
				ZoneHide(playerid, 1);
                GameText(playerid, "~r~Вы покинули область поиска", 3000, 0);
				g_playerInZone[playerid] = false;
			}
			else
			{
				ZoneHide(playerid, 1);
				g_playerInZone[playerid] = false;
				CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~w~Вы покинули поле с металлоломом\",3500,0,-1,1,0,3.00]')");
			}
        }
	}

	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		CEF_CREATE(playerid, 1, 2, "interface('Hud').hideGreenZoneTab()");
		SetPVarInt(playerid, "player_in_green_zone", 0);

		SetPlayerTeam(playerid, NO_TEAM);

		if(IsPlayerDriver(playerid))
		{ 
			//SetVehicleData(GetPlayerVehicleID(playerid), V_GZ_TIME, 0);
			SCM(playerid, 0xf3b557FF, !"Вы покинули непарковочную зону.");
		}
	}
	
	for(new i; i < g_kiosk_loaded; i ++)
		if(areaid == array_kiosk_data[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < g_garage_loaded; i ++)
		if(areaid == garage_area[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < g_garden_loaded; i ++)
	{
		if(areaid == array_gardens_data[i]) CEF_HIDE(playerid, "Interactions");
		if(areaid == array_gardens_data_2[i]) CEF_HIDE(playerid, "Interactions");
		if(areaid == array_gardens_data_3[i]) CEF_HIDE(playerid, "Interactions");
		for(new idx = 0; idx < 10; idx ++)
		{
		   if(areaid == array_gardens_yamka[i][idx]) CEF_HIDE(playerid, "Interactions");
		}
		for(new idx = 0; idx < 14; idx ++)
		{
		   if(areaid == array_gardens_yamka_2[i][idx]) CEF_HIDE(playerid, "Interactions");
		}
		for(new idx = 0; idx < 20; idx ++)
		{
		   if(areaid == array_gardens_yamka_3[i][idx]) CEF_HIDE(playerid, "Interactions");
		}
	}
	for(new i; i < sizeof g_med_bed_pos; i++)
		if(areaid == array_med_bed_data[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof sphereQuestEaster; i++)
    {
		if(areaid == sphereQuestEaster[i]) 
		{
			if(sphereQuestEasterStatus[i] == 1)
			{
				OpenQuestEasterPhone(playerid);
			}
		}
	}

	for(new i; i < sizeof g_deteling_alt; i++)
		if(areaid == g_deteling_alt[i]) g_cursor[playerid] = 0, CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_zavod_alt; i++)
		if(areaid == g_zavod_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_raffleShop; i++)
	{
		if(areaid == g_raffleShop[i][RS_AREA])
		{
			CEF_HIDE(playerid, "Interactions");
		}
	}
		
    for(new i; i < sizeof g_zavod_finish; i++)
		if(areaid == g_zavod_finish[i]) CEF_HIDE(playerid, "Interactions");

    for(new i; i < sizeof diving_chest; i++)
		if(areaid == diving_chest[i][E_INTERACTION]) CEF_HIDE(playerid, "Interactions");

    for(new i; i < sizeof g_obmenfishki_alt; i++)
		if(areaid == g_obmenfishki_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_rullet_alt; i++)
		if(areaid == g_rullet_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_blackjack_alt; i++)
		if(areaid == g_blackjack_alt[i]) CEF_HIDE(playerid, "Interactions");

    /*for(new i; i < sizeof g_obmenik_alt; i++)
		if(areaid == g_obmenik_alt[i]) CEF_HIDE(playerid, "Interactions");*/

    for(new i; i < sizeof g_blackmarket_alt; i++)
		if(areaid == g_blackmarket_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_sto_alt; i++)
		if(areaid == g_sto_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_bank_alt; i++)
		if(areaid == g_bank_alt[i]) CEF_HIDE(playerid, "Interactions");

    for(new i; i < sizeof g_craft_alt; i++)
		if(areaid == g_craft_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_kolesofortynu_alt; i++)
		if(areaid == g_kolesofortynu_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_azs_alt; i++)
		if(areaid == g_azs_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_electroazs_alt; i++)
		if(areaid == g_electroazs_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_woshcar_alt; i++)
		if(areaid == g_woshcar_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_worota_org_alt; i++)
		if(areaid == g_worota_org_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_liftvetr_alt; i++)
		if(areaid == g_liftvetr_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_diagnostik_alt; i++)
		if(areaid == g_diagnostik_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_givenomercar_alt; i++)
		if(areaid == g_givenomercar_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_donatecar_alt; i++)
		if(areaid == g_donatecar_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_buylic_alt; i++)
		if(areaid == g_buylic_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_dice_alt; i++)
		if(areaid == g_dice_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_exithome_alt; i++)
		if(areaid == g_exithome_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_createfamily_alt; i++)
		if(areaid == g_createfamily_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_creategang_alt; i++)
		if(areaid == g_creategang_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_skyp_alt; i++)
		if(areaid == g_skyp_alt[i]) CEF_HIDE(playerid, "Interactions");
		
    for(new i; i < sizeof g_dedmoroz_alt; i++)
		if(areaid == g_dedmoroz_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_lesopilka1_alt; i++)
		if(areaid == g_lesopilka1_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_lesopilka2_alt; i++)
		if(areaid == g_lesopilka2_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_lesopilka3_alt; i++)
		if(areaid == g_lesopilka3_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_lesopilka4_alt; i++)
		if(areaid == g_lesopilka4_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_podnos_alt; i++)
		if(areaid == g_podnos_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_sto_enter_alt; i++)
		if(areaid == g_sto_enter_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_mafia_dver_alt; i++)
		if(areaid == g_mafia_dver_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_plate_alt; i++)
		if(areaid == g_plate_alt[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < sizeof g_drag_racing; i++)
    {
		if(areaid == g_drag_racing[i][E_SPHERE])
		{
			for(new td; td < 1; td++)
			{
				if(g_drag_racing[i][E_STATUS] == 1)
				{
					g_drag_racing[i][E_STATUS] = 0;
					g_drag_racing[i][E_STATUS_PLAYER] = 0;
					g_drag_racing[i][E_BET_PLAYER] = 0;
					g_drag_racing[i][E_TYPE] = 0;
					g_drag_racing[i][E_WIN_PLAYER] = 0;
					g_drag_racing[i][E_BET] = 0;

					SCM(playerid, 0xEAC146FF, "Вы покинули зону ожидания заезда.");

					CEF_HIDE(g_drag_racing[0][E_PLAYER], "DragRacingStart");
					CEF_HIDE(g_drag_racing[1][E_PLAYER], "DragRacingStart");

					g_drag_racing[i][E_PLAYER] = 0;
				}
			}
		}
	}

	for(new i; i < sizeof g_business_interiors; i ++)
		if(areaid == array_business_interiors_data[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < MAX_FISHING_ZONE; i++)
		if(areaid == g_fishing_sphere[i]) 
			CEF_CREATE(playerid, 1, 2, "interface('Hud').hideFishingZone()"),
			g_player_fishing_zone[playerid] = 0;

	for(new i; i < g_vorota_loaded; i ++) 
		if(areaid == array_vorota_data[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < MAX_ITEMS; i ++) 
		if(areaid == ItemDropSphere[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < MAX_ITEMS; i ++) 
		if(areaid == ItemDropSphere[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < MAX_SVALKA_ITEMS; i ++)
		if(areaid == alt_svalka_items[i]) CEF_HIDE(playerid, "Interactions");

	for(new i; i < MAX_CONTAINERS; i ++)
	{
		if(areaid == alt_containers_items[i]) CEF_HIDE(playerid, "Interactions");
		if(areaid == alt_containers_open[i]) CEF_HIDE(playerid, "Interactions");
		if(areaid == alt_containers_bet[i]) CEF_HIDE(playerid, "Interactions");
	}
	for(new i; i < sizeof g_mine_rack; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;

		if(areaid == g_mine_rack_sphere[i])
		{
			CEF_HIDE(playerid, "Interactions");
		}
	}
	for(new i; i < sizeof g_mine_ore; i++)
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_MINER) continue;

		if(areaid == g_mine_ore[i][MO_SPHERE])
		{
			CEF_HIDE(playerid, "Interactions");
		}
	}
	if(areaid == g_player_mine_sphere[playerid])
	{
		CEF_HIDE(playerid, "Interactions");
	}
	for(new i; i < MAX_SVALKA_CARS; i ++)
   		if(areaid == alt_svalka_cars[i]) CEF_HIDE(playerid, "Interactions");

	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(areaid == biz_area[i]) CEF_HIDE(playerid, "Business"), CEF_HIDE(playerid, "InfoCard");
	}
	for(new i = 0; i < g_house_loaded; i++)
	{
		if(areaid == home_area[i]) CEF_HIDE(playerid, "Appartament"), CEF_HIDE(playerid, "InfoCard");
	}
	if(!GetPlayerData(playerid, P_BLOCK_LEAVE_AREA))
	{
		if(areaid == miner_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_MINER, true);
		}
		else if(areaid == factory_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);

	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);

			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
		case OBJECT_TYPE_CARRIAGE:
		{
			miner_carriage[0][MC_IN_MOVE] = false;

			MinerCarriageSetState(0);
		}
		case OBJECT_TYPE_WOOD:
		{
			new Float: object_x,
				Float: object_y,
				Float: object_z,
				index;

			GetDynamicObjectPos(objectid, object_x, object_y, object_z);
			if(IsValidDynamicObject(objectid)) DestroyDynamicObject(objectid);

			index = object_x == 2399.2898 ? 0 : 1;

			if(index)
			{
				new object = CreateDynamicObject(1448, object_x, object_y, object_z, 0.0, 0.0, 0.0);
				MoveDynamicObject(object, 2399.2898, object_y, object_z, 2.0, 0.0, 0.0, 0.0);
			}
			else
			{
				type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);

				SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
				UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			}
		}
	}

	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(response == EDIT_RESPONSE_FINAL)
    {
        if(GetPVarInt(playerid, "create_bill") == 1)
        {
			DestroyObject(EditObjectPlayer[playerid]);


			static const mysql_str[] = "INSERT INTO `billboard` (`type`, `color`, `pos_x`, `pos_y`, `pos_z`, `rot_x`, `rot_y`, `rot_z`) VALUES ('%d', %d, '%f', '%f', '%f', '%f', '%f', '%f')";
			new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];
			format(str, sizeof(str), mysql_str,
			    GetPVarInt(playerid, "bill_type"),
				GetPVarInt(playerid, "bill_color"),
				x,
				y,
				z,
				rx,
				ry,
				rz);
			mysql_query(mysql, str, false);
			DeletePVar(playerid, "create_bill");
        }
	}
    if(response == EDIT_RESPONSE_CANCEL)
    {
        if(GetPVarInt(playerid, "create_bill"))
    	{
	        DestroyObject(EditObjectPlayer[playerid]);
	        CancelEdit(playerid);
	        DeletePVar(playerid, "create_bill");
    	}
        return 1;
    }
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	return 0;
}

// ------------------------------------------
public: LoadGangZones()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_zones", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangZones]: DB rows > MAX_GZ");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangZoneData(idx, GZ_MIN_X,	cache_get_field_content_float(idx, "min_x"));
		SetGangZoneData(idx, GZ_MIN_Y,	cache_get_field_content_float(idx, "min_y"));
		SetGangZoneData(idx, GZ_MAX_X,	cache_get_field_content_float(idx, "max_x"));
		SetGangZoneData(idx, GZ_MAX_Y,	cache_get_field_content_float(idx, "max_y"));

		SetGangZoneData(idx, GZ_GANG,	cache_get_field_content_int(idx, "fraction"));

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_ZONE] = GangZoneCreate
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);

		// ----------------------------------------------------------------------------------
		g_gang_zone[idx][GZ_AREA] = CreateDynamicRectangle
		(
			GetGangZoneData(idx, GZ_MIN_X),
			GetGangZoneData(idx, GZ_MIN_Y),
			GetGangZoneData(idx, GZ_MAX_X),
			GetGangZoneData(idx, GZ_MAX_Y)
		);
	}

	g_gang_zones_loaded = rows;
	cache_delete(result);

	printf("[GangZones]: Гангзон загружено: %d", g_gang_zones_loaded);
}

stock ShowGangZonesForPlayer(playerid)
{
	for(new idx; idx < sizeof g_gang_zone; idx ++)
	{
		GangZoneShowForPlayer(playerid, GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[ GetGangZoneData(idx, GZ_GANG) ]);
	}

	if(g_capture[C_STATUS])
		GangZoneFlashForPlayer(playerid, GetGangZoneData(g_capture[C_GANG_ZONE], GZ_ZONE), gang_zone_colors[ g_capture[C_ATTACK_TEAM] ]);
}

stock SaveGangZone(idx)
{
	new query[50];

	mysql_format(mysql, query, sizeof query, "UPDATE gang_zones SET fraction=%d WHERE id=%d", GetGangZoneData(idx, GZ_GANG), idx);
	mysql_query(mysql, query, false);
}

stock GetGangZonesCount(team)
{
	new count;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(GetGangZoneData(idx, GZ_GANG) != team) continue;

		count ++;
	}

	return count;
}

stock LoadServerConfig()
{
	new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM server_config", true);

	g_xbonus = cache_get_field_content_int(0, "x_bonus");
	Test_server = cache_get_field_content_int(0, "test_status");

	bp_timer = cache_get_field_content_int(0, "time_battlepass");
	daily_timer = cache_get_field_content_int(0, "time_daily");

	g_raffleShop[0][RS_ID] = cache_get_field_content_int(0, "id_raffleshopping_1");
	g_raffleShop[1][RS_ID] = cache_get_field_content_int(0, "id_raffleshopping_2");

	g_raffleShop[0][RS_TIME] = cache_get_field_content_int(0, "time_raffleshopping_1");
	g_raffleShop[1][RS_TIME] = cache_get_field_content_int(0, "time_raffleshopping_2");

	g_raffleShop[0][RS_TIME] = cache_get_field_content_int(0, "time_raffleshopping_1");
	g_raffleShop[1][RS_TIME] = cache_get_field_content_int(0, "time_raffleshopping_2");

	if(daily_timer == 0)
    {
        daily_timer = gettime();

        new query[256];
        format(query, sizeof query, "UPDATE server_config SET time_daily = %d", daily_timer);
        mysql_tquery(mysql, query);

        printf("[DAILY RESET] Инициализация time_daily: %d", daily_timer);
	}

	cache_delete(result);
	print("[Config] Серверные настройки загружены успешно");

	CreateRaffleShopping();
}

stock SaveServerConfig()
{
	new query[200];
	mysql_format(mysql, query, sizeof query, "UPDATE server_config SET x_bonus='%d', test_status='%d' LIMIT 1", g_xbonus, Test_server);
	mysql_query(mysql, query, false);
}

public: LoadOwnableCar(playerid, oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ioeaea a caa?ocea. I?aauoai eeieo ee?iiai o?ainii?oa (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[250],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));

	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
	SetOwnableCarData(idx, OC_VINIL, 		cache_get_field_content_int(0, "vinil"));
	SetOwnableCarData(idx, OC_VINILTYPE, 		cache_get_field_content_int(0, "viniltype"));
	SetOwnableCarData(idx, OC_DISKI, 		cache_get_field_content_int(0, "diski"));
	SetOwnableCarData(idx, OC_GIDRA, 		cache_get_field_content_int(0, "gidra"));
	SetOwnableCarData(idx, OC_WASH,			cache_get_field_content_int(0, "wash"));
	SetOwnableCarData(idx, OC_MASLO, 		cache_get_field_content_int(0, "maslo"));
	SetOwnableCarData(idx, OC_MASLO_FILTER, 		cache_get_field_content_int(0, "maslo_filter"));
	SetOwnableCarData(idx, OC_FILTER, 		cache_get_field_content_int(0, "filter"));

	SetVehicleData(idx, V_RENT, 		cache_get_field_content_int(0, "rent"));
	SetVehicleData(idx, V_RENTP, 		cache_get_field_content_int(0, "rentp"));

	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));

	SetOwnableCarData(idx, OC_INTER, 		cache_get_field_content_int(0, "inter"));
	SetOwnableCarData(idx, OC_WORLD, 		cache_get_field_content_int(0, "world"));

	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 10);
	cache_get_field_content(0, "region", g_ownable_car[idx][OC_REGION], mysql, 10);
 	
 	SetOwnableCarData(idx, OC_TONERINSTALL, 		cache_get_field_content_int(0, "tonerinstall"));
	SetOwnableCarData(idx, OC_NUMBERTYPE, 		cache_get_field_content_int(0, "typenumber"));
	SetOwnableCarData(idx, OC_FUEL, 		cache_get_field_content_float(0, "fuel"));

	SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(0, "alarm"));
	SetOwnableCarData(idx, OC_KEY_IN, 		cache_get_field_content_int(0, "key_in"));

	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));
	SetOwnableCarData(idx, OC_PNEWMA, 		cache_get_field_content_int(0, "pnewma"));
    SetOwnableCarData(idx, OC_CUT_SPRINGS, 		cache_get_field_content_int(0, "cutsprings"));
 	SetOwnableCarData(idx, OC_SAB, 		cache_get_field_content_int(0, "sab"));
	SetOwnableCarData(idx, OC_SAB_X, 		cache_get_field_content_float(0, "sab_x"));
	SetOwnableCarData(idx, OC_SAB_Y, 		cache_get_field_content_float(0, "sab_y"));
	SetOwnableCarData(idx, OC_SAB_Z, 		cache_get_field_content_float(0, "sab_z"));
	SetOwnableCarData(idx, OC_STAGE, 		cache_get_field_content_int(0, "stage"));
	SetOwnableCarData(idx, OC_STAGE1, 		cache_get_field_content_int(0, "stage1"));
	SetOwnableCarData(idx, OC_STAGE1_1, 		cache_get_field_content_int(0, "stage1_1"));
	SetOwnableCarData(idx, OC_STAGE2, 		cache_get_field_content_int(0, "stage2"));
	SetOwnableCarData(idx, OC_STAGE3, 		cache_get_field_content_int(0, "stage3"));
	SetOwnableCarData(idx, OC_ST1X, 		cache_get_field_content_float(0, "st1x"));
	SetOwnableCarData(idx, OC_ST1Y, 		cache_get_field_content_float(0, "st1y"));
	SetOwnableCarData(idx, OC_ST1Z, 		cache_get_field_content_float(0, "st1z"));
	SetOwnableCarData(idx, OC_ST1RX, 		cache_get_field_content_float(0, "st1rx"));
	SetOwnableCarData(idx, OC_ST1RY, 		cache_get_field_content_float(0, "st1ry"));
	SetOwnableCarData(idx, OC_ST1RZ, 		cache_get_field_content_float(0, "st1rz"));
	SetOwnableCarData(idx, OC_ST2X, 		cache_get_field_content_float(0, "st2x"));
	SetOwnableCarData(idx, OC_ST2Y, 		cache_get_field_content_float(0, "st2y"));
	SetOwnableCarData(idx, OC_ST2Z, 		cache_get_field_content_float(0, "st2z"));
	SetOwnableCarData(idx, OC_ST2RX, 		cache_get_field_content_float(0, "st2rx"));
	SetOwnableCarData(idx, OC_ST2RY, 		cache_get_field_content_float(0, "st2ry"));
	SetOwnableCarData(idx, OC_ST2RZ, 		cache_get_field_content_float(0, "st2rz"));
	SetOwnableCarData(idx, OC_ST3X, 		cache_get_field_content_float(0, "st3x"));
	SetOwnableCarData(idx, OC_ST3Y, 		cache_get_field_content_float(0, "st3y"));
	SetOwnableCarData(idx, OC_ST3Z, 		cache_get_field_content_float(0, "st3z"));
	SetOwnableCarData(idx, OC_ST3RX, 		cache_get_field_content_float(0, "st3rx"));
	SetOwnableCarData(idx, OC_ST3RY, 		cache_get_field_content_float(0, "st3ry"));
	SetOwnableCarData(idx, OC_ST3RZ, 		cache_get_field_content_float(0, "st3rz"));
	SetOwnableCarData(idx, OC_ST11X, 		cache_get_field_content_float(0, "st11x"));
	SetOwnableCarData(idx, OC_ST11Y, 		cache_get_field_content_float(0, "st11y"));
	SetOwnableCarData(idx, OC_ST11Z, 		cache_get_field_content_float(0, "st11z"));
	SetOwnableCarData(idx, OC_ST11RX, 		cache_get_field_content_float(0, "st11rx"));
	SetOwnableCarData(idx, OC_ST11RY, 		cache_get_field_content_float(0, "st11ry"));
	SetOwnableCarData(idx, OC_ST11RZ, 		cache_get_field_content_float(0, "st11rz"));
	
	SetOwnableCarData(idx, OC_GLASS, 		cache_get_field_content_int(0, "glass"));
	SetOwnableCarData(idx, OC_PROCENT, 		cache_get_field_content_int(0, "procent"));
	SetOwnableCarData(idx, OC_STEKLO_0, 		cache_get_field_content_int(0, "steklo_0"));
	SetOwnableCarData(idx, OC_STEKLO_1, 		cache_get_field_content_int(0, "steklo_1"));
	SetOwnableCarData(idx, OC_STEKLO_2, 		cache_get_field_content_int(0, "steklo_2"));
 	SetOwnableCarData(idx, OC_NO_KEY_DOSTUP, 		cache_get_field_content_int(0, "no_key_dostup"));

	SetOwnableCarData(idx, OC_NUMBER_STATUS, 		cache_get_field_content_int(0, "number_status"));

	cache_get_field_content(0, "obves", g_ownable_car[idx][OC_OBVES], mysql, 333);

	cache_get_field_content(0, "pselect", g_ownable_car[idx][OC_TSELECT], mysql, 155);
 	cache_get_field_content(0, "tcolor", g_ownable_car[idx][OC_TCOLOR], mysql, 155);
 	cache_get_field_content(0, "tprocent", g_ownable_car[idx][OC_TPROCENT], mysql, 155);

	SetOwnableCarData(idx, OC_PNEWMA_1, 		cache_get_field_content_float(0, "pnewma_1"));
	SetOwnableCarData(idx, OC_PNEWMA_2, 		cache_get_field_content_float(0, "pnewma_2"));

	SetOwnableCarData(idx, OC_ENGINE_ACCELERATION, 		cache_get_field_content_float(0, "engineacceleration"));
	SetOwnableCarData(idx, OC_MAX_VELOCITY, 		cache_get_field_content_float(0, "maxgearvelocity"));

	SetOwnableCarData(idx, OC_STAGE1_OBJ, 		cache_get_field_content_int(0, "stage1_obj"));
	SetOwnableCarData(idx, OC_STAGE1_1_OBJ, 		cache_get_field_content_int(0, "stage1_1_obj"));
	SetOwnableCarData(idx, OC_STAGE2_OBJ, 		cache_get_field_content_int(0, "stage2_obj"));
	SetOwnableCarData(idx, OC_STAGE3_OBJ, 		cache_get_field_content_int(0, "stage3_obj"));

	SetOwnableCarData(idx, OC_MUSIC_STATUS, 0);

	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	DestroyVehicleLabel(vehicleid);

    horn[vehicleid] = cache_get_field_content_int(0, "horn");
	if(GetOwnableCarData(idx, OC_SAB) == 1)
	{
		    new sscanf_delimit[333];
			new Float:e_X, Float:e_Y, Float:e_Z, Float:e_RX, Float:e_RY, Float:e_RZ;

			cache_get_field_content(0, "sab_pos", sscanf_delimit, mysql, 333) ;
			sscanf(sscanf_delimit, "p<,>ffffff", e_X, e_Y, e_Z, e_RX, e_RY, e_RZ) ;

			SetOwnableCarData(idx, OC_SAB_X, 		e_X);
			SetOwnableCarData(idx, OC_SAB_Y, 		e_Y);
			SetOwnableCarData(idx, OC_SAB_Z, 		e_Z);
			SetOwnableCarData(idx, OC_SAB_RX, 		e_RX);
			SetOwnableCarData(idx, OC_SAB_RY, 		e_RY);
			SetOwnableCarData(idx, OC_SAB_RZ, 		e_RZ);

			sab[vehicleid] = CreateDynamicObject(13946, 0, 0, 0, 0, 0, 0);
			AttachDynamicObjectToVehicle(sab[vehicleid], vehicleid, e_X, e_Y, e_Z, e_RX, e_RY, e_RZ);
	}
	if(GetOwnableCarData(idx, OC_STAGE1) != 0)
	{
		if(GetOwnableCarData(idx, OC_STAGE1_OBJ) == 0)
	    {
		    Stage1[vehicleid] = CreateDynamicObject(10443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

	        AttachDynamicObjectToVehicle(Stage1[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST1X), GetOwnableCarData(idx, OC_ST1Y),
		    GetOwnableCarData(idx, OC_ST1Z), GetOwnableCarData(idx, OC_ST1RX), GetOwnableCarData(idx, OC_ST1RY), GetOwnableCarData(idx, OC_ST1RZ));
		}
	}
	if(GetOwnableCarData(idx, OC_STAGE1_1) != 0)
	{
		if(GetOwnableCarData(idx, OC_STAGE1_1_OBJ) == 0)
	    {
		    Stage1_1[vehicleid] = CreateDynamicObject(10442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

	        AttachDynamicObjectToVehicle(Stage1_1[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST11X), GetOwnableCarData(idx, OC_ST11Y),
		    GetOwnableCarData(idx, OC_ST11Z), GetOwnableCarData(idx, OC_ST11RX), GetOwnableCarData(idx, OC_ST11RY), GetOwnableCarData(idx, OC_ST11RZ));
		}
	}
	if(GetOwnableCarData(idx, OC_STAGE2) != 0)
	{
		if(GetOwnableCarData(idx, OC_STAGE2_OBJ) == 0)
	    {
		    Stage2[vehicleid] = CreateDynamicObject(10445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

	        AttachDynamicObjectToVehicle(Stage2[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST2X), GetOwnableCarData(idx, OC_ST2Y),
		    GetOwnableCarData(idx, OC_ST2Z), GetOwnableCarData(idx, OC_ST2RX), GetOwnableCarData(idx, OC_ST2RY), GetOwnableCarData(idx, OC_ST2RZ));
		}
	}
	if(GetOwnableCarData(idx, OC_STAGE3) != 0)
	{
		if(GetOwnableCarData(idx, OC_STAGE3_OBJ) == 0)
		{
            Stage3[vehicleid] = CreateDynamicObject(10444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

	        AttachDynamicObjectToVehicle(Stage3[vehicleid], vehicleid, GetOwnableCarData(idx, OC_ST3X), GetOwnableCarData(idx, OC_ST3Y),
		    GetOwnableCarData(idx, OC_ST3Z), GetOwnableCarData(idx, OC_ST3RX), GetOwnableCarData(idx, OC_ST3RY), GetOwnableCarData(idx, OC_ST3RZ));
		}
	}
	
	SetOwnableCarData(idx, OC_STATUSTS, 1);
	SetOwnableCarData(idx, OC_VEHID, vehicleid);
	mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET statusts=%d, vehicleid=%d WHERE id=%d", GetOwnableCarData(idx, OC_STATUSTS),GetOwnableCarData(idx, OC_VEHID), GetOwnableCarData(idx, OC_SQL_ID));
	mysql_query(mysql, query, false);
    AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_GIDRA));
    AddVehicleComponent(vehicleid, GetOwnableCarData(idx, OC_DISKI));

	if(GetOwnableCarData(idx, OC_VINILTYPE) == 1) ChangeVehicleViniljob(vehicleid, -1), ChangeVehicleViniljob(vehicleid, GetOwnableCarData(idx, OC_VINIL));
	if(GetOwnableCarData(idx, OC_VINILTYPE) == 0) ChangeVehicleDefaultViniljob(vehicleid, -1), ChangeVehicleDefaultViniljob(vehicleid, GetOwnableCarData(idx, OC_VINIL));

	SetVehicleVirtualWorld(vehicleid, GetOwnableCarData(idx, OC_WORLD));
	LinkVehicleToInterior(vehicleid, GetOwnableCarData(idx, OC_INTER));
	
	if(GetOwnableCarData(idx, OC_POS_Z) > 999 && GetOwnableCarData(idx, OC_POS_Z) < 1005 && GetOwnableCarData(idx, OC_POS_X) < -1600 && GetOwnableCarData(idx, OC_POS_X) > -1700) LinkVehicleToInterior(vehicleid, 4);

	if(GetOwnableCarData(idx, OC_POS_Z) > 999 && GetOwnableCarData(idx, OC_POS_Z) < 1005 && GetOwnableCarData(idx, OC_POS_X) > 2800 && GetOwnableCarData(idx, OC_POS_X) < 2900) LinkVehicleToInterior(vehicleid, 5);

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		SetVehicleData(vehicleid, V_IZNOS, cache_get_field_content_int(0, "iznos"));
		SetVehicleData(vehicleid, V_GRYAZ, cache_get_field_content_float(0, "gryaz"));

		if(GetOwnableCarData(idx, OC_TONERINSTALL) != 0)
		{

			new toner_select[4],toner_color[4],toner_procent[4];
			sscanf(g_ownable_car[idx][OC_TSELECT], "P<,,>a<i>[3]",toner_select);
			sscanf(g_ownable_car[idx][OC_TCOLOR], "P<,,>a<i>[3]",toner_color);
			sscanf(g_ownable_car[idx][OC_TPROCENT], "P<,,>a<i>[3]",toner_procent);
			for(new i=0;i<=2;i++)
			{
				g_vehicle_data[vehicleid][V_TINTINGS][i] = toner_select[i];
				g_vehicle_data[vehicleid][V_TINTINGC][i] = toner_color[i];
				g_vehicle_data[vehicleid][V_TINTINGP][i] = toner_procent[i];
			}
			UpdateTinting(playerid, vehicleid);
 		}
		if(GetOwnableCarData(idx, OC_OBVES) != -1)
		{
			new obves[17];

			sscanf(GetOwnableCarData(idx, OC_OBVES), "P<|||||||||>a<i>[17]", obves);

			for(new i; i < 17; i++)
			{
				if(obves[i] > 0)
				{
					GetTuningVehicle(playerid, vehicleid, obves[i]);
				}
			}

		}

		UpdateVehicleHandling(playerid, vehicleid);

		SetVehicleData(vehicleid, V_TYPENUM, GetOwnableCarData(idx, OC_NUMBERTYPE));
		SetVehicleNumber(vehicleid, GetOwnableCarData(idx, OC_NUMBERTYPE), g_ownable_car[idx][OC_NUMBER], g_ownable_car[idx][OC_REGION]);
		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);

		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage") );

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		SetVehicleData(vehicleid, V_HEALTH, cache_get_field_content_float(0, "health"));

		SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));
		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(0, "fuel"));

		LoadVehicleItems(vehicleid);
	}

	cache_delete(result);

	LoadCarAccessories(GetOwnableCarData(idx, OC_SQL_ID), vehicleid);
	return 1;
}
stock SetVehicleNumber(vehicleid, typenumber, number[], region[])
{
	SetVehicleData(vehicleid, V_TYPENUM, typenumber);
	format(g_vehicle_data[vehicleid][V_NUMBER], 10, "%s", number);
	format(g_vehicle_data[vehicleid][V_REGION], 10, "%s", region);
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock UnloadPlayerOwnableCar(bool: ignore_time = false, vehicleid)
{
    if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}
	horn[vehicleid] = 0;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	
	new Float: X,Float: Y,Float: Z;
	GetVehiclePos(vehicleid, X,Y,Z);

	DestroyVehicleItems(vehicleid);

	if(IsValidDynamicObject(EditStage3Player[vehicleid])) DestroyDynamicObject(EditStage3Player[vehicleid]);
	if(IsValidDynamicObject(EditStage1Player[vehicleid])) DestroyDynamicObject(EditStage1Player[vehicleid]);
	if(IsValidDynamicObject(EditStage2Player[vehicleid])) DestroyDynamicObject(EditStage2Player[vehicleid]);
	if(IsValidDynamicObject(EditStage1_1Player[vehicleid])) DestroyDynamicObject(EditStage1_1Player[vehicleid]);

	if(IsValidDynamicObject(Stage1[vehicleid])) DestroyDynamicObject(Stage1[vehicleid]);
	if(IsValidDynamicObject(Stage1_1[vehicleid])) DestroyDynamicObject(Stage1_1[vehicleid]);
	if(IsValidDynamicObject(Stage2[vehicleid])) DestroyDynamicObject(Stage2[vehicleid]);
	if(IsValidDynamicObject(Stage3[vehicleid])) DestroyDynamicObject(Stage3[vehicleid]);
	if(IsValidDynamicObject(sab[vehicleid])) DestroyDynamicObject(sab[vehicleid]);

	for(new i; i < 9; i++)
	{
		if(IsValidDynamicObject(car_accessories[vehicleid][i])) DestroyDynamicObject(car_accessories[vehicleid][i]);
	}

	if(GetOwnableCarData(index, OC_BY_ID) != 0)
	{
		GetOwnableCarData(index, OC_POS_X) = GetOwnableCarData(index, OC_BY_POS_X);
		GetOwnableCarData(index, OC_POS_Y) = GetOwnableCarData(index, OC_BY_POS_Y);
		GetOwnableCarData(index, OC_POS_Z) = GetOwnableCarData(index, OC_BY_POS_Z);
		GetOwnableCarData(index, OC_ANGLE) = GetOwnableCarData(index, OC_BY_ANGLE);
	    if(GetOwnableCarData(index, OC_BY_ID) == 1)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestavis[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	    if(GetOwnableCarData(index, OC_BY_ID) == 3)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestaniz[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	    if(GetOwnableCarData(index, OC_BY_ID) == 2)
	    {
	        SetOwnableCarData(index, OC_BY_ID, 0);
			bymestasr[GetOwnableCarData(index, OC_MESTOID)] = 0;
			SetOwnableCarData(index, OC_MESTOID, 0);
	    }
	}
	SaveOwnableCar(vehicleid);
	SetOwnableCarData(index, OC_CREATE, 0);
	
    if(IsValidDynamicObject(sab[vehicleid])) DestroyDynamicObject(sab[vehicleid]);
	DestroyVehicleLabel(vehicleid);

	DestroyVehicle(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		else if(!IsPlayerLogged(idx)) continue;
		else if(GetPlayerAllowedCar(idx) != vehicleid) continue;

		if(ignore_time)
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта отключился. Транспорт выгружен с сервера");
		else
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта выгрузил транспорт с сервера");

		SetPlayerData(idx, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}

	return 1;
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'Государство') AS owner_name FROM hotels h LEFT JOIN accounts_canvasdev a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));

				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);

				// ----------------------------------------------------------------------------------------------
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "Государство", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);

					mysql_format(mysql, query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}

				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);

	// ----------------------------------
	CreatePickup(1318, 23, 733.0804, 599.6274, 1002.9598, -1);
	CreatePickup(1318, 23, 1276.0054, -776.3987, 1202.7220, -1);

	g_hotel_lift_CP[0] = CreateDynamicCP(733.0804, 599.6274, 1002.9598, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(1276.0054, -776.3987, 1202.722, 1.0, _, _, _, 5.0);

	// ----------------------------------
	new
		Float: p_pos_x = 1273.2,
		Float: p_pos_y = -778.3146,
		Float: p_pos_z = 1202.7220;

	for(idx = 0; idx < 12; idx ++)
	{
		if(!(idx & 1))
		{
			p_pos_y += 4.0,
			p_pos_x += 5.7;
		}
		else p_pos_x -= 5.7;

		CreatePickup(19197, 23, p_pos_x, p_pos_y, p_pos_z, -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);

		format(query, sizeof query, "Комната\n{FFFFFF}Номер: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0x3399FFFF, p_pos_x, p_pos_y, p_pos_z + 1.4, 6.0);
	}

	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FF, 1276.0054, -776.3987, 1202.722 + 1.7, 8.0, _, _, _, _, idx + 1);
	}

	// ----------------------------------
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: Отелей загружено: %d / Номеров: %d", g_hotel_loaded, rows);
}

public: LoadHouses()
{
	new query[85], buffer[2];
	new Cache: result, rows;
	// result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts_canvasdev a ON a.id = h.owner_id ORDER BY h.id ASC, h.entrance ASC", true);
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts_canvasdev a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}

	for(new idx; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);

		SetHouseData(idx, H_CITY,			cache_get_field_content_int(idx, "city"));
		SetHouseData(idx, H_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));

		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price"));
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_ENTRACE,		cache_get_field_content_int(idx, "entrance"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));

		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));

		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));

		SetHouseData(idx, H_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetHouseData(idx, H_MIAMI,		cache_get_field_content_int(idx, "miami"));

        if(GetHouseData(idx, H_MIAMI) != 0) House_CP[idx] = CreateDynamicCP(GetHouseData(idx, H_POS_X),GetHouseData(idx, H_POS_Y),GetHouseData(idx, H_POS_Z),1.5, _, _, _, 15.0);

		cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);
		
		mysql_format(mysql, query, sizeof query, "UPDATE houses SET id=%d WHERE id='%d'", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);
		// -------------------------
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);

		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
			format(g_house[idx][H_NAME], 20, GetHouseTypeInfo(buffer[0], HT_NAME), 0);


		if(GetHouseData(idx, H_CITY) == -1 || GetHouseData(idx, H_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
			buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

			SetHouseData(idx, H_CITY, buffer[0]);
			SetHouseData(idx, H_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsHouseOwned(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "Государство", true))
		{
			SetHouseData(idx, H_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsHouseOwned(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);

		HouseHealthInit(idx);
		HouseStoreInit(idx);

		if(GetHouseData(idx, H_ENTRACE) == -1) home_area[idx] = CreateDynamicSphere(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), GetHouseData(idx, H_POS_Z), 3.0, 0, 0, -1);
	}
	g_house_loaded = rows;
	cache_delete(result);

	printf("[Houses]: Домов загружено: %d", g_house_loaded);
}

stock LoadObjects()
{
	new Cache: result;
	result = mysql_query(mysql, "SELECT * FROM `create_objects` WHERE 1");
	TOTALOBJECTS = cache_num_rows();

    if(TOTALOBJECTS)
    {
    	for(new i; i < TOTALOBJECTS; i++)
    	{
    		cache_get_field_content(i, "Name", ObjInfo[i][objName]);
    		ObjInfo[i][objModel] = cache_get_field_content_int(i, "Model");
    		ObjInfo[i][objPosX] = cache_get_field_content_float(i, "PosX");
    		ObjInfo[i][objPosY] = cache_get_field_content_float(i, "PosY");
    		ObjInfo[i][objPosZ] = cache_get_field_content_float(i, "PosZ");
    		ObjInfo[i][objRotX] = cache_get_field_content_float(i, "RotX");
    		ObjInfo[i][objRotY] = cache_get_field_content_float(i, "RotY");
    		ObjInfo[i][objRotZ] = cache_get_field_content_float(i, "RotZ");

    		ObjInfo[i][objID] = CreateDynamicObject(ObjInfo[i][objModel], ObjInfo[i][objPosX], ObjInfo[i][objPosY], ObjInfo[i][objPosZ], ObjInfo[i][objRotX], ObjInfo[i][objRotY], ObjInfo[i][objRotZ]);
    	}
    	printf("[Objects]: Объектов загружено: %d", TOTALOBJECTS);
    }
	cache_delete(result);
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];

	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'Государство') owner_name FROM houses_renters h LEFT JOIN accounts_canvasdev a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");

		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");

		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';

		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);

	printf("[Houses]: Арендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);

			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);

			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPVarInt(playerid, "ownablehouse_id");
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_ENTRACE) != -1)
		{
			if(operationid >= HOUSE_OPERATION_CAR_DELIVERY)
			{
				operationid ++;
			}
		}
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Отметить транспорт на GPS\n"\
						"4. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
				else
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров дома",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. Улучшить дом\n"\
						"3. Доставить транспорт к дому {FF6600}(550 руб)\n"\
						"4. Отметить транспорт на GPS\n"\
						"5. Список арендаторов",
						"Выбрать", "Назад"
					);
				}
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Дом открыт");
				}
				else
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Дом закрыт");
				}

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				string_dialog[0] = EOS;

				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");

						case 6:
							strcat(fmt_str, "\t\t");
					}

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string_dialog, fmt_str);

						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string_dialog, fmt_str);
				}
				IntfDialogCallRemote(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFD83D}Улучшения для дома", string_dialog, "Купить", "Назад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_ENTRACE) == -1)
				{
					new vehicleid = GetPlayerOwnableCarLast(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
					    for(new i;i<MAX_PLAYERS;i++)
						{
						    if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете доставить авто пока в нём кто-то сидит");
						    break;
						}
						new price = 550;
						if(VerifyIntString(QueryPlayerBalance(playerid), price))
						{
							ModifyCashBalance(playerid, -price, "Доставка ТС к дому (/home)", true, true);

							SetVehiclePos
							(
								vehicleid,
								GetHouseData(houseid, H_CAR_POS_X),
								GetHouseData(houseid, H_CAR_POS_Y),
								GetHouseData(houseid, H_CAR_POS_Z)
							);
							SetVehicleZAngle(vehicleid, GetHouseData(houseid, H_CAR_ANGLE));
							SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

							return SendClientMessage(playerid, 0x3399FFFF, "Транспорт был доставлен к Вашему дому");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
					}
					else
					{
						if(GetPlayerOwnableCars(playerid) == 0)
							SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
						else
							SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
					}
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам домов");

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);

					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];

					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;

						format(fmt_str, sizeof fmt_str, "%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);

						SetPlayerListitemValue(playerid, count ++, idx);
					}
					IntfDialogCallRemote(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "{33AACC}Список арендаторов", string, "Выбрать", "Назад");
				}
				else
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX,
						"{33AACC}Список арендаторов",
						"{FFFFFF}В Вашем доме, кроме Вас, сейчас никто не проживает",
						"Назад", ""
					);
				}
			}
		}
	}
	return 1;
}

public: UpdateRealtorHomeInfo()
{
	new count = -1;
	new fmt_str[128];
	new free_houses = GetFreeHousesCount();

	new new_line = floatround((float(free_houses) / 10) + 2, floatround_ceil);
	if(new_line > 28)
	{
		new_line = 28;
	}

	g_house_realtor_list = "{FFFFFF}";
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		if(++count > new_line)
		{
			count = -1;
		}

		format(fmt_str, sizeof fmt_str, "%d%s", idx, count != -1 ? ("\t") : ("\n"));
		strcat(g_house_realtor_list, fmt_str);
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние недвижимости\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено домов: %d\n"\
		"{99FF33}Свободно домов: %d",
		g_house_loaded - free_houses,
		free_houses
	);
	UpdateDynamic3DTextLabelText(g_house_realtor_label, 0xCCFF66FF, fmt_str);
}

public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1) UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, "{fbec5d}Домашний шкаф\n{FFFFFF}Используйте {fbec5d}/use {FFFFFF}для использования");
}

public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts_canvasdev a ON a.id=b.owner_id", true);
	//result = mysql_query(mysql, "SELECT * FROM business", true);
	rows = cache_num_rows();

	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 30);

		SetBusinessData(idx, B_CITY,			cache_get_field_content_int(idx, "city"));
		SetBusinessData(idx, B_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));

		cache_get_field_content(idx, "balance", g_business[idx][B_BALANCE], mysql, 21);

		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price"));
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));

		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));

		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetBusinessData(idx, B_GANG,		cache_get_field_content_int(idx, "gang"));

		SetBusinessData(idx, B_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetBusinessData(idx, B_ELECTRICITY,		cache_get_field_content_int(idx, "electricity"));
		SetBusinessData(idx, B_IZNOS,		cache_get_field_content_int(idx, "iznos"));

		SetBusinessData(idx, B_TIME_REPAIR_1,		cache_get_field_content_int(idx, "time_repair_1"));
		SetBusinessData(idx, B_TIME_REPAIR_2,		cache_get_field_content_int(idx, "time_repair_2"));

		SetBusinessData(idx, B_TYPEWETRIKI,		cache_get_field_content_int(idx, "typewetriki"));

        SetBusinessData(idx, B_WORK,		cache_get_field_content_int(idx, "work"));

		SetBusinessData(idx, B_WORK_2,		cache_get_field_content_int(idx, "work_2"));

		SetBusinessData(idx, B_VETR_WORK,		cache_get_field_content_int(idx, "vetr_work"));

		zone_war_z[idx] = GangZoneCreate
		(
			GetBusinessData(idx, B_POS_X)-6,
			GetBusinessData(idx, B_POS_Y)-6,
			GetBusinessData(idx, B_POS_X)+6,
			GetBusinessData(idx, B_POS_Y)+6
		);

		// ----------------------------------------------------------------------------------
		zone_war_a[idx] = CreateDynamicRectangle
		(
			GetBusinessData(idx, B_POS_X)-6,
			GetBusinessData(idx, B_POS_Y)-6,
			GetBusinessData(idx, B_POS_X)+6,
			GetBusinessData(idx, B_POS_Y)+6
		);

		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);
		// -------------------------

		SetBusinessData(idx, B_ORDER_ID, -1);
		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessData(idx, B_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 1.0, 6.50));

		if(GetBusinessData(idx, B_CITY) == -1 || GetBusinessData(idx, B_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

			SetBusinessData(idx, B_CITY, buffer[0]);
			SetBusinessData(idx, B_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			SetBusinessData(idx, B_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);

			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);

			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}

		BusinessHealthPickupInit(idx); //Иконки для бизов

		if(GetBusinessData(idx, B_TYPE) == 1) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 40, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 2) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 49, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 3 || GetBusinessData(idx, B_TYPE) == 4) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 28, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 5) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 45, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 8) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 25, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 9) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 26, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 17 || GetBusinessData(idx, B_TYPE) == 26 || GetBusinessData(idx, B_TYPE) == 23) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 23) CreatePickup(1096, 25, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z), 0, PICKUP_ACTION_TYPE_SHIN, idx);
		if(GetBusinessData(idx, B_TYPE) == 24) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 38, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 25) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 39, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 27) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 18, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 30) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 46, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 31) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 10, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 11) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 6, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 12) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 52, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 32) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 21, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 29) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 34, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 39) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 5, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 23) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 62, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		if(GetBusinessData(idx, B_TYPE) == 16) CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		
		if(GetBusinessData(idx, B_TYPE) == 17 || GetBusinessData(idx, B_TYPE) == 18 || GetBusinessData(idx, B_TYPE) == 19 || GetBusinessData(idx, B_TYPE) == 20 || GetBusinessData(idx, B_TYPE) == 21 || GetBusinessData(idx, B_TYPE) == 23 || GetBusinessData(idx, B_TYPE) == 43)
		{
			if(GetBusinessData(idx, B_TYPE) == 20)
			{
				CreatePickup(1083, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
				CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 55, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			}
			else if(GetBusinessData(idx, B_TYPE) == 21 || GetBusinessData(idx, B_TYPE) == 31) CreatePickup(18631, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			else CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		else if(GetBusinessData(idx, B_TYPE) == 37)
		{
			CreatePickup(1650, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 59, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
		}
		else if(GetBusinessData(idx, B_TYPE) == 44)
		{
			CreatePickup(1275, 25, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_TK_MENU, idx);
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 51, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);

			CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

			CreateDynamic3DTextLabel("Информация о\nтрудоустройствие",0xFFFFFFFF, GetBusinessData(idx, B_EXIT_POS_X), GetBusinessData(idx, B_EXIT_POS_Y), GetBusinessData(idx, B_EXIT_POS_Z) + 0.5,16.0);
		}
		else if(GetBusinessData(idx, B_TYPE) == 45)
		{
			CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 9, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
			CreatePickup(1274, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		else
		{
			CreatePickup(19132, 25, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		}
		biz_area[idx] = CreateDynamicSphere(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 3.0, 0, 0, -1);
	}
	g_business_loaded = rows;
	cache_delete(result);

	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(19132, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;

		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"Список товаров",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(10270, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			
			case BUSINESS_INTERIOR_ZAKUS:
			{
				CreatePickup(10270, 23, -1852.6345,1277.0465,1115.8447, -1, -1, idx);
			}
			case BUSINESS_INTERIOR_APTEKA:
			{
			    apteka_cp = CreateDynamicCP(-2279.0518,-1485.6300,1001.0000, 1.0);
			}
			
			case BUSINESS_INTERIOR_SHOP_GARDEN:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_GARDEN, idx);
				CreateDynamicCP(-1038.3335,687.4626,1001.0000, 1.5);
			}
			case BUSINESS_INTERIOR_AVTOZAP:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_AVTOZAP, idx);
				CreateDynamicCP(1555.7836,-2400.7815,1001.0000, 1.0);
			}
			case BUSINESS_INTERIOR_PARIK:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка аксессуаров",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1276, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BARBER, idx);
			}
			case BUSINESS_INTERIOR_CLUB, BUSINESS_INTERIOR_CASINO:
			{
				CreateDynamic3DTextLabel
				(
					"Меню бара:\n\n"\
					"{6699FF}1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{00CC66}9. Закуска\n"\
					"10. Сигара",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_REALTOR_BIZ:
			{
				g_business_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние бизнеса",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) - 1.0, 1.2, _, _, _, 10.0);

				CallLocalFunction("UpdateRealtorBizInfo", "");
			}
			case BUSINESS_INTERIOR_REALTOR_HOME:
			{
				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние недвижимости",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				CreatePickup(1273, 23, 158.4875, 745.8184, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);
				CreatePickup(1272, 23, 156.3270, 746.5958, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);

				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 0.7, _, _, _, 5.0);

				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_CLOTHING_SHOP:
			{
				CreatePickup(1275, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CLOTHING, idx);
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1277, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);

				CreateDynamic3DTextLabel("Услуги\n{FFFFFF}гост. комплекса", 0x3399FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CAR_MARKET:
			{
			//	CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK, idx);
			//	CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
			}
			case BUSINESS_INTERIOR_CELL_SALON:
			{
				CreateDynamic3DTextLabel
				(
					"Сотовый\n"\
					"салон\n"\
					"{FFD83D}Введите /buy",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CELL_SALON, idx);
			}
			case BUSINESS_INTERIOR_CAR_TUNING:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_TUN, idx);
				CreateDynamic3DTextLabel("Обслуживание\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_LABEL_POS_X), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 5.0);
			}
			case BUSINESS_INTERIOR_COMP_CLUB:
			{
			    CreatePickup(1314, 23, 652.1079,-15.6575,1001.4328, -1, PICKUP_ACTION_TYPE_BIZ_PC_GAME, idx);
				CreatePickup(1581, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_PC_CLUB, idx);
			}
			case BUSINESS_INTERIOR_TIR:
			{
				CreateDynamic3DTextLabel
				(
					"Покупка\n"\
					"Оружия",
					0x00CC00EE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_TIR, idx);
			}
			case BUSINESS_INTERIOR_BUY_GUN:
			{
				CreatePickup(348, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_GUN, idx);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();
	CreateAltHintBusiness();
	BizUpdate();

	printf("[Business]: Бизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	if(GetBusinessData(businessid, B_GANG) != 0)
	{
	    format(g_business[businessid][B_GANG_NAME], 64, GetFamilyData(GetBusinessData(businessid, B_GANG), F_NAME), 0);
	}
	else
	{
	    format(g_business[businessid][B_GANG_NAME], 36, "Нет", 0);
	}

	STRING_GLOBAL[0] = EOS;

	if(!IsBusinessOwned(businessid))
	{
		format
		(
			STRING_GLOBAL, sizeof STRING_GLOBAL,
			"%s\n"\
			"{66CC00}Бизнес продается\n"\
			"Используйте /buybiz\n"\
			"Цена: %s руб",
			GetBusinessData(businessid, B_NAME),
			formatInt(GetBusinessData(businessid, B_PRICE))
		);
	}
	else
	{
		if(GetBusinessData(businessid, B_TYPE) != 37)
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"%s\n"\
				"{FFFFFF}Владелец: {3399FF}%s\n"\
				"{FFFFFF}Крыша:{3399FF} %s\n",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_OWNER_NAME),
                g_business[businessid][B_GANG_NAME]
			);

			if(!GetBusinessData(businessid, B_LOCK_STATUS))
			{
				if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
				{
					if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_STO || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_DETEYLING || GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_CAR_WASH)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{66CC00}Цена услуг: {FF9900}%s руб\n", STRING_GLOBAL, formatInt(GetBusinessData(businessid, B_PROD_PRICE)));
					}
					else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s{66CC00}Вход: {FF9900}%s руб\n", STRING_GLOBAL, formatInt(GetBusinessData(businessid, B_ENTER_PRICE)));
				}
				else strcat(STRING_GLOBAL, "{66CC00}Вход свободный\n");
			}
			else strcat(STRING_GLOBAL, "{FF6600}Закрыто\n");
		}
		else
		{
			format
			(
				STRING_GLOBAL, sizeof STRING_GLOBAL,
				"%s\n"\
				"{FFFFFF}Владелец: {3399FF}%s\n"\
				"{FFFFFF}Крыша:{3399FF} %s\n"\
				"{FFFFFF}Цена за литр:\n"\
				"{FFFFFF}A-92 {FF8C00}%s руб\n"\
				"{FFFFFF}A-95 {FF8C00}%s руб\n"\
				"{FFFFFF}A-98 {FF8C00}%s руб\n"\
				"{FFFFFF}DT {FF8C00}%s руб\n",
				GetBusinessData(businessid, B_NAME),
				GetBusinessData(businessid, B_OWNER_NAME),
				g_business[businessid][B_GANG_NAME],
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE)),
				formatInt(GetBusinessData(businessid, B_PROD_PRICE))
			);

			if(!GetBusinessData(businessid, B_LOCK_STATUS))
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS) > 0) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{66CC00}Бизнес открыт\n", STRING_GLOBAL);
				else strcat(STRING_GLOBAL, "{66CC00}Бизнес открыт\n");
			}
			else strcat(STRING_GLOBAL, "{FF6600}Закрыто\n");
		}
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0xFFFF00FF, STRING_GLOBAL);
}

public: UpdateRealtorBizInfo()
{
	new count = 0;
	new fmt_str[128];

	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;

		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}

	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние бизнеса\n"\
		"(обновляется каждый час)\n\n"\
		"{FF6633}Куплено бизнесов: %d\n"\
		"{99FF33}Свободно бизнесов: %d",
		g_business_loaded - count,
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xCCFF66FF, fmt_str);
}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type)
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;

		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				pos_x = GetHouseData(index, H_POS_X);
				pos_y = GetHouseData(index, H_POS_Y);
				pos_z = GetHouseData(index, H_POS_Z);

				exit_x = GetHouseData(index, H_EXIT_POS_X);
				exit_y = GetHouseData(index, H_EXIT_POS_Y);
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);

				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);

		cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);

		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);

		//HidePlayerWaitPanel(playerid);
		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public: OnSpeedTimerUp()
{
	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerSpeedTimer", "i", playerid);
	}
}

public: OnSecondTimer()
{
	new minute;
	gettime(_, minute);

	new time = gettime();
	gettime(tmphour, tmpminute, tmpsecond);//узнаём время.
	new year,month,day,minuite,second,hour;
   	getdate(year,month,day);
   	gettime(hour,minuite,second);

	if(!minuite && !second)
   	{
   	    SetWorldTime(hour);
        OnPayDay();
        Contraband_Notify();
	}
	if(!minute)
	{
		if(GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_MINUTES) >= 1)
		{
			OnMinuteTimer(bool: GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_DAYS));
		}
	}
	if(GarbageTimer > 0)
	{
		GarbageTimer--;
		if(GarbageTimer <= 0)
		{
			for(new i; i < MAX_GARBAGE_PLACE; i++)
			{
				if(e_Garbage[i][eGarbageState] == true) continue;
				e_Garbage[i][eGarbageState] = true;
			}
			GarbageTimer = 600;
		}
	}
	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid);
	}

	for(new carriageid; carriageid < sizeof miner_carriage; carriageid ++)
		MinerCarriageUpdate(carriageid);

	for(new i; i < sizeof(diving_chest); i++)
	{
		if(diving_chest[i][E_TIMER] != -1) diving_chest[i][E_TIMER]--;
		if(diving_chest[i][E_TIMER] == 0)
		{
			diving_chest[i][E_OBJECT] = CreateDynamicObject(16500, diving_chest[i][E_POS][0], diving_chest[i][E_POS][1], diving_chest[i][E_POS][2], 0.0, 0.0, 0.0);
			diving_chest[i][E_LABEL] = CreateDynamic3DTextLabel("Сундук", 0xFF7A00FF, diving_chest[i][E_POS][0], diving_chest[i][E_POS][1], diving_chest[i][E_POS][2], 5.0);
			diving_chest[i][E_INTERACTION] = CreateDynamicSphere(diving_chest[i][E_POS][0], diving_chest[i][E_POS][1], diving_chest[i][E_POS][2], 4.0, -1, -1);
			diving_chest[i][E_STATUS] = 1;
			diving_chest[i][E_TIMER] = -1;
		}
	}
	if(g_mine_elevator[MS_TIME_STATUS] <= 0)
	{
		OnMineTimer();
	}
	else
	{
		g_mine_elevator[MS_TIME_STATUS]--;
	}
	
	if(contraband_time_spawn != -1)
	{
		if(contraband_time_spawn < gettime())
		{
			if(contraband_status == 1)
			{
				Contraband_Spawn();
				contraband_time_spawn = -1;
			}
		}
	}
	if(contraband_time_destroy != -1)
	{
		if(contraband_time_destroy < gettime())
		{
			Contraband_Destroy();
		}
	}

	BadEngine();

	FermerRepositoryUpdate();
	FermerMelnicaUpdate();

	timeRaffleShopping();

	BlackMarket();
	Dump();
	UpdateDiceTrow();
	Containers();

	if(minuite == 06 && !second || minuite == 21 && !second || minuite == 36 && !second || minuite == 51 && !second) InformationServers();
	
	if(minuite == 31 && !second) CreateProdsOrders(), CreateFuelOrders();
	
	if(g_drag_racing_time > 0)
	{
		g_drag_racing_time--;

		if(g_drag_racing_time > 0)
		{
			if(g_drag_racing_time == 10) GameText(g_drag_racing[0][E_PLAYER], "~r~5", 2000, 0);
			if(g_drag_racing_time == 8) GameText(g_drag_racing[0][E_PLAYER], "~r~4", 2000, 0);
			if(g_drag_racing_time == 6) GameText(g_drag_racing[0][E_PLAYER], "~r~3", 2000, 0);
			if(g_drag_racing_time == 4) GameText(g_drag_racing[0][E_PLAYER], "~r~2", 2000, 0);
			if(g_drag_racing_time == 2) GameText(g_drag_racing[0][E_PLAYER], "~r~1", 2000, 0);

			if(g_drag_racing_time == 10) GameText(g_drag_racing[1][E_PLAYER], "~r~5", 2000, 0);
			if(g_drag_racing_time == 8) GameText(g_drag_racing[1][E_PLAYER], "~r~4", 2000, 0);
			if(g_drag_racing_time == 6) GameText(g_drag_racing[1][E_PLAYER], "~r~3", 2000, 0);
			if(g_drag_racing_time == 4) GameText(g_drag_racing[1][E_PLAYER], "~r~2", 2000, 0);
			if(g_drag_racing_time == 2) GameText(g_drag_racing[1][E_PLAYER], "~r~1", 2000, 0);

			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]), V_ENGINE, false);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]), V_ENGINE, false);
		}
		if(g_drag_racing_time == 0)
		{
			GameText(g_drag_racing[0][E_PLAYER], "~g~Поехали", 2000, 1);
			GameText(g_drag_racing[1][E_PLAYER], "~g~Поехали", 2000, 1);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[0][E_PLAYER]), V_ENGINE, true);
			SetVehicleParam(GetPlayerVehicleID(g_drag_racing[1][E_PLAYER]), V_ENGINE, true);
			g_drag_racing_status[g_drag_racing[0][E_PLAYER]] = 0;
			g_drag_racing_status[g_drag_racing[1][E_PLAYER]] = 0;
		}
	}

	if(timervetr > 0) timervetr--;
	if(timervetr <= 0) VetrMove();

	if(timerneft > 0) timerneft--;
	if(timerneft <= 0)
	{
		if(status_neft == 0) status_nefte = 0;
		if(status_neft == 1) status_nefte = 1;
		if(status_neft == 2) status_nefte = 2;
		if(status_neft == 3) status_nefte = 3;
		NeftMove();
	}	

	for(new i; i < g_neft_loaded; i ++)
	{
		if(GetNeftData(i, N_OWNER_ID) != 0)
		{
			if(GetNeftData(i, N_WORK_STATUS) == 0)
			{
				if(neftcreatetime[i] <= 0)
				{
					SetNeftData(i, N_WORK_STATUS, 1);
					CallLocalFunction("UpdateNeftLabel", "i", i);
					if(IsValidDynamicObject(neftobj[i])) DestroyDynamicObject(neftobj[i]);
					neftobj1[i] = CreateDynamicObject(15831, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 2, GetNeftData(i, N_POS_Z) -0.955624,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj2[i] = CreateDynamicObject(15832, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 6.52, GetNeftData(i, N_POS_Z) + 5.10438,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj3[i] = CreateDynamicObject(15834, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) - 0.74, GetNeftData(i, N_POS_Z) + 12.6144,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj4[i] = CreateDynamicObject(15833, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) + 7.2, GetNeftData(i, N_POS_Z) + 12.2344,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
					neftobj5[i] = CreateDynamicObject(15835, GetNeftData(i, N_POS_X) + 2, GetNeftData(i, N_POS_Y) - 9.14, GetNeftData(i, N_POS_Z) + 13.8844,   0.00000, 0.00000, GetNeftData(i, N_POS_RZ));
				
					new query[300];
					format(query, sizeof query, "UPDATE neftenasos SET work=%d WHERE id=%d", GetNeftData(i, N_WORK_STATUS), GetNeftData(i, N_SQL_ID));
					mysql_query(mysql, query, false);
				}
				else neftcreatetime[i]--, CallLocalFunction("UpdateNeftLabel", "i", i);
			}
		}
	}
	if(g_war[W_STATUS] && g_war[W_TIME] > 0)
	{
		-- g_war[W_TIME];

		UpdateCaptureTextDraw();

		if(g_war[W_TIME] == 0)
		{
			foreach(new i: Player)
			{
				if(GetPlayerFamily(i) != 0) CEF_HIDE(i, "Capture");
			}
			EndWar();
		}
	}
}

public: OnMinuteTimer(bool: new_day)
{
	new time;
	new hour, minute, second;

	time = gettime();
	gettime(hour, minute, second);

	if(new_day)
	{
		SetTimer("ClearBanList", 15_000, false);
	}

	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);

	g_last_m_timer_time = time;
}

public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnPayDay()
{
	new fmt_str[512];
	new level, cur_time;
	new hour, minute, second;

	cur_time = gettime();
	gettime(hour, minute, second);

	SetWorldTime(hour);

	format(fmt_str, sizeof fmt_str, "Текущее время: {3399FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);
	
	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid) && IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			SendClientMessage(playerid, 0xFFFFFFFF, " ");

			level = GetPlayerLevel(playerid);
			if(!IsPlayerAFK(playerid) || GetPlayerAFKTime(playerid) < 60)
			{
				if(ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES) >= 5)
				{
					if(IsPlayerAdminLevel(playerid) > 0 && 12 > IsPlayerAdminLevel(playerid))
					{
						format(fmt_str, sizeof fmt_str, "Админ зарплата: {66CC00}%s руб {FFFFFF}и {"#cGold"}25.00 донат-монет", formatInt(2500000 * IsPlayerAdminLevel(playerid)));
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

						ProcessPlayerCredit(playerid, 25, "Админ зарплата", true, true);

						format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), 2500000 * IsPlayerAdminLevel(playerid)));
					}

					new team_id = GetPlayerTeamEx(playerid);

                    if(team_id){
                        new team_wage = 0;
                        new rank = GetPlayerJob(playerid);

                        if(team_id > 0 && rank > 0) team_wage = rank_wages[team_id - 1][rank - 1];

                        AddPlayerData(playerid, P_WAGE, +, team_wage);
                    }

					format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), GetPlayerData(playerid, P_WAGE)));

					BankLog(playerid, GetPlayerData(playerid, P_WAGE), "Зарплата");

					format(fmt_str, sizeof fmt_str, "Зарплата: {66CC00}%s руб", formatInt(GetPlayerData(playerid, P_WAGE)));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {00CC00}%s руб", formatStr(GetPlayerBankMoney(playerid)));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

					SetPlayerData(playerid, P_WAGE, 0);

					if(GetPlayerData(playerid, P_SUSPECT) != 0)
					{
						AddPlayerData(playerid, P_SUSPECT, -, 1);
						SetPlayerSuspectInit(playerid);
						UpdatePlayerDatabaseInt(playerid, "suspect", GetPlayerData(playerid, P_SUSPECT));
					}
					GivePlayerExp(playerid, 1 * g_xbonus);

					OnBattlePass_Perfomance(playerid, 8, 1);

					AddPlayerAchiv(playerid, 12);
				}
				else SendClientMessage(playerid, 0xFFBB00FF, "Для получения зарплаты необходимо находиться в игре минимум 5 минут");
			}
			else SendClientMessage(playerid, 0xFFBB00FF, "Вы не должны находиться на паузе для получения зарплаты");

			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			if(GetPlayerLevel(playerid) > level)
			{
				SendClientMessage(playerid, 0x3399FFFF, "Поздравляем! Ваш уровень повышен");
				switch(GetPlayerLevel(playerid))
				{
					case 2:
					{
						SendClientMessage(playerid, 0x66CC00FF, "Вы начали второй год своей жизни в нашей стране");
						SendClientMessage(playerid, 0x66CC00FF, "Доступна новая работа водителя автобуса");
					}
				}
			}
			format(fmt_str, sizeof fmt_str, "UPDATE accounts_canvasdev SET level=%i,exp=%i,wage=0,last_login=%i,game_for_hour=0 WHERE id=%i LIMIT 1", GetPlayerLevel(playerid), GetPlayerExp(playerid), cur_time, GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);
			
			new fortune_wheel_time = ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS);

			if(fortune_wheel_time >= 4 && GetPlayerData(playerid, P_FORTUNE_WHEEL) == 0)
			{
				SetPlayerData(playerid, P_FORTUNE_WHEEL, 1);
				UpdatePlayerDatabaseInt(playerid, "ruletka", 1);

				SendClientMessage(playerid, 0xFFCD00FF, "Вы отыграли 4 часа и получили бесплатный прокрут колеса фортуны в казино");
			}
		}
		SetPlayerData(playerid, P_GAME_FOR_HOUR, 0);
	}
	if(hour == 10 || hour == 11 || hour == 12 || hour == 13 || hour == 14 || hour == 15 || hour == 16 || hour == 17 || hour == 18 || hour == 19 || hour == 20 || hour == 21 || hour == 22) OnCreateSvalka();
	else 
	{
		new random_svalka = random(23);
		
		if(hour == random_svalka) OnCreateSvalka();
	}

	if(hour == 10 || hour == 11 || hour == 12 || hour == 13 || hour == 14 || hour == 15 || hour == 16 || hour == 17 || hour == 18 || hour == 19 || hour == 20 || hour == 21 || hour == 22) AddContainers(8);

	if(hour == 19) SellDebtorsProperty();
	if(hour == 18) OnAuctionResult();

	if(hour == 0) DailyClaimReward();
	
	if(hour == 6)
	{
		SendClientMessageToAll(COLOR_RED, "{FF0000}Внимание!");
		SendClientMessageToAll(0xFAAC58FF, "Через 2 минут(ы) будет произведена перезагрузка сервера!");
		SendClientMessageToAll(COLOR_RED, "{FF0000}Внимание!");
		SendClientMessageToAll(0xFAAC58FF, "Через 2 минут(ы) будет произведена перезагрузка сервера!");

		foreach(new i: Player)
		{
			if(!IsPlayerLogged(i)) continue;

			new fmt_text[148];
			format(fmt_text, sizeof fmt_text, "[\"До перезапуска сервера\",%d]", 120);
			CEF_CREATE(i, 2, 4, "InformationTimer", fmt_text);

			GameText(i, "~w~Сервер будет~r~перезагружен~n~в течении 2 минут", 4000, 0);
		}

		SetTimer("ServerRestart", 2000*60, false);
	}
	if(hour == 0)
	{
		new query[144];
	 	for(new i; i < g_kiosk_loaded; i ++)
		{
		    if(GetKioskData(i, K_OWNER_ID) != 0)
		    {
		        SetKioskData(i, K_RENT_DATE, GetKioskData(i, K_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE kiosk SET rent=%d WHERE id='%d'",GetKioskData(i, K_RENT_DATE), GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		for(new i=0; i < g_garden_loaded; i ++)
		{
		    if(GetGardenData(i, G_OWNER_ID) != 0)
		    {
		        SetGardenData(i, G_RENT_DATE, GetGardenData(i, G_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE gardens SET rent=%d WHERE id='%d'",GetGardenData(i, G_RENT_DATE), GetGardenData(i, G_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		for(new i=0; i < g_neft_loaded; i ++)
		{
		    if(GetNeftData(i, N_OWNER_ID) != 0)
		    {
		        SetNeftData(i, N_RENT_DATE, GetNeftData(i, N_RENT_DATE) - 1);
		        format(query, sizeof query, "UPDATE neftenasos SET rent=%d WHERE id='%d'",GetNeftData(i, N_RENT_DATE), GetNeftData(i, N_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
	}

	#if defined RAND_WEATHER
	SetTimer("SetRandomWeather", (random(60) + 60) * 1000, false);
	#endif

	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");

	g_last_pay_day_time = cur_time;
	return 1;
}

stock SpeedVehicle(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
        GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 180.3;
    return floatround(ST[3]);
}

public: OnPlayerSpeedTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		if(IsPlayerDriver(playerid))
		{
			new speed = SpeedVehicle(playerid);
			new vehicleid = GetPlayerVehicleID(playerid);
			new index;
			new indexs = GetVehicleData(vehicleid, V_ACTION_ID);

			if(g_player_trailer_status[playerid] == 1)
			{
				if(IsTrailerAttachedToVehicle(vehicleid))
				{
					if(g_player_trailer_type[playerid] == 1) SCM(playerid, 0xFFFFFFFF, "Вы прикрепили за собой {dc9d3b}прицеп для груза{FFFFFF}. Для работы используйте команду: {dc9d3b}/bizlist");
					if(g_player_trailer_type[playerid] == 2) SCM(playerid, 0xFFFFFFFF, "Вы прикрепили за собой {dc9d3b}цистерну для топлива{FFFFFF}. Для работы используйте команду: {dc9d3b}/fuellist");
					g_player_trailer_status[playerid] = 2;
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL), Float: health;

				GetVehicleHealth(vehicleid, health);

				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 43200.0));

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameText(playerid, "~r~Недостаточно топлива", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.003);
				}

				SetVehicleData(vehicleid, V_GRYAZ, GetVehicleData(vehicleid, V_GRYAZ) + (float(speed) / 21600.0));

				if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) == 100)
				{
				    SetVehicleData(vehicleid, V_GRYAZ, 0.0);
				    SetVehicleData(vehicleid, V_IZNOS, GetVehicleData(vehicleid, V_IZNOS) + 1);
					if(GetVehicleData(vehicleid, V_IZNOS) == 101)
					{
					    SetVehicleData(vehicleid, V_IZNOS, 100);
					}
				}
                if(IsACarshCar(vehicleid))
				{
				    SetCarshCarData(index, OC_IZNOS, GetCarshCarData(index, OC_IZNOS) + (float(speed) / 7200.0));
					SaveCarsharingCar(vehicleid);
				}

				new query[148];

				format(query, sizeof query, "interface('Hud').speedometer.fuel = %d", floatround(GetVehicleData(vehicleid, V_FUEL)));
				CEF_CREATE(playerid, 1, 2, query);

   				format(query, sizeof query, "interface('Hud').setMileage(%f)", GetVehicleData(vehicleid, V_MILEAGE));
				CEF_CREATE(playerid, 1, 2, query);



				if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) < 10) format(query, sizeof query, "interface('Hud').speedometer.params.wash = 0.0%d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				else if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) >= 10 && floatround(GetVehicleData(vehicleid, V_GRYAZ)) < 100) format(query, sizeof query, "interface('Hud').speedometer.params.wash = 0.%d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				else if(floatround(GetVehicleData(vehicleid, V_GRYAZ)) >= 100) format(query, sizeof query, "interface('Hud').speedometer.params.wash = %d", floatround(GetVehicleData(vehicleid, V_GRYAZ)));
				CEF_CREATE(playerid, 1, 2, query);
              
			    if(IsAOwnableCar(vehicleid))
				{
                    if(GetOwnableCarData(indexs, OC_KEY_IN) == 1) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.key = 1");
				    if(GetOwnableCarData(indexs, OC_KEY_IN) == 0) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.key = 0");
				}
				else CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.key = 1");
			
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_OFF) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.lights = 0");
				if(GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.lights = 1");

				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.doors = 1");
				if(GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_OFF) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.doors = 0");

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.temperature = 1");
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_OFF) CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.temperature = 0");
			}
		}
	}
	return 1;
}

#include "systems/progress_bar.inc"

public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		if(Timer_Oxrana1[playerid] > 0) 
		{
			Timer_Oxrana1[playerid] --;
			if(Timer_Oxrana1[playerid] == 0) 
			{
				Timer_Oxrana1[playerid] = -1;
				CEF_CREATE(playerid, 1, 4, "Hacking");
				hackinghouse[playerid][1] = 1;
			}
		}
		if(Timer_Oxrana2[playerid] > 0) 
		{
			Timer_Oxrana2[playerid] --;
			if(Timer_Oxrana2[playerid] == 0) 
			{
				Timer_Oxrana2[playerid] = -1;
				CEF_CREATE(playerid, 1, 4, "Hacking");
				hackinghouse[playerid][2] = 1;
			}
		}
		if(Timer_Oxrana3[playerid] > 0) 
		{
			Timer_Oxrana3[playerid] --;
			if(Timer_Oxrana3[playerid] == 0) 
			{
				Timer_Oxrana3[playerid] = -1;
				CEF_CREATE(playerid, 1, 4, "Hacking");
				hackinghouse[playerid][3] = 1;
			}
		}
		if(Timer_CentralMansionCapture[playerid] > 0) 
		{
			Timer_CentralMansionCapture[playerid] --;
			if(Timer_CentralMansionCapture[playerid] == 0) 
			{
				CompleteZaxvat(playerid);
			}
		}
		if(Timer_WestMansionCapture[playerid] > 0) 
		{
			Timer_WestMansionCapture[playerid] --;
			if(Timer_WestMansionCapture[playerid] == 0) 
			{
				CompleteZaxvat(playerid);
			}
		}
		if(Timer_NorthMansionCapture[playerid] > 0) 
		{
			Timer_NorthMansionCapture[playerid] --;
			if(Timer_NorthMansionCapture[playerid] == 0) 
			{
				CompleteZaxvat(playerid);
			}
		}
		if(Timer_PelaBaseCapture[playerid] > 0) 
		{
			Timer_PelaBaseCapture[playerid] --;
			if(Timer_PelaBaseCapture[playerid] == 0) 
			{
				CompleteZaxvat(playerid);
			}
		}
		if(!IsPlayerAFK(playerid))
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				OnFishPlayerTimer(playerid);

				BlackJack_Timer(playerid);

				IsVehicleIdHouse(playerid);
			}
			if(GetPlayerData(playerid, P_RENT_MOPED) != INVALID_VEHICLE_ID)
			{
				if((GetPVarInt(playerid, "rent_moped_time") - gettime()) / 60 < 1)
				{
					DestroyVehicle(GetPlayerData(playerid, P_RENT_MOPED));

					SetPlayerData(playerid, P_RENT_MOPED, INVALID_VEHICLE_ID);
					SCM(playerid, 0xe3bb42FF, "Срок действия Вашего транспорта истёк или он был уничтожен.");
				}
			}

			if(detector[playerid] == 1) Garbage:OnGarbageTimer(playerid);

			if(g_player_load_promo[playerid] > 0) GetPlayerTimePromo(playerid);
			if(progress_bar_time[playerid] != 0) progress_bar_time[playerid]--;

			if(g_player_order_time[playerid][0] != 0)
			{
				g_player_order_time[playerid][0]--;

				if(g_player_order_time[playerid][0] == 0)
				{
					TogglePlayerControllable(playerid,true);

					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + g_player_order_count[playerid]);

					SCMF(playerid, 0xFFFFFFFF, "Загрузка окончена, Вы поместили в грузовой отсек {e8e32e}%d {FFFFFF}ед. товара", g_player_order_count[playerid]);
					SCM(playerid, 0xFFFFFFFF, "Отправляйтесь к {ecc695}предприятию{FFFFFF}, которое отмечено {cf7776}красной меткой {FFFFFF}на карте");
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					g_player_order_count[playerid] = 0;

					new order_id = GetPlayerData(playerid, P_ORDER);
					new biz_id = GetOrderData(order_id, O_COMPANY_ID);
					
					DisablePlayerRaceCheckpoint(playerid);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetBusinessData(biz_id, B_EXIT_POS_X),
						GetBusinessData(biz_id, B_EXIT_POS_Y),
						GetBusinessData(biz_id, B_EXIT_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER
					);
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}

			if(g_player_order_time[playerid][1] != 0)
			{
				g_player_order_time[playerid][1]--;

				if(g_player_order_time[playerid][1] == 0)
				{
					TogglePlayerControllable(playerid,true);

					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - g_player_order_count[playerid]);

					SCMF(playerid, 0xFFFFFFFF, "Разгрузка окончена, Вы разгрузили с грузового отсека {e8e32e}%d {FFFFFF}ед. товара", g_player_order_count[playerid]);
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					g_player_order_count[playerid] = 0;

					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(g_player_order_time[playerid][2] != 0)
			{
				g_player_order_time[playerid][2]--;

				if(g_player_order_time[playerid][2] == 0)
				{
					TogglePlayerControllable(playerid,true);

					new order_id = GetPlayerData(playerid, P_ORDER);
					new biz_id = GetOrderData(order_id, O_COMPANY_ID);

					if(GetPlayerJobLoadItems(playerid) < GetOrderData(order_id, O_AMOUNT))
					{
						SetOrderData(order_id, O_AMOUNT, GetOrderData(order_id, O_AMOUNT) - GetPlayerJobLoadItems(playerid));
						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. товара предприятию, осталось {abc77a}%d ед.", GetPlayerJobLoadItems(playerid), GetOrderData(order_id, O_AMOUNT));

						SendClientMessage(playerid, 0xFFFFFFFF, " Загрузите необходимое количество {ddbe86}товара {FFFFFF}на заводе ({d6964e}(Отмечено красной точкой){FFFFFF})");

						DisablePlayerRaceCheckpoint(playerid);

						SetPlayerRaceCheckpoint
						(
							playerid,
							2,
							-1044.0236,
							2203.1716,
							38.1194,
							0.0,
							0.0,
							0.0,
							4.0,
							RCP_ACTION_TYPE_ORDER_INVITE
						);

						AddBusinessData(biz_id, B_PRODS, +, GetPlayerJobLoadItems(playerid));
						SetPlayerJobLoadItems(playerid, 0);
					}
					else
					{
						DisablePlayerRaceCheckpoint(playerid);
						
						SetPlayerData(playerid, P_ORDER, -1);

						new price = (GetOrderData(order_id, O_PRICE) / 100) * 25;

						AddBusinessProfit(playerid, GetPlayerData(playerid, P_TK_JOB), price, 0);

						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. товара предприятию, и получили за работу {abc77a}%s {FFFFFF}руб.", GetOrderData(order_id, O_AMOUNT), formatInt(GetOrderData(order_id, O_PRICE) - price));

						ModifyCashBalance(playerid, GetOrderData(order_id, O_PRICE) - price, "Зарплата дальнобойщика");
						GiveRandCase(playerid);

						AddPlayerAchiv(playerid, 14);

						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetOrderData(order_id, O_AMOUNT));

						AddBusinessData(biz_id, B_PRODS, +, GetOrderData(order_id, O_AMOUNT));
						DeleteOrder(order_id);

					}
					OnBattlePass_Perfomance(playerid, 17, 1);

					SetTrailerHandling(playerid, g_player_trailer[playerid]);

					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					new query[64];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}

			if(g_player_order_time_fuel[playerid][0] != 0)//АЗС
			{
				g_player_order_time_fuel[playerid][0]--;

				if(g_player_order_time_fuel[playerid][0] == 0)
				{
					TogglePlayerControllable(playerid,true);

					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + g_player_order_count[playerid]);

					SCMF(playerid, 0xFFFFFFFF, "Загрузка окончена, Вы поместили в грузовой отсек {e8e32e}%d {FFFFFF}ед. товара", g_player_order_count[playerid]);
					SCM(playerid, 0xFFFFFFFF, "Отправляйтесь к {ecc695}предприятию{FFFFFF}, которое отмечено {cf7776}красной меткой {FFFFFF}на карте");
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					g_player_order_count[playerid] = 0;

					new order_id = GetPlayerData(playerid, P_FUELORDER);
					new biz_id = GetFuelOrderData(order_id, F_COMPANY_ID);
					
					DisablePlayerRaceCheckpoint(playerid);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						GetBusinessData(biz_id, B_POS_X),
						GetBusinessData(biz_id, B_POS_Y),
						GetBusinessData(biz_id, B_POS_Z),
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_ORDER2
					);
					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}

			if(g_player_order_time_fuel[playerid][1] != 0)
			{
				g_player_order_time_fuel[playerid][1]--;

				if(g_player_order_time_fuel[playerid][1] == 0)
				{
					TogglePlayerControllable(playerid,true);

					SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - g_player_order_count[playerid]);

					SCMF(playerid, 0xFFFFFFFF, "Разгрузка окончена, Вы разгрузили с грузового отсека {e8e32e}%d {FFFFFF}ед. топлива", g_player_order_count[playerid]);
					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					g_player_order_count[playerid] = 0;

					SetTrailerHandling(playerid, g_player_trailer[playerid]);
				}
			}
			if(g_player_order_time_fuel[playerid][2] != 0)
			{
				g_player_order_time_fuel[playerid][2]--;

				if(g_player_order_time_fuel[playerid][2] == 0)
				{
					TogglePlayerControllable(playerid,true);

					new order_id = GetPlayerData(playerid, P_FUELORDER);
					new biz_id = GetFuelOrderData(order_id, F_COMPANY_ID);

					if(GetPlayerJobLoadItems(playerid) < GetFuelOrderData(order_id, F_AMOUNT))
					{
						SetFuelOrderData(order_id, F_AMOUNT, GetFuelOrderData(order_id, F_AMOUNT) - GetPlayerJobLoadItems(playerid));
						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. топлива предприятию, осталось {abc77a}%d ед.", GetPlayerJobLoadItems(playerid), GetFuelOrderData(order_id, F_AMOUNT));

						//SendClientMessage(playerid, 0xFFFFFFFF, " Загрузите необходимое количество {ddbe86}товара {FFFFFF}на заводе ({d6964e}(Отмечено красной точкой){FFFFFF})");

						DisablePlayerRaceCheckpoint(playerid);

						SetPlayerRaceCheckpoint
				        (
					        playerid,
					        2,
				            2649.1155,
					        634.5281,
					        14.1951,
					        0.0,
					        0.0,
					        0.0,
					        4.0,
					        RCP_ACTION_TYPE_ORDER2_INVITE
				        );

						AddBusinessData(biz_id, B_PRODS, +, GetPlayerJobLoadItems(playerid));
						SetPlayerJobLoadItems(playerid, 0);
					}
					else
					{
						DisablePlayerRaceCheckpoint(playerid);
						
						SetPlayerData(playerid, P_FUELORDER, -1);

						new price = (GetFuelOrderData(order_id, F_PRICE) / 100) * 25;

						AddBusinessProfit(playerid, GetPlayerData(playerid, P_TK_JOB), price, 0);

						SCMF(playerid, 0xFFFFFFFF, "Вы доставили {abc77a}%d {FFFFFF}ед. топлива предприятию, и получили за работу {abc77a}%s {FFFFFF}руб.", GetFuelOrderData(order_id, F_AMOUNT), formatInt(GetFuelOrderData(order_id, F_PRICE) - price));

						ModifyCashBalance(playerid, GetFuelOrderData(order_id, F_PRICE) - price, "Зарплата дальнобойщика");
						GiveRandCase(playerid);

						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) - GetFuelOrderData(order_id, F_AMOUNT));

						AddBusinessData(biz_id, B_PRODS, +, GetFuelOrderData(order_id, F_AMOUNT));
						DeleteFuelOrder(order_id);
					}
					OnBattlePass_Perfomance(playerid, 17, 1);

					SetTrailerHandling(playerid, g_player_trailer[playerid]);

					SCMF(playerid, 0xe8e32eFF, "Текущее состояние груза: %d ед.", GetPlayerJobLoadItems(playerid));

					new query[64];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
			if(inventory_kd_move[playerid] != 0) inventory_kd_move[playerid]--;
			if(inventory_kd_drop[playerid] != 0) inventory_kd_drop[playerid]--;
			if(inventory_kd_take[playerid] != 0) inventory_kd_take[playerid]--;
			if(containers_block_time[playerid] != 0) containers_block_time[playerid]--;
			if(contraband_block_time[playerid] != 0) contraband_block_time[playerid]--;
			if(garden_kd[playerid] != 0) garden_kd[playerid]--;
			if(item_store_kd[playerid] != 0) item_store_kd[playerid]--;
			if(WeaponShop_Menu_Kd[playerid] != 0) WeaponShop_Menu_Kd[playerid]--;
			if(employment_kd[playerid] != 0) employment_kd[playerid]--;

			if(g_battlepass_time_bonus[playerid] > 0)
			{
				g_battlepass_time_bonus[playerid]--;

				if(g_battlepass_time_bonus[playerid] == 0)
				{
					g_battlepass_time_bonus[playerid]--;

					AddPlayerData(playerid, P_BP_EXP, +, 10);
					OnBattlePass_StatusLevel(playerid);
					SCM(playerid, 0xEEC702FF, "Вы получили {FFFFFF}+ 10 очк. {EEC702}боевого пропуска за отыгранное время в игре");
				}
			}

			if(DailyreWards_Time[playerid] > 0) DailyreWards_Time[playerid]--;
			else if(DailyreWards_Time[playerid] == 0)
			{
				DailyreWards_Time[playerid]--;
				
				SCM(playerid, 0xF2F6DFFF, "* Вы получили возможность открыть ячейку в ежедневных наградах за отыгранное время.");
				AddPlayerData(playerid, P_WARDS_PRIZE, +, 1);
	            UpdatePlayerDatabaseInt(playerid, "wards_prize", GetPlayerData(playerid, P_WARDS_PRIZE));

                if(GetPlayerData(playerid, P_DAILY_CLAIM_7) != 7)
				{
				    AddPlayerData(playerid, P_DAILY_CLAIM_7, +, 1);
				    UpdatePlayerDatabaseInt(playerid, "daily_claim_7", GetPlayerData(playerid, P_DAILY_CLAIM_7));
				}
                if(GetPlayerData(playerid, P_DAILY_CLAIM_14) != 14)
				{
				    AddPlayerData(playerid, P_DAILY_CLAIM_14, +, 1);
				    UpdatePlayerDatabaseInt(playerid, "daily_claim_14", GetPlayerData(playerid, P_DAILY_CLAIM_14));
				}
				if(GetPlayerData(playerid, P_DAILY_CLAIM_21) != 21)
				{
				    AddPlayerData(playerid, P_DAILY_CLAIM_21, +, 1);
				    UpdatePlayerDatabaseInt(playerid, "daily_claim_21", GetPlayerData(playerid, P_DAILY_CLAIM_21));
				}
				if(GetPlayerData(playerid, P_DAILY_CLAIM_28) != 28)
				{
				    AddPlayerData(playerid, P_DAILY_CLAIM_28, +, 1);
				    UpdatePlayerDatabaseInt(playerid, "daily_claim_28", GetPlayerData(playerid, P_DAILY_CLAIM_28));
				}

				if(GetPlayerData(playerid, P_DAILY_CLAIM_7) == 7 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) == 0)
				{
					new caseName[128], query[94];
                    GetCaseNameById(GetPlayerData(playerid, P_DAILY_CASE_7_ID), caseName);

                    format(query, sizeof query, "%s", caseName),
			        GivePlayerMyPrizes(playerid, query, 21, GetPlayerData(playerid, P_DAILY_CASE_7_ID), 0, 1, 0);

					AddPlayerData(playerid, P_DAILY_CLAIM_COMPLETE, +, 1);
	                UpdatePlayerDatabaseInt(playerid, "daily_complete", GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE));
				}
				if(GetPlayerData(playerid, P_DAILY_CLAIM_14) == 14 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) == 1)
				{
					new caseName[128], query[94];
                    GetCaseNameById(GetPlayerData(playerid, P_DAILY_CASE_14_ID), caseName);

                    format(query, sizeof query, "%s", caseName),
			        GivePlayerMyPrizes(playerid, query, 21, GetPlayerData(playerid, P_DAILY_CASE_14_ID), 0, 1, 0);

					AddPlayerData(playerid, P_DAILY_CLAIM_COMPLETE, +, 1);
	                UpdatePlayerDatabaseInt(playerid, "daily_complete", GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE));
				}
				if(GetPlayerData(playerid, P_DAILY_CLAIM_21) == 21 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) == 2)
				{
					new caseName[128], query[94];
                    GetCaseNameById(GetPlayerData(playerid, P_DAILY_CASE_21_ID), caseName);

                    format(query, sizeof query, "%s", caseName),
			        GivePlayerMyPrizes(playerid, query, 21, GetPlayerData(playerid, P_DAILY_CASE_21_ID), 0, 1, 0);

					AddPlayerData(playerid, P_DAILY_CLAIM_COMPLETE, +, 1);
	                UpdatePlayerDatabaseInt(playerid, "daily_complete", GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE));
				}
				if(GetPlayerData(playerid, P_DAILY_CLAIM_28) == 28 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) == 3)
				{
					new caseName[128], query[94];
                    GetCaseNameById(GetPlayerData(playerid, P_DAILY_CASE_28_ID), caseName);

                    format(query, sizeof query, "%s", caseName),
			        GivePlayerMyPrizes(playerid, query, 21, GetPlayerData(playerid, P_DAILY_CASE_21_ID), 0, 1, 0);

					AddPlayerData(playerid, P_DAILY_CLAIM_COMPLETE, +, 1);
	                UpdatePlayerDatabaseInt(playerid, "daily_complete", GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE));
				}

				SetPlayerData(playerid, P_DAILY_CLAIM, 1);
	            UpdatePlayerDatabaseInt(playerid, "daily_claim", GetPlayerData(playerid, P_DAILY_CLAIM));

				DailyreWards_Time[playerid] = -1;
			}
		}
		FullnessTick[playerid] ++;
		if(GetPlayerData(playerid, P_EAT) > 0)
		{
			if(FullnessTick[playerid] >= 250)
			{
				new Float:Health;
				GetPlayerHealth(playerid,Health);
				GetPlayerData(playerid, P_EAT)-=2;
				FullnessTick[playerid] = 0;
				SetFullness(playerid,GetPlayerData(playerid, P_EAT));

				switch(GetPlayerData(playerid, P_EAT))
				{
					case 1..15: SetPlayerHealthEx(playerid, Health-1);

					case 0: SetPlayerHealthEx(playerid, Health-1), SetFullness(playerid,5);
				}
			}
		}
		else
		{
			if(FullnessTick[playerid] > 30)
			{
				new Float:Health;
				GetPlayerHealth(playerid,Health);
				FullnessTick[playerid] = 0;
				SetPlayerHealthEx(playerid, Health-1);
			}
		}
		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));
			new fmt_str[128];
	
			if(afk_minutes > 0) format(fmt_str, sizeof fmt_str, "На паузе %d:%02d", afk_minutes, afk_seconds);

			else format(fmt_str, sizeof fmt_str, "На паузе %d сек.", afk_seconds);

			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);

			if(afk_minutes >= MAX_AFK_TIME && IsPlayerAdminLevel(playerid) < 5)
				Kick:(playerid, "Превышено максимально допустимое время паузы");
		}
		else
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);
  		}
		//GetPlayerTimePromo(playerid);
        if(GetPlayerData(playerid, P_VMUTE) > 0)
		{
			AddPlayerData(playerid, P_VMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "vmute", GetPlayerData(playerid, P_VMUTE));
			if(GetPlayerData(playerid, P_VMUTE) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана VIP чата закончился");
		}
   	    if(GetPlayerData(playerid, P_RMUTE) > 0)
		{
			AddPlayerData(playerid, P_RMUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "rmute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_RMUTE) <= 0)
				SendClientMessage(playerid, 0xCECECEFF, "Срок действия блокировки репорта закончился");
		}
		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "mute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_MUTE) <= 0)
			{
				SendClientMessage(playerid, 0x66CC00FF, "Срок действия бана чата закончился");
			}
		}
 	    if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			AddPlayerData(playerid, P_JAIL, -, 1);
			UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));

			if(GetPlayerData(playerid, P_JAIL) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
				UnjailPlayer(playerid),
				SetPlayerData(playerid, P_NAKOLKA, GetPlayerData(playerid, P_NAKOLKA) + 1),
				UpdatePlayerDatabaseInt(playerid, "nakolka", GetPlayerData(playerid, P_NAKOLKA));
		}
        if(GetPlayerData(playerid, P_ARREST) > 0)
		{
			AddPlayerData(playerid, P_ARREST, -, 1);
			UpdatePlayerDatabaseInt(playerid, "arrest", GetPlayerData(playerid, P_ARREST));
			if(GetPlayerData(playerid, P_ARREST) <= 0)
			
                if(GetPlayerData(playerid, P_SUSPECT) == 4 || GetPlayerData(playerid, P_SUSPECT) == 5 || GetPlayerData(playerid, P_SUSPECT) == 6)
                {
                    SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
                    if(GetPlayerData(playerid, P_SUSPECT) == 4)
					{
                       JailPlayer(playerid, 30);
	                }
	                else if(GetPlayerData(playerid, P_SUSPECT) == 5)
	                {
                       JailPlayer(playerid, 60);
	                }
	                else if(GetPlayerData(playerid, P_SUSPECT) == 6)
	                {
                       JailPlayer(playerid, 90);
	                }
                }
                else
                {
                    SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился");
                    UnKpz(playerid);
                }
		}
		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameText(playerid, "~y~маска кончилась", 2500, 2);

				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);

	            format(g_player[playerid][P_NAME], 21, "%s", old_nickname[playerid]);
                SetPlayerName(playerid, old_nickname[playerid]);
			}
		}
		if(IsPlayerAdminLevel(playerid) > 1)
		{
			new msg[80];
			format(msg, sizeof msg, "interface('UnansweredRequests').updateTime(%d)", gettime());
			CEF_CREATE(playerid, 1, 2, msg);
		}
	    if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
  			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}
		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
		    if(!g_player[playerid][P_DISEASE][0] && !g_player[playerid][P_DISEASE][1]) return 0;

			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 431.3744,1704.7421,1001.0000))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

				SendClientMessage(playerid, 0x66CC00FF, "Курс лечения пройден");
				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

				SetPlayerChatBubble(playerid, "Выписан", 0x66CC00FF, 10.0, 2000);
			}
		}

		if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);

			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
					{
						new speed = GetPlayerSpeed(playerid);

						g_taxi_mileage[playerid] += (float(speed) / 3600.0);
						if(g_taxi_mileage[playerid] > 0.1)
						{
							g_taxi_mileage[playerid] = 0.0;

							new tariff = GetPlayerData(driver, P_JOB_TARIFF);
							if(VerifyIntString(QueryPlayerBalance(playerid), tariff))
							{
								ModifyCashBalance(driver, tariff, "- Оплата тарифа такси", false, true);
								ModifyCashBalance(playerid, -tariff, "+ Оплата тарифа такси", false, true);

								AddPlayerData(playerid, P_JOB_WAGE, +, tariff);

								//format(fmt_str, sizeof fmt_str, "~r~-%d rub~n~~b~+100 m", tariff);
								//GameTextForPlayer(playerid, fmt_str, 4000, 1);
                                GameText(playerid, "~y~+100м", 3500, 1);
								//format(fmt_str, sizeof fmt_str, "~g~+%d rub~n~~b~+100 m", tariff);
								//GameTextForPlayer(driver, fmt_str, 4000, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег для дальнейшей оплаты тарифа");
							}
						}
					}
				}
			}
		}
        
		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}

		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(6)+1,
				soldiers_count;

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;

				soldiers_count++;
			}

			if(soldiers_count < 1 && GetPlayerTeamEx(playerid) != TEAM_ARMY)
				SendClientMessage(playerid, 0x999999FF, "Чтобы воровать патроны со склада, должно быть 2 военнослужащих Воинской Части");

			else
			{
				if(army_ammo == 0)
					GameText(playerid, "~g~загрузка...", 1100, 6);
				else
				{
					if(!IsPlayerAFK(playerid))
					{
						if((army_ammo - rand_ammo) < 0)
							rand_ammo = 200000 - army_ammo;

						if((GetIteam(playerid, 26) + rand_ammo) > 450)
							SendClientMessage(playerid, 0x66CC33FF, "Взять больше патронов не получается");
						else
						{
						    GiveIteam(playerid, 26,1,rand_ammo,0);


							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetIteam(playerid, 26));
							GameText(playerid, fmt_text, 1100, 6);

							format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
							SetPlayerChatBubble(playerid, fmt_text, 0xFFCD00FF, 10.0, 1100);

							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
			    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}REDAGE ONLINE", "Время на авторизацию ограничено, Вы отключены от сервера", "", "Закрыть");
				FixKick(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
	return 1;
}

//-------------------------------------авторизация-------------------------------------
public: AccountInitilization(playerid)
{
	new query[75],
		Cache: result, 
		is_account_exist;

	SendClientMessage(playerid, 0x3399FFFF, "Добро пожаловать на "SERVER_NAME"!");

	TogglePlayerSpectating(playerid, true);
	
	//SnowStatus(playerid, 2);

	SetPlayerVirtualWorld(playerid, 33);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", GetPlayerNameEx(playerid));
	result = mysql_query(mysql, query);

	if(!mysql_errno())
	{
		is_account_exist = bool: cache_num_rows();
		SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);

		if(is_account_exist)
		{
			cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);

			SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));

			SetPlayerData(playerid, P_ADMIN, cache_get_field_content_int(0, "admin"));
			SetPlayerData(playerid, P_BUYADMIN, cache_get_field_content_int(0, "buyadmin"));
			SetPlayerData(playerid, P_LAST_EXIT,	cache_get_field_content_int(0, "last_exit"));

			SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));

			cache_get_field_content(0, "adminspasslogin", g_player[playerid][P_ADMIN_PASSWORD], mysql, 16);
			
			cache_get_field_content(0, "players_password", g_player[playerid][P_PASSWORD], mysql, 85);
			cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);

			cache_get_field_content(0, "setting_phone", g_player[playerid][P_SETTING_PHONE], mysql, 13);
			cache_get_field_content(0, "setting_pin_code", g_player[playerid][P_SETTING_PIN], mysql, 5);

			SetPlayerData(playerid, P_REQUEST_PHONE, cache_get_field_content_int(0, "request_phone"));
			SetPlayerData(playerid, P_REQUEST_PIN, cache_get_field_content_int(0, "request_pin"));

			SetPlayerData(playerid, P_WARDS_PRIZE,		cache_get_field_content_int(0, "wards_prize"));

			cache_get_field_content(0, "auth_token", g_player[playerid][P_AUTH_TOKEN], mysql, TOKEN_BUFFER);

			SetPlayerData(playerid, P_2FA_ENABLED, cache_get_field_content_int(0, "2fa_enabled"));

			SetPlayerData(playerid, P_AUTH_TIME, 0);
			ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN_IP, false);
			g_player_account_state[playerid] = 1;

			SetPVarInt(playerid, "LoginPlayer", 1);

			LoadPlayerItems(playerid);

			if(GetPlayerOwnableCars(playerid) == 0) 
			{
				AuthOverlay(playerid, 0);
			}
			else
			{
                AuthOverlay(playerid, 1);
			}
		}
		else ShowPlayerReg(playerid);
	}
	else
	{
		IntfDialogCallRemote
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"{FF9900}Критическая ошибка",
			"{FFFFFF}Невозможно подключиться к серверу из-за сбоя системных настроек\n"\
			"Если у вас до сих пор эта ошибка, то обратитесь в поддержку проекта \n",
			"Выход", ""
		);
		Kick:(playerid, "Ошибка соединения. Введите /q (/quit) чтобы выйти", 3000);
	}
	cache_delete(result);
}

public: LoadPlayerData(playerid)
{
	new query[128];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		new
			buffer = 0,
			time = gettime();

		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61); //P_WIFE_NAME
		cache_get_field_content(0, "serialid", g_player[playerid][P_HARDWARE_ID], mysql, 250); //P_WIFE_NAME
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));

		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "level"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));

		cache_get_field_content(0, "refer", g_player[playerid][P_REFER], mysql, 21);

		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));

		cache_get_field_content(0, "money", g_player[playerid][P_MONEY], mysql, 21);

		SetPlayerData(playerid, P_VOEN,	cache_get_field_content_int(0, "voennik"));

		cache_get_field_content(0, "bank", g_player[playerid][P_BANK], mysql, 21);

		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));

		SetPlayerData(playerid, P_MIND,     cache_get_field_content_int(0, "mind"));
		SetPlayerData(playerid, P_DRIVING_LIC, 	cache_get_field_content_int(0, "driving_lic"));
		SetPlayerData(playerid, P_DRIVING_LIC_PROF, 	cache_get_field_content_int(0, "driving_lic_prof"));
		SetPlayerData(playerid, P_WEAPON_LIC, 	cache_get_field_content_int(0, "weapon_lic"));
		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));
		SetPlayerData(playerid, P_WATCH, 		cache_get_field_content_int(0, "watch"));
		g_player[playerid][P_DISEASE][0] = cache_get_field_content_int(0, "disease_0");
		g_player[playerid][P_DISEASE][1] = cache_get_field_content_int(0, "disease_1");
		//рыбалка
		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));

		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "brak"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));

		cache_get_field_content(0, "brak", g_player[playerid][P_WIFE_NAME], mysql, 61);
		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));
		SetPlayerData(playerid, P_GARAGE_SLOTS, 		cache_get_field_content_int(0, "garage_slots"));
		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_ID_SPAWN,	cache_get_field_content_int(0, "id_spawn"));
		SetPlayerData(playerid, P_HOUSE_SLOTS, 	cache_get_field_content_int(0, "house_slots"));
		
		SetPlayerData(playerid, P_AFTER_X,		cache_get_field_content_float(0, "after_x"));
		SetPlayerData(playerid, P_AFTER_Y,		cache_get_field_content_float(0, "after_y"));
		SetPlayerData(playerid, P_AFTER_Z,		cache_get_field_content_float(0, "after_z"));

		SetPlayerData(playerid, P_SCORE,					cache_get_field_content_int(0, "score"));

		cache_get_field_content(0, "vipprefix", g_player[playerid][P_VIPPREFIX], mysql, 64);

		cache_get_field_content(0, "myprefix", g_player[playerid][P_MYPREFIX], mysql, 64);
		cache_get_field_content(0, "myprefixcolor", g_player[playerid][P_MYPREFIX_COLOR], mysql, 64);
		
        SetPlayerData(playerid, P_EAT,		cache_get_field_content_int(0, "hunger"));
        SetPlayerData(playerid, P_DANCE_0,					cache_get_field_content_int(0, "dance_0"));
		SetPlayerData(playerid, P_DANCE_1,					cache_get_field_content_int(0, "dance_1"));
		SetPlayerData(playerid, P_DANCE_2,					cache_get_field_content_int(0, "dance_2"));
		SetPlayerData(playerid, P_DANCE_3,					cache_get_field_content_int(0, "dance_3"));
		SetPlayerData(playerid, P_DANCE_4,					cache_get_field_content_int(0, "dance_4"));
		SetPlayerData(playerid, P_DANCE_5,					cache_get_field_content_int(0, "dance_5"));
		SetPlayerData(playerid, P_DANCE_6,					cache_get_field_content_int(0, "dance_6"));
		SetPlayerData(playerid, P_DANCE_7,					cache_get_field_content_int(0, "dance_7"));
		SetPlayerData(playerid, P_DANCE_8,					cache_get_field_content_int(0, "dance_8"));
		SetPlayerData(playerid, P_DANCE_9,					cache_get_field_content_int(0, "dance_9"));
		SetPlayerData(playerid, P_DANCE_10,					cache_get_field_content_int(0, "dance_10"));
		SetPlayerData(playerid, P_DANCE_11,					cache_get_field_content_int(0, "dance_11"));
		SetPlayerData(playerid, P_DANCE_12,					cache_get_field_content_int(0, "dance_12"));
		SetPlayerData(playerid, P_DANCE_13,					cache_get_field_content_int(0, "dance_13"));
		SetPlayerData(playerid, P_DANCE_14,					cache_get_field_content_int(0, "dance_14"));
		SetPlayerData(playerid, P_DANCE_15,					cache_get_field_content_int(0, "dance_15"));
		SetPlayerData(playerid, P_DANCE_16,					cache_get_field_content_int(0, "dance_16"));
		SetPlayerData(playerid, P_DANCE_17,					cache_get_field_content_int(0, "dance_17"));
		SetPlayerData(playerid, P_DANCE_18,					cache_get_field_content_int(0, "dance_18"));
		SetPlayerData(playerid, P_DANCE_19,					cache_get_field_content_int(0, "dance_19"));
		SetPlayerData(playerid, P_DANCE_20,					cache_get_field_content_int(0, "dance_20"));
		SetPlayerData(playerid, P_DANCE_21,					cache_get_field_content_int(0, "dance_21"));
		SetPlayerData(playerid, P_DANCE_22,					cache_get_field_content_int(0, "dance_22"));
		SetPlayerData(playerid, P_DANCE_23,					cache_get_field_content_int(0, "dance_23"));
		SetPlayerData(playerid, P_DANCE_24,					cache_get_field_content_int(0, "dance_24"));
		SetPlayerData(playerid, P_DANCE_25,					cache_get_field_content_int(0, "dance_25"));
		SetPlayerData(playerid, P_DANCE_26,					cache_get_field_content_int(0, "dance_26"));
		SetPlayerData(playerid, P_DANCE_27,					cache_get_field_content_int(0, "dance_27"));
		SetPlayerData(playerid, P_DANCE_28,					cache_get_field_content_int(0, "dance_28"));
		SetPlayerData(playerid, P_DANCE_29,					cache_get_field_content_int(0, "dance_29"));
		SetPlayerData(playerid, P_DANCE_30,					cache_get_field_content_int(0, "dance_30"));
		SetPlayerData(playerid, P_DANCE_31,					cache_get_field_content_int(0, "dance_31"));
		SetPlayerData(playerid, P_DANCE_32,					cache_get_field_content_int(0, "dance_32"));
		SetPlayerData(playerid, P_DANCE_33,					cache_get_field_content_int(0, "dance_33"));
		SetPlayerData(playerid, P_FAMILY,               cache_get_field_content_int(0, "family"));
        SetPlayerData(playerid, P_FAMILY_RANK,          cache_get_field_content_int(0, "family_rank"));
        SetPlayerData(playerid, P_FMUTE, 				cache_get_field_content_int(0, "fmute"));
        SetPlayerData(playerid, P_FWARN, 				cache_get_field_content_int(0, "fwarn"));

		SetPlayerData(playerid, P_DOSTIJ1,		cache_get_field_content_int(0, "dostij1"));
		SetPlayerData(playerid, P_DOSTIJ2,		cache_get_field_content_int(0, "dostij2"));
		SetPlayerData(playerid, P_DOSTIJ3,		cache_get_field_content_int(0, "dostij3"));
		SetPlayerData(playerid, P_DOSTIJ4,		cache_get_field_content_int(0, "dostij4"));
		SetPlayerData(playerid, P_DOSTIJ5,		cache_get_field_content_int(0, "dostij5"));
		SetPlayerData(playerid, P_DOSTIJ6,		cache_get_field_content_int(0, "dostij6"));
		SetPlayerData(playerid, P_DOSTIJ7,		cache_get_field_content_int(0, "dostij7"));
		SetPlayerData(playerid, P_DOSTIJ8,		cache_get_field_content_int(0, "dostij8"));
		SetPlayerData(playerid, P_DOSTIJ9,		cache_get_field_content_int(0, "dostij9"));
		SetPlayerData(playerid, P_DOSTIJ10,		cache_get_field_content_int(0, "dostij10"));
		SetPlayerData(playerid, P_DOSTIJ11,		cache_get_field_content_int(0, "dostij11"));
		SetPlayerData(playerid, P_DOSTIJ12,		cache_get_field_content_int(0, "dostij12"));
		SetPlayerData(playerid, P_DOSTIJ13,		cache_get_field_content_int(0, "dostij13"));
		SetPlayerData(playerid, P_DOSTIJ14,		cache_get_field_content_int(0, "dostij14"));
		SetPlayerData(playerid, P_DOSTIJ15,		cache_get_field_content_int(0, "dostij15"));
		SetPlayerData(playerid, P_DOSTIJ16,		cache_get_field_content_int(0, "dostij16"));
		SetPlayerData(playerid, P_DOSTIJ17,		cache_get_field_content_int(0, "dostij17"));
		SetPlayerData(playerid, P_DOSTIJ18,		cache_get_field_content_int(0, "dostij18"));
		SetPlayerData(playerid, P_DOSTIJ19,		cache_get_field_content_int(0, "dostij19"));
		SetPlayerData(playerid, P_DOSTIJ20,		cache_get_field_content_int(0, "dostij20"));
		SetPlayerData(playerid, P_DOSTIJ21,		cache_get_field_content_int(0, "dostij21"));
		SetPlayerData(playerid, P_DOSTIJ22,		cache_get_field_content_int(0, "dostij22"));
		SetPlayerData(playerid, P_DOSTIJ23,		cache_get_field_content_int(0, "dostij23"));
		SetPlayerData(playerid, P_DOSTIJ24,		cache_get_field_content_int(0, "dostij24"));
		SetPlayerData(playerid, P_DOSTIJ25,		cache_get_field_content_int(0, "dostij25"));
		SetPlayerData(playerid, P_NAKOLKA,		cache_get_field_content_int(0, "nakolka"));
		SetPlayerData(playerid, P_BIZ_SLOTS,	cache_get_field_content_int(0, "biz_slots"));
		SetPlayerData(playerid, P_AUCTION_SLOTS,	cache_get_field_content_int(0, "auction_slots"));

		SetPlayerData(playerid, P_EASTER,	cache_get_field_content_int(0, "easter"));

		SetPlayerData(playerid, P_KIOSK_SLOTS,	cache_get_field_content_int(0, "kiosk_slots"));
		SetPlayerData(playerid, P_GARDEN_SLOTS,	cache_get_field_content_int(0, "garden_slots"));
		SetPlayerData(playerid, P_DRAG_SCORE,	cache_get_field_content_int(0, "drag_score"));
		SetPlayerData(playerid, P_TK_JOB,	cache_get_field_content_int(0, "tk_job"));
		SetPlayerData(playerid, P_TK_JOB_TYPE,	cache_get_field_content_int(0, "tk_job_type"));

		SetPlayerData(playerid, P_BP_PREMIUM,		cache_get_field_content_int(0, "bp_premium"));
		SetPlayerData(playerid, P_BP_LEVEL,		cache_get_field_content_int(0, "bp_level"));

		SetPlayerData(playerid, P_BP_TIME_TASKS,		cache_get_field_content_int(0, "bp_time_tasks"));

		g_battlepass_id_tasks[playerid][0] = cache_get_field_content_int(0, "bp_task_1");
		g_battlepass_id_tasks[playerid][1] = cache_get_field_content_int(0, "bp_task_2");
		g_battlepass_id_tasks[playerid][2] = cache_get_field_content_int(0, "bp_task_3");
		g_battlepass_id_tasks[playerid][3] = cache_get_field_content_int(0, "bp_task_4");
		g_battlepass_id_tasks[playerid][4] = cache_get_field_content_int(0, "bp_task_5");
		g_battlepass_id_tasks[playerid][5] = cache_get_field_content_int(0, "bp_task_6");
		g_battlepass_id_tasks[playerid][6] = cache_get_field_content_int(0, "bp_task_7");
		g_battlepass_id_tasks[playerid][7] = cache_get_field_content_int(0, "bp_task_8");
		g_battlepass_id_tasks[playerid][8] = cache_get_field_content_int(0, "bp_task_9");
		g_battlepass_id_tasks[playerid][9] = cache_get_field_content_int(0, "bp_task_10");
		g_battlepass_id_tasks[playerid][10] = cache_get_field_content_int(0, "bp_task_11");
		g_battlepass_id_tasks[playerid][11] = cache_get_field_content_int(0, "bp_task_12");

		g_battlepass_id_point[playerid][0] = cache_get_field_content_int(0, "bp_point_1");
		g_battlepass_id_point[playerid][1] = cache_get_field_content_int(0, "bp_point_2");
		g_battlepass_id_point[playerid][2] = cache_get_field_content_int(0, "bp_point_3");
		g_battlepass_id_point[playerid][3] = cache_get_field_content_int(0, "bp_point_4");
		g_battlepass_id_point[playerid][4] = cache_get_field_content_int(0, "bp_point_5");
		g_battlepass_id_point[playerid][5] = cache_get_field_content_int(0, "bp_point_6");
		g_battlepass_id_point[playerid][6] = cache_get_field_content_int(0, "bp_point_7");
		g_battlepass_id_point[playerid][7] = cache_get_field_content_int(0, "bp_point_8");
		g_battlepass_id_point[playerid][8] = cache_get_field_content_int(0, "bp_point_9");
		g_battlepass_id_point[playerid][9] = cache_get_field_content_int(0, "bp_point_10");
		g_battlepass_id_point[playerid][10] = cache_get_field_content_int(0, "bp_point_11");
		g_battlepass_id_point[playerid][11] = cache_get_field_content_int(0, "bp_point_12");

		SetPlayerData(playerid, P_BP_PRIZE_1,		cache_get_field_content_int(0, "bp_prize_1"));
		SetPlayerData(playerid, P_BP_PRIZE_2,		cache_get_field_content_int(0, "bp_prize_2"));

		SetPlayerData(playerid, P_BP_EXP,		cache_get_field_content_int(0, "bp_exp"));

		SetPlayerData(playerid, P_BP_GOLDS,		cache_get_field_content_int(0, "bp_golds"));

		SetPlayerData(playerid, P_UID_FSB,		cache_get_field_content_int(0, "uid_fsb"));
		SetPlayerData(playerid, P_REG_DATA_FSB,		cache_get_field_content_int(0, "reg_data_fsb"));
		SetPlayerData(playerid, P_EXPIRE_DATA_FSB,		cache_get_field_content_int(0, "expire_data_fsb"));

		SetPlayerData(playerid, P_CMD_giveskin, 	cache_get_field_content_int(0, "giveskin"));
		SetPlayerData(playerid, P_CMD_contspawn,	cache_get_field_content_int(0, "contspawn"));
		SetPlayerData(playerid, P_CMD_dumpspawn,	cache_get_field_content_int(0, "dumpspawn"));
		SetPlayerData(playerid, P_CMD_afly,			cache_get_field_content_int(0, "afly"));
		SetPlayerData(playerid, P_CMD_getv,			cache_get_field_content_int(0, "getv"));
		SetPlayerData(playerid, P_CMD_fixcar,		cache_get_field_content_int(0, "fixcar"));

		SetPlayerData(playerid, P_ORDER, -1);
		SetPlayerData(playerid, P_FUELORDER, -1);
		SetPlayerData(playerid, P_IN_GARAGE, -1);

		SetFullness(playerid, GetPlayerData(playerid, P_EAT));

		LoadPlayerSettings(playerid);

		LoadPlayerJobs(playerid);
		LoadPlayerDaily(playerid);

		TogglePlayerSpectating(playerid, false);
		if(GetPlayerFamily(playerid) != 0)
		{

			if(g_war[W_STATUS]) CEF_CREATE(playerid, 1, 4, "Capture");
			else CEF_HIDE(playerid, "Capture");
			if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
			{
			    if(GetPlayerTeamEx(playerid) != 0)
			    {
			        SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
			        SetPlayerData(playerid, P_FAMILY,0);
			        SetPlayerData(playerid, P_FAMILY_RANK,0);
			        UpdatePlayerDatabaseInt(playerid, "family", 0);
			        UpdatePlayerDatabaseInt(playerid, "family_rank", 0);
			    }
			    else
			    {
					SetPlayerColorEx(playerid, family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)]);

					new text_str[144];
					format(text_str, 144, "{%06x}%s", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerFamily(playerid)][F_NAME]);
					g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
				}
			}
			else
			{
				new text_str[144];
				format(text_str, 144, "{FFB500}%s", g_family[GetPlayerFamily(playerid)][F_NAME]);
				g_player[playerid][P_FAM_LABEL] = CreateDynamic3DTextLabel(text_str, -1, 0.0, 0.0, 0.6, 14.0, playerid, INVALID_VEHICLE_ID, 1);
			}
		}
		if(GetPlayerData(playerid, P_BLACK_MARKET_WIN) == 0)
		{
			if(GetPlayerData(playerid, P_BLACK_MARKET_BET) != 0)
			{
				SetPlayerData(playerid, P_BLACK_MARKET_BET, 0);
				UpdatePlayerDatabaseInt(playerid, "black_market_bet", 0);
				ModifyCashBalance(playerid, GetPlayerData(playerid, P_BLACK_MARKET_BET), "Возврат средств за ставку на черном рынке", true, true);
				SendClientMessage(playerid, 0xCECECEFF, "Вы проиграли в аукционе на черном рынке! Вам были возвращены деньги за ставку");
			}
		}
		else 
		{
			SetPlayerData(playerid, P_BLACK_MARKET_WIN, 0);
			UpdatePlayerDatabaseInt(playerid, "black_market_win", 0);
			SendClientMessage(playerid, 0xCECECEFF, "Приз можно забрать на складе аукциона черного рынка");
			SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Вы выиграли в аукционе на черном рынке");
		}
	    
		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));

		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		if(GetElapsedTime(time, buffer) < 1)
		{
			if(GetElapsedTime(time, g_last_pay_day_time) < 1)
				SetPlayerData(playerid, P_GAME_FOR_HOUR,	cache_get_field_content_int(0, "game_for_hour"));
		}
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));

		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}

		SetPlayerSettingData(playerid, S_CHAT_TYPE, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting2"));
		SetPlayerSettingData(playerid, S_NICK_IN_CHAT, 	cache_get_field_content_int(0, "setting4"));
		SetPlayerSettingData(playerid, S_ID_IN_CHAT, 	cache_get_field_content_int(0, "setting5"));
		SetPlayerSettingData(playerid, S_VEH_CONTROL, 	cache_get_field_content_int(0, "setting6"));

		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));
		SetPlayerData(playerid, P_RMUTE, 				cache_get_field_content_int(0, "rmute"));

		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));

		SetPlayerData(playerid, P_DONATE_CURRENT, 		cache_get_field_content_int(0, "donate_current"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));

		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));

		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));

		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));

		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));

		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));

		SetPlayerData(playerid, P_JAIL,					cache_get_field_content_int(0, "jail"));

		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREMIUM_TIME,			cache_get_field_content_int(0, "premium_time"));

		RPPoint[playerid] = cache_get_field_content_int(0, "rppoint");
		SetPlayerData(playerid, P_ARMUTE,					cache_get_field_content_int(0, "a_rmute"));
		SetPlayerData(playerid, P_AUNRMUTE,					cache_get_field_content_int(0, "a_unrmute"));

		SetPlayerData(playerid, P_YADMIN, 				cache_get_field_content_int(0, "yadmin"));
		SetPlayerData(playerid, P_FORTUNE_WHEEL, 		cache_get_field_content_int(0, "ruletka"));
		
		SetPlayerData(playerid, P_QUEST_1_STATS, cache_get_field_content_int(0, "quest_1_stats"));

		SetPlayerData(playerid, P_QUEST_2_STATS, cache_get_field_content_int(0, "quest_2_stats"));
		SetPlayerData(playerid, P_QUEST_2_VALUE, cache_get_field_content_int(0, "quest_2_value"));

		SetPlayerData(playerid, P_QUEST_3_STATS, cache_get_field_content_int(0, "quest_3_stats"));


		SetPlayerData(playerid, P_QUEST_4_STATS, cache_get_field_content_int(0, "quest_4_stats"));
		SetPlayerData(playerid, P_QUEST_4_VALUE, cache_get_field_content_int(0, "quest_4_value"));

		SetPlayerData(playerid, P_QUEST_5_STATS, cache_get_field_content_int(0, "quest_5_stats"));


		SetPlayerData(playerid, P_QUEST_6_STATS, cache_get_field_content_int(0, "quest_6_stats"));

		SetPlayerData(playerid, P_QUEST_7_STATS, cache_get_field_content_int(0, "quest_7_stats"));

		SetPlayerData(playerid, P_QUEST_8_STATS, cache_get_field_content_int(0, "quest_8_stats"));

		SetPlayerData(playerid, P_QUEST_9_STATS, cache_get_field_content_int(0, "quest_9_stats"));
		
		SetPlayerData(playerid, P_EXIT_X,		cache_get_field_content_float(0, "exit_x"));
		SetPlayerData(playerid, P_EXIT_Y,		cache_get_field_content_float(0, "exit_y"));
		SetPlayerData(playerid, P_EXIT_Z,		cache_get_field_content_float(0, "exit_z"));
		
		SetPlayerData(playerid, P_MOBILE, 		bool: cache_get_field_content_int(0, "mobile"));
		
		SetPlayerData(playerid, P_SNOW, 		bool: cache_get_field_content_int(0, "snow"));
		
		SetPlayerData(playerid, P_SNOW_INSIBLE, 		bool: cache_get_field_content_int(0, "snow_insible"));
		
		SetPlayerData(playerid, P_PODAROK, 		cache_get_field_content_int(0, "podarok"));

		SetPlayerData(playerid, P_ACHIV_1, 		cache_get_field_content_int(0, "achiv_1"));
		SetPlayerData(playerid, P_ACHIV_1_COMPLETED, 		cache_get_field_content_int(0, "achiv_1_completed"));
		SetPlayerData(playerid, P_ACHIV_2, 		cache_get_field_content_int(0, "achiv_2"));
		SetPlayerData(playerid, P_ACHIV_3, 		cache_get_field_content_int(0, "achiv_3"));
		SetPlayerData(playerid, P_ACHIV_4, 		cache_get_field_content_int(0, "achiv_4"));
		SetPlayerData(playerid, P_ACHIV_5, 		cache_get_field_content_int(0, "achiv_5"));
		SetPlayerData(playerid, P_ACHIV_6, 		cache_get_field_content_int(0, "achiv_6"));
		SetPlayerData(playerid, P_ACHIV_7, 		cache_get_field_content_int(0, "achiv_7"));
		SetPlayerData(playerid, P_ACHIV_8, 		cache_get_field_content_int(0, "achiv_8"));
		SetPlayerData(playerid, P_ACHIV_9, 		cache_get_field_content_int(0, "achiv_9"));
		SetPlayerData(playerid, P_ACHIV_10, 		cache_get_field_content_int(0, "achiv_10"));
		SetPlayerData(playerid, P_ACHIV_11, 		cache_get_field_content_int(0, "achiv_11"));
		SetPlayerData(playerid, P_ACHIV_12, 		cache_get_field_content_int(0, "achiv_12"));
		SetPlayerData(playerid, P_ACHIV_13, 		cache_get_field_content_int(0, "achiv_13"));
		SetPlayerData(playerid, P_ACHIV_14, 		cache_get_field_content_int(0, "achiv_14"));
		SetPlayerData(playerid, P_ACHIV_15, 		cache_get_field_content_int(0, "achiv_15"));
		SetPlayerData(playerid, P_ACHIV_16, 		cache_get_field_content_int(0, "achiv_16"));
		SetPlayerData(playerid, P_ACHIV_17, 		cache_get_field_content_int(0, "achiv_17"));
		SetPlayerData(playerid, P_ACHIV_18, 		cache_get_field_content_int(0, "achiv_18"));
		SetPlayerData(playerid, P_ACHIV_19, 		cache_get_field_content_int(0, "achiv_19"));
		SetPlayerData(playerid, P_ACHIV_20, 		cache_get_field_content_int(0, "achiv_20"));
		SetPlayerData(playerid, P_ACHIV_21, 		cache_get_field_content_int(0, "achiv_21"));
		SetPlayerData(playerid, P_ACHIV_22, 		cache_get_field_content_int(0, "achiv_22"));
		SetPlayerData(playerid, P_ACHIV_23, 		cache_get_field_content_int(0, "achiv_23"));
		SetPlayerData(playerid, P_ACHIV_24, 		cache_get_field_content_int(0, "achiv_24"));
		SetPlayerData(playerid, P_ACHIV_25, 		cache_get_field_content_int(0, "achiv_25"));
		SetPlayerData(playerid, P_ACHIV_26, 		cache_get_field_content_int(0, "achiv_26"));
		SetPlayerData(playerid, P_ACHIV_27, 		cache_get_field_content_int(0, "achiv_27"));
		SetPlayerData(playerid, P_ACHIV_28, 		cache_get_field_content_int(0, "achiv_28"));
		SetPlayerData(playerid, P_ACHIV_29, 		cache_get_field_content_int(0, "achiv_29"));
		SetPlayerData(playerid, P_ACHIV_30, 		cache_get_field_content_int(0, "achiv_30"));
		SetPlayerData(playerid, P_ACHIV_31, 		cache_get_field_content_int(0, "achiv_31"));
		SetPlayerData(playerid, P_ACHIV_32, 		cache_get_field_content_int(0, "achiv_32"));
		SetPlayerData(playerid, P_ACHIV_33, 		cache_get_field_content_int(0, "achiv_33"));
		SetPlayerData(playerid, P_ACHIV_34, 		cache_get_field_content_int(0, "achiv_34"));
		SetPlayerData(playerid, P_ACHIV_35, 		cache_get_field_content_int(0, "achiv_35"));
		SetPlayerData(playerid, P_ACHIV_36, 		cache_get_field_content_int(0, "achiv_36"));
		SetPlayerData(playerid, P_ACHIV_37, 		cache_get_field_content_int(0, "achiv_37"));
		SetPlayerData(playerid, P_ACHIV_38, 		cache_get_field_content_int(0, "achiv_38"));
		SetPlayerData(playerid, P_ACHIV_39, 		cache_get_field_content_int(0, "achiv_39"));
		SetPlayerData(playerid, P_ACHIV_40, 		cache_get_field_content_int(0, "achiv_40"));
		SetPlayerData(playerid, P_ACHIV_41, 		cache_get_field_content_int(0, "achiv_41"));
		SetPlayerData(playerid, P_ACHIV_42, 		cache_get_field_content_int(0, "achiv_42"));
		SetPlayerData(playerid, P_ACHIV_43, 		cache_get_field_content_int(0, "achiv_43"));
		SetPlayerData(playerid, P_ACHIV_44, 		cache_get_field_content_int(0, "achiv_44"));

		SetPlayerData(playerid, P_ACHIV_2_COMPLETED, 		cache_get_field_content_int(0, "achiv_2_completed"));
		SetPlayerData(playerid, P_ACHIV_3_COMPLETED, 		cache_get_field_content_int(0, "achiv_3_completed"));
		SetPlayerData(playerid, P_ACHIV_4_COMPLETED, 		cache_get_field_content_int(0, "achiv_4_completed"));
		SetPlayerData(playerid, P_ACHIV_5_COMPLETED, 		cache_get_field_content_int(0, "achiv_5_completed"));
		SetPlayerData(playerid, P_ACHIV_6_COMPLETED, 		cache_get_field_content_int(0, "achiv_6_completed"));
		SetPlayerData(playerid, P_ACHIV_7_COMPLETED, 		cache_get_field_content_int(0, "achiv_7_completed"));
		SetPlayerData(playerid, P_ACHIV_8_COMPLETED, 		cache_get_field_content_int(0, "achiv_8_completed"));
		SetPlayerData(playerid, P_ACHIV_9_COMPLETED, 		cache_get_field_content_int(0, "achiv_9_completed"));
		SetPlayerData(playerid, P_ACHIV_10_COMPLETED, 		cache_get_field_content_int(0, "achiv_10_completed"));
		SetPlayerData(playerid, P_ACHIV_11_COMPLETED, 		cache_get_field_content_int(0, "achiv_11_completed"));
		SetPlayerData(playerid, P_ACHIV_12_COMPLETED, 		cache_get_field_content_int(0, "achiv_12_completed"));
		SetPlayerData(playerid, P_ACHIV_13_COMPLETED, 		cache_get_field_content_int(0, "achiv_13_completed"));
		SetPlayerData(playerid, P_ACHIV_14_COMPLETED, 		cache_get_field_content_int(0, "achiv_14_completed"));
		SetPlayerData(playerid, P_ACHIV_15_COMPLETED, 		cache_get_field_content_int(0, "achiv_15_completed"));
		SetPlayerData(playerid, P_ACHIV_16_COMPLETED, 		cache_get_field_content_int(0, "achiv_16_completed"));
		SetPlayerData(playerid, P_ACHIV_17_COMPLETED, 		cache_get_field_content_int(0, "achiv_17_completed"));
		SetPlayerData(playerid, P_ACHIV_18_COMPLETED, 		cache_get_field_content_int(0, "achiv_18_completed"));
		SetPlayerData(playerid, P_ACHIV_19_COMPLETED, 		cache_get_field_content_int(0, "achiv_19_completed"));
		SetPlayerData(playerid, P_ACHIV_20_COMPLETED, 		cache_get_field_content_int(0, "achiv_20_completed"));
		SetPlayerData(playerid, P_ACHIV_21_COMPLETED, 		cache_get_field_content_int(0, "achiv_21_completed"));
		SetPlayerData(playerid, P_ACHIV_22_COMPLETED, 		cache_get_field_content_int(0, "achiv_22_completed"));
		SetPlayerData(playerid, P_ACHIV_23_COMPLETED, 		cache_get_field_content_int(0, "achiv_23_completed"));
		SetPlayerData(playerid, P_ACHIV_24_COMPLETED, 		cache_get_field_content_int(0, "achiv_24_completed"));
		SetPlayerData(playerid, P_ACHIV_25_COMPLETED, 		cache_get_field_content_int(0, "achiv_25_completed"));
		SetPlayerData(playerid, P_ACHIV_26_COMPLETED, 		cache_get_field_content_int(0, "achiv_26_completed"));
		SetPlayerData(playerid, P_ACHIV_27_COMPLETED, 		cache_get_field_content_int(0, "achiv_27_completed"));
		SetPlayerData(playerid, P_ACHIV_28_COMPLETED, 		cache_get_field_content_int(0, "achiv_28_completed"));
		SetPlayerData(playerid, P_ACHIV_29_COMPLETED, 		cache_get_field_content_int(0, "achiv_29_completed"));
		SetPlayerData(playerid, P_ACHIV_30_COMPLETED, 		cache_get_field_content_int(0, "achiv_30_completed"));
		SetPlayerData(playerid, P_ACHIV_31_COMPLETED, 		cache_get_field_content_int(0, "achiv_31_completed"));
		SetPlayerData(playerid, P_ACHIV_32_COMPLETED, 		cache_get_field_content_int(0, "achiv_32_completed"));
		SetPlayerData(playerid, P_ACHIV_33_COMPLETED, 		cache_get_field_content_int(0, "achiv_33_completed"));
		SetPlayerData(playerid, P_ACHIV_34_COMPLETED, 		cache_get_field_content_int(0, "achiv_34_completed"));
		SetPlayerData(playerid, P_ACHIV_35_COMPLETED, 		cache_get_field_content_int(0, "achiv_35_completed"));
		SetPlayerData(playerid, P_ACHIV_36_COMPLETED, 		cache_get_field_content_int(0, "achiv_36_completed"));
		SetPlayerData(playerid, P_ACHIV_37_COMPLETED, 		cache_get_field_content_int(0, "achiv_37_completed"));
		SetPlayerData(playerid, P_ACHIV_38_COMPLETED, 		cache_get_field_content_int(0, "achiv_38_completed"));
		SetPlayerData(playerid, P_ACHIV_39_COMPLETED, 		cache_get_field_content_int(0, "achiv_39_completed"));
		SetPlayerData(playerid, P_ACHIV_40_COMPLETED, 		cache_get_field_content_int(0, "achiv_40_completed"));
		SetPlayerData(playerid, P_ACHIV_41_COMPLETED, 		cache_get_field_content_int(0, "achiv_41_completed"));
		SetPlayerData(playerid, P_ACHIV_42_COMPLETED, 		cache_get_field_content_int(0, "achiv_42_completed"));
		SetPlayerData(playerid, P_ACHIV_43_COMPLETED, 		cache_get_field_content_int(0, "achiv_43_completed"));
		SetPlayerData(playerid, P_ACHIV_44_COMPLETED, 		cache_get_field_content_int(0, "achiv_44_completed"));

		SetPlayerData(playerid, P_YT_PROMO, 		cache_get_field_content_int(0, "yt_promo")); 

		SetPlayerData(playerid, P_DAILY_CLAIM, 		cache_get_field_content_int(0, "daily_claim"));

        SetPlayerData(playerid, P_DAILY_CLAIM_7, 		cache_get_field_content_int(0, "daily_claim_7"));
		SetPlayerData(playerid, P_DAILY_CLAIM_14, 		cache_get_field_content_int(0, "daily_claim_14"));
		SetPlayerData(playerid, P_DAILY_CLAIM_21, 		cache_get_field_content_int(0, "daily_claim_21"));
		SetPlayerData(playerid, P_DAILY_CLAIM_28, 		cache_get_field_content_int(0, "daily_claim_28"));

		SetPlayerData(playerid, P_DAILY_CASE_7_ID, 		cache_get_field_content_int(0, "daily_case_7_id"));
		SetPlayerData(playerid, P_DAILY_CASE_14_ID, 		cache_get_field_content_int(0, "daily_case_14_id"));
		SetPlayerData(playerid, P_DAILY_CASE_21_ID, 		cache_get_field_content_int(0, "daily_case_21_id"));
		SetPlayerData(playerid, P_DAILY_CASE_28_ID, 		cache_get_field_content_int(0, "daily_case_28_id"));

		SetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE, 		cache_get_field_content_int(0, "daily_complete"));
		
        cache_get_field_content(0, "adminspasslogin", g_player[playerid][P_ADMIN_PASSWORD], mysql, 16);
        
        SetPlayerData(playerid, P_VMUTE, 				cache_get_field_content_int(0, "vmute"));
        
        SetPlayerData(playerid, P_VIPOFF, 				cache_get_field_content_int(0, "vipoff"));
		
		SetPlayerData(playerid, P_STYLE_1, cache_get_field_content_int(0, "style1"));
		SetPlayerData(playerid, P_STYLE_2, cache_get_field_content_int(0, "style2"));
		SetPlayerData(playerid, P_STYLE_3, cache_get_field_content_int(0, "style3"));
		SetPlayerData(playerid, P_STYLE_4, cache_get_field_content_int(0, "style4"));
		SetPlayerData(playerid, P_STYLE_5, cache_get_field_content_int(0, "style5"));
	 	// -------------------------------------------------------------------------

        SetPlayerData(playerid, P_HOSPITAL, false);
		
        SetPlayerSpawnInit(playerid);
		StopAudioStreamForPlayer(playerid);

	    SetPlayerVirtualWorld(playerid, 0);
		SpawnPlayer(playerid);
		SetPlayerSpawnPos(playerid);

		if(GetPlayerData(playerid, P_SKIN))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET last_ip='%e',last_login=%d WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
			mysql_pquery(mysql, query);

			format(query, sizeof query, "~y~Добро пожаловать ~n~~b~%s", GetPlayerNameEx(playerid));
			GameText(playerid, query, 5000, 2);

			if(IsPlayerHasDonations(playerid))
				SendClientMessage(playerid, 0x3399FFFF, "У Вас есть новые пополнения счёта. Введите {ff9900}/donate{3399ff}, чтобы зачислить их");

			new player_admin_rank = IsPlayerAdminLevel(playerid);

			if(!g_player[playerid][P_MYPREFIX] && !g_player[playerid][P_MYPREFIX_COLOR])
			{
				if(player_admin_rank)
				{
					new Hour, Minute, Second;
					gettime(Hour, Minute, Second);		
				}
			}
            new player_yadmin_rank = GetPlayerYAdminEx(playerid);
			if(player_yadmin_rank)
            {
                if(GetPlayerYAdminEx(playerid) == 1) YAdminTag = "Ютубер 1 уровня";
                if(GetPlayerYAdminEx(playerid) == 2) YAdminTag = "Ютубер 2 уровня";
                if(GetPlayerYAdminEx(playerid) == 3) YAdminTag = "Ютубер 3 уровня";
  
				SCMF(playerid,0xFFFF00FF, "Вы вошли как: {FFFF00}%s", YAdminTag);
			}
			if(g_player[playerid][P_MYPREFIX] && g_player[playerid][P_MYPREFIX_COLOR])
			{
				SCMF(playerid,0xFFFF00FF, "Вы успешно авторизовались как {%s}%s", g_player[playerid][P_MYPREFIX_COLOR], g_player[playerid][P_MYPREFIX]);
			}
			
			new player_premium_rank = GetPlayerPremium(playerid),
				player_premium_time = GetPlayerPremiumTime(playerid);

			if(player_premium_rank)
			{
				new premium_rank[3][17] =
				{
					"{C0C0C0}Silver",
					"{FFD700}Gold",
					"{E5E4E2}Platinum"
				};

				if((player_premium_time - time) > 0)
				{
					format(query, sizeof query, "Вы владелец %s {3399FF}премиум-аккаунта. Спасибо за помощь проекту", premium_rank[ player_premium_rank - 1 ]);
					SendClientMessage(playerid, 0x3399FFFF, query);
				}
			}
			
			if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP), false))
			{
				new lastip[64];
				new regip[64];
				strmid(lastip,GetPlayerIpEx(playerid),0,3);
				strmid(regip,GetPlayerData(playerid, P_REG_IP),0,3);

				if(strval(lastip) != strval(regip)) 
				{
					new fmt_text[148];
					format(fmt_text, sizeof fmt_text,"[A] Игрок %s[%d] подозревается во взломе (Смена основного IP-адреса)",GetPlayerNameEx(playerid), playerid, GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
					SendMessageToAdmins(fmt_text, 0xFF6600FF);

					printf("[AC] Игрок %s подозревается во взломе (Смена IP-адреса) [%s (last) | %s (reg)]", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerData(playerid, P_REG_IP));
				}
			}

			if(GetPlayerData(playerid, P_WARN) > 0)
			{
				if(time > GetPlayerData(playerid, P_WARN_TIME))
				{
					SetPlayerData(playerid, P_WARN, 0);
					SetPlayerData(playerid, P_WARN_TIME, 0);
				}
				else {
					SCMF(playerid, 0xFF6600FF, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, 0xFF6600FF, "После 3 предупреждения аккаунт будет заблокирован");
				}
			}
			
			SetPlayerInit(playerid);
		}
		else
		{
			SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			SendClientMessage(playerid, 0x66CC00FF, "Выберите внешность Вашего персонажа");
		}
	}
	cache_delete(result);

	if(GetPlayerData(playerid, P_ADMIN))
	{
		CEF_CREATE(playerid, 1, 4, "UnansweredRequests");

		LoadAdminsReport(playerid);
	}

	if(GetPlayerData(playerid, P_PREMIUM_TIME) < gettime() && GetPlayerData(playerid, P_PREMIUM) > 0)
	{
		SetPlayerData(playerid, P_PREMIUM, 0);
		UpdatePlayerDatabaseInt(playerid, "premium", 0);
	}

	LoadPlayerPromocode(playerid);
	OnBattlePass_TimeTasks(playerid);
	LoadAuctionBet(playerid);

	SetPVarInt(playerid, "Login", 1);

    if(GetPlayerData(playerid, P_DAILY_CLAIM) != 1 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) != 4)
	{
        DailyreWards_Time[playerid] = 7200;
	}
	else
	{
		DailyreWards_Time[playerid] = -1;
	}

	if(g_battlepass_time_bonus[playerid] == 0){
		new current_time = gettime();
        if(bp_timer > current_time)
		{
            g_battlepass_time_bonus[playerid] = 3540;
		}
	}

	ResetWeapons(playerid);

	format(query, sizeof query, "window.interface('Hud').info.money = %s", QueryPlayerBalance(playerid));
	CEF_CREATE(playerid, 1, 2, query);
	
    SetCameraBehindPlayer(playerid);
	
	return 1;
}

stock BuyPlayerGarage(playerid, garage_id, bool: buy_from_owner = false, price = -1)
{
	if(!IsGarageOwned(garage_id))
	{
		if(price <= 0)
			price = GetGarageData(garage_id, G_PRICE);

		if(VerifyIntString(QueryPlayerBalance(playerid), price))
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts_canvasdev a, garage g SET a.money=%s,g.owner_id=%d WHERE a.id=%d AND g.id=%d", SetILPlayerInt(playerid, QueryPlayerBalance(playerid), -price), GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetGarageData(garage_id, G_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetGarageData(garage_id, G_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetGarageData(garage_id, G_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetGarageData(garage_id,	G_RENT_DATE,	rent_time);
					SetGarageData(garage_id,	G_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetGarageData(garage_id, G_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetGarageData(garage_id, G_RENT_DATE, rent_time);
					}
				}
				format(g_garage[garage_id][G_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateGarageLabel", "i", garage_id);

				ModifyCashBalance(playerid, -price, "Покупка гаража", false, true);
				SendClientMessage(playerid, 0x33AA33FF, "Напишите {6495ED}/garage{33AA33} чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE garage SET improvements=0,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetGarageData(garage_id, G_RENT_DATE), GetGarageData(garage_id, G_LOCK_STATUS), GetGarageData(garage_id, G_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(ISLAND-ERR 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock GetNearestGarage(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new garage_id = -1;
	new Float: my_dist;

	for(new idx; idx < g_garage_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			garage_id = idx;
		}
	}
	return garage_id;
}
public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;

	new fmt_str[512];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;

			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);

				if(ban_days > 0)
				{
					new reason[32];
					new admin_name[21];

					new day, month, year;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");

					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);

					timestamp_to_date(ban_time, day, month, year, hour, minute, second);

					string_dialog[0] = EOS;
					if(ban_days > 30)
					{
					    format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Этот аккаунт заблокирован\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							admin_name,
							reason,
							day, month, year, hour, minute, second
						);
					}
					else
					{
						format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Этот аккаунт заблокирован на {FF3333}%d дней\n\n"\
							"{FFFFFF}Ник администратора: %s\n"\
							"Причина блокировки: %s\n"\
							"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
							"Если Вы не согласны с наказанием, обратитесь\n"\
							"в тех. поддержку {FFCD00}"SERVER_SITE"{FFFFFF} для более\n"\
							"подробного выяснения сложившейся ситуации.\n\n"\
							"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
							ban_days,
							admin_name,
							reason,
							day, month, year, hour, minute, second
						);
					}
					IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME"", string_dialog, "Закрыть", "");

					Kick:(playerid, " ", 3000);
				}
				else
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");

					ShowPlayerAvtoriz(playerid);
				}
			}
			else
			{
				ShowPlayerAvtoriz(playerid);
			}
			return cache_delete(result);
		}
		case LOGIN_STATE_CHECK_BAN_IP:
		{
			new Cache: result;

			format(fmt_str, sizeof fmt_str, "SELECT * FROM banip_list WHERE ip='%s' LIMIT 1", g_player[playerid][P_LAST_IP]);
			result = mysql_query(mysql, fmt_str, true);

			if(cache_num_rows())
			{
				new admin[21],
					reason[32],
					time[21];

				cache_get_field_content(0, "description", reason);
				cache_get_field_content(0, "admin", admin);
				cache_get_field_content(0, "time", time);

				string_dialog[0] = EOS;
				
				format
				(
					string_dialog, sizeof string_dialog,
					"{FFFFFF}Ваш IP-адрес заблокирован\n\n"\
					"{FFFFFF}Ник администратора: %s\n"\
					"Причина блокировки: %s\n"\
					"Дата и время: %s\n\n"\
					"Введите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
					admin,
					reason,
					time
				);
				
				IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME"", string_dialog, "Закрыть", "");

				Kick:(playerid, " ", 3000);

				cache_delete(result);
			}
			else 
			{
				cache_delete(result);
				ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
			}
			return 1;
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			SetPVarInt(playerid, "LoginPlayer", 0);
			DeletePVar(playerid, "passest");
			LoadPlayerData(playerid);
			DestroyAuth(playerid);

			new system[248];
			format(system, sizeof system, "window.interface('Hud').info.money = %s", QueryPlayerBalance(playerid));
			CEF_CREATE(playerid, 1, 2, system);

			CEF_CREATE(playerid, 1, 2, "client.setChatStatus(true)");
			CEF_CREATE(playerid, 1, 2, "showInterface('Hud')");
			CEF_CREATE(playerid, 1, 2, "client.setHudStatus(true)");
			
            CEF_CREATE(playerid, 1, 2, "window.setPlayerConnectedStatus(1)");

			if(GetPlayerPremium(playerid) != 0 && GetPlayerPremium(playerid) != 1 && GetPlayerPremium(playerid) != 3) 
	        {
				if(GetPlayerData(playerid, P_HOSPITAL) != true)
				{
					if(GetPVarInt(playerid, "SpawnToExit") != 1)
	                {
                        SelectSpawnGoldVip(playerid);
					}
				}
		    }

			CEF_CREATE(playerid, 1, 2, "window.destroySound(10311, 30)");

            CEF_CREATE(playerid, 1, 4, "GameText");
			CEF_CREATE(playerid, 1, 2, "stopSound()");
            DeletePVar(playerid, "medhelp");
            DestroyDynamic3DTextLabel(medhelplabel[playerid]);
			callcmd::return_acsses(playerid);
			ResetWeapons(playerid);
			SetPlayerWeather(playerid, 0);
			OnPlayerTicketTime(playerid);
			
			if(GetPlayerSnow(playerid) == 1)
            {
                SnowStatus(playerid, 2);
                if(GetPlayerSnowInsible(playerid) == 1)
                {
                    SnowStatus(playerid, 1);
	            }
            }
            else SnowStatus(playerid, 0);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);

	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
}


public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerLoaderJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
		{
			new rand = random(sizeof loader_job_attach_obj);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, loader_job_attach_obj[rand][L_OBJECT], A_OBJECT_BONE_RIGHT_HAND, loader_job_attach_obj[rand][L_POS_X], loader_job_attach_obj[rand][L_POS_Y], loader_job_attach_obj[rand][L_POS_Z], loader_job_attach_obj[rand][L_ROT_X], loader_job_attach_obj[rand][L_ROT_Y], loader_job_attach_obj[rand][L_ROT_Z], 1.0, 1.0, 1.0, 0);

			SetPlayerLoaderJobUnLoadCP(playerid);
		}
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 1000;

		switch(step)
		{
			case 1:
			{
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 905, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 0);

				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);

				SetPlayerMinerJobUnLoadCP(playerid);
				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);
	}
}

public: SetPlayerLumberJackTakeWood(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
	{
		if(GetPlayerAnimationIndex(playerid) != 20)
			LumberJackPlayerDrop(playerid, false);
		else
		{
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_PUT);

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1463, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);

			if(!random(5))
				SetTimerEx("LumberJackPlayerDrop", 500, false, "dd", playerid, true);
		}
	}
}

public: LumberJackPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили дрова");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);

	SetPlayerLumberJackChopCP(playerid);

	return 1;
}

public: FermerRepositoryUpdate()
{
	new fmt_str[155];

	format(fmt_str, sizeof fmt_str, "- Склад -\n\n{"#cGold"}Урожай: %d / 10000", GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT));
	UpdateDynamic3DTextLabelText(GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL), 0x6495EDFF, fmt_str);
}

public: FermerMelnicaUpdate()
{
	new fmt_str[155];

	format(fmt_str, sizeof fmt_str, "- Мельница -\n\n{"#cGold"}На перемолке: %d / 10000", GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT));
	UpdateDynamic3DTextLabelText(GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_LABEL), 0x6495EDFF, fmt_str);
}

stock FermaCarUpdate(vehicleid)
{
    new str_t[155];

	format(str_t, sizeof str_t, "{FFFFFF}Загружено сена %d из 10", ceno[vehicleid]);
	//ferma_text[vehicleid] = CreateDynamic3DTextLabel( str_t, 0xFFFFFFFF, 0.0, 0.0, 0.0, 90.0, 0, 1 );
	//Attach3DTextLabelToVehicle( ferma_text[vehicleid], vehicleid, 0.0, 0.0, 1.0 );
	UpdateVehicleLabel(vehicleid,0xFFFFFFFF, str_t);
}

public: MinerCarriageUpdate(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS] && !miner_carriage[carriageid][MC_IN_MOVE])
	{
		if(miner_carriage[carriageid][MC_ORE_COUNT] >= 500)
		{
			new fmt_str[55],
				items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

			miner_carriage[carriageid][MC_ORE_COUNT] -= 500;

			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + 500);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

			format(fmt_str, sizeof fmt_str, "Разгрузка\n\n{FFCC00}Количество руды\n%d / 10000 кг", miner_carriage[carriageid][MC_ORE_COUNT]);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0x66CCFFFF, fmt_str);
		}

		else if(miner_carriage[carriageid][MC_ORE_COUNT] <= 0)
		{
			miner_carriage[carriageid][MC_IN_MOVE] = true;

			SetTimerEx("MinerCarriageMove", 7_000, false, "i", carriageid);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0xFFFF00FF, "Ожидание...");
		}
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	else
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}

	DestroyDynamic3DTextLabel(miner_carriage[carriageid][MC_LABEL]);

	miner_carriage[carriageid][MC_IN_MOVE] = true;

	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: MinerCarriageSetState(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS]) // вагонетка
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Разгрузка\n\n{FFCC00}Количество руды\n10000 / 10000 кг", 0x66CCFFFF, -2548.1213, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_ORE_COUNT] = 10_000;
	}
	else
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_PICKUP_ID] = CreatePickup(19135, 23, -845.5291,1213.5364,3011.5315, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
		miner_carriage[carriageid][MC_ORE_COUNT] = 0;
	}
}


public: StartPlayerJob(playerid, jobid)
{
	if(!IsPlayerInJob(playerid))
	{
		new job_car = GetPlayerJobCar(playerid);
		if(IsPlayerInVehicle(playerid, job_car))
		{
			new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
			new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

			if(jobid == car_type)
			{
				SetPlayerJobLoadItems(playerid, 0);

				SetPlayerData(playerid, P_JOB_WAGE, 0);
				SetPlayerData(playerid, P_IN_JOB, true);
				SetVehicleData(job_car, V_ACTION_ID, true);

				new fmt_str[128];

				if(HasJob(playerid, 7))
				{
                    new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
							
					format(fmt_str, sizeof fmt_str, "%s\n{FFFFFF}Стоимость проезда: {FF9900}%d руб", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
					CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 0.0, 2.6, 45.0);

					format(fmt_str, sizeof fmt_str, "начал работу водителя автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
					Action(playerid, fmt_str, _, false);

					NextBusRouteCP(playerid);

					SetPVarFloat(playerid, "car_damage", 1000.0);
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
	if(IsPlayerInJob(playerid))
	{
	    new job_car = GetPlayerJobCar(playerid);
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			new modelid = GetVehicleModel(vehicleid);

            if(modelid == 418) {
				DestroyVehicleLabel(job_car);
                DestroyVehicle(vehicleid);
            } 
			else {
                SetVehicleToRespawn(vehicleid);
            }

			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
			if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) DestroyVehicleLabel(job_car);

			g_player_trailer_status[playerid] = 0;
			g_player_trailer_type[playerid] = 0;

			if(g_player_trailer[playerid] != INVALID_VEHICLE_ID)
			{
				DestroyVehicle(g_player_trailer[playerid]);
				g_player_trailer[playerid] = INVALID_VEHICLE_ID;
			}
		}
	}
	if(IsPlayerInJob(playerid) && GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
	{
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
		}
	}
	KillEndJobTimer(playerid);

	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);

	SetPlayerData(playerid, P_JOB_WAGE, 0);

	SetPlayerData(playerid, P_IN_JOB, false);
	
	if(HasJob(playerid, 7))
	{
		if(stop_bus_job[playerid] == 1)
		{
            new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;

			DisablePlayerRaceCheckpoint(playerid);

			stop_bus_job[playerid] = 0;
	        CEF_HIDE(playerid, "Interactions");

			if(repair_sum < wage)
				wage -= repair_sum;

			SendClientMessage(playerid, COLOR_YELLOW, "Вы не вернулись в транспорт. Рабочий день завершен.");
		}
		else
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;

			DisablePlayerRaceCheckpoint(playerid);

			SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!");

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}%d руб", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d{FFFFFF}. Куплено билетов на {00FF00}%d руб", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "За ремонт автобуса: {FF6600}-%d руб", repair_sum);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			stop_bus_job[playerid] = 0;
	        CEF_HIDE(playerid, "Interactions");

			if(repair_sum < wage)
				wage -= repair_sum;

			if(wage != 0) 
			{
				SendClientMessage(playerid, 0x66CC00FF, "Деньги будут перечислены на Ваш счет во время зарплаты");
			}
			else SendClientMessage(playerid, 0x66CC00FF, "Денежных зачислений на этой работе не обнаружено.");
		}
	}

	AddPlayerData(playerid, P_WAGE, +, wage);

	format(fmt_str, sizeof fmt_str, "UPDATE accounts_canvasdev SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);

	return 1;
}

public: EndCarJob(playerid, veh_id)
{
	RemovePlayerFromVehicle(playerid);
	vodila[veh_id] = -1;
	if(GetPlayerData(playerid, P_TK_JOB_TYPE) == 1) SetVehicleToRespawn(veh_id);
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	SendClientMessage(playerid, -1, "Прошло 15 секунд а Вы так и не вернулись в авто. Авто было отправлено на место.");
	KillCarJobTimer(playerid);
	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
		return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}История изменения имен персонажа пуста", "Закрыть", "");
	}

	string_dialog = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(string_dialog, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{FFCD00}Прошлые имена %s", name);
	return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, string_dialog, "Закрыть", "");
}

public: ShowTestPlayer(playerid)
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", "{FFFFFF}Тут пусто :(", "Закрыть", "");
	}

	string_dialog = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(string_dialog, fmt_str);
	}
	return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "ЗБТ Доступ", string_dialog, "Закрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];

			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);

				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			IntfDialogCallRemote(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "{FFD83D}Телефонная книга", string, "Варианты", "Отмены");
		}
		else
		{
			SendClientMessage(playerid, 0xCECECEFF, "В телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "Чтобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;

	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;

		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];

		if(!g_business_gps_count)
			string = "В данный момент в списке нет бизнесов";

		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

			format(fmt_str, sizeof fmt_str, "%d. %s (%s)\n", idx + 1, GetBusinessData(businessid, B_NAME), GetCityName(GetBusinessData(businessid, B_CITY)));
			strcat(string, fmt_str);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
		IntfDialogCallRemote(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFD83D}Реклама бизнеса", string, "Отметить", "Назад");
	}
	else
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				if(GetBusinessData(businessid, B_TYPE) == 16)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Транспорт\n"\
						"3. Изменить стоимость продукта\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес\n"\
						"8. Сменить поставщика энергии",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Установить цену на вход\n"\
						"3. Изменить стоимость продукта\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес\n"\
						"8. Сменить поставщика энергии",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. Персонал\n"\
						"2. Изменить тариф\n"\
						"3. Список клиентов\n"\
						"4. Улучшить бизнес\n"\
						"5. Финансовая статистика\n"\
						"6. Отметить бизнес на GPS",
						"Выбрать", "Назад"
					);
				}
				else
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
						"2. Установить цену на топливо\n"\
						"3. Установить закупочную цену\n"\
						"4. Заказать продукты\n"\
						"5. Отменить заказ\n"\
						"6. Финансовая статистика\n"\
						"7. Улучшить бизнес",
						"Выбрать", "Назад"
					);
				}
				if(GetBusinessData(businessid, B_TYPE) == 46)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}Изменение параметров бизнеса",
						"1. Чёрный список сотрудников\n"\
						"2. Заказать запчасти\n"\
						"3. Отменить заказ\n"\
						"4. Улучшить бизнес\n"\
						"5. Финансовая статистика\n"\
						"6. Отметить бизнес на GPS\n"\
						"7. Сменить поставщика энергии",
						"Выбрать", "Назад"
					);
				}
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 46)
				{
					if(GetBusinessData(businessid, B_LOCK_STATUS))
					{
						SetBusinessData(businessid, B_LOCK_STATUS, false);
						SendClientMessage(playerid, 0x66CC00FF, "Бизнес открыт");
					}
					else
					{
						SetBusinessData(businessid, B_LOCK_STATUS, true);
						SendClientMessage(playerid, 0xFF6600FF, "Бизнес закрыт");
					}
					UpdateBusinessLabel(businessid);

					new query[75];
					mysql_format(mysql, query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);

					CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "В разработке!");
				}
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				if(GetBusinessData(businessid, B_TYPE) == 16)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_ARENDA_CAR, DIALOG_STYLE_LIST,
						"{FFFFFF}Транспорт",
						"1. Посмотреть\n"\
						"2. Купить",
						"Выбрать", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Цена за вход",
						"{FFFFFF}Укажите сколько должны платить клиенты\n"\
						"чтобы войти в ваш бизнес\n\n"\
						"{669966}Предел цен: от 0 до 1000000 рублей\n"\
						"Установка цены за вход может увеличить ваши доходы,\n"\
						"однако сократит количество клиентов\n"\
						"{CC3333}Выбирайте цену разумно во избежание банкротства вашей фирмы",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_VETR_TARIF, DIALOG_STYLE_INPUT,
						"{FFFFFF}Изменение тарифа",
						"{FFFFFF}Укажите стоимость 1 кВТ энергии для ваших клиентов\n"\
						"в диапазоне от 15 до 35 руб",
						"Готово", "Назад"
					);
				}
				else
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
						"{33AACC}Цена топлива",
						"{FFFFFF}Укажите отпускную цену за 1 литр\n"\
						"топлива в пределах от 25.000 до 500.000 рублей",
						"Готово", "Назад"
					);
				}
				if(GetBusinessData(businessid, B_TYPE) == 46)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
						"{33AACC}Заказ запчастей",
						"{FFFFFF}Сколько запчастей Вы хотите заказать?",
						"Заказать", "Назад"
					);
				}
			}
			case BIZ_OPERATION_PROD_PRICE: // установить стоимость продукта
			{
				if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37 && GetBusinessData(businessid, B_TYPE) != 43)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Стоимость продукта",
						"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
						"Укажите цену в пределах от 25 до 200 рублей\n\n"\
						"Стоимость продукта определяет привлекательность\n"\
						"вашего бизнеса для развозчиков продуктов\n"\
						"Чем выше цена, тем охотнее они продадут вам свой товар\n"\
						"Однако помните, что черезчур высокая цена\n"\
						"может привести вас к банкротству",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) == 43)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
						"{33AACC}Стоимость продукта",
						"{FFFFFF}Тут вы можете изменить стоимость продукта для бизнеса\n"\
						"Укажите цену в пределах от 5.000 до 50.000 рублей\n\n"\
						"Стоимость продукта определяет привлекательность\n"\
						"вашего бизнеса для развозчиков продуктов\n"\
						"Чем выше цена, тем охотнее они продадут вам свой товар\n"\
						"Однако помните, что черезчур высокая цена\n"\
						"может привести вас к банкротству",
						"Сменить", "Назад"
					);
				}
				else if(GetBusinessData(businessid, B_TYPE) != 37)
				{
					new queryyy[148],
						Cache: result,
						biz_name[64];

					mysql_format(mysql, queryyy, sizeof queryyy, "SELECT * FROM business WHERE typewetriki='%d'", businessid);
					result = mysql_query(mysql, queryyy, true);

					new rows = cache_num_rows();

					if(!rows)
						return SendClientMessage(playerid, 0x999999FF, "У вас не одного клиента.");

					string_dialog = "Название \t Потребление\n";
					for(new i = 0; i < rows; i ++)
					{
						cache_get_field_content(i, "name", biz_name);

						format(queryyy, sizeof queryyy, "{FFFFFF}%s<t>17 кВт\n", biz_name);
						strcat(string_dialog, queryyy);
					}

					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_TABLIST_HEADERS,
						"{FFCD00}Список клиентов",
						string_dialog,
						"", "Назад"
					);

					cache_delete(result);
					return 1;
				}
				else
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_FUEL_STATION_BUY_FUEL_PR, DIALOG_STYLE_INPUT,
						"{33AACC}Закупочная цена",
						"{FFFFFF}Закупочная цена определяет привлекательность Вашей\n"\
						"заправки для развозчиков топлива. Чем выше эта цена,\n"\
						"тем охотнее развозчики будут выполнять Ваши заказы\n\n"\
						"{669966}Введите значение от 2 до 10 рублей",
						"Изменить", "Назад"
					);
				}
				if(GetBusinessData(businessid, B_TYPE) == 46)
				{
					new order_id = GetBusinessData(businessid, B_ORDER_ID);
					if(order_id != -1)
					{
						string_dialog[0] = EOS;
						format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
							"На счет бизнеса будет возвращено {FFCD00}%d руб",
							GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
						);
						IntfDialogCallRemote(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", string_dialog, "Да", "Нет");
					}
					else
					{
						SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ запчастей для своего бизнеса");
						CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
					}
				}
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					IntfDialogCallRemote
					(
						playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
						"{33AACC}Заказ продуктов",
						"{FFFFFF}Сколько продуктов Вы хотите заказать?",
						"Заказать", "Назад"
					);
				}
				else
				{
					new fmt_str[80];

					new buffer[14 + 1];
					new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

					string_dialog[0] = EOS;

					for(new idx; idx < sizeof(g_vetr_improvements); idx ++)
					{
						format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_vetr_improvements[idx][I_NAME]);

						switch(idx)
						{
							case 0,1,4:
								buffer = "\t";

							case 5:
								buffer = "\t\t";

							default:
								buffer[0] = 0;
						}
						if(buffer[0] != EOS)
							strcat(fmt_str, buffer);

						if(i_level > idx)
						{
							strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
							strcat(fmt_str, "Куплено");
						}
						else
						{
							if(i_level < idx)
							{
								strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
							}
							strcat(string_dialog, fmt_str);

							valfmt(buffer, g_vetr_improvements[idx][I_PRICE]);
							format(fmt_str, sizeof fmt_str, "%s руб", buffer);

							if(i_level == idx)
								strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
						}
						strcat(fmt_str, "\n");
						strcat(string_dialog, fmt_str);
					}
					IntfDialogCallRemote(playerid, DIALOG_VETRIAK_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string_dialog, "Купить", "Назад");
				}
				if(GetBusinessData(businessid, B_TYPE) == 46)
				{
					new fmt_str[80];

					new buffer[14 + 1];
					new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

					string_dialog[0] = EOS;
					for(new idx; idx < sizeof(g_business_improvements); idx ++)
					{
						format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);

						switch(idx)
						{
							case 0,1,4:
								buffer = "\t";

							case 5:
								buffer = "\t\t";

							default:
								buffer[0] = 0;
						}
						if(buffer[0] != EOS)
							strcat(fmt_str, buffer);

						if(i_level > idx)
						{
							strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
							strcat(fmt_str, "Куплено");
						}
						else
						{
							if(i_level < idx)
							{
								strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
							}
							strcat(string_dialog, fmt_str);

							valfmt(buffer, g_business_improvements[idx][I_PRICE]);
							format(fmt_str, sizeof fmt_str, "%s руб", buffer);

							if(i_level == idx)
								strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
						}
						strcat(fmt_str, "\n");
						strcat(string_dialog, fmt_str);
					}
					IntfDialogCallRemote(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string_dialog, "Купить", "Назад");
				}
			}
			case BIZ_OPERATION_PROD_ORDER_CANCEL: // отменить заказ
			{
				if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 46)
				{
					new order_id = GetBusinessData(businessid, B_ORDER_ID);
					if(order_id != -1)
					{
						string_dialog[0] = EOS;
						format
						(
							string_dialog, sizeof string_dialog,
							"{FFFFFF}Вы действительно хотите отменить заказ?\n"\
							"На счет бизнеса будет возвращено {FFCD00}%d руб",
							GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
						);
						IntfDialogCallRemote(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}Отмена заказа", string_dialog, "Да", "Нет");
					}
					else
					{
						SendClientMessage(playerid, 0xFF6600FF, "Вы не оформляли заказ продуктов для своего бизнеса");
						CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
					}
				}
				else
				{
					ShowBusinessProfit(playerid, businessid);
				}
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансовая статистика
			{
				if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 46)
				{
					ShowBusinessProfit(playerid, businessid);
				}
				else EnablePlayerGPS(playerid, 55, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z), "Местоположение Вашего бизнеса отмечено на GPS");
			}
			case BIZ_OPERATION_IMPROVEMENTS: // Улучшения
			{
				if(GetBusinessData(businessid, B_TYPE) != 36)
				{
					new fmt_str[80];

					new buffer[14 + 1];
					new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

					string_dialog[0] = EOS;
					for(new idx; idx < sizeof(g_business_improvements); idx ++)
					{
						format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);

						switch(idx)
						{
							case 0,1,4:
								buffer = "\t";

							case 5:
								buffer = "\t\t";

							default:
								buffer[0] = 0;
						}
						if(buffer[0] != EOS)
							strcat(fmt_str, buffer);

						if(i_level > idx)
						{
							strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
							strcat(fmt_str, "Куплено");
						}
						else
						{
							if(i_level < idx)
							{
								strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
							}
							strcat(string_dialog, fmt_str);

							valfmt(buffer, g_business_improvements[idx][I_PRICE]);
							format(fmt_str, sizeof fmt_str, "%s руб", buffer);

							if(i_level == idx)
								strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
						}
						strcat(fmt_str, "\n");
						strcat(string_dialog, fmt_str);
					}
					IntfDialogCallRemote(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}Доступные улучшения", string_dialog, "Купить", "Назад");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "В разработке!");
				}
				if(GetBusinessData(businessid, B_TYPE) == 46)
				{
					new fmt_text[148];
    
                    string_dialog = "Поставщик \t Нагрузка \t Цена";

                    for(new i; i < g_business_loaded; i++)
                    {
                        if(GetBusinessData(i, B_TYPE) != 36) continue;

                        format(fmt_text, sizeof fmt_text, 
                            "\n{FFFFFF}Ветряная электростанция №%d %s \t %d шт(Нагруженность %d%%) \t %d руб за кВт\n", 
                            GetBusinessData(i, B_ELECTRICITY),
                            GetBusinessData(i, B_VETR_WORK) ? "{66CC33}Работает" : "{CC3333}Сломан",
                            GetBusinessData(i, B_TYPEWETRIKI),
                            GetBusinessData(i, B_TYPEWETRIKI),
                            GetBusinessData(i, B_PROD_PRICE)
                        );
                        strcat(string_dialog, fmt_text);
                    }
                    IntfDialogCallRemote(playerid, DIALOG_BIZ_ELECT, DIALOG_STYLE_TABLIST_HEADERS, "Смена поставщика энергии", string_dialog, "Выбрать", "Закрыть");
				}
			}
			case BIZ_OPERATION_PRICE_ELECTR: 
			{
				new fmt_text[148];
    
                string_dialog = "Поставщик \t Нагрузка \t Цена";

                for(new i; i < g_business_loaded; i++)
                {
                    if(GetBusinessData(i, B_TYPE) != 36) continue;

                    format(fmt_text, sizeof fmt_text, 
                        "\n{FFFFFF}Ветряная электростанция №%d %s \t %d шт(Нагруженность %d%%) \t %d руб за кВт\n", 
                        GetBusinessData(i, B_ELECTRICITY),
                        GetBusinessData(i, B_VETR_WORK) ? "{66CC33}Работает" : "{CC3333}Сломан",
                        GetBusinessData(i, B_TYPEWETRIKI),
                        GetBusinessData(i, B_TYPEWETRIKI),
                        GetBusinessData(i, B_PROD_PRICE)
                    );
                    strcat(string_dialog, fmt_text);
                }
                IntfDialogCallRemote(playerid, DIALOG_BIZ_ELECT, DIALOG_STYLE_TABLIST_HEADERS, "Смена поставщика энергии", string_dialog, "Выбрать", "Закрыть");
			}
		}
	}

	return 1;
}

stock ShowBusinessProfit(playerid, businessid)
{
	new query[284],
	Cache: result;

	new time = gettime();
	new cur_day = time - (time % 86400);
	new start_day = cur_day - (86400 * 20);

	//new start_day = time - (86400 * 20);
	

	mysql_format(mysql, query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, COUNT(*), SUM(money) as total FROM business_profit WHERE business_id=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	string_dialog[0] = EOS;

	new fmt_str[94];

	if(rows)
	{
		string_dialog = "{b9b9b1}Дата\t\t\tПрибыль\t\t\tУникальных клиентов\n\n{FFFFFF}";

		for(new i; i < rows; i ++)
		{
			cache_get_row(i, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string_dialog, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t\t{6ad481}%s руб\t\t\t{dcd07a}%d человек.\n{FFFFFF}", formatInt(cache_get_row_int(i, 2)), cache_get_row_int(i, 1));
			strcat(string_dialog, fmt_str);
		}
	}
	else string_dialog = "{FFFFFF}Финансовая статистика Вашего бизнеса еще не сформирована";

	IntfDialogCallRemote(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Доход бизнеса за 20 дней", string_dialog, "<< Назад", "");

	cache_delete(result);
}

public: PresentFlowersToPlayer(playerid, to_player)
{
	SetPlayerAmmo(playerid, WEAPON_FLOWER, 0);
	GiveWeapon(to_player, WEAPON_FLOWER, 1);
}

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Рабочее место №%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{FF6600}Занято") : ("{33CC00}Свободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFEE, fmt_str);
}

public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}

#if defined RAND_WEATHER
public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);

	SendClientMessageToAll(0x3399FFFF, "[Прогноз погоды]");

	format(fmt_str, sizeof fmt_str, "В области ожидается %s {99CC00}(+%d °С)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	SetWeather(g_weather[rand][W_ID]);
}
#endif

public: PlayerOwnableCarInit(playerid, idcar)
{
	new index;
	new vehicleid = -1;


	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[1024];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		format
		(
			query, sizeof query,
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"gidra=%d,"\
			"nitro=%d,"\
			"mileage=%f,"\
			"health=%f,"\
			"rent=%d,"\
			"rentp=%d,"\
			"pnewma_1=%f,"\
			"pnewma_2=%f,"\
			"pnewma=%d,"\
			"engineacceleration=%f,"\
			"maxgearvelocity=%f,"\
			"sab=%d,"\
			"sab_x=%f,"\
			"sab_y=%f,"\
			"sab_z=%f,"\
			"maslo=%d,"\
			"maslo_filter=%d,"\
			"filter=%d,"\
			"vinil=%d,"\
			"fuel=%f,"\
			"iznos=%d,"\
			"gryaz=%f,"\
			"number_status=%d,"\
			"number='%s' "\
			"horn=%d,"\
			"WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetOwnableCarData(index, OC_GIDRA),
			GetOwnableCarData(index, OC_NITRO),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
			GetVehicleData(vehicleid, V_RENT),
			GetVehicleData(vehicleid, V_RENTP),
			GetOwnableCarData(index, OC_PNEWMA_1),
			GetOwnableCarData(index, OC_PNEWMA_2),
			GetOwnableCarData(index, OC_PNEWMA),
			GetOwnableCarData(index, OC_ENGINE_ACCELERATION),
			GetOwnableCarData(index, OC_MAX_VELOCITY),
			GetOwnableCarData(index, OC_SAB),
			GetOwnableCarData(index, OC_SAB_X),
			GetOwnableCarData(index, OC_SAB_Y),
			GetOwnableCarData(index, OC_SAB_Z),
			GetOwnableCarData(index, OC_MASLO),
			GetOwnableCarData(index, OC_MASLO_FILTER),
			GetOwnableCarData(index, OC_FILTER),
			GetOwnableCarData(index, OC_VINIL),
			GetVehicleData(vehicleid, V_FUEL),
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleData(vehicleid, V_GRYAZ),
			GetOwnableCarData(index, OC_NUMBER_STATUS),
			GetOwnableCarData(index, OC_NUMBER),
			horn,
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);

        return mysql_errno();
	}
	return -1;
}

public: SaveRentCar(vehicleid)
{
	if(IsARentCar(vehicleid))
	{
		new query[700];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);


		mysql_format(mysql, query, sizeof query, "UPDATE arenda_cars SET milleage=%f, iznos=%f, maslo=%d WHERE id=%d", GetVehicleData(vehicleid, V_MILEAGE),GetRentCarData(index, R_IZNOS),GetRentCarData(index, R_MASLO),GetRentCarData(index, R_SQL_ID));
		mysql_query(mysql, query, false);

		return mysql_errno();
	}
	return -1;
}

public: SaveCarsharingCar(vehicleid)
{
	if(IsACarshCar(vehicleid))
	{
		new query[700];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);


		mysql_format(mysql, query, sizeof query, "UPDATE carsharing_cars SET milleage=%f, iznos=%f, maslo=%d WHERE id=%d", GetVehicleData(vehicleid, V_MILEAGE),GetCarshCarData(index, OC_IZNOS),GetCarshCarData(index, OC_MASLO),GetCarshCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		return mysql_errno();
	}
	return -1;
}


stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два

    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто

	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

stock GetVehicleTurnSignalPos(vehicleid, type, &Float:x, &Float:y)
{
	/*

		Типы:
		1 - левый передний
		2 - левый задний
		3 - правый передний
		4 - правый задний

	*/

	new Float: size_x,
		Float: size_y,
		Float: size_z;

	GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, size_x, size_y, size_z);

	switch(type)
	{
		case 1:
		{
			x = -(size_x / 2) + 0.3;
			y = size_y / 2 - 0.5;
		}
		case 2:
		{
			x = -(size_x / 2) + 0.3;
			y = -(size_y / 2) + 0.4;
		}
		case 3:
		{
			x = size_x / 2 - 0.3;
			y = size_y / 2 - 0.5;
		}
		case 4:
		{
			x = size_x / 2 - 0.3;
			y = -(size_y / 2) + 0.4;
		}
	}

	return 1;
}

stock SetVehicleToHotelRespawn(hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;

			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);

			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;

	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);

	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[500];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new numberss[25];
		new fuels[25];
		if(GetVehicleInfo(model_id, VI_TYPE_FUEL) == 33) format(fuels, sizeof fuels,"Дизель");
		if(GetVehicleInfo(model_id, VI_TYPE_FUEL) == 92) format(fuels, sizeof fuels,"92");
		if(GetVehicleInfo(model_id, VI_TYPE_FUEL) == 95) format(fuels, sizeof fuels,"95");
		if(GetVehicleInfo(model_id, VI_TYPE_FUEL) == 98) format(fuels, sizeof fuels,"98");
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 0) format(numberss, sizeof numberss,"[номера нет]");
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 1) format(numberss, sizeof numberss,"[RU %s %s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 2) format(numberss, sizeof numberss,"[KZ %s %s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 3) format(numberss, sizeof numberss,"[BY %s%s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 4) format(numberss, sizeof numberss,"[UA %s%s]",GetOwnableCarData(index, OC_NUMBER),GetOwnableCarData(index, OC_REGION));
		if(GetOwnableCarData(index, OC_NUMBERTYPE) == 5) format(numberss, sizeof numberss,"[CUS %s]",GetOwnableCarData(index, OC_NUMBER));
		format
		(
			fmt_str, sizeof fmt_str,
			"[[5,[\"%s\",\"%s\",\"%s\",%d,\"%s\",\"-\",%d]],[6,[\"%s\",[[\"%s\",%d,%d]]]]]",
			GetVehicleInfo(model_id, VI_NAME),
			GetPlayerNameEx(GetPVarInt(playerid, "owenrname")),
			numberss,
			GetVehicleInfo(model_id, VI_PRICE),
			fuels,
			GetVehicleData(vehicleid, V_IZNOS),
			GetVehicleInfo(model_id, VI_NAME),
			GetPlayerNameEx(playerid),
			GetOwnableCarData(index, OC_SQL_ID),
			(GetVehicleInfo(model_id, VI_TYPE) + 1)
		);
		CEF_HIDE(playerid, "Docs");
		CEF_CREATE(playerid, 2, 4, "Docs",fmt_str);

		return 1;
	}
	return 0;
}

stock ShowShin(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new fmt_str[500];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Износ передней левой шины:\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ задней левой шины:\t\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ передней правой шины:\t{3399FF}%.3f%%\n"\
			"{FFFFFF}Износ задней правой шины:\t\t{3399FF}%.3f%",
			GetOwnableCarData(index, OC_KOLESO_1),
			GetOwnableCarData(index, OC_KOLESO_2),
			GetOwnableCarData(index, OC_KOLESO_3),
			GetOwnableCarData(index, OC_KOLESO_4)
		);
		IntfDialogCallRemote(playerid, DIALOG_REPLACE_TIRE, DIALOG_STYLE_LIST, "{ffffff}Выберите шину", fmt_str, "Закрыть", "");

		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);

	IntfDialogCallRemote
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST,
		"{FFD83D}Система управления транспортом",
		"{FFFFFF}1. Отметить транспорт на GPS\n"\
		"{888888}2. Загрузить транспорт\n"\
		"{FFFFFF}3. Доставить на штрафстоянку [500 руб.]",
		"Выбрать", "Закрыть"
	);
}

stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;

		return 1;
	}

	return 0;
}

stock IsTrailerAttachedToAnyVehicle(trailerid)
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
		if(!IsValidVehicle(i)) continue;

		if(GetVehicleTrailer(i) == trailerid)
			return 1;
	}

	return 0;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetElapsedTime(GetHotelData(hotel_id, room_id, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
		if(rent_days < 0)
		{
			rent_days = 0;
		}

		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Оплаченных дней:\t\t%d из 7\n"\
			"Ежедневная плата:\t\t1000 руб\n\n"\
			"На сколько дней Вы хотите оплатить номер?",
			rent_days
		);
		IntfDialogCallRemote(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}Оплата проживания в отеле", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}Меню клиента",
			"1. Оплатить проживание\n"\
			"2. Информация о транспорте\n"\
			"3. Отметить транспорт на GPS\n"\
			"4. Подогнать транспорт к отелю (1000 руб)\n"\
			"5. Продать транспорт\n"\
			"6. Выселиться из отеля",
			"Выбрать", "Назад"
		);
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid] / 12;

		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;

			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 490.0204, -992.8733, 1002.9255))
			{
				new floor = (room_id / 12) + 1;
				new index = (room_id % 12) / 5;

				SetPlayerPosEx
				(
					playerid,
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0,
					floor,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
		{
			SetPlayerPosEx(playerid, 491.5204, -992.8733, 1002.9255, 0.0, 6, ((hotel_id + 1) * 400) + (room_id + 2000));
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);

			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
		}
		else GameText(playerid, "~r~Закрыто", 2500, 2);
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	IntfDialogCallRemote(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "{FFD83D}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Выход\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	IntfDialogCallRemote(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "{FFD83D}Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];

			new rent_time;
			new time = gettime();

			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;

			string = "Номер\t\tСтатус\t\tОплаченные дни\tПостоялец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetElapsedTime(GetHotelData(hotel_id, s_idx, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS);
					if(rent_time < 0)
						rent_time = 0;

					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("Занят\t") : ("Выселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\tСвободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);

				s_idx ++;
			}

			format(fmt_str, sizeof fmt_str, "{66CC99}Список номеров на %d этаже", floor_id + 1);
			IntfDialogCallRemote(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Назад", "Закрыть");
		}
	}
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new fmt_str[800],
	    rank_value[3] = "—";

    if(1 <= GetPlayerTeamEx(playerid) <= 10)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Имя:<t><t><t><t>{0099FF}%s\n"\
		"{FFFFFF}Уровень:<t><t><t>%d\n"\
		"Очки опыта:<t><t><t>%d из %d\n"\
		"Уровень RolePlay:<t><t><t>%d\n"\
		"Номер телефона:<t><t>%d\n"\
		"На счету телефона:<t><t>%d руб\n"\
		"Законопослушность:<t><t>%d\n"\
		"Уровень розыска:<t><t>%d\n"\
		"Уровень улучшений:<t><t>%d\n"\
		"Сила:<t><t><t><t>%d\n"\
		"Пол:<t><t><t><t>%s\n"\
		"%s:<t><t><t>%s\n"\
		"Военный билет:<t><t><t>%s\n\n"\
		"%s"\
		"Работа / должность:<t><t>%s\n"\
		"Ранг:<t><t><t><t>%s\n\n"\
		"Проживание:<t><t><t>%s\n"\
		"Бизнесов:<t><t><t>%s\n"\
		"Игровой статус:<t><t>%s\n",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		RPPoint[playerid],
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE),
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("Замужем за") : ("Женат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerData(playerid, P_VOEN) ? ("Есть") : ("{A9A9A9}Нет{FFFFFF}"),
		GetPlayerTeamStats(playerid),
		GetPlayerJobAndRankName(playerid),
		rank_value,
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid)
	);
	return IntfDialogCallRemote(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "{FFD83D}Статистика игрока", fmt_str, "Назад", "Закрыть");
}

stock AddCommasToInt(number, const delimiter[2] = ".")
{
    new int_string[10+3+1+1];
 
    format(int_string, sizeof(int_string), "%d", number >= 0 ? number : -number);//Если число положительное - запишем его в обычном виде. Иначе - добавим ещё один минус, дабы сделать его положительным
 
 
    new value = strlen(int_string);// Запишем в value размер строки с числом
 
    switch(value)
    {
        case 4..6: // Если переданное число содержит от 4-х до 6-и символов, добавим один разделитель
                    strins(int_string, delimiter, value-3,1);
        case 7..9: // Если от 7-и до 9-и - два разделителя
                    strins(int_string, delimiter, value-3,1),
                    strins(int_string, delimiter, value-6,1);
        case 10..12: // Если от 10-и до 12-и - три разделителя
                    strins(int_string, delimiter, value-3,1),
                    strins(int_string, delimiter, value-6,1),
                    strins(int_string, delimiter, value-9,1);
    }  
   
    if(number < 0) strins(int_string, "-", 0); // Если число отрицательное, вернём ему минус
    return int_string;
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{
		new businessid = GetPlayerInBiz(playerid);

		IntfDialogCallRemote
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			GetBusinessData(businessid, B_NAME),
			"1. Список номеров\n"\
			"2. Регистрация\n"\
			"3. Меню клиента",
			"Выбрать", "Закрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 30:
					hotel_id = 0;

				case 31:
					hotel_id = 1;

				case 32:
					hotel_id = 2;

				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;

					// static const
					//	p_object_id[3] = {1954, 2926, 1718};

					// static const
					//	Float: p_object_z[3] = {0.09, 0.0, 0.06};

					// new rand = random(sizeof(p_object_id));
					// new Float: x, Float: y, Float: z;
					// GetPlayerPos(playerid, x, y, z);

					new Float: angle;

					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);

					if(!((deskid / 9) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);

					//factory_object[playerid] = CreateDynamicObject(p_object_id[rand], x, y, 1044.08 + p_object_z[rand], 0.0, 0.0, angle + 180.0);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);

					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);

					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0x999999FF, "Возьмите металл находящийся в коробке на полках");
				}
			}
		}
		else
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);

					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);

	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);

	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Лимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // Пиво, Коньяк, Виски
		{
			action_id = 20;
		}
		case 3..5, 8: // Вино, Шампанское, Водка, Абсент
		{
			action_id = 22;
		}
		case 9: // Закуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}

			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // Сигара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
			T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}

		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;

			SetPlayerChatBubble(playerid, "Брак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
		}
		else
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return ;
			SetPlayerTempJobCheckAnim(playerid, false);

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			SendClientMessage(playerid, 0xFF6600FF, "Вы уронили продукт");
		}

		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);

		GameText(playerid, "~r~~h~Ошибка", 4000, 2);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}
stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerTeamEx(playerid) <= 0)
		{
			new select_skin = GetPlayerSelectSkin(playerid);
			if(select_skin == -1)
			{
				new type = GetBusinessData(businessid, B_INTERIOR);
				new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
				new
					Float: cam_x, Float: cam_y, Float: cam_z,
					Float: v_cam_x, Float: v_cam_y, Float: v_cam_z;

				GetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
				GetPlayerCameraFrontVector(playerid, v_cam_x, v_cam_y, v_cam_z);

				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, 1992.2747,1899.1699,1001.0000,316.4599, interior, playerid + 32, false);

				InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, 1993.2646,1900.5430,1001.5000, 1000, CAMERA_MOVE);
				InterpolateCameraLookAt(playerid, cam_x + floatmul(v_cam_x, 5.0), cam_y + floatmul(v_cam_y, 5.0), cam_z + floatmul(v_cam_z, 5.0), 1992.6815,1898.9471,1001.3500, 2000, CAMERA_MOVE);

				ShowPlayerSelectPanelSkin(playerid);
			//	SetPlayerSelectClothingSkin(playerid, 0);
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы состоите в организации, купить новую внешность нельзя");
	}
}

public: HidePlayerSelectPanelPriceTimer(playerid)
{
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	return 1;
}

stock CreateTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] == -1)
		{
			g_teleport_object[playerid][idx] = CreatePlayerObject(playerid, 3034, 0.0, 0.0, -2000.0, 0.0, 0.0, 0.0);
		}
	}
}

stock DestroyTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_teleport_object[playerid][idx]);
			g_teleport_object[playerid][idx] = -1;
		}
	}
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать

	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);

		dist = floatabs(dist);
	}
}

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);

		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;

		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;

		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);

	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id = -1,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `accounts_canvasdev` WHERE name = '%e' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows()) 
		sql_id = cache_get_field_content_int(0, "id");

	cache_delete(result);

	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21],
		query[80],
		Cache: result;

	format(query, sizeof query, "SELECT * FROM `accounts_canvasdev` WHERE id=%d", sql_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
  		cache_get_field_content(0, "name", name);

	cache_delete(result);

	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTRACE) == -1)
	{
		if(GetHouseData(houseid, H_ENTER_PICKUP))
			DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));

		if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
			DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));

		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 7)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 23, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}

stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
				type = GetHouseData(houseid, H_TYPE);

				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Шкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));

			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}

stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new houseid = GetPVarInt(playerid, "ownablehouse_id");
	if(houseid != -1)
	{
		if(GetPlayerData(playerid, P_ID_SPAWN) == houseid && GetPlayerData(playerid, P_SPAWN) == 1) SetPlayerData(playerid, P_ID_SPAWN, -1), UpdatePlayerDatabaseInt(playerid, "id_spawn", -1), SetPlayerData(playerid, P_SPAWN, 0), UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
		
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = house_price / 100 * 70;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);

		if(house_improvemnts_price)
			house_improvemnts_price = house_improvemnts_price / 100 * 70;

		new query[200];
		new return_money = (house_price - house_percent) + house_improvemnts_price;

		CallLocalFunction("EvictHouseRentersAll", "i", houseid);

		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);

		DeleteAcsHome(playerid, to_player);

		SetHouseData(houseid, H_OWNER_ID,		0);

		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));

			BankLog(playerid, return_money, "Продажа дома");

			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts_canvasdev a,houses h SET a.bank=%s,a.house_type=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			UpdateHouse(houseid);

			HouseHealthInit(houseid);
			HouseStoreInit(houseid);

			ModifyCashBalance(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой дом!");

			format(query, sizeof query, "Налог за продажу дома составил 70 процентов от его стоимости {99CC00}(%d руб)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 30 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				CallLocalFunction("EntranceStatusInit", "i", entranceid);
			}
		}
		else
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{

				ModifyCashBalance(playerid, price, "Продажа дома игроку");

				house_price = price;
				house_percent = 0;
			}
			else return 1;
		}
		format(query, sizeof query, "~g~+%d рублей~n~+%d рублей", (house_price - house_percent), house_improvemnts_price);
		GameText(playerid, query, 4000, 2);
	}
	return 1;
}

stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
	if(!IsHouseOwned(houseid))
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);

		if(VerifyIntString(QueryPlayerBalance(playerid), price))
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts_canvasdev a, houses h SET a.money=%s,a.house_type=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", SetILPlayerInt(playerid, QueryPlayerBalance(playerid), -price), HOUSE_TYPE_HOME, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);

				SetHouseData(houseid, H_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetHouseData(houseid, H_IMPROVEMENTS, 	0);

				SetHouseData(houseid, H_STORE_X, 0.0);
				SetHouseData(houseid, H_STORE_Y, 0.0);
				SetHouseData(houseid, H_STORE_Z, 0.0);

				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;

				if(!buy_from_owner)
				{
					SetHouseData(houseid,	H_RENT_DATE,	rent_time);
					SetHouseData(houseid,	H_LOCK_STATUS,	false);

					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						CallLocalFunction("EntranceStatusInit", "i", entranceid);
					}
				}
				else
				{
					if(GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetHouseData(houseid, H_RENT_DATE, rent_time);
					}
				}
				format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

				UpdateHouse(houseid);

				HouseHealthInit(houseid);
				HouseStoreInit(houseid);

				ModifyCashBalance(playerid, -price, "Покупка дома", false, true);
				SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
				SendClientMessage(playerid, 0x66CC00FF, "Напишите {3399FF}/home {66CC00}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");

			return 0;
		}
		return 0;
	}
	return -1;
}

stock EnterPlayerToHouse(playerid, houseid)
{
	if(GetPlayerInHouse(playerid) == -1)
	{
		new type = GetHouseData(houseid, H_TYPE);

		SetPlayerPosEx
		(
			playerid,
			GetHouseTypeInfo(type, HT_ENTER_POS_X),
			GetHouseTypeInfo(type, HT_ENTER_POS_Y),
			GetHouseTypeInfo(type, HT_ENTER_POS_Z),
			GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
			GetHouseTypeInfo(type, HT_INTERIOR),
			houseid + 2000
		);
		SetPlayerInHouse(playerid, houseid);
		OverlayScreen(playerid);
	}
}

stock ExitPlayerFromHouse(playerid, Float: radius = 3.0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
		{
			SetPlayerInHouse(playerid, -1);
			OverlayScreen(playerid);

			SetPlayerPosEx
			(
				playerid,
				GetHouseData(houseid, H_EXIT_POS_X),
				GetHouseData(houseid, H_EXIT_POS_Y),
				GetHouseData(houseid, H_EXIT_POS_Z),
				GetHouseData(houseid, H_EXIT_ANGLE),
				0,
				0
			);
		}
		return 1;
	}
	return 0;
}

stock GetPlayerHouse(playerid, home = 1)
{
	new fmt_text[64],
		Cache: result;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	if(!cache_num_rows()) home = -1;

	cache_delete(result);

	return home;
}

stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);

	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;

	result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));

	return result;
}

stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_player_driving_exam[playerid] = g_driving_exam_default_values;

	g_pickup_flood[playerid] = 0;
	g_teleport_object[playerid] = {-1, -1};
//	player_in_city_zone[playerid] = -1;

    g_temp_vehicle2[playerid] = INVALID_VEHICLE_ID;

	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);

	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);

	AntiFloodPlayerInit(playerid);
	// ClearBankAccountsData(playerid);

	DestroyTeleportObjects(playerid);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif

	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif
}

stock GetFreeHousesCount()
{
	new count;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);

				new string[144];
				new time = gettime();

				new s_year, s_month, s_day; // поселение
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);

				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);

				format
				(
					string, sizeof string,
					"1. Арендатор\t\t\t{CCCC00}%s\n"\
					"2. Поселился\t\t\t%02d-%02d-%d\n"\
					"3. Проживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. Выселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				IntfDialogCallRemote(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "{33AACC}Информация о арендаторе", string, "Действие", "Назад");
			}
			else SendClientMessage(playerid, 0x999999FF, "В этой комнате уже никто не проживает");
		}
	}
}

stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;

		new time = gettime();

		format(query, sizeof query, "UPDATE accounts_canvasdev SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);

		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);

		format(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME), 21, GetPlayerNameEx(playerid));

		SetPlayerData(playerid, P_HOUSE, 		houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_ROOM);
		SetPlayerData(playerid, P_HOUSE_ROOM, 	roomid);

		AddHouseRentersCount(houseid, +, 1);

		cache_delete(result);
	}
}

stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];

		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts_canvasdev SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));

			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил Вас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x3399FFFF, query);
					}

					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}

			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);

			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}

stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;

	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;

		index = idx;
		break;
	}
	return index;
}

stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;

		roomid = idx;
		break;
	}
	return roomid;
}

stock HidePlayerSelectPanelSkin(playerid)
{
	CEF_HIDE(playerid, "ClothingStore");
}

stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;

	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;

		is_have = true;
		break;
	}
	return is_have;
}

stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
		    VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_RERFECT:
		{
			return 1;
		}
	}
	return 0;
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;

	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;

	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;

		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock LoadOrders()
{
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM orders");
	rows = cache_num_rows();

	if(rows > sizeof g_order)
		rows = sizeof g_order;

	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetOrderData(idx, O_SQL_ID,	cache_get_row_int(idx, 0));
		SetOrderData(idx, O_TYPE, 	cache_get_row_int(idx, 1));

		SetOrderData(idx, O_COMPANY_ID, cache_get_row_int(idx, 2));
		SetOrderData(idx, O_AMOUNT, 	cache_get_row_int(idx, 3));
		SetOrderData(idx, O_PRICE, 		cache_get_row_int(idx, 4));
		SetOrderData(idx, O_TIME, 		cache_get_row_int(idx, 5));
		SetOrderData(idx, O_USED, 		false);

		buffer = GetOrderData(idx, O_COMPANY_ID);
		switch(GetOrderData(idx, O_TYPE))
		{
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);

	printf("[Orders]: Заказов загружено: %d", rows);
}

stock CreateOrder(type, company, amount, price)
{
	new order_id = GetOrderFreeSlot();

	new query[128];
	new Cache: result;
	new time = gettime();

	format(query, sizeof query, "INSERT INTO orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d,%d)", type, company, amount, price, time);
	result = mysql_query(mysql, query, false);

	new day, month, year;
	getdate(day, month, year);

	SetOrderData(order_id, O_TYPE, type);
	SetOrderData(order_id, O_COMPANY_ID, company);
	SetOrderData(order_id, O_AMOUNT, amount);
	SetOrderData(order_id, O_PRICE, price);
	SetOrderData(order_id, O_TIME, time);
	SetOrderData(order_id, O_USED, false);

	SetOrderData(order_id, O_SQL_ID, cache_insert_id());

	SetBusinessData(company, B_ORDER_ID, order_id);

	cache_delete(result);

	return order_id;
}

stock DeleteOrder(orderid)
{
	if(GetOrderData(orderid, O_SQL_ID) > 0)
	{
		new query[64];
		new company = GetOrderData(orderid, O_COMPANY_ID);

		switch(GetOrderData(orderid, O_TYPE))
		{
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}

		format(query, sizeof query, "DELETE FROM orders WHERE type=%d AND company=%d", GetOrderData(orderid, O_TYPE), GetOrderData(orderid, O_COMPANY_ID));
		mysql_query(mysql, query, false);

		SetOrderData(orderid, O_SQL_ID, 0);
		SetOrderData(orderid, O_PRICE,  0);
		SetOrderData(orderid, O_AMOUNT, 0);
	}
}

stock GetOrderFreeSlot()
{
	new slot = -1;

	for(new idx; idx < sizeof g_order; idx ++)
	{
		if(GetOrderData(idx, O_SQL_ID) > 0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock LoadFuelOrders()
{
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM fuel_orders");
	rows = cache_num_rows();

	if(rows > sizeof g_fuelorder)
		rows = sizeof g_fuelorder;

	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetFuelOrderData(idx, F_SQL_ID,	cache_get_row_int(idx, 0));
		SetFuelOrderData(idx, F_TYPE, 	cache_get_row_int(idx, 1));

		SetFuelOrderData(idx, F_COMPANY_ID, cache_get_row_int(idx, 2));
		SetFuelOrderData(idx, F_AMOUNT, 	cache_get_row_int(idx, 3));
		SetFuelOrderData(idx, F_PRICE, 		cache_get_row_int(idx, 4));
		SetFuelOrderData(idx, F_TIME, 		cache_get_row_int(idx, 5));
		SetFuelOrderData(idx, F_USED, 		false);

		buffer = GetFuelOrderData(idx, F_COMPANY_ID);
		switch(GetFuelOrderData(idx, F_TYPE))
		{
			case ORDER_TYPE_AZS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);

	printf("[OrdersFuel]: Заказов загружено: %d", rows);
}

stock CreateFuelOrder(type, company, amount, price)
{
	new order_id = GetFuelOrderFreeSlot();

	new query[128];
	new Cache: result;
	new time = gettime();

	format(query, sizeof query, "INSERT INTO fuel_orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d,%d)", type, company, amount, price, time);
	result = mysql_query(mysql, query, false);

	new day, month, year;
	getdate(day, month, year);

	SetFuelOrderData(order_id, F_TYPE, type);
	SetFuelOrderData(order_id, F_COMPANY_ID, company);
	SetFuelOrderData(order_id, F_AMOUNT, amount);
	SetFuelOrderData(order_id, F_PRICE, price);
	SetFuelOrderData(order_id, F_TIME, time);
	SetFuelOrderData(order_id, F_USED, false);

	SetFuelOrderData(order_id, F_SQL_ID, cache_insert_id());

	SetBusinessData(company, B_ORDER_ID, order_id);

	cache_delete(result);

	return order_id;
}

stock DeleteFuelOrder(orderid)
{
	if(GetFuelOrderData(orderid, F_SQL_ID) > 0)
	{
		new query[64];
		new company = GetFuelOrderData(orderid, F_COMPANY_ID);

		switch(GetFuelOrderData(orderid, F_TYPE))
		{
			case ORDER_TYPE_AZS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}

		format(query, sizeof query, "DELETE FROM fuel_orders WHERE type=%d AND company=%d", GetFuelOrderData(orderid, F_TYPE), GetFuelOrderData(orderid, F_COMPANY_ID));
		mysql_query(mysql, query, false);

		SetFuelOrderData(orderid, F_SQL_ID, 0);
		SetFuelOrderData(orderid, F_PRICE,  0);
		SetFuelOrderData(orderid, F_AMOUNT, 0);
	}
}

stock GetFuelOrderFreeSlot()
{
	new slot = -1;

	for(new idx; idx < sizeof g_fuelorder; idx ++)
	{
		if(GetFuelOrderData(idx, F_SQL_ID) > 0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");
	if(businessid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Бизнес:\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней аренды:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t%d руб\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Пониженная")
		);
		IntfDialogCallRemote(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{66CC00}Аренда бизнеса", fmt_str, "Оплатить", "Назад");
	}
}
stock ShowPlayerKioskPayForRent(playerid)
{
	new kiosk_id = GetPVarInt(playerid, "ownablekiosk_id");
	if(kiosk_id != -1)
	{
		new fmt_str[540];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Киоск:<t><t><t><t>№%d (%s)\n"\
			"Оплаченных дней аренды:<t><t>%d из 7\n"\
			"Ежедневная арендная плата:<t>%d руб\n"\
			"На сколько дней Вы хотите арендовать киоск?",
			kiosk_id,
			GetKioskData(kiosk_id, K_NAME),
			GetKioskData(kiosk_id, K_RENT_DATE),
			GetKioskData(kiosk_id, K_RENT_PRICE)
		);
		IntfDialogCallRemote(playerid, DIALOG_PAY_FOR_RENT_KIOSK, DIALOG_STYLE_INPUT, "{66CC00}Аренда киоска", fmt_str, "Оплатить", "Назад");
	}
}
stock ShowPlayerHousePayForRent(playerid)
{
	new query[256],
		Cache: result,
		biz_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows) return SendClientMessage(playerid, 0x999999FF, "У вас не одного дома во владении.");

	string_dialog[0] = EOS;
	for(new i = 0; i < rows; i ++)
	{
		biz_id = cache_get_field_content_int(i, "id");
		new entrance = cache_get_field_content_int(i, "entrance");

		if(entrance == -1)
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Дом: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Дом: %d\n", biz_id);
		}
		else
		{
			if(biz_id == GetPlayerData(playerid, P_ID_SPAWN) && GetPlayerData(playerid, P_SPAWN) == 1) format(query, sizeof query, "{FFFFFF}-Квартира: %d | (база)\n", biz_id);
			else format(query, sizeof query, "{FFFFFF}-Квартира: %d\n", biz_id);
		}

		strcat(string_dialog, query);
		SetPlayerListitemValue(playerid, i, biz_id-1);
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_PAY_FOR_RENT_HOME, DIALOG_STYLE_LIST,
		"{FFCD00}Выберите дом",
		string_dialog,
		"Выбрать", "Закрыть"
	);

	cache_delete(result);
	return 1;
}
stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPVarInt(playerid, "ownablebiz_id");

	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = biz_price / 100 * 60;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);

		if(biz_improvemnts_price)
			biz_improvemnts_price = biz_improvemnts_price / 100 * 35;

		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;

		//SetPlayerData(playerid, P_BUSINESS, 		-1);

		SetBusinessData(businessid, B_OWNER_ID, 	0);

		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));

			BankLog(playerid, return_money, "Продажа бизнеса");

			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);

			SetBusinessData(businessid, B_BALANCE,			0);

			format(g_business[businessid][B_BALANCE], 21, "0");
			
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);

			BusinessHealthPickupInit(businessid);

			format(query, sizeof query, "UPDATE accounts_canvasdev a,business b SET a.bank=%s,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			ModifyCashBalance(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);

			SendClientMessage(playerid, 0x66CC00FF, "Вы продали свой бизнес!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 60 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 35 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 20 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts_canvasdev SET money=%s WHERE id=%d LIMIT 1", SetILPlayerInt(playerid, QueryPlayerBalance(playerid), total_price), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);

				g_business_gps_init = false;

				STRING_GLOBAL[0] = EOS;
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Продажа бизнеса игроку %s[%d]", GetPlayerNameEx(to_player), to_player);
				ModifyCashBalance(playerid, total_price, STRING_GLOBAL, false, false);

				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		//format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		//CefGameTextForPlayer(playerid, query, 4000, 1);
	}
}
stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
    new fmt_str[64];
    if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
	{
		if(!IsBusinessOwned(businessid))
		{
			if(price <= 0)
				price = GetBusinessData(businessid, B_PRICE);

			if(VerifyIntString(QueryPlayerBalance(playerid), price))
			{
				new query[256];

				format(query, sizeof query, "UPDATE accounts_canvasdev a, business b SET a.money=%s,b.owner_id=%d WHERE a.id=%d AND b.id=%d", SetILPlayerInt(playerid, QueryPlayerBalance(playerid), -price), GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				if(!mysql_errno())
				{
					//SetPlayerData(playerid, P_BUSINESS, businessid);

					SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
					SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

					new time = gettime();
					new rent_time = (time - (time % 86400)) + 86400;

					if(!buy_from_owner)
					{
						SetBusinessData(businessid,	B_PRODS, 		10000);
						SetBusinessData(businessid,	B_PROD_PRICE, 	0);

						SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
						SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

						
						format(g_business[businessid][B_BALANCE], 21, "0");

						SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
						SetBusinessData(businessid,	B_LOCK_STATUS,	false);
					}
					else
					{
						if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
						{
							SetBusinessData(businessid, B_RENT_DATE, rent_time);
						}
					}
					format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
					CallLocalFunction("UpdateBusinessLabel", "i", businessid);

                    //SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили бизнес");
					ModifyCashBalance(playerid, -price, "Покупка бизнеса", false, true);
					SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/business {66CC00}чтобы узнать о возможностях");

					format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%s,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);

					format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE business_id=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
					mysql_query(mysql, query, false);

					DeletePVar(playerid, "buy_biz_id");

					return 1;
				}

				SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
				DeletePVar(playerid, "buy_biz_id");
				return 0;
			}
			SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
			DeletePVar(playerid, "buy_biz_id");
			return 0;
		}
		format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
		DeletePVar(playerid, "buy_biz_id");
		return -1;
	}
	return 1;
}

stock BusinessHealthPickupInit(businessid)
{
	if(businessid < 0 || businessid >= MAX_BUSINESS) return false;

	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 5)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 25, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}

	return true;
}

stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);

	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}

stock GetBusinessMaxProd(businessid)
{
	new max_prods = 3000;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(i_level >= 5)
	{
		max_prods = 20_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 13_000;
	}
	else max_prods = 3000;

	return max_prods;
}

stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new businessid = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}
stock GetNearestHouse(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new houseid = -1;
	new Float: my_dist;

	for(new idx; idx < g_house_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y), GetHouseData(idx, H_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			houseid = idx;
		}
	}
	return houseid;
}

stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	new type = GetBusinessData(businessid, B_TYPE),
		buffer = GetBusinessData(businessid, B_INTERIOR);

	if(type == BUSINESS_TYPE_CASINO)
	{
		if(GetPlayerData(playerid, P_FORTUNE_WHEEL) == 1)
		{
			SendClientMessage(playerid, 0xFFCD00FF, "Вам доступен прокрут 1 рулетки в казино");
		}
	}
	if(type == BUSINESS_TYPE_CAR_TUNING)
	{
		new vehicleid = GetPlayerOwnableCarLast(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
			return 1;

		GetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][3], vehicle_temp_position[playerid][2]);
		GetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

		SetVehiclePos(vehicleid, 870.7346, 1334.1289, 1008.4175);
		SetVehicleZAngle(vehicleid, 90.0);

		LinkVehicleToInterior(vehicleid, GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR));
		SetVehicleVirtualWorld(vehicleid, businessid + 255);
	}
	if(type == BUSINESS_TYPE_BY || type == BUSINESS_TYPE_BY_NIZ || type == BUSINESS_TYPE_BY_SRED)
	{
	    SetPVarInt(playerid, "in_by", 1);
	    KillTimer(timerbyexit[playerid]);
	}
	SetPlayerPosEx
	(
		playerid,
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X),
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y),
		GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
		GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
		GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
		businessid + 255, false
	);
	SetPlayerInBiz(playerid, businessid);

	buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
	if(1 <= buffer <= sizeof g_business_sound)
	{
		PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
	}

    if(GetBusinessData(businessid, B_TYPE) != 36)
	{
		if(GetBusinessData(businessid, B_ELECTRICITY) == 0)
		{
			CEF_CREATE(playerid, 1, 4, "Darkness");
			GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
		}
		else 
		{
			if(GetBusinessData(businessid, B_ELECTRICITY) == 1)
			{
                if(GetBusinessData(92, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
			else if(GetBusinessData(businessid, B_ELECTRICITY) == 2)
			{
                if(GetBusinessData(93, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
			else if(GetBusinessData(businessid, B_ELECTRICITY) == 3)
			{
                if(GetBusinessData(95, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
			else if(GetBusinessData(businessid, B_ELECTRICITY) == 4)
			{
                if(GetBusinessData(96, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
			else if(GetBusinessData(businessid, B_ELECTRICITY) == 5)
			{
                if(GetBusinessData(97, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
			else if(GetBusinessData(businessid, B_ELECTRICITY) == 6)
			{
                if(GetBusinessData(98, B_IZNOS) == 0)
				{
					CEF_CREATE(playerid, 1, 4, "Darkness");
			        GameText(playerid, "~r~НЕТ~n~ЭЛЕКТРИЧЕСТВА", 4000, 2);
			        SendClientMessage(playerid, 0xCECECEFF, "{B8CEF6}В данный момент у этого предприятия {FFFFFF}отключено электричество!");
				}
			}
		}
    }
	OverlayScreen(playerid);

	return 1;
}

stock GetFreeBusinessCount()
{
	new count;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerRealtorHomeDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"{99CC00}Информация о доме",
		"{FFFFFF}Введите номер дома, информацию\n"\
		"о котором Вы хотите получить\n\n"\
		"{FFCD00}Стоимость услуги 50 рублей",
		"Далее", "Отмена"
	);
}

stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510, 15644, 15683:
		{
			return 1;
		}
	}
	return 0;
}

stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);

		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}

stock GetNearestAtm(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm-1; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_atm[idx][A_POS_X], g_atm[idx][A_POS_Y], g_atm[idx][A_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;

	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default:
			result = -1;
	}
	return result;
}

stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			unix_time = (unix_time / 86400) % 30;
		}
		case CONVERT_TIME_TO_MONTHS:
		{
			unix_time = (unix_time / 2629743) % 12;
		}
		case CONVERT_TIME_TO_YEARS:
		{
			unix_time = (unix_time / 31556926) + 1970;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}

stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();

	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick:(playerid, _, 10);
		}
		return 1;
	}
	return 0;
}

stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));

			IntfDialogCallRemote
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"{FFD83D}Варианты",
				"1. Позвонить\n"\
				"2. Отправить SMS сообщение\n"\
				"3. Изменить имя контакта\n"\
				"4. Изменить номер контакта\n"\
				"5. Удалить контакт",
				"Выбрать", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			callcmd::c(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"{FFD83D}Отправка SMS сообщения",
				"{FFFFFF}-\t\t\tВведите текст SMS сообщения:\t\t-",
				"Отправить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT,
				"{FFD83D}Изменение имени контакта",
				"{FFFFFF}Введите новое имя для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT,
				"{FFD83D}Изменение номера контакта",
				"{FFFFFF}Введите новый номер для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];

				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, "Контакт удален с памяти телефона");
			}
		}
	}
}

stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);

			format(fmt_str, sizeof fmt_str, "Вы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);

			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}

stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;

		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер %s уже записан для контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}Ошибка", fmt_str, "Закрыть", "");

			return 1;
		}
	}
	return 0;
}

stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;

		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);

		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));

				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);

				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);

		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}

stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}

stock GetPlayerIDByPhone(number)
{
	new playerid = INVALID_PLAYER_ID;

	if(1000 <= number <= 9999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;

			playerid = i;
			break;
		}
	}
	return playerid;
}

stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);

	//new s_action = GetPlayerSpecialAction(playerid);

	switch(job)
	{
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);

				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);

				SendClientMessage(playerid, 0xFF6600FF, "Вы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
		case TEMP_JOB_LUMBERJACK:
		{
			if(j_state == TEMP_JOB_STATE_LUMBERJACK_DROP)
			{
				LumberJackPlayerDrop(playerid, true);
			}
		}
		case TEMP_JOB_FERMER:
		{
			if(j_state == TEMP_JOB_STATE_FERMER_DROP)
			{
				FermerPlayerDrop(playerid, true);
			}
		}
	}
}

stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts_canvasdev WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();
	cache_delete(result);

	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "%s сменил %s на %s", GetPlayerNameEx(playerid), non_rp_nick ? "нон-рп имя" : "имя", name);

			format(g_player[playerid][P_NAME], 21, "%s", name);
			SetPlayerName(playerid, GetPlayerNameEx(playerid));

			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();

			new buffer;
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}

stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	if(GetPlayerTempJob(playerid) == job)
	{
		SetPlayerTempJobCheckAnim(playerid, false);

		RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);

		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);

		pay_sum = pay_sum * g_xbonus;

		for(new is = 1; is < MAX_VEHICLES; is++)
		{
		    if(!IsValidVehicle(is)) continue;
	 		else if(vodila[is] != playerid || vodila[is] == -1) continue;
	 		else if(GetVehicleData(is, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_FERMA_CAR) continue;
	 		else if(IsVehicleOccupied(is)) continue;
			vodila[is] = -1;
			//DestroyVehicleLabel(is);
			SetVehicleToRespawn(is);
		}
		STRING_GLOBAL[0] = EOS;
		if(GetPVarInt(playerid, "quest") == 2)
		{
		    if(pay_sum >= 2000)
		    {
			    SetPVarInt(playerid, "quest", 0);
			    SetPlayerData(playerid, P_QUEST_2_STATS, 1);
			    SetPlayerData(playerid, P_QUEST_2_VALUE, 0);
			    CEF_HIDE(playerid, "QuestsProgressInfo");
			    SendClientMessage(playerid, -1, "");
				SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}3500 руб {FFA500}и {"#cGold"}2 exp.");
				ShowDisplayText(playerid, "Задание выполнено<br><font color=#F1B50C>3500 руб и 2 EXP", 4000);
				SendClientMessage(playerid, -1, "");
				ModifyCashBalance(playerid, 3500, "выполнение квеста", true, true);
	            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				UpdatePlayerDatabaseInt(playerid, "quest_2_stats", GetPlayerData(playerid, P_QUEST_2_STATS));
				UpdatePlayerDatabaseInt(playerid, "quest_2_value", GetPlayerData(playerid, P_QUEST_2_VALUE));
				AddPlayerData(playerid, P_EXP, +, 2);
				OnClickQuests(playerid, 2);

				if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
				{
					SetPlayerData(playerid, P_EXP, 0);
					AddPlayerData(playerid, P_LEVEL, +, 1);
					SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
					SetPlayerLevelInit(playerid);
				}
			}
			else
			{
			    CEF_HIDE(playerid, "QuestsProgressInfo");
			    AddPlayerData(playerid, P_QUEST_2_VALUE, +, pay_sum);
			    UpdatePlayerDatabaseInt(playerid, "quest_2_value", GetPlayerData(playerid, P_QUEST_2_VALUE));
			    format(STRING_GLOBAL, sizeof STRING_GLOBAL,"[%f, 1, 2, 1]",GetPlayerData(playerid, P_QUEST_2_VALUE) / 2000);

			    CEF_CREATE(playerid, 2, 4,"QuestsProgressInfo", STRING_GLOBAL);
			}

		}
		switch(job)
		{
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий день завершен. Вы заработали {ffffff} %d руб.", pay_sum);
						SendClientMessage(playerid, 0xff9900FF, STRING_GLOBAL);

						ModifyCashBalance(playerid, pay_sum, "Зарплата на работе шахтера", true, true);
					}
					else SendClientMessage(playerid, 0xff9900FF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xff9900FF, "Вы покинули территорию шахты. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);

				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(160000) + 100000);

				if(!annul)
				{
					SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
					if(pay_sum > 0 && waste_sum < pay_sum)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего создано {FFFF00}%d {66CC00}продуктов, забракованно {FFFF00}%d шт.", items, bad_items) ;
						SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);

						if(skill > 0)
						{
							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий навык увеличился {66CCFF}на %d единиц(ы)", skill);
						}
						else STRING_GLOBAL = "Рабочий навык не изменился";
						SendClientMessage(playerid, 0x66CC00FF, STRING_GLOBAL);

						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Заработано {00CC00}%d руб, {FFFFFF}из них {FF6600}%d руб {FFFFFF}- штраф за брак продуктов", pay_sum, waste_sum);
						SendClientMessage(playerid, 0xFFFFFFFF, STRING_GLOBAL);

						pay_sum -= waste_sum;
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~w~Заработано: ~g~%d рублей", pay_sum, pay_sum);
						GameText(playerid, STRING_GLOBAL, 4000, 2);

						ModifyCashBalance(playerid, pay_sum, "Зарплата на работе в цеху (завод)", true, true);
					}
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию завода. Выручка была аннулирована");

				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
			case TEMP_JOB_LUMBERJACK:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Рабочий день окончен. Зарплата: {FFFFFF}%d руб{FAAC58}.", pay_sum);
						SendClientMessage(playerid, COLOR_ORANGE, STRING_GLOBAL);

						ModifyCashBalance(playerid, pay_sum, "Зарплата на работе лесоруба", true, true);
					}
					else SendClientMessage(playerid, COLOR_ORANGE, "Рабочий день окончен. Зарплата: 0 {FFFFFF}руб{FAAC58}.");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию лесопилки. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);

				Lesopilka[playerid] = 0;

				TotalEarnings[playerid] = 0; // При завершении работы
			}
			case TEMP_JOB_ELECTRICIAN:
			{
                DisablePlayerRaceCheckpoint(playerid);
                SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

				player_job_active[playerid] = 0;
                
                if(items > 0)
		        {
			        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Проводок отремонтировано: {FFFF00}%d", items);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

                    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего заработано: {3399FF}%d руб", pay_sum);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
			        
			        ModifyCashBalance(playerid, pay_sum, "Зарплата на работе электрика", true, true);

					AddPlayerAchiv(playerid, 1);
                    
                    ElectrikActive[playerid] = 0;
		        }
		        else
				{
                    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Проводок отремонтировано: {FFFF00}%d", items);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

                    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего заработано: {3399FF}%d руб", pay_sum);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);
			        
                    SendClientMessage(playerid, COLOR_GREEN, "Денежных зачислений на этой работе не обнаружено.");
                    
                    ElectrikActive[playerid] = 0;
				}
			}
			case TEMP_JOB_FERMER:
			{
				DisablePlayerCheckpoint(playerid);
				SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

				if(!annul)
				{
					if(items > 0)
					{
					    new amount = GetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT);
					    SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_AMOUNT, amount - items);

                        new amount2 = GetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT);
					    SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_AMOUNT, amount2 - items);
					    
						format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы закончили работу на ферме и получили %d руб.", pay_sum);
						SendClientMessage(playerid, 0xFFD700FF, STRING_GLOBAL);
                        ModifyCashBalance(playerid, pay_sum);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "Вы покинули территорию фермы. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
				if(GetPVarInt(playerid,"fermawork") == 1)
                {
		            DeletePVar(playerid, "fermawork");
		            DisablePlayerCheckpoint(playerid);
	            }
			}
			case TEMP_JOB_LOADER:
			{
                DisablePlayerCheckpoint(playerid);
                
                if(items > 0)
		        {
			        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Ящиков перенесено: {FFFF00}%d", items);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

                    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Всего заработано: {3399FF}%d руб", pay_sum);
			        SendClientMessage(playerid, COLOR_WHITE, STRING_GLOBAL);

			        ModifyCashBalance(playerid, pay_sum, "Зарплата на работе грузчика", true, true);
		        }
		        else SendClientMessage(playerid, COLOR_GREEN, "Денежных зачислений на этой работе не обнаружено.");
			}
		}

		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);
		callcmd::return_acsses(playerid);
	}
}

stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}

stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
	CEF_HIDE(playerid, "InformationTimer");
}

stock StartEndJobTimer(playerid, time = 120_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock StartEndJobTimerElektrik(playerid, time = 180_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock StartEndJobTimerBus(playerid, time = 50_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock KillCarJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_CAR_TIMER));
	SetPlayerData(playerid, P_END_CAR_TIMER, -1);
}

stock StartCarJobTimer(playerid, time = 15_000, veh_id)
{
	if(GetPlayerData(playerid, P_END_CAR_TIMER) == -1)
		SetPlayerData(playerid, P_END_CAR_TIMER, SetTimerEx("EndCarJob", time, false, "ii", playerid, veh_id));
}

stock ShowPlayerBuyMetalDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"{FFD83D}Покупка металла",
		"{FFFFFF}Сколько кг металла вы хотите купить?\n"\
		"{00CC00}Цена за кг: 10.000 рублей",
		"Купить", "Отмена"
	);

	return true;
}

stock SetPlayerMinerJobLoadCP(playerid, bool: status = false)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		for(new i; i < sizeof miner_job_load_cp; i ++)
			TogglePlayerDynamicCP(playerid, miner_job_load_cp[i], status ^ true);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
	}
}

public: SetPlayerLoaderJobLoadCP(playerid) // установить чекпоинт где брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		SetPlayerTempJobCheckAnim(playerid, false);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
		SetPlayerCheckpoint(playerid, 2676.0483,-2327.6238,21.9760, 2.0, CP_ACTION_TYPE_LOADER_JOB_TAKE);
	}
}

stock SetPlayerLoaderJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		new rand = random(sizeof loader_job_unload_cp);

		SetPlayerCheckpoint(playerid, loader_job_unload_cp[rand][0], loader_job_unload_cp[rand][1], loader_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_UNLOAD);

		SetPlayerTempJobCheckAnim(playerid, true);
	}
}

stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		//SetPlayerCheckpoint(playerid, 2712.590332, -1551.885620, 1401.908935, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}
stock GetString(param1[],param2[])
{
	return !strcmp(param1, param2, false);
}
stock SetString(param_1[], param_2[], size = 300)
{
	return strmid(param_1, param_2, 0, strlen(param_2), size);
}

stock SetPlayerLumberJackChopCP(playerid)
{
	new rand = random(sizeof lumberjack_job_chop_cp);

	SetPlayerCheckpoint(playerid, lumberjack_job_chop_cp[rand][0], lumberjack_job_chop_cp[rand][1], 34.6054, 1.5, CP_ACTION_TYPE_LUMBERJACK_TAKE);
}

stock ShowPlayerFixCar(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_FIX_CAR, DIALOG_STYLE_MSGBOX,
		"Покупка рем. комплекта",
		"Ремонтный комплект стоит 5.000.000 рублей\n"\
		"Вы действительно хотите его приобрести?",
		"Да", "Нет"
	);
}

stock ShowPlayerDrivingTutorial(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_DRIVING_TUTORIAL_START, DIALOG_STYLE_MSGBOX,
		"{FFD83D}Введение",
		"{FFFFFF}Это пособие поможет вам хорошо подготовиться\n"\
		"к экзамену по вождению\n\n"\
		"{CC9900}Для того, чтобы начать обучение нажмите Далее",
		"Да", "Отмена"
	);
	return 1;
}

stock ShowDrivingTutorialSection(playerid, step)
{
	if(0 <= step <= sizeof driving_tutorial-1)
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_DRIVING_TUTORIAL, DIALOG_STYLE_MSGBOX,
			driving_tutorial[step][DT_TITLE],
			driving_tutorial[step][DT_TITLE],
			"Далее", "Назад"
		);
		SetPVarInt(playerid, "driving_tutorial_step", step);
	}
}

stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		driving_exam_route[step][0],
		driving_exam_route[step][1],
		driving_exam_route[step][2],
		driving_exam_route[step + 1][0],
		driving_exam_route[step + 1][1],
		driving_exam_route[step + 1][2],
		4.0,
		RCP_ACTION_TYPE_DRIVING_EXAM
	);
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}

stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);

	return floatround(floatsqroot(x*x+y*y+z*z)*180);
}

stock SetVehicleSpeed(vehicleid, Float: speed)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed /= 100.0;
        x = speed * floatsin(-angle, degrees);
        y = speed * floatcos(-angle, degrees);

        return SetVehicleVelocity(vehicleid, x, y, z - speed / 1000.0);
	}

	return 0;
}

stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}


stock SpeedometrShowForPlayer(playerid)
{
	CEF_CREATE(playerid, 1, 2, "interface('Hud').showSpeedometer(1)");

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').speedometer.maxFuel = %d", GetVehicleInfo(GetVehicleData(GetPlayerVehicleID(playerid), V_MODELID) , VI_MAX_FUEL));
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

    CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.maxSpeed = 450");
	CEF_CREATE(playerid, 1, 2, "interface('Hud').speedometer.params.wash = 0.0");
	return 1;
}

stock SpeedometrHideForPlayer(playerid)
{
	CEF_CREATE(playerid, 1, 2, "interface('Hud').hideSpeedometer()");
}

stock IntToString(integer)
{
	new string[sizeof integer + 5];

	format(string, sizeof string, "%d", integer);

	return string;
}

stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);

	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);

		if(dist > radius) continue;
		type = GetPlayerChatType(idx);

		switch(GetPlayerSettingData(idx, S_CHAT_TYPE))
		{
			case SETTING_CHAT_ADVANCE:
			{
				if(dist < (radius / 4))
				{
					SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
				}
				else if(dist < (radius / 2))
				{
					SendClientMessage(idx, 0x999999FF, chat_message[type]);
				}
				else
				{
					SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
				}
			}
			case SETTING_CHAT_STANDART:
			{
				if(GetPlayerSettingData(idx, S_NICK_IN_CHAT))
				{
					SendPlayerMessageToPlayer(idx, playerid, chat_message[type]);
				}
				else SendClientMessage(idx, 0xCECECEFF, text);
			}
			default: continue;
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 0, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", strlen(text) * 400, false, "i", playerid);
		}
	}
	return 1;
}

stock ChatMessageInit(playerid, text[])
{
	if(IsPlayerAdminLevel(playerid) > 0 && GetPVarInt(playerid, "Nick_Active") != 1)
	{
		format(chat_message[0], 129, "{FFA500}[A]{ffffff} - %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
		format(chat_message[1], 129, "{FFA500}[A]{ffffff} - %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
		format(chat_message[2], 129, "{FFA500}[A]{ffffff} - %s", text);

		format(chat_message[3], 129, "{FFA500}[A]{ffffff} (%d): %s", playerid, text);
		format(chat_message[4], 129, "{FFA500}[A]{ffffff} %s", text);
	}
	else
	{
		format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
		format(chat_message[1], 129, "- %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
		format(chat_message[2], 129, "- %s", text);

		format(chat_message[3], 129, "(%d): %s", playerid, text);
		format(chat_message[4], 129, "%s", text);
	}
}

stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}

stock SetPlayerSpawnInit(playerid)
{
    new spawn_pos = random(sizeof spawn_pos_data);

	SetSpawnInfo
	(
		playerid,
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_pos][0], // + random(3),
		spawn_pos_data[spawn_pos][1], // + random(3),
		spawn_pos_data[spawn_pos][2],
		spawn_pos_data[spawn_pos][3],
		0, 0, 0, 0, 0, 0
	);
	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);
	return 1;
}

stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		if(GetPlayerData(playerid, P_NAKOLKA) == 7 || GetPlayerData(playerid, P_NAKOLKA) == 8 || GetPlayerData(playerid, P_NAKOLKA) == 9)
        {
            new jail_pos = random(sizeof g_jail_positions_nakolka);

	        SetPlayerPosEx
	        (
		        playerid,
		        g_jail_positions_nakolka[jail_pos][0],
		        g_jail_positions_nakolka[jail_pos][1],
		        g_jail_positions_nakolka[jail_pos][2],
		        g_jail_positions_nakolka[jail_pos][3],
		        4, 7
	        );

            if(!GetPlayerSex(playerid))
	           SetPlayerSkin(playerid, 17060);
	        else
	           SetPlayerSkin(playerid, 17056);
        }
        else
	    {
           new jail_pos = random(sizeof g_jail_positions);

	       SetPlayerPosEx
	       (
		        playerid,
		        g_jail_positions[jail_pos][0],
		        g_jail_positions[jail_pos][1],
		        g_jail_positions[jail_pos][2],
		        g_jail_positions[jail_pos][3],
		        4, 7
	       );

           if(!GetPlayerSex(playerid))
	          SetPlayerSkin(playerid, 50);
	       else
	          SetPlayerSkin(playerid, 17056);
	    }
	}
	else if(GetPlayerData(playerid, P_TURMA))
	{
		new posicia = RandomEx(5, 70);

		switch(posicia)
		{
			case 5..20: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 4);
			case 21..32: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 5);
			case 33..40: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 6);
			case 41..47: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 4);
			case 48..60: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 5);
			case 61..70: SetPlayerPosEx(playerid, -2626.2825,2180.4817,995.7933,359.0624, 4, 6);
		}

		SetPlayerData(playerid, P_HEALTH, 100);
		SetPlayerHealthEx(playerid, 100);
		return 1;
	}
	else if(GetPlayerData(playerid, P_ARREST))
	{
		new arrest_pos = random(sizeof g_arrest_positions);

		SetPlayerPosEx
		(
			playerid,
			g_arrest_positions[arrest_pos][0],
			g_arrest_positions[arrest_pos][1],
			g_arrest_positions[arrest_pos][2],
			g_arrest_positions[arrest_pos][3],
			4, 6
		);

		SetPlayerData(playerid, P_HEALTH, 100);
		SetPlayerHealthEx(playerid, 100);
		return 1;
	}
	else if(GetPlayerData(playerid, P_HOSPITAL))
	{
		SetPlayerData(playerid, P_HEALTH, 35);
		SetPlayerHealthEx(playerid, 35);
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));

		new Random = random(20), mesto;

		if(IsPlayerInRangeOfPoint(playerid, 2000.0, 2403.9458,-2661.6692,21.9886)) mesto = 6;
		else mesto = 5;

		SetPlayerPosEx
		(
			playerid,
			g_med_bed_pos[Random][0],
			g_med_bed_pos[Random][1],
			g_med_bed_pos[Random][2],
			-90.0,
			3, mesto
		);
		return 1;
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{
				if(GetPlayerData(playerid, P_ID_SPAWN) >= 0) EnterPlayerToHouse(playerid, GetPlayerData(playerid, P_ID_SPAWN));
				else SetPlayerData(playerid, P_SPAWN, 0), UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0), callcmd::spawn(playerid, ""), SetPlayerVirtualWorld(playerid, 0);
			}
			case 2:
			{

				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				new hotel_id = GetPlayerData(playerid, P_HOUSE),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				SetPlayerData(playerid, P_IN_BUSINESS, hotel_id + 30);
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{
				new team_id = GetPlayerTeamEx(playerid);
                
				new fam_id = GetPlayerData(playerid, P_FAMILY);

                if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
                {
                    SetPlayerPosEx
		            (
			            playerid,
			            -2698.1772,
			            2189.5381,
			            1000.9784,
			            0.0025,
			            4, 4
		            );       
                }
				else if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
                {
                    SetPlayerPosEx
		            (
			            playerid,
			            -2698.1772,
			            2189.5381,
			            1000.9784,
			            0.0025,
			            4, 6
		            );  
                }
				else if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
                {
                    SetPlayerPosEx
		            (
			            playerid,
			            -2698.1772,
			            2189.5381,
			            1000.9784,
			            0.0025,
			            4, 5
		            );     
                }
				else if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
                {
                    SetPlayerPosEx
		            (
			            playerid,
			            -2698.1772,
			            2189.5381,
			            1000.9784,
			            0.0025,
			            4, 7
		            );  
				}
	            else
				{
                    if(!team_id)
				    {
					    SetPlayerSpawnSetting(playerid, 0);
					    UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					    return 1;
				    }

				    SetPlayerPosEx
				    (
					    playerid,
					    GetTeamData(team_id, O_SPAWN)[0],
					    GetTeamData(team_id, O_SPAWN)[1],
					    GetTeamData(team_id, O_SPAWN)[2],
					    GetTeamData(team_id, O_SPAWN)[3],
					    GetTeamData(team_id, O_SPAWN_INT),
					    GetTeamData(team_id, O_SPAWN_VW)
				    );
				}
			}
			case 4:
            {
                new fam_id = GetPlayerData(playerid, P_FAMILY);
				if(GetFamilyData(fam_id, F_GANG) == 1)
				{
					if(GetFamilyData(fam_id, F_HOUSE_ID) == -1)
					{
						SetPlayerSpawnSetting(playerid, 0);
						UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

						return 1;
					}

					EnterPlayerToHouse(playerid, GetFamilyData(fam_id, F_HOUSE_ID));
				}
				else
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);
				}

            }
			case 5:
			{
				SetPlayerPosEx
				(
					playerid,
					-2800.1179,
					-1500.3904,
					1001.0106,
					91.9722,
					4,
					GetPlayerData(playerid, P_ID_SPAWN)
				);
				vehicle_house_id[playerid] = GetPlayerData(playerid, P_ID_SPAWN);
				CEF_CREATE(playerid, 2, 4, "Interactions", "[[10, \"Выйти из дома\"]]");
			}
		}
	}
	callcmd::return_acsses(playerid);
	ResetWeapons(playerid);
	return 1;
}

stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	if(GetPlayerFamily(playerid) == 0)
	{
		SetPlayerColorInit(playerid);
	}
	else
	{
		
	}
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerChatInit(playerid);
	//SetPlayerMoneyInit(playerid);


	CreateTeleportObjects(playerid);
	//CreatePlayerGreenZoneText(playerid);
	//CreatePhonePlayer(playerid);

	SetPlayerLogged(playerid, true);
}

stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}

stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 0);
}

stock SetPlayerColorInit(playerid)
{
	if(GetPlayerFamily(playerid) != 0)
	{
		if(g_family[GetPlayerFamily(playerid)][F_GANG] == 1)
		{
			SetPlayerColorEx(playerid, family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)]);
		}
		else
		{
			SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
		}
	}
	else SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
	return 1;

}

stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);

	if(GetPlayerData(playerid, P_HEALTH) > 100.0)
		SetPlayerData(playerid, P_HEALTH, 100.0);

	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock GetPlayerTeamColor(playerid)
{
	return team_colors[GetPlayerTeamEx(playerid)];
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);

	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1, freeze = true)
{
	if(interior > -1)
		PlayerTeleportInit(playerid, x, y,  z, angle);

	SetPlayerPos(playerid, x, y, z);

	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);

	if(interior != -1 && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1 && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}
	if(freeze)
	{
		TeleportFreeze(playerid, 1200);
	}
	return 1;
}

stock TeleportFreeze(playerid, ms)
{
	if(ms <= 0)
		return 0;

	//ShowPlayerWaitPanel(playerid);
	TogglePlayerControllable(playerid, false);

	SetTimerEx("TeleportUnfreeze", ms, false, "d", playerid);

	return 1;
}

public: TeleportUnfreeze(playerid)
{
	//HidePlayerWaitPanel(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

stock JailPlayer(playerid, jail_time)
{
    if(GetPlayerData(playerid, P_NAKOLKA) == 7 || GetPlayerData(playerid, P_NAKOLKA) == 8 || GetPlayerData(playerid, P_NAKOLKA) == 9)
    {
        new jail_pos = random(sizeof g_jail_positions_nakolka);

	    SetPlayerPosEx
	    (
		    playerid,
		    g_jail_positions_nakolka[jail_pos][0],
		    g_jail_positions_nakolka[jail_pos][1],
		    g_jail_positions_nakolka[jail_pos][2],
		    g_jail_positions_nakolka[jail_pos][3],
		    4, 7
	    );

        if(!GetPlayerSex(playerid))
	       SetPlayerSkin(playerid, 17060);
	    else
	       SetPlayerSkin(playerid, 17056);
	    SetPlayerData(playerid, P_JAIL, jail_time * 60);
	    UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
    }
    else
	{
        new jail_pos = random(sizeof g_jail_positions);

	    SetPlayerPosEx
	    (
		    playerid,
		    g_jail_positions[jail_pos][0],
		    g_jail_positions[jail_pos][1],
		    g_jail_positions[jail_pos][2],
		    g_jail_positions[jail_pos][3],
		    4, 7
	    );

        if(!GetPlayerSex(playerid))
	       SetPlayerSkin(playerid, 50);
	    else
	       SetPlayerSkin(playerid, 17056);
	    SetPlayerData(playerid, P_JAIL, jail_time * 60);
	    UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
	}
}

stock ArrestPlayer(playerid, arrest_time)
{
	new arrest_pos = random(sizeof g_arrest_positions);

	SetPlayerPosEx
	(
		playerid,
		g_arrest_positions[arrest_pos][0],
		g_arrest_positions[arrest_pos][1],
		g_arrest_positions[arrest_pos][2],
		g_arrest_positions[arrest_pos][3],
		4, 1
	);

	SetPlayerData(playerid, P_ARREST, arrest_time * 60);
	UpdatePlayerDatabaseInt(playerid, "arrest", arrest_time * 60);
}

stock UnarrestPlayer(playerid)
{
	SetPlayerPosEx
	(
		playerid,
  		189.1794,1446.3762,12.0100,255.3777,
		0, 0
	);

	SetPlayerData(playerid, P_ARREST, 0);
	UpdatePlayerDatabaseInt(playerid, "arrest", 0);
}

stock UnKpz(playerid)
{
	SetPlayerPosEx
	(
		playerid,
  		189.1794,1446.3762,12.0100,255.3777,
		0, 0
	);
}

stock UnjailPlayer(playerid)
{
	SetPlayerPosEx
	(
		playerid,
  		-1789.9050,-2630.1851,9.9370,358.9162,
		0, 0
	);

	SetPlayerData(playerid, P_JAIL, 0);
	UpdatePlayerDatabaseInt(playerid, "jail", 0);
}

stock UnturmaPlayer(playerid)
{
	new posicia = RandomEx(5, 70);

	switch(posicia)
	{
		case 5..20: SetPlayerPosEx(playerid, 1949.1350,-48.5137,6.4177,182.6890, 0, 0);
		case 21..32: SetPlayerPosEx(playerid, -3178.0903,829.0162,6.4273,274.5032, 0, 0);
		case 33..40: SetPlayerPosEx(playerid, 4004.6062,3857.9153,7.9312,70.8894, 0, 0);
		case 41..47: SetPlayerPosEx(playerid, 1949.1350,-48.5137,6.4177,182.6890, 0, 0);
		case 48..60: SetPlayerPosEx(playerid, -3178.0903,829.0162,6.4273,274.5032, 0, 0);
		case 61..70: SetPlayerPosEx(playerid, 4004.6062,3857.9153,7.9312,70.8894, 0, 0);
	}

	SetPlayerData(playerid, P_TURMA, 0);
	UpdatePlayerDatabaseInt(playerid, "turma", 0);

	SendClientMessage(playerid, 0x66CC00FF, "Вы были выпущены на свободу");

}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[128];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET %e=%d WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET %e=%f WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;

	
	new query[150];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET %e='%e' WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	query[0] = EOS;
	return 1;
}

stock FixKick(playerid, message[] = "Введите /q (/quit) чтобы выйти", time_ms = 500)
{
	if(strlen(message) > 10000)
		SendClientMessage(playerid, 0xFF6600FF, message);

	if(time_ms == 10000000)
	{
		new fmt_text[65];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] кикнут антифлуд-системой", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	SetTimerEx("FixedKick", time_ms, false, "i", playerid);

	return 1;
}

public: FixedKick(playerid){Kick(playerid);}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут
	new vehicles_count;
    
	for(new idx; idx < MAX_ORG_CARS; idx++)
	{
		org_cars_canvasdev[idx][ORG_CARS_VEHICLEID] = CreateVehicle(
			org_cars_canvasdev[idx][ORG_CARS_MODELID],
			org_cars_canvasdev[idx][ORG_CARS_POS][0],
			org_cars_canvasdev[idx][ORG_CARS_POS][1],
			org_cars_canvasdev[idx][ORG_CARS_POS][2],
			org_cars_canvasdev[idx][ORG_CARS_POS][3],
			org_cars_canvasdev[idx][ORG_CARS_COLOR][0],
			org_cars_canvasdev[idx][ORG_CARS_COLOR][1], 
			spawn_time, 
			0, 
			VEHICLE_ACTION_TYPE_ORG_CARS, 
			idx
		);

        if(org_cars_canvasdev[idx][ORG_CARS_VINIL] != -1)
		{
            SetVehicleData(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], V_VINIL, org_cars_canvasdev[idx][ORG_CARS_VINIL]);
            SetVehicleData(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], V_VINILTYPE, 0);
		}

		if(org_cars_canvasdev[idx][ORG_CARS_WORLD] != 0) SetVehicleVirtualWorld(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], org_cars_canvasdev[idx][ORG_CARS_WORLD]);
		if(org_cars_canvasdev[idx][ORG_CARS_INTERIOR] != 0) LinkVehicleToInterior(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], org_cars_canvasdev[idx][ORG_CARS_INTERIOR]);

		if(org_cars_canvasdev[idx][ORG_CARS_TYPENUMBER] != -1) SetVehicleNumber(org_cars_canvasdev[idx][ORG_CARS_VEHICLEID], org_cars_canvasdev[idx][ORG_CARS_TYPENUMBER], GenerateCarNumberRu(), GenerateCarRegRu());
	}

	// --------------- Механики
	CreateVehicle(525,-296.7582,311.8731,13.1771,83.2699,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 1 арз 1-5
	CreateVehicle(525,-295.9874,316.5830,13.1770,82.0536,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 1 арз 1-5
	CreateVehicle(525,-295.2421,320.9549,13.1756,80.6930,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 1 арз 1-5
	CreateVehicle(525,-297.3815,307.0735,13.1673,82.8643,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 1 арз 1-5
	CreateVehicle(525,-294.5625,325.1478,13.1755,81.3184,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 1 арз 1-5

	CreateVehicle(525,-2519.7793,1126.4312,7.9630,160.0192,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 6
	CreateVehicle(525,-2516.0859,1125.2791,7.9539,159.4330,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 7
	CreateVehicle(525,-2512.1772,1123.7664,7.9616,159.6063,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 8
	CreateVehicle(525,-2507.9917,1121.9963,7.9596,155.7055,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 9
	CreateVehicle(525,-2504.1951,1120.6451,7.9629,157.1107,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 10
	CreateVehicle(525,-2523.3193,1127.8635,7.9624,161.3405,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_RERFECT); // Механики 11
	// --------------- Русская мафия
	arzcar[0] = CreateVehicle(15291, 1924.3406,-24.2231,6.0596,243.5058,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	arzcar[1] = CreateVehicle(15275, 2005.4463,32.8483,6.0680,90.5772,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	arzcar[2] = CreateVehicle(15157, 2005.4678,29.7043,6.0617,90.4143,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	arzcar[3] = CreateVehicle(15290, 2005.4225,26.7135,6.0612,90.4065,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	arzcar[4] = CreateVehicle(15287, 2005.4139,23.7579,6.0612,90.5368,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	arzcar[5] = CreateVehicle(15292, 1949.1948,118.2640,1.0493,269.6559,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR);
	// --------------- Японская мафия
	batcar[0] = CreateVehicle(15291, 4007.240,3816.490,6.681,90.0764,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	batcar[1] = CreateVehicle(15275, 4080.658,3772.192,6.433,29.3096,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	batcar[2] = CreateVehicle(15157, 4077.480,3770.397,6.238,29.3096,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	batcar[3] = CreateVehicle(15290, 4074.309,3768.571,6.661,29.3096,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	batcar[4] = CreateVehicle(15287, 4071.061,3766.783,6.048,29.3096,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	batcar[5] = CreateVehicle(15292, 4112.459,3843.045,1.535,208.8401,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR);
	//---------------- Итальянская мафия
	lytcar[0] = CreateVehicle(15291, -3202.567,804.615,6.574,333.2005,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[1] = CreateVehicle(15203, -3250.760,889.079,5.985,181.0013,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[2] = CreateVehicle(495, -3247.640,889.252,6.603,181.0013,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[3] = CreateVehicle(15108, -3244.530,889.432,6.349,181.0013,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[4] = CreateVehicle(505, -3241.420,889.617,6.302,181.0013,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[5] = CreateVehicle(15287, -3238.310,889.811,6.055,181.0013,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	lytcar[6] = CreateVehicle(15292, -3336.850,833.306,1.652,357.1523,31,31, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR);
	//----------------- База Пэла Машины ---------------------
	CreateVehicle(489,2301.9368,1524.6851,11.2272,267.7166,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(579,2301.9529,1528.0693,11.1566,266.2192,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(579,2301.7424,1531.1572,11.1908,265.0829,6,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15605,2301.9990,1534.3068,11.4725,263.2924,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(907,2306.1985,1510.8132,11.4254,333.8796,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15083,2302.1272,1516.9718,11.3657,271.6730,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15115,2312.1914,1510.5236,11.3340,0.9428,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15115,2315.1865,1510.5365,11.3374,359.8632,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15240,2301.4246,1538.7322,11.4808,266.2151,6,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15158,2322.5039,1557.3706,11.2024,88.4569,79,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(797,2312.8796,1562.5815,11.1849,177.8350,6,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(494,2332.1189,1546.7264,10.9566,270.8994,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(562,2318.0791,1510.0093,11.1448,1.7098,116,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15234,2344.1694,1548.6697,11.2481,179.7849,3,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(15234,2346.8958,1548.7061,11.2490,179.8897,3,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	CreateVehicle(503,2321.0679,1510.3458,11.2004,359.1717,106,0, spawn_time, 0, VEHICLE_ACTION_TYPE_PEL_BASE);
	//----------------- Ферма Машины ---------------------
	CreateVehicle(531,1654.957,630.228,16.613,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1650.889,630.245,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1646.679,630.226,16.610,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1642.787,630.102,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	CreateVehicle(531,1638.916,630.046,16.611,357.8924,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FERMA_CAR);
	//----------------Дальнобойщики--------------------------

	//лыткарино
	CreateVehicle(15095,-2451.1936,-7.2010,14.1733,166.8005, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2458.5398,-5.3462,14.1734,168.3058, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2465.5256,-3.6849,14.1734,169.0451, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2472.8955,-1.7559,14.1729,167.2526, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики
	CreateVehicle(15095,-2480.1777,0.0743,14.1725,168.5534, 2, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_1); //Дальнобойщики

	//южный 
	CreateVehicle(15095,2409.0625,-688.9885,12.5226,89.3875, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.3567,-681.3992,12.5217,88.4494, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.3152,-673.9944,12.5218,90.1935, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.4377,-666.6044,12.5225,89.4775, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики
	CreateVehicle(15095,2409.4736,-659.1310,12.5226,90.9086, 6, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_2); //Дальнобойщики

	//батырево
	CreateVehicle(15095,2067.5220,1790.3796,15.5005,0.6388, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2074.8145,1790.4099,15.5008,2.6084, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2082.3738,1790.4319,15.5015,1.9344, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2089.8953,1790.4175,15.5020,1.4974, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики
	CreateVehicle(15095,2097.3542,1790.4884,15.5018,1.7607, 1, 0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER_3); //Дальнобойщики

    CreateVehicle(15629,1830.9170,2536.8774,16.1064,125.0684,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1833.4762,2533.4238,16.1122,124.8753,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1836.3855,2529.1860,16.1143,125.7022,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1839.1910,2525.1858,16.1088,125.0578,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1842.1748,2521.0125,16.1069,125.2805,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1801.8757,2476.8555,16.1069,35.6534,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);
	CreateVehicle(15629,1805.6005,2479.7629,16.1068,35.1383,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_ELECTRICIAN);

	CreateVehicle(15167,254.4229,270.5318,11.5841,70.8130,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,253.5043,267.4622,11.5875,70.3676,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,252.4370,264.3001,11.5881,70.5857,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,251.4178,261.2877,11.5885,70.8991,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,250.4008,258.1790,11.5872,71.2903,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,249.0334,255.2843,11.5820,70.4043,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,247.9705,252.1794,11.5827,69.9841,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	CreateVehicle(15167,246.8736,249.0508,11.5155,70.6127,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI);
	//=========================================================аренда===============
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI)
		{
			SetVehicleNumber(i, 7, GenerateCarNumberRu(), GenerateCarRegRu());

			STRING_GLOBAL[0] = EOS;
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{ead671}Такси\n< Бесплатно для новичков >");
            CreateVehicleLabel(i, STRING_GLOBAL, 0x00FF00FF, 0.0, -0.5, 1.5, 20.0);
		}
        if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ELECTRICIAN)
		{
			SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RERFECT)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MECHANIC)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TESLA_CAR)
		{
			SetVehicleNumber(i, 0, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_1)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_2)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCKER_3)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_INKAS_CAR) //инкассаторки
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MCHS_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ARZ_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BAT_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_PEL_BASE)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LYT_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FERMA_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_INKAS_CAR) 
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_FIRE_CAR)
		{
			 SetVehicleNumber(i, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		}

	    vehicles_count++;
	}

	print("[Vehicle]: Все транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFEE, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock CreateArmories()
{
	for(new idx; idx < sizeof g_armory; idx ++)
	{
		CreatePickup
		(
			g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? 1239 : 1239,
			23,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z],
			g_armory[idx][A_VIRTUAL],
			PICKUP_ACTION_TYPE_ARMORY, g_armory[idx][A_TYPE]
		);

		new fmt_text[55];

		format(fmt_text, sizeof fmt_text, "%s\n{FFFFFF}%s",
		g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? "Склад организации" : "Склад организации",
		g_armory[idx][A_DESCRIPTION]);

		CreateDynamic3DTextLabel
        (
            fmt_text,
            0x3399FFFF,
            g_armory[idx][A_POS_X], 
            g_armory[idx][A_POS_Y], 
            g_armory[idx][A_POS_Z] + 1.0,
            8.0,
            INVALID_PLAYER_ID, 
            INVALID_VEHICLE_ID, 
            1,
            g_armory[idx][A_VIRTUAL],
            -1,
            -1,
            15.0
        );
	}
}

stock ShowPlayerPayForRentDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"{66CC00}Оплата",
		"1. Заплатить за дом\n"\
		"2. Оплатить аренду бизнеса\n"\
		"3. Оплатить аренду киоска\n"\
		"4. Оплатить аренду гаража\n"\
		"5. Оплатить аренду огорода\n"\
		"6. Оплатить аренду нефтяного насоса",
		"Далее", "Отмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);

	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);

	//SetBankAccountData(playerid, accountid, BA_BALANCE, 0);
	format(g_bank_account[playerid][accountid][BA_BALANCE], 21, "0");
	
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}
stock ShowPlayerSettingServer(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_SETTING_SERV, DIALOG_STYLE_LIST,
		"{"#cGold"}Настройки сервера",
		"1. {"#cW"}Изменить название сервера\n"\
		"2. {"#cW"}Изменить пароль сервера\n"\
		"3. {"#cW"}Управление X2\n"\
		"4. {"#cW"}Управление X3\n"\
		"5. {"#cW"}Произвести рестарт сервера\n"\
		"6. {"#cW"}Изменить логотип",
		"Выбрать", "Назад"
	);
	return 1;
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
	if(IsPlayerConnected(x)) {
	GetPlayerIp(x,against_ip,32);
	if(!strcmp(against_ip,test_ip)) ip_count++;
	}
	}
	return ip_count;
}
stock ShowPlayerBankDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"{00CC00}Банк",
		"Мои счета\n"\
		"Открыть новый счет",
		"Выбрать", "Отмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows;
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];

	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();

	bank_accounts_list = "{99CC00}Основной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);

		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));

			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);

			cache_get_row(idx, 3, g_bank_account[playerid][idx][BA_BALANCE], mysql, 21);

			//SetBankAccountData(playerid, idx, BA_BALANCE, cache_get_row_int(idx, 3));
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));

			format(query, sizeof query, "%s - №%d\n", GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);

	return IntfDialogCallRemote(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "{FFD83D}Ваши счета", bank_accounts_list, "Операции", "Назад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;

		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);

		if(cache_num_rows())
			cache_get_row(0, 0, g_bank_account[playerid][accountid][BA_BALANCE], mysql, 21);

		cache_delete(result);
	}
}
stock GetBankAccountBalance(accountid)
{
	new query[64];
	new Cache: result;

	format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", accountid);
	result = mysql_query(mysql, query);


	if(cache_num_rows())
		cache_get_row(0, 0, query, mysql, 21);

	cache_delete(result);

	return query;
}

stock ShowPlayerBankAccountOperation(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{FFD83D}Список операций",
		"1. Информация о счете\n"\
		"2. История операций\n"\
		"3. Снять деньги\n"\
		"4. Положить деньги\n"\
		"5. Перевести на другой счет\n"\
		"6. Переименовать счет\n"\
		"7. Изменить PIN-код",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Исходный счет:\t%d\n"\
			"Назначение:\t\t%s, №%d\n\n"\
			"Введите сумму для перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		IntfDialogCallRemote(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "{FFD83D}Перевод средств", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Вы выполняете перевод на счет №%d\n"\
			"Укажите сумму:",
			transfer_id
		);
		IntfDialogCallRemote(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "{FFD83D}Безналичный перевод", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;

			default:
				is_bad_name = true;

		}
	}
	while(dest[++pos]);

	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];

	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);

	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		new text[900] = "{FFFFFF}";
		new day, month, year;

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", day, month, year);

			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		IntfDialogCallRemote(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}Последние 10 операций", text, "Вернуться", "");
	}
	else IntfDialogCallRemote(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFD83D}История", "{FFFFFF}История операций пуста", "Вернуться", "");

	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock HelpInfoInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof help_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, help_info[idx][H_TITLE]);
		strcat(help_info_items, fmt_str);

		format(fmt_str, sizeof fmt_str, "{FFCD00}%d. ", idx + 1);
		strins(help_info[idx][H_TITLE], fmt_str, 0, 64);
	}

	help_info_CP = CreateDynamicCP(458.7777,1562.1560,12.1938, 1.7, _, _, _, 10.0); // арзамас (спавн)
	CreateDynamic3DTextLabel("Раздел для новичков\n{FFD83D}Помощь по игре", 0x3399FFFF, 458.7777,1562.1560,12.1938 + 0.66, 15.0, _, _, _, 0, 0);
}

stock ShowPlayerHelpSection(playerid, sectionid)
{
	new next_buttom[9] = "Далее >>";
	if(sectionid >= sizeof help_info - 1)
	{
		next_buttom[0] = '\0';
	}

	IntfDialogCallRemote
	(
		playerid, DIALOG_HELP_SECTION, DIALOG_STYLE_MSGBOX,
		GetHelpInfoData(sectionid, H_TITLE),
		GetHelpInfoData(sectionid, H_INFO),
		"<< Меню", next_buttom
	);
	SetPVarInt(playerid, "help_section", sectionid);
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y),
			GetMapIconsData(idx, MI_POS_Z),
			GetMapIconsData(idx, MI_TYPE),
			0,
			0,
			0,
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME),
				0x3399FFEE,
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID,
				0,
				0,
				0,
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(1318, 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}

	CreatePickup(1318, 23, 5.6028, -23.3124, 1080.9968, -1, PICKUP_ACTION_TYPE_BIZ_CAR_ENT); // авторынок телепорт ко входу
	CreatePickup(1318, 23, 5.9334, -25.4932, 1085.9291, -1, PICKUP_ACTION_TYPE_BIZ_CAR_EXI); // авторынок телепорт к выходу

	print("[TP]: Все входы/выходы созданы");
}

stock DrivingSchoolInit()
{

	driving_exam_CP = CreateDynamicCP(2010.7933,-2003.5316,1001.2400, 1.5, -1, 4, -1, 15.0); // автошкола
	CreateDynamic3DTextLabel("Сдача\nэкзамена", 0x99CC00BB, 2010.7933,-2003.5316,1001.2400, 7.0);

	CreatePickup(2894, 23, 2017.7914,-1990.1788,1001.2400, -1, PICKUP_ACTION_TYPE_DRIVING_TUTO); // автошкола обучающий раздел
	CreateDynamic3DTextLabel("Обучающий\nраздел", 0xCC9900BB, 2017.7914,-1990.1788,1001.2400 + 0.2, 5.0);

	new fmt_str[64];
	for(new idx; idx < sizeof driving_tutorial; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{CC9900}Раздел %d: ", idx + 1);
		strins(driving_tutorial[idx][DT_TITLE], fmt_str, 0, 64);
	}

	for(new idx; idx < sizeof driving_exam; idx ++)
	{
		strins(driving_exam[idx][DE_TITLE], "{00CC66}", 0, 64);
	}
}

stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацния пикапа от банкомата

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);

		CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, -1, -1, -1, STREAMER_OBJECT_SD, 100.0);
		//SetDynamicObjectMaterialText(buffer, 2, "Банкомат\n\n\n\n\n", OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFF9966, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

		CreateDynamic3DTextLabel("Банкомат", 0x00CC00FE, x, y, z + 0.7, 3.0); // 0x00CC00EE

		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 23, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: Все банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock ShowPlayerATMDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"{FFD83D}Банкомат",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Снять со счета киоска\n"\
		"6. Положить на счет предприятия\n"\
		"7. Пополнить мобильный телефон\n"\
		"8. Безналичный перевод\n"\
		"9. Оплатить штраф\n"\
		"10. Благотворительность\n"\
		"11. Снять со счета нефтяного насоса",
		"Выбрать", "Выйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	IntfDialogCallRemote
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"Выберите сумму",
		"1.000.000 руб\n"\
		"2.000.000 руб\n"\
		"5.000.000 руб\n"\
		"10.000.000 руб\n"\
		"20.000.000 руб\n"\
		"50.000.000 руб\n"\
		"100.000.000 руб\n"\
		"Другая сумма...",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	IntfDialogCallRemote
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"{FFD83D}Другая сумма",
		"{FFFFFF}Укажите сумму:",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"{FFD83D}Благотворительность",
		"{FFFFFF}Мы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"государства. Все средства пойдут на\n"\
		"развитие нашей страны и поднятие\n"\
		"экономики.\n\n"\
		"Помимо этого, в мэриях время от времени\n"\
		"будут публиковаться списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Этот список можно просмотреть командой\n"\
		"/charity. Там же можно узнать общую\n"\
		"сумму сделанных Вами пожертвований.",
		"Внести", "Закрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"1. %s (№%d)",
			GetBusinessData(businessid, B_NAME), businessid
		);
		IntfDialogCallRemote(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "{FFD83D}Выберите предприятие", fmt_str, "Выбрать", "Назад");
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	if(businessid != -1)
	{
		IntfDialogCallRemote
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessData(businessid, B_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock BanksInit()
{
	CreatePickup(1274, 23, 300.5571,304.2417,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 300.5571,304.2417,1001.0000 + 0.8, 8.0);

	CreatePickup(1274, 23, 294.5605,304.2592,1001.0000, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nгаража\nАЗС\nбизнеса\nкиоска\nогорода\nнефтенасоса", 0x66CC66FF, 294.5605,304.2592,1001.0000 + 0.8, 8.0);
	
	// Гос.Банк
	CreatePickup(1274, 23, 418.3971,572.8312,-36.6100, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 418.3971,572.8312,-36.6100 + 0.8, 8.0);

	CreatePickup(1274, 23, 412.5228,574.4662,-36.6100, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС\nгаража", 0x66CC66FF, 412.5228,574.4662,-36.6100 + 0.8, 8.0);
}

stock TempJobsInit()
{
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs; idx ++)
	{
		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB, idx);
	}


	// шахта
	for(idx = 0; idx < sizeof miner_carriage; idx ++)
    {
        miner_carriage[idx][MC_STATUS] = false;
        miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(1769, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 90.0);

        Streamer_SetIntData(STREAMER_TYPE_OBJECT, miner_carriage[idx][MC_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_CARRIAGE);

        miner_carriage[idx][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -845.5309, 1211.0574, 3012.1621 + 3.0, 10.0);
        miner_carriage[idx][MC_PICKUP_ID] = CreatePickup(19135, 23, -845.5291,1213.5364,3011.5315, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
    }
    miner_job_area = CreateDynamicRectangle(-763.2994, 1207.1509, 3011.5295, 267.5658, 0, 0);

	for(new i; i < sizeof miner_job_load_pos; i ++)
	{
		CreateDynamic3DTextLabel("Место\nдобычи руды", 0xFFFF00AA, miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 10.0);
		miner_job_load_cp[i] = CreateDynamicCP(miner_job_load_pos[i][0], miner_job_load_pos[i][1], miner_job_load_pos[i][2], 1.2, _, _, _, 5);
	}

	CreatePickup(19134, 23, -480.0557,3389.6550,29.8350, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("{FFFFFF}Покупка металла\n{00CC00}10.000 рублей {FFFFFF}за 1 кг", 0x009933FF,  -480.0557,3389.6550,29.8350 + 1.0, 10.0);

	CreateDynamic3DTextLabel("{e48900}Раздевалка", 0x009933FF, GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_X), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Y), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Z) + 0.82, 5.0);

	// завод
	for(idx = 1; idx < 3; idx ++)
	{
		CreatePickup(1275, 33, 345.3347, -413.3510, 994.7978, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);
	}
	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{
		CreatePickup(19135, 23, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, -1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}

	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;

		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desks[idx][0], factory_desks[idx][1], factory_desks[idx][2], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("Рабочее место", 0xFFFFFFEE, factory_desks[idx][0], factory_desks[idx][1], factory_desks[idx][2] + 1.0, 5.0);

		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
	factory_put_zone = CreateDynamicSphere(-2908.6921,-1179.9351,1001.0041, 3.0, -1, -1, -1);

	factory_job_area = CreateDynamicRectangle(-981.2298, 2098.1736, -1170.6591, 2263.3167, 0, 0);

	// Ферма
	CreatePickup(19197, 23, 1601.8525, 640.0919, 16.2555, 0, PICKUP_ACTION_TYPE_FERMER_P); // запасы фермы
}
stock InfoPickupsInit()
{
	new title_color[16];
	for(new idx; idx < sizeof info_pickup; idx ++)
	{
		CreatePickup(1239, 23, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z), -1, PICKUP_ACTION_TYPE_INFO_PICKUP, idx);

		format(title_color, sizeof title_color, "{%06x}", GetInfoPickupData(idx, IP_TITLE_COLOR) >>> 8);
		strins(GetInfoPickupData(idx, IP_TITLE), title_color, 0, 64);

		strins(GetInfoPickupData(idx, IP_INFO), "{FFFFFF}", 0, 1024);
		if(strlen(GetInfoPickupData(idx, IP_LABEL_INFO)) > 3)
			CreateDynamic3DTextLabel(GetInfoPickupData(idx, IP_LABEL_INFO), 0x99CC00DD, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z) + 0.7, 9.5);
	}
}


stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);

		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}Информация");
}

stock RepositoriesLoad()
{
	new Cache: result;
	new type, action_id;

	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);

		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);

	RepositoriesInit();
}

stock RepositoriesInit()
{
	// шахта
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -474.1064,3387.7664,31.3281 + 0.5, 10.0)); // руда
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -473.7023,3396.2358,32.4835 + 0.8, 10.0)); // металл
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	// воинская часть
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2] + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 1243.6392,3223.6709,12.2840 + 1.0, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0)); // патроны

	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

	SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, 1657.3654,692.2846,16.4430, 30.0));
	//SetRepositoryData(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, -438.9230,-1370.2463,41.0988, 30.0));
	UpdateRepository(REPOSITORY_TYPE_FERMER, REPOSITORY_ACTION_FERMER);

	// лесопилка
	SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 523.4781,-2378.2908,36.5435 + 2.0, 10.0)); // дерево на лесопилке

	UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
	
	SetRepositoryData(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2, R_LABEL, CreateDynamic3DTextLabel("-No Init-", COLOR_WHITE, 1549.9681,637.3264,15.9206, 30.0));
	UpdateRepository(REPOSITORY_TYPE_FERMER_2, REPOSITORY_ACTION_FERMER_2);
}
stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);

	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Покупка металла\n(для развозчиков)\n\n{FFCD00}На складе %d кг\nКупить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Металл\n{FFD83D}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "Руда\n{00CC00}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, "Кузница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Топливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Металл: %d / 1000000 кг\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}

					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);

					format
					(
						fmt_str, sizeof fmt_str,
						"Исходные материалы:\n"\
						"{FF9900}Топливо: %d / 1000000 л\n"\
						"Металл: %d / 1000000 кг\n"\
						"{33CC00}Продукты: %d шт.",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FERMER:
		{
			format(fmt_str, sizeof fmt_str, "Склад фермы\n{CC9900}%d / 5000", amount);
			UpdateDynamic3DTextLabelText(label, COLOR_WHITE, fmt_str);

			//format(fmt_str, sizeof fmt_str, "Мельница\n{CC9900}%d / 3000", amount);
			//UpdateDynamic3DTextLabelText(label_2, COLOR_WHITE, fmt_str);
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "Топливо для АЗС\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Топливо для завода\n\n{FFCD00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
			case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Металл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case  REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "Материалов на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFCD00FF, fmt_str);
				}
			}
		}
  case REPOSITORY_TYPE_SAWMILL:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_SAWMILL_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\nДерево:{FFFFFF} %d / 1000000 ед", GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xB0C4DEFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FERMER_2:
		{
			format(fmt_str, sizeof fmt_str, "- Мельница -\n{CC9900}На Перемолке: %d / 10000", amount);
			UpdateDynamic3DTextLabelText(label, COLOR_WHITE, fmt_str);
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;

	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;

	// берем с переплавки руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting > 0) // если на переплавке есть руда
	{
		if(rand > remelting) // если взяли больше чем было
			rand = remelting; // берем все что осталось

		remelting -= rand;

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл
	}

	// берем со склада руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если взяли больше чем на складе
			rand = ore; // берем все что осталось

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // взяли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[228];

	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;

				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);
			}
		}
	}
}

stock SetPlayerAnimation(playerid, animid)
{
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}
				default:
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
						CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
					
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
							CEF_HIDE(playerid, "Interactions");
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 0, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		SetPlayerData(playerid, P_USE_ANIM, false);
		

		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1)
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);

	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					format(name, sizeof name, "Подъезд %d (№%d на %d этаже)", GetHouseData(houseid, H_ENTRACE) + 1, GetHouseData(houseid, H_FLAT_ID) + 1, GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				}
				else format(name, sizeof name, "%s (№%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "В гостях (дом №%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "Гостиница (№%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Бездомный";

	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Нет";

	return name;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_FSB)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}

	return fmt_rank;
}

stock GetPlayerRankNameTeam(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_FSB)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}

	return fmt_rank;
}

stock GetPlayerTeamName(playerid)
{
	new team_name_id = GetPlayerTeamEx(playerid);
	switch(team_name_id)
	{
		case TEAM_GOVERNMENT..TEAM_FSB:
			return team_names[team_name_id];

		default:
			return team_names[0];
	}
	return team_names[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Организация:<t><t><t>%s\n", GetPlayerTeamName(playerid));

	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[32];

	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "Ошибка";
	    case 1: status = "Без статуса";
	    case 2..5: status = "Новичок";
	    case 6..9: status = "Развивающийся";
	    case 10..14: status = "Освоившийся";
	    case 15..19: status = "Опытный игрок";
	    case 20..29: status = "Активный игрок";
	    default: status = "Легендарный";
	}

	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Лидер";
	if(IsPlayerAdminLevel(playerid) == 1) status = "Администратор 1 уровня";
	if(IsPlayerAdminLevel(playerid) == 2) status = "Администратор 2 уровня";
	if(IsPlayerAdminLevel(playerid) == 3) status = "Администратор 3 уровня";
	if(IsPlayerAdminLevel(playerid) == 4) status = "Администратор 4 уровня";
	if(IsPlayerAdminLevel(playerid) == 5) status = "Администратор 5 уровня";
	if(IsPlayerAdminLevel(playerid) == 6) status = "Администратор 6 уровня";
	if(IsPlayerAdminLevel(playerid) == 7) status = "Администратор 7 уровня";
	if(IsPlayerAdminLevel(playerid) == 8) status = "Администратор 8 уровня";

	return status;
}

stock GetPlayerPodpiskaStatus(playerid)
{
	new status[25];

	switch(GetPlayerPremium(playerid))
	{
	    case 0: status = "Отсутствует";
	    case 1: status = "{C0C0C0}Silver{FFFFFF}";
	    case 2: status = "{FFD700}Gold{FFFFFF}";
	    case 3: status = "{E5E4E2}Platinum{FFFFFF}";
	}

	return status;
}

stock ShowPlayerChangeNameDialog(playerid)
{
	IntfDialogCallRemote
	(
		playerid, DIALOG_CHANGE_NAME, DIALOG_STYLE_INPUT,
		"{FFD83D}Изменение имени",
		"{FFFFFF}Вы можете изменить имя своего персонажа, если оно не соответствует RP правилам\n"\
		"Во всех остальных случаях смена имени осуществляется в {6699FF}/menu > Дополнительно.\n\n"\
		"{FFFFFF}RP ник имеет формат Имя_Фамилия.\n"\
		"Например: Andrey_Kalinin, Nikolas_Ryan, Kate_Valente и т. п.\n\n"\
		"Введите новое имя в поле ниже. Допустимы только латинские символы:",
		"Изменить", "Закрыть"
	);
}

stock SendMessageToPrem(message[], color, p_level = 1)
{
    if(p_level < 1)
    p_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
        if(GetPlayerVipoff(playerid) == 0)
        {
			SendClientMessage(playerid, color, message);
		}
		count ++;
	}
	return count;
}

stock SendMessageToAdmins(message[], color, type = 0)
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(IsPlayerAdminLevel(playerid) < 1) continue;
		if(type == 1) if(GetPlayerData(playerid, P_LOG) == 1) continue;
		SCM(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToYAdmins(message[], color, y_level = 1)
{
	if(y_level < 1)
		y_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerYAdminEx(playerid) < y_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_MVD, message, color, playerid);

	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1, bool: org_chat = false)
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerJob(playerid) != to_job) continue;
		else if(org_chat && !GetPlayerSettingData(playerid, S_TEAM_CHAT)) continue;
		else if(playerid == i) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock Shuffle(array[], size = sizeof array)
{
	new
		index,
		rand,
		buffer;

	for(index = 0; index < size; index ++)
	{
		rand = random(size);
		buffer = array[index];

		array[index] = array[rand];
		array[rand] = buffer;
	}
}


stock ShowCurrentTime(playerid)
{
	new
		hour, minute,
		day, month, year;

	gettime(hour, minute);
	getdate(day, month, year);

	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~w~%d.%02d.%02d", hour, minute, year, month, day);
	GameText(playerid, fmt_str, 3000, 2);

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Здравствуйте!\n"\
		"Вы позвонили в службу точного времени\n\n"\
		"Сегодняшняя дата:\t\t{66CC00}%d %s %d г.\n"\
		"{FFFFFF}День недели:\t\t\t{66CC00}%s\n"\
		"{FFFFFF}Текущее время:\t\t{3399FF}%d:%02d\n\n"\
		"{FFFFFF}Время в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}Время в игре сегодня:\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}Время в игре вчера:\t\t{FF7000}%d ч %d мин",
		year,
		GetMonthName(month),
		day,
		GetDayName(GetDayOfWeek(day, month, year)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x99CC00FF, "Вы позвонили в службу точного времени");

	return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Точное время", fmt_str, "Закрыть", "");
}

stock GetDayOfWeek(day, month, year)
{
    new a = (14 - month) / 12;
    new y = year + 4800 - a;
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;

    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;

	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts_canvasdev a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;

	cache_delete(result);
}

stock abs(value)
{
	return value = -value;
}
stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);

	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{
	new buffer[15 + 1];
	valstr(buffer, value);

	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetSubnet(dest[], ip[], size = sizeof dest)
{
	new pos, dots;
	do
	{
		if(ip[pos] == '.')
		{
			if(++dots == 2)
			{
				ip[pos] = 0;
				break;
			}
		}
	}
	while(ip[++pos]);

	format(dest, size, "%s", ip);
}

stock GetFamilyChatID(team)
{
    return team;
}

stock ProcessPlayerCredit(playerid, donate, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_CURRENT, +, donate);
	if(donate > 0) AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);

	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);

	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate_current", QueryPlayerDonationBalance(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", QueryTotalDonatedAmount(playerid));
	}
	if(game_text)
	{
		format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('GameText').add('[2,\"~w~%s%d DCOINS\",3000,0,-1,1]')", donate < 0 ? ("") : ("+"), donate);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		CEF_CREATE(playerid, 1, 4, "GameText");
	}
	return 1;
}

stock BankLog(playerid, money, description[] = "None")
{
	new fmt_str[185];

	format(fmt_str, sizeof fmt_str, "[BANK] %s", description);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, fmt_str);
	mysql_query(mysql, fmt_str, false);

	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;

		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(strfind(message,"|") != -1 || strfind(message,"}") != -1 || strfind(message,"{") != -1 || strfind(message,"&") != -1 || strfind(message,"#") != -1 || strfind(message,"@") != -1 || strfind(message,"%") != -1)
	{
		return SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(strcmp(message, "#", true) == 0 || strcmp(message, "|", true) == 0 || strcmp(message, "%", true) == 0 || strcmp(message, "@", true) == 0 || strcmp(message, "&", true) == 0)
	{
	    SendClientMessage(playerid, 0xFF6600FF, "В сообщение присутствуют запрещеные символы");
	}
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);

	return 1;
}

stock EnablePlayerGPS(playerid, markertype, Float: x, Float: y, Float: z, message[] = "Место отмечено у Вас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);

	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);

	if(strlen(message))
		SendClientMessage(playerid, 0xCECECEFF, message);

	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);

	if(IsPlayerAdminLevel(playerid) > 2)
	{
		IntfDialogCallRemote(playerid, DIALOG_GOTO_GPS, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы действительно хотите телепортироваться на это место?", "Да", "Отмена");

	    SetPVarFloat(playerid, "goto_x", x);
		SetPVarFloat(playerid, "goto_y", y);
		SetPVarFloat(playerid, "goto_z", z);

		return 1;
	}

	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		RemovePlayerMapIcon(playerid, 98);

		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}

stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;

	switch(storage)
	{
		case STORAGE_METALL: amount = 20;
		case STORAGE_AMMO: amount = 250;
		case STORAGE_DRUGS: amount = 500;
	}

	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetBusinessCars(businessid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM arenda_cars WHERE owner_id='%d'", businessid);
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[80];
	new Cache: result;
	new rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return 1;

	return 0;
}

stock GetPlayerDonationCurrency(playerid)
{
	new query[100],
		Cache: result,
		currency[64];

	mysql_format(mysql, query, sizeof query, "SELECT currency FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, currency);

	cache_delete(result);

	return currency;
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) <= 10)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;

	if(1 <= org_id <= 10)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
		//SetPlayerData(playerid, P_JOB, 0);
	}

	SetPlayerColorEx(playerid, team_colors[org_id]);

	if(save)
	{
		new query[80];

        new uid = random(9000000) + 1000000;
	    new reg_unix = gettime();
	    new expire_unix = reg_unix + (50 * 365 * 86400);

	    SetPlayerData(playerid, P_UID_FSB, uid);
	    SetPlayerData(playerid, P_REG_DATA_FSB, reg_unix);
        SetPlayerData(playerid, P_EXPIRE_DATA_FSB, expire_unix);

	    UpdatePlayerDatabaseInt(playerid, "uid_fsb", GetPlayerData(playerid, P_UID_FSB));
        UpdatePlayerDatabaseInt(playerid, "reg_data_fsb", GetPlayerData(playerid, P_REG_DATA_FSB));
        UpdatePlayerDatabaseInt(playerid, "expire_data_fsb", GetPlayerData(playerid, P_EXPIRE_DATA_FSB));

		//SetPlayerData(playerid, P_JOB, 0);

		if(1 <= org_id <= 10)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_SKINS][give_rang - 1]);
			else
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);

		format(query, sizeof query, "UPDATE accounts_canvasdev SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		ResetSkin(playerid);
	}

	return 1;
}

stock UnInvite(playerid, to_player)
{
	if(!(1 <= GetPlayerTeamEx(to_player) <= 10)) return 0;

	new fmt_msg[110];

	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFF6600FF, fmt_msg);

		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
			SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
		}

		if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
			SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
		}

	}

	InvitePlayer(to_player, 0, 0, true);

	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0, value_3 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		STRING_GLOBAL[0] = EOS;
		switch(type)
		{
			case OFFER_TYPE_SELL_NEFTENASOS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает купить у него нефтяной насос №%d за %s руб.", GetPlayerNameEx(playerid), value_1, formatInt(value_2));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить у вас нефтяной насос №%d за %s руб.", GetPlayerNameEx(to_player), value_1, formatInt(value_2));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает купить у него нефтяной насос №%d за %s руб.\"]", GetPlayerNameEx(playerid), value_1, formatInt(value_2));

			}
      		case OFFER_TYPE_SELL_GARDEN:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить теплицу №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Вашу теплицу за %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить теплицу №%d по цене %d руб\"]", GetPlayerNameEx(playerid), value_1, value_2);
			}
			case OFFER_TYPE_EXCHANGE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам провести обмен", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				SCMF(playerid, 0x33999FFFF, "Вы предложили %s провести обмен", GetPlayerNameEx(to_player));
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам провести обмен\"]", GetPlayerNameEx(playerid));
            }
			case OFFER_TYPE_TRADE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам провести обмен предметами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				SCMF(playerid, 0x33999FFFF, "Вы предложили %s провести обмен предметами", GetPlayerNameEx(to_player));
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам провести обмен предметами\"]", GetPlayerNameEx(playerid));
            }
			case OFFER_TYPE_HANDSHAKE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает пожать Вам руку", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает пожать Вам руку\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_FIGHT:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает выйти на ринг с вами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s выйти на ринг с вами", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает выйти на ринг с вами\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_KISS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает поцеловаться с Вами", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s поцеловаться с Вами", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает поцеловаться с Вами\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_GIVE_ITEM:
			{
				SCMF(to_player, 0x3399FFFF, "%s предлагает передать Вам предмет", GetPlayerNameEx(playerid));

				SendClientMessage(to_player, COLOR_WHITE, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				SCMF(playerid, 0x3399FFFF, "Вы предложили передать %s предмет", GetPlayerNameEx(to_player));

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает передать Вам предмет\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_WEDDING:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пожениться", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пожениться", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x33999FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам пожениться\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_SELLSIM:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить SIM-карту {"#cGold"}'%d' {3399FF}за %d руб.", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Вашу SIM-карту за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить SIM-карту %d за %d руб.\"]", GetPlayerNameEx(playerid), GetPlayerPhone(playerid), value_1);
			}
			case OFFER_TYPE_FILL_CAR:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заправить Ваш транспорт на %d л за %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s заправку транспорта на %d л за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает заправить Ваш транспорт на %d л за %d руб\"]", GetPlayerNameEx(playerid), value_1, value_2);
			}
			case OFFER_TYPE_REPAIR_CAR:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает починить Ваш транспорт за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s сделать ремонт транспорта за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает починить Ваш транспорт за %d руб\"]", GetPlayerNameEx(playerid), value_1);
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить бизнес №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить бизнес №%d %s по цене %d руб\"]", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам стать сотрудником его предприятия (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам стать сотрудником его предприятия (%s)\"]", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить дом №%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш дом по цене %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить дом №%d по цене %d руб\"]", GetPlayerNameEx(playerid), value_1, value_2);

			}
			
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам поселиться в своем доме №%d", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s поселиться в своем доме №%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам поселиться в своем доме №%d\"]", GetPlayerNameEx(playerid), value_1);

			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);

				new SellCarPrice[23];
				GetPVarString(playerid, "SellCarPrice", SellCarPrice, sizeof(SellCarPrice));

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить транспорт {33FF66}\"%s\" {3399FF}по цене %s руб", GetPlayerNameEx(playerid), GetVehicleInfo(model_id, VI_NAME), formatStr(SellCarPrice));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы купить его или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш транспорт \"%s\" за %s руб", GetPlayerNameEx(to_player), GetVehicleInfo(model_id, VI_NAME), formatStr(SellCarPrice));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить транспорт %s по цене %s руб\"]", GetPlayerNameEx(playerid), GetVehicleInfo(model_id, VI_NAME), formatStr(SellCarPrice));

			}
			case OFFER_TYPE_SELL_GARAGE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить гараж №%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetGarageData(value_1, G_SQL_ID), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш гараж \"№%d\" за %d руб", GetPlayerNameEx(to_player), GetGarageData(value_1, G_SQL_ID), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить гараж №%d %s по цене %d руб\"]", GetPlayerNameEx(playerid), value_1, GetGarageData(value_1, G_SQL_ID), value_2);

			}
			case OFFER_TYPE_SELL_KIOSK:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить киоск №%d по цене %d руб", GetPlayerNameEx(playerid), value_1,  value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Ваш киоск \"№%d\" за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить киоск №%d по цене %d руб\"]", GetPlayerNameEx(playerid), value_1,  value_2);

			}
			case OFFER_TYPE_INVITE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам вступить в организацию %s\"]", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));

			}
			case OFFER_TYPE_FINVITE:
            {
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}%s предлагает Вам вступить в семью \"%s\"", GetPlayerNameEx(playerid), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(to_player, 0x1E90FFFF, STRING_GLOBAL);

                SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять предложение или {FF6600}N {FFFFFF}для отказа");

                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили игроку {d8284c}%s {1E90FF}вступить в семью \"%s\"", GetPlayerNameEx(to_player), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
                SendClientMessage(playerid, 0x1E90FFFF, STRING_GLOBAL);
                
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам вступить в семью %s\"]", GetPlayerNameEx(playerid), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));

            }
			case OFFER_TYPE_MEDHELP:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пройти курс платного лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы пройти экспресс-лечение или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пройти у Вас курс платного лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам пройти курс платного лечения за %d руб\"]", GetPlayerNameEx(playerid), value_1);

			}
			case OFFER_TYPE_HEAL:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пройти курс лечения за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пройти у Вас курс лечения за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам пройти курс лечения за %d руб\"]", GetPlayerNameEx(playerid), value_1);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает сделать Вам операцию по смене пола за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s операцию по смене пола за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает сделать Вам операцию по смене пола за %d руб\"]", GetPlayerNameEx(playerid), value_1);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет показать Вам свои навыки владения оружием", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть на Ваши навыки владения оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s хочет показать Вам свои навыки владения оружием\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_TEST_DRIVE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s вам предложил автомобиль %s на тестдрайв на %d минут(ы)", GetPlayerNameEx(playerid), GetVehicleName(value_1), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}для просмотра или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s отдать ваш автомобиль %s на тестдрайв на %d минут(ы)", GetPlayerNameEx(to_player),GetVehicleName(value_1), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s вам предложил автомобиль %s на тестдрайв на %d минут(ы)\"]", GetPlayerNameEx(playerid), GetVehicleName(value_1), value_2);
			}
			case OFFER_TYPE_SHOWMC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его мед. карту", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Вашу мед. карту", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам посмотреть его мед. карту\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_CASINO_DICE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет сыграть с Вами в кости. Ставка: %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL), SetPVarInt(to_player, "DiceKaz", gettime()+5);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s сыграть в кости. Ставка: %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL), SetPVarInt(playerid, "DiceKaz", gettime()+5);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s хочет сыграть с Вами в кости. Ставка: %d руб.\"]", GetPlayerNameEx(playerid), value_1);
			}
			case OFFER_TYPE_GETHERE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет телепортировать Вас к себе", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы запросили у %s разрешение на телепорт его к Вам", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s хочет телепортировать Вас к себе\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_GOTO:
			{
				SCMF(to_player, 0x3399FFFF, "%s хочет телепортироваться к вам", GetPlayerNameEx(playerid));

				SCM(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы принять телепорт или {FF6600}N {FFFFFF}для отказа");

				SCMF(playerid, 0x3399FFFF, "Вы запросили у %s разрешение на телепорт к нему", GetPlayerNameEx(to_player));
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s хочет телепортироваться к вам\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_GIVE_CAR_KEY:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s хочет дать Вам ключи от своего транспорта", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы взять их или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили игроку %s взять ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s хочет дать Вам ключи от своего транспорта\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_GIVE_MIC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам подключиться к радио-эфиру", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s подключиться к радио-эфиру", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам подключиться к радио-эфиру\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_GIVE_LIC:
			{
				new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить лицензию на %s за %d руб.",
				GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить у Вас лицензию на %s за %d руб.",
				GetPlayerNameEx(to_player), lic_names[value_1 - 1], value_2);

				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить лицензию на %s за %d руб.\"]", GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);
			}
			case OFFER_TYPE_JAIL_FREE:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам пересмотреть Ваше дело за %d руб.", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {FFFFFF}чтобы согласиться или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s пересмотреть его дело за %d руб.", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам пересмотреть Ваше дело за %d руб.\"]", GetPlayerNameEx(playerid), value_1);
			}
			//---------------
			case OFFER_TYPE_SELL_SKIN:
			{
			    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам купить одежду по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s купить Вашу одежду одежду за {33FF66}%d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам купить одежду по цене %d руб\"]", GetPlayerNameEx(playerid), value_1);

			}
			case OFFER_TYPE_SHIN:
			{
				//new businessid = GetNearestBusiness(playerid, 2.0);
				if(value_1 == 1) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заменить переднюю левую шину по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_2);
				if(value_1 == 2) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заменить переднюю правую шину по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_2);
				if(value_1 == 3) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заменить заднюю левую шину по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_2);
				if(value_1 == 4) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заменить заднюю правую шину по цене {33FF66}%d руб", GetPlayerNameEx(playerid), value_2);
			    //format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает заменить шину по цене{33FF66}%d руб", GetPlayerNameEx(playerid), value_2);
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}для согласия или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s заменить шину за {33FF66}%d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
			}
			case OFFER_TYPE_SHOWPASS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его паспорт", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваш паспорт", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам посмотреть его паспорт\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_SHOWADMSTATS:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его админ статы", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваши админ статы", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам посмотреть его админ статы\"]", GetPlayerNameEx(playerid));
			}
			case OFFER_TYPE_SHOWLIC:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает Вам посмотреть его лицензии", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, -1, "Нажмите {00CC00}Y {"#cW"}чтобы согласиться или {FF6600}N {"#cW"}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s посмотреть Ваши лицензии", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает Вам посмотреть его лицензии\"]", GetPlayerNameEx(playerid));

			}
			case OFFER_TYPE_ARENDA_GARDEN:
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%s предлагает вам арендовать огород №%d на %dч. за %s руб.", GetPlayerNameEx(playerid), value_1, value_2, formatInt(value_3));
				SendClientMessage(to_player, 0x3399FFFF, STRING_GLOBAL);

				SendClientMessage(to_player, 0xFFFFFFFF, "Нажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}для отказа");

				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Вы предложили %s арендовать у вас огород №%d на %dч. за %s руб.", GetPlayerNameEx(to_player), value_1, value_2, formatInt(value_3));
				SendClientMessage(playerid, 0x3399FFFF, STRING_GLOBAL);
				
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"Предложение\",\"%s предлагает вам арендовать огород №%d на %dч. за %d руб\"]", GetPlayerNameEx(playerid), value_1, value_2, value_3);
			}
			//---------------
			default: return 1;
		}

		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);

		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);

		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
		SetPlayerOfferValue(to_player, 2, value_3);

		if(GetPlayerClient(playerid) == 1) CEF_CREATE(to_player, 2, 4, "Offer", STRING_GLOBAL);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

stock MoveCamera(playerid)
{
        new Float:FV[3], Float:CPR[3];
        GetPlayerCameraPos(playerid, CPR[0], CPR[1], CPR[2]);
	    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);

        if(noclipdata[playerid][acce_lmul] <= 1) noclipdata[playerid][acce_lmul] += ACCEL_RATE;

        new Float:speed = MOVE_SPEED * noclipdata[playerid][acce_lmul];

        new Float:X, Float:Y, Float:Z;
        GetNextCameraPosition(noclipdata[playerid][mode_mode], CPR, FV, X, Y, Z);
        MovePlayerObject(playerid, noclipdata[playerid][fly_object], X, Y, Z, speed);

        noclipdata[playerid][last_move] = GetTickCount();
        return 1;
}

stock GetNextCameraPosition(move_mode, Float:CPR[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    	#define OFFSET_X (FV[0]*6000.0)
        #define OFFSET_Y (FV[1]*6000.0)
        #define OFFSET_Z (FV[2]*6000.0)
        switch(move_mode)
        {
                case MOVE_FORWARD:
                {
                        X = CPR[0]+OFFSET_X;
                        Y = CPR[1]+OFFSET_Y;
                        Z = CPR[2]+OFFSET_Z;
                }
                case MOVE_BACK:
                {
                        X = CPR[0]-OFFSET_X;
                        Y = CPR[1]-OFFSET_Y;
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_LEFT:
                {
                        X = CPR[0]-OFFSET_Y;
                        Y = CPR[1]+OFFSET_X;
                        Z = CPR[2];
                }
                case MOVE_RIGHT:
                {
                        X = CPR[0]+OFFSET_Y;
                        Y = CPR[1]-OFFSET_X;
                        Z = CPR[2];
                }
                case MOVE_BACK_LEFT:
                {
                        X = CPR[0]+(-OFFSET_X - OFFSET_Y);
                        Y = CPR[1]+(-OFFSET_Y + OFFSET_X);
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_BACK_RIGHT:
                {
                        X = CPR[0]+(-OFFSET_X + OFFSET_Y);
                        Y = CPR[1]+(-OFFSET_Y - OFFSET_X);
                        Z = CPR[2]-OFFSET_Z;
                }
                case MOVE_FORWARD_LEFT:
                {
                        X = CPR[0]+(OFFSET_X  - OFFSET_Y);
                        Y = CPR[1]+(OFFSET_Y  + OFFSET_X);
                        Z = CPR[2]+OFFSET_Z;
                }
                case MOVE_FORWARD_RIGHT:
                {
                        X = CPR[0]+(OFFSET_X  + OFFSET_Y);
                        Y = CPR[1]+(OFFSET_Y  - OFFSET_X);
                        Z = CPR[2]+OFFSET_Z;
                }
        }
}

stock ZaezdPlayerToGarage(playerid, garage_id)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetGarageData(garage_id, G_TYPE) == 1)
	{
		SetVehiclePos
		(
			vehicleid,
			-1615.8772,1579.1461,2005.7100
		);
		SetPlayerInterior(playerid, 9);
		LinkVehicleToInterior(vehicleid, 9);
		SetVehicleZAngle(vehicleid, 90.0);
	}

	if(GetGarageData(garage_id, G_TYPE) == 2)
	{
		SetVehiclePos
		(
			vehicleid,
			2896.7332,2898.6277,1001.0000
		);
		SetPlayerInterior(playerid, 5);
		LinkVehicleToInterior(vehicleid, 5);
		SetVehicleZAngle(vehicleid, 0.0);
	}
	if(GetGarageData(garage_id, G_TYPE) == 3)
	{
		SetVehiclePos
		(
			vehicleid,
			-1658.1536,-457.3881,1001.0000
		);
		SetPlayerInterior(playerid, 4);
		LinkVehicleToInterior(vehicleid, 4);
		SetVehicleZAngle(vehicleid, 359.8882);
	}

	SetVehicleVirtualWorld(vehicleid, garage_id + 2000);

	SetPlayerInGarage(playerid, garage_id);
	SetPlayerVirtualWorld(playerid, garage_id + 2000);
}
stock ShowPlayerGarageZaezd(playerid, garage_id)
{
	if(0 <= garage_id <= g_garage_loaded)
	{
		SetPlayerUseListitem(playerid, garage_id);

		IntfDialogCallRemote(playerid, DIALOG_GARAGE_ZAEZD, DIALOG_STYLE_MSGBOX, "{FFD83D}Въезд в гараж", "{"#cW"}Вы действительно заехать в свой гараж?", "Заехать", "Отмена");
	}
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, rang;

	new fmt_str[33];
	new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

	new idx, j = rows;
	if(j > 45)
		j = 45;

	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);

		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(text, fmt_str);
	}

	format(fmt_str, sizeof fmt_str, "{00CC00}Показаны %d/%d игроков", idx, rows);
	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
	return 1;
}
stock IsAFamLeader(playerid)
{
	new house = 0;
	for(new i = 1; i <= TOTALFAM;i++)
	{
		if(!strcmp(FamInfo[i][fLeader], GetPlayerNameEx(playerid), true)) house++;
	}
	return house;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	if(teamid)
	{
		new fmt_str[40];
		string_dialog = "Уровень\tРанг\tТелефон\tИмя\n\n{FFFFFF}";

		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;

			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string_dialog, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string_dialog, "-AFK");

			strcat(string_dialog, "\n");
		}

		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Члены организации", string_dialog, "Закрыть", "");
	}
	else
	{
		new fmt_str[40];
		string_dialog = "Уровень\tТелефон\tИмя\n\n{FFFFFF}";

		foreach(new i: Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;

			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string_dialog, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string_dialog, "-AFK");

			if(IsPlayerInJob(i))
				strcat(string_dialog, " *");

			strcat(string_dialog, "\n");
		}

		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFD83D}Сотрудники online", string_dialog, "Закрыть", "");
	}
	return 1;
}

stock ShowDebtorListDialog(playerid, type)
{
	new
		fmt_str[36 + 1],
		text[((sizeof fmt_str) * 20) + 1],
		cur_time = gettime(),
		idx,
		count;

	if(type == 0)
	{
		for(idx = 0, count = 0; idx < g_house_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetHouseData(idx, H_OWNER_ID) < 1) continue;
			if((((GetHouseData(idx, H_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetHouseData(idx, H_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			if(GetHouseData(idx, H_TYPE))
			{
				format(fmt_str, sizeof fmt_str, "кв. %d под. %d (%s)\n", idx % 6 + 1, GetHouseData(idx, H_ENTRACE) + 1, "Нижегородская обл.");
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			}
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за жилье нет");

		IntfDialogCallRemote(playerid, DIALOG_DEBTORLIST_HOUSE, DIALOG_STYLE_LIST, "{FFD83D}Жилье должников", text, "Отметить", "Назад");
	}
	else if(type == 1)
	{
		for(idx = 0, count = 0; idx < g_business_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetBusinessData(idx, B_OWNER_ID) < 1) continue;
			if((((GetBusinessData(idx, B_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetBusinessData(idx, B_EVICTION)) continue;

			SetPlayerListitemValue(playerid, count, idx);
			count ++;

			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Нижегородская обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "Должников по оплате аренды за предприятия нет");

		IntfDialogCallRemote(playerid, DIALOG_DEBTORLIST_BIZ, DIALOG_STYLE_LIST, "{FFD83D}Предприятия должников", text, "Отметить", "Назад");
	}
	return 1;
}

stock SellDebtorsHotels()
{
	new cur_time = gettime();
	new query[200];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev a,hotels h SET a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < %d", cur_time);
	mysql_query(mysql, query, false);

	new hotel_owner_playerid;

	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		for(r_id = 0; r_id < MAX_HOTEL_ROOMS; r_id ++)
		{
			if(GetHotelData(h_id, r_id, H_RENT_DATE) < cur_time) continue;

			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);

			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);

			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);

					SendClientMessage(hotel_owner_playerid, 0xFF6600FF, "Вы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	return 1;
}

stock EnterPlayerToGarage(playerid, garage_id)
{
	if(GetGarageData(garage_id, G_TYPE) == 1)
	{
		SetPlayerPosEx(playerid, -1620.0846, 1576.7509, 2005.7100, 270.1940, 9, garage_id + 2000);
	}
	if(GetGarageData(garage_id, G_TYPE) == 2)
	{
		SetPlayerPosEx(playerid, 2897.1111, 2888.8059, 1001.0000, 358.8917, 5, garage_id + 2000);
    }
	if(GetGarageData(garage_id, G_TYPE) == 3)
	{
		SetPlayerPosEx(playerid, -1652.2556, -466.1541, 1001.0000, 7.9008, 4, garage_id + 2000);
	}
	SetPlayerInGarage(playerid, garage_id);
	SetPlayerVirtualWorld(playerid, garage_id + 2000);
	OverlayScreen(playerid);
}


stock ExitPlayerFromGarage(playerid, Float: radius = 3.0)
{
	new garage_id = GetPlayerInGarage(playerid);
	if(garage_id != -1)
	{
		if(IsPlayerInRangeOfPoint(playerid, radius, 2897.3401,2888.8042,1001.0000) || IsPlayerInRangeOfPoint(playerid, radius, -1657.9447,-467.8287,1001.0000) || IsPlayerInRangeOfPoint(playerid, radius, -1621.5743,1579.1401,2005.7100))
		{
			SetPlayerInGarage(playerid, -1);
			OverlayScreen(playerid);

			SetPlayerPosEx
			(
				playerid,
				GetGarageData(garage_id, G_EXIT_POS_X),
				GetGarageData(garage_id, G_EXIT_POS_Y),
				GetGarageData(garage_id, G_EXIT_POS_Z),
				GetGarageData(garage_id, G_EXIT_ANGLE),
				0,
				0
			);
		}
		return 1;
	}
	return 0;
}

stock ShowPlayerGaragePayForRent(playerid)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{"#cW"}Гараж:\t\t\t\t\t{FFD83D}№%d\n"\
			"{"#cW"}Оплаченных дней аренды:\t\t{FFD83D}%d из 30\n"\
			"{"#cW"}Ежедневная оплата:\t\t\t{FFD83D}%d руб\n"\
			"{"#cW"}Субсидия:\t\t\t\t{FFD83D}%s\n\n"\
			"{"#cW"}На сколько дней Вы хотите оплатить гараж?",
			garage_id,
			GetGarageData(garage_id, G_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetGarageData(garage_id, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? GetGarageData(garage_id, G_RENT_PRICE) / 2 : GetGarageData(garage_id, G_RENT_PRICE),
			GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? ("Есть"): ("Нет")
		);
		IntfDialogCallRemote(playerid, DIALOG_PAY_FOR_RENT_GARAGE, DIALOG_STYLE_INPUT, "{FFD83D}Оплата гаража", fmt_str, "Оплатить", "Назад");
	}
}

stock SellGarage(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");

	if(garage_id != -1)
	{
		new biz_price = GetGarageData(garage_id, G_PRICE);
		new biz_percent = biz_price / 100 * 30;

		new query[200];
		new return_money = (biz_price - biz_percent);

		SetGarageData(garage_id, G_OWNER_ID, 	0);

		if(to_player == INVALID_PLAYER_ID)
		{
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), return_money));

			BankLog(playerid, return_money, "Продажа гаража");

			SetGarageData(garage_id, G_IMPROVEMENTS, 	0);

			SetGarageData(garage_id, G_RENT_DATE,		0);
			SetGarageData(garage_id, G_LOCK_STATUS,	false);

			if(GetGarageData(garage_id, G_TYPE) == 1)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,5);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}
			else if(GetGarageData(garage_id, G_TYPE) == 2)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,9);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

			}
			else if(GetGarageData(garage_id, G_TYPE) == 3)
			{
				AddPlayerData(playerid, P_CAR_SLOTS,-,15);
				UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			}

			format(query, sizeof query, "UPDATE accounts_canvasdev a,garage g SET a.bank=%s,g.owner_id=0,g.lock=0 WHERE a.id=%d AND g.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetGarageData(garage_id, G_SQL_ID));
			mysql_query(mysql, query, false);

			ModifyCashBalance(playerid, 0, "Продажа гаража государству", false, false);
			CallLocalFunction("UpdateGarageLabel", "i", garage_id);
			UpdateGarage(garage_id);

			SendClientMessage(playerid, COLOR_WHITE, "Вы успешно продали свой гараж!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 30 процентов от его стоимости {FFD83D}(%d руб)", biz_percent);
			SendClientMessage(playerid, COLOR_WHITE, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {FFD83D}%d руб", return_money);
			SendClientMessage(playerid, COLOR_WHITE, query);
		}
		else
		{
			if(BuyPlayerGarage(to_player, garage_id, true, price) == 1)
			{
				ModifyCashBalance(playerid, price, "Продажа гаража игроку");

				if(GetGarageData(garage_id, G_TYPE) == 1)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,5);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

					AddPlayerData(to_player, P_CAR_SLOTS,+,5);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				else if(GetGarageData(garage_id, G_TYPE) == 2)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,9);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

					AddPlayerData(to_player, P_CAR_SLOTS,+,9);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}
				else if(GetGarageData(garage_id, G_TYPE) == 3)
				{
					AddPlayerData(playerid, P_CAR_SLOTS,-,15);
					UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

					AddPlayerData(to_player, P_CAR_SLOTS,+,15);
					UpdatePlayerDatabaseInt(to_player, "car_slots", GetPlayerData(to_player, P_CAR_SLOTS));
				}

				biz_price = price;
				biz_percent = 0;
			}
			else return 1;
		}
		format(query, sizeof query, "~g~+%d рублей", (biz_price - biz_percent));
		GameText(playerid, query, 4000, 2);
	}
	return 1;
}

public: LoadGarages()
{
	new idx;
	new query[85];//, buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT g.*, IFNULL(a.name, 'Государство') owner_name FROM garage g LEFT JOIN accounts_canvasdev a ON a.id=g.owner_id ORDER BY g.id ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_GARAGE)
	{
		rows = MAX_GARAGE;
		print("[Garage]: DB rows > MAX_GARAGE");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGarageData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetGarageData(idx, G_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));

		SetGarageData(idx, G_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));

		SetGarageData(idx, G_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));

		SetGarageData(idx, G_PRICE,			cache_get_field_content_int(idx, "price"));
		SetGarageData(idx, G_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetGarageData(idx, G_TYPE,		cache_get_field_content_int(idx, "type"));
		SetGarageData(idx, G_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));

		SetGarageData(idx, G_POS_X,			cache_get_field_content_float(idx, "x"));
		SetGarageData(idx, G_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetGarageData(idx, G_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetGarageData(idx, G_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetGarageData(idx, G_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetGarageData(idx, G_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetGarageData(idx, G_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetGarageData(idx, G_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetGarageData(idx, G_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetGarageData(idx, G_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetGarageData(idx, G_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));

		SetGarageData(idx, G_REPAIRS,		cache_get_field_content_int(idx, "repairs"));
		SetGarageData(idx, G_DRUGS,		cache_get_field_content_int(idx, "drugs"));
		SetGarageData(idx, G_METALL,		cache_get_field_content_int(idx, "metall"));
		SetGarageData(idx, G_AMMO,		cache_get_field_content_int(idx, "ammo"));

		SetGarageData(idx, G_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		SetGarageData(idx, G_MIAMI,		cache_get_field_content_int(idx, "miami"));

		cache_get_field_content(idx, "owner_name", g_garage[idx][G_OWNER_NAME], mysql, 21);

		mysql_format(mysql, query, sizeof query, "UPDATE garage SET id=%d WHERE id=%d", idx, cache_get_field_content_int(idx, "id"));
		mysql_query(mysql, query, false);

		if(IsGarageOwned(idx) && !strcmp(GetGarageData(idx, G_OWNER_NAME), "Государство", true))
		{
			SetGarageData(idx, G_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE garage SET owner_id=0,improvements=0 WHERE id=%d", GetGarageData(idx, G_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(GetGarageData(idx, G_MIAMI) != 0) Garage_CP[idx] = CreateDynamicCP(GetGarageData(idx, G_POS_X),GetGarageData(idx, G_POS_Y),GetGarageData(idx, G_POS_Z),1.5, _, _, _, 15.0);//пикапчик для гаража в майями

		UpdateGarage(idx);

		SetGarageData(idx, G_LABEL, CreateDynamic3DTextLabel(" - ", 0xFFFF00FF, GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z) + 0.5, 6.50));

		UpdateGarageLabel(idx);

		garage_area[idx] = CreateDynamicSphere(GetGarageData(idx, G_POS_X), GetGarageData(idx, G_POS_Y), GetGarageData(idx, G_POS_Z), 3.0, 0, 0, -1);

		NumberBoardUpdateSql(idx);
	}
	g_garage_loaded = rows;
	cache_delete(result);

	printf("[Garage]: Гаражей загружено: %d", g_garage_loaded);
}

stock UpdateGarage(garage_id)
{
	new garage_type = GetGarageData(garage_id, G_TYPE);

	if(GetGarageData(garage_id, G_ENTER_PICKUP))
		DestroyPickup(GetGarageData(garage_id, G_ENTER_PICKUP));

	SetGarageData(garage_id, G_ENTER_PICKUP, CreatePickup(1239, 23, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z), 0, PICKUP_ACTION_TYPE_GARAGE, garage_id));

	if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1)
	{
		SetGarageData(garage_id, G_WORKBENCH_LABEL, CreateDynamic3DTextLabel("{CB9E3A}Верстак\n{FFFFFF}Подойдите для взаимодействия", COLOR_GOLD, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2] + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, garage_id + 2000, -1, -1, 50.0));
	}
	if(GetGarageData(garage_id, G_IMPROVEMENTS) == 3)
	{
		new plate = GetGarageData(garage_id, G_PLATE_OBJECT);
        if(!IsValidDynamicObject(plate))
		{
            switch(garage_type)
			{
                case 1: plate = CreateDynamicObject(16931, -1611.69, 1578.99, 2006.93, 0.00, 0.00, 90.00, garage_id + 2000);
                case 2: plate = CreateDynamicObject(16930, 2892.99, 2891.19, 1001.50, 0.00, 0.00, 90.00, garage_id + 2000);
				case 3: plate = CreateDynamicObject(16929, -1667.14, -460.44, 1001.76, 0.00, 0.00, 90.00, garage_id + 2000);
            }
            SetGarageData(garage_id, G_PLATE_OBJECT, plate);
		}
	}
	else
	{
		new platedelete = GetGarageData(garage_id, G_PLATE_OBJECT);

        if(IsValidDynamicObject(platedelete))
		{
            DestroyDynamicObject(platedelete);
			SetGarageData(garage_id, G_PLATE_OBJECT, INVALID_OBJECT_ID);

            new slot_count = number_board_slot[garage_type - 1];

            for(new i = 0; i < slot_count; i++){
                NumberBoardDelete(garage_id, i);
			}
		}
	}
}

stock ShowPlayerGarageInfo(playerid, garage_id)
{
	if(0 <= garage_id <= g_garage_loaded)
	{
		SetPlayerUseListitem(playerid, garage_id);

		IntfDialogCallRemote(playerid, DIALOG_GARAGE_ENTER, DIALOG_STYLE_MSGBOX, "{FFD83D}Вход в гараж", "{"#cW"}Вы действительно хотите войти в этот гараж?", "Войти", "Отмена");
	}
	return 1;
}

public: ShowPlayerGarageDialog(playerid, operationid)
{
	new garage_id = GetPVarInt(playerid, "ownablegarage_id");
	if(garage_id != -1)
	{
		switch(operationid)
		{
			case GARAGE_OPERATION_PARAMS:
			{
				IntfDialogCallRemote
				(
					playerid, DIALOG_GARAGE_PARAMS, DIALOG_STYLE_LIST,
					"{FFD83D}Параметры гаража",
					"1. Открыть или закрыть гараж\n"\
					"2. Найти гараж на GPS\n"\
					"3. Улучшить гараж\n"\
					"4. Доставить транспорт в гараж {FF6600}(4000 руб)",
					"Выбрать", "Назад"
				);
			}
			case GARAGE_OPERATION_LOCK:
			{
				if(GetGarageData(garage_id, G_LOCK_STATUS))
				{
					SetGarageData(garage_id, G_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Гараж открыт");
				}
				else
				{
					SetGarageData(garage_id, G_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Гараж закрыт");
				}

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `garage` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetGarageData(garage_id, G_LOCK_STATUS), GetGarageData(garage_id, G_SQL_ID));
				mysql_query(mysql, query, false);

                UpdateGarageLabel(garage_id);

				CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
			}
			case GARAGE_OPERATION_CAR_GPS:
			{
				if(!callcmd::getmygarage(playerid, ""))
				{
					CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
				}
			}
			case GARAGE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[254];

				format(fmt_str, sizeof fmt_str, "{FFFFFF}1 уровень:\t{FFFFFF}Оформление субсидии\t%s", GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? "{66CC33}Куплено" : "{FFFFFF}55.000 руб");
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "\n%s\t{FFFFFF}Верстак\t%s", GetGarageData(garage_id, G_IMPROVEMENTS) > 0 ? "{CC3333}2 уровень:" : "{FFFFFF}2 уровень:", GetGarageData(garage_id, G_IMPROVEMENTS) > 1 ? "{66CC33}Куплено" : "{FFFFFF}200.000 руб");
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "\n%s\t{FFFFFF}Доска для номерных знаков\t%s", GetGarageData(garage_id, G_IMPROVEMENTS) > 2 ? "{CC3333}3 уровень:" : "{FFFFFF}3 уровень:", GetGarageData(garage_id, G_IMPROVEMENTS) > 2 ? "{66CC33}Куплено" : "{FFFFFF}300.000 руб");
				strcat(string, fmt_str);

				IntfDialogCallRemote(playerid, DIALOG_GARAGE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFFFFF}Улучшения для гаража", string, "Купить", "Назад");
			}
			case GARAGE_OPERATION_CAR_DELIVERY:
			{
				new vehicleid = GetPlayerLastVehicle(playerid);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					new price = 4000;
					if(VerifyIntString(QueryPlayerBalance(playerid), price))
					{
						ModifyCashBalance(playerid, -price, "Доставка ТС к гаражу (/garage)", true, true);

						SetVehiclePos
						(
							vehicleid,
							-1617.1022,
							1579.0144,
							2005.5275
						);
						SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

						SetVehicleVirtualWorld(vehicleid, garage_id + 2000);

						LinkVehicleToInterior(vehicleid, 1);

						SetVehicleZAngle(vehicleid, 89.6986);

						return SendClientMessage(playerid, 0xFFDD00, "Транспорт был доставлен в Ваш гараж");
					}
					else SendClientMessage(playerid, 0xFF6600FF, "Недостаточно денег");
				}
				else
				{
					if(GetPlayerOwnableCarLast(playerid) == 0)
						SendClientMessage(playerid, 0xFF6600FF, "У Вас нет личного транспорта");
					else
						SendClientMessage(playerid, 0xFF6600FF, "Ваш личный транспорт не загружен на сервер");
				}
				CallLocalFunction("ShowPlayerGarageDialog", "ii", playerid, GARAGE_OPERATION_PARAMS);
			}
		}
	}
	return 1;
}

public: UpdateGarageLabel(garage_id)
{
	new fmt_str[264 + 1];
	new fmt_type[30];
	if(GetGarageData(garage_id, G_TYPE) == 1) format(fmt_type, sizeof fmt_type, "Эконом");
	if(GetGarageData(garage_id, G_TYPE) == 2) format(fmt_type, sizeof fmt_type, "Средний");
	if(GetGarageData(garage_id, G_TYPE) == 3) format(fmt_type, sizeof fmt_type, "Элитный");

	if(!IsGarageOwned(garage_id))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"{fc7703}-Гараж-\n"\
			"{ffffff}Гараж класса: %s (%d)\n"\
			"{ffffff}Используйте {6cba78}/buygarage\n"\
			"{969696}Цена: %s руб",
			fmt_type,
			GetGarageData(garage_id, G_SQL_ID),
			formatInt(GetGarageData(garage_id, G_PRICE))
		);
	}
	else
	{
		format
		(
		    fmt_str, sizeof fmt_str,
            "{00a8e6}-Гараж-\n"\
			"{ffffff}Гараж класса: %s (%d)\n"\
			"{969696}Владелец: %s",
			fmt_type,
			GetGarageData(garage_id, G_SQL_ID),
			GetGarageData(garage_id, G_OWNER_NAME)
		);
	}
	UpdateDynamic3DTextLabelText(GetGarageData(garage_id, G_LABEL), 0xFFFF00FF, fmt_str);
}

stock UpdateCaptureTextDraw()
{
    foreach(new playerid : Player)
    {
        if(GetPlayerFamily(playerid) != 0)
        {
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.name = '%s'", g_family[g_war[W_ATTACK_TEAM]][F_NAME]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.name = '%s'", g_family[g_war[W_PROTECT_TEAM]][F_NAME]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').seconds = %d", g_war[W_TIME]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team1.kills = %d", g_war[W_ATTACKER_KILLS]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			//TextDrawSetString(capture_TD[4], string3);

			STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Capture').team2.kills = %d", g_war[W_PROTECTOR_KILLS]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
	}
}

stock IsPlayerInPoliceTeam(playerid)
{
	new team = GetPlayerTeamEx(playerid);
    if(team == TEAM_MVD || team == TEAM_FSIN) return true;
	return false;
}

stock GetCarNumberPrice(number[])
{
	if(strlen(number) != 6) return 0;

	new chars[4],
		price = 2500000;

	format(chars, sizeof chars, "%c%c%c", number[0], number[4], number[5]);

	if(!strcmp(chars, "amp", true)) price += 2500000;
	else if(!strcmp(chars, "ooo", true)) price += 10000000;
	else if(!strcmp(chars, "aaa", true)) price += 10000000;
	else if(!strcmp(chars, "ekx", true)) price += 5000000;
	else if(!strcmp(chars, "xam", true)) price += 2500000;
	else if(!strcmp(chars, "bop", true)) price += 5000000;
	else if(!strcmp(chars, "xep", true)) price += 2500000;
	else if(!strcmp(chars, "hax", true)) price += 2500000;
	else if(!strcmp(chars, "bbb", true)) price += 10000000;
	else if(!strcmp(chars, "ttt", true)) price += 10000000;
	else
	{
		if(chars[0] == chars[1] && chars[0] != chars[2]) price += 5000000;
		else if(chars[0] == chars[1] && chars[0] == chars[2]) price += 10000000;
		else if(chars[0] == chars[2] && chars[0] != chars[1]) price += 5000000;
	}

	if(number[1] == 0 && number[1] == 0) price += 2500000;
	else if(number[1] == number[2] && number[1] != number[3]) price += 5000000;
	else if(number[1] == number[2] && number[1] == number[3]) price += 10000000;

	return price;
}

stock GetCarRegionPrice(number[])
{
	if(strlen(number) != 3) return 0;

	new price = 2500000;

	if(number[0] == 0 && number[1] == 0) price += 5000000;
	else if(number[0] == number[1] && number[1] != number[2]) price += 5000000;
	else if(number[0] == number[1] && number[0] == number[2]) price += 10000000;

	return price;
}
stock CreateGreenZones()
{
	for(new i; i < sizeof g_green_zones; i ++)
	{
		g_green_zones[i][GZ_AREA] = CreateDynamicRectangle
		(
			g_green_zones[i][GZ_MIN_X], g_green_zones[i][GZ_MIN_Y],
			g_green_zones[i][GZ_MAX_X], g_green_zones[i][GZ_MAX_Y]
		);

		if(g_green_zones[i][GZ_ACTOR][0] != 0.0) 
        {
            g_green_zones[i][GZ_ACTOR_ID] = CreateActor(171, g_green_zones[i][GZ_ACTOR][0], g_green_zones[i][GZ_ACTOR][1], g_green_zones[i][GZ_ACTOR][2], g_green_zones[i][GZ_ACTOR][3]);
            g_green_zones[i][GZ_TEXT_ID] = CreateDynamic3DTextLabel("{FFBE5C}Парковщик{FFFFFF}\nЗаберите Ваш транспорт", 0xfab13bFF, g_green_zones[i][GZ_ACTOR][0], g_green_zones[i][GZ_ACTOR][1], g_green_zones[i][GZ_ACTOR][2]+1, 6.0);
        }
	}
	return 1;
}

stock HideSpecmenuTD(playerid)
{
	CEF_HIDE(playerid, "AdminSpectate");
	CEF_CREATE(playerid, 1, 2, "client.setHudStatus(true)");
	CEF_CREATE(playerid, 1, 2, "interface('Hud').showTime()");
	CEF_CREATE(playerid, 1, 2, "window.SetCursorStatus(1, 0)");
	return 1;
}

stock ShowPlayerAvtoriz(playerid)
{
	EndedInitializeBrowser(playerid);
	new name[25], fmt_str[260];
	GetPlayerName(playerid,name,sizeof name);
	format(fmt_str, sizeof fmt_str, "[\"auth\", \"%s\", %d, %d, %d, %d, %d]", name, SERVER, g_xbonus, SERVER_HUD_HELLOWEEN, SERVER_HUD_NEW_YEAR, SERVER_HUD_EASTER);
	CEF_CREATE(playerid, 2, 4, "Authorization", fmt_str);
}

new bool:PlayerSpectate[MAX_PLAYERS];

stock PlayerToggleSpectate(playerid, bool:type, bool:islogged=true)
{
	if(!GetPlayerData(playerid, P_LOGGED) && islogged) type = true;
    PlayerSpectate[playerid] = type;
    TogglePlayerSpectating(playerid, type);
}

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);

	DestroyPlayerObject(playerid, noclipdata[playerid][fly_object]);
	noclipdata[playerid][camera_mode] = CAMERA_MODE_NONE;
	return 1;
}

stock FlyMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][fly_object] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	TogglePlayerSpectating(playerid, true);
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][fly_object]);

	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][camera_mode] = CAMERA_MODE_FLY;
	return 1;
}
	
stock ShowPlayerInfoHospital(playerid)
{
	IntfDialogCallRemote
	(
		playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
		"{"#cGold"}Больница",
		"{"#cW"}Государство бесплатно предоставляет медицинские услуги в\n"\
		"{"#cW"}городских больницах. Однако бесплатный курс может занять\n"\
		"время, поэтому за определенную cумму медперсонал готов\n"\
		"провести для Вас экспресс-лечение.",
		"Закрыть", ""
	);
	return 1;
}

stock ShowPlayerFlyPolet(playerid)
{
	IntfDialogCallRemote
	(
	    playerid, DIALOG_ADMIN_FLY, DIALOG_STYLE_LIST,
	    "Режим полёта",
	    "1. Спавн в текущем месте\n"\
	    "2. Спавн на месте старта",
	    "Далее", "Отмена"
	);

	return 1;
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
        new time[3];
        gettime(time[0], time[1], time[2]);
        SetPlayerTime(playerid, time[0], time[1]);
        SetPlayerWeather(playerid, 7);
        return true;
}
public ConnectedPlayers()
{
        new Connected;
        foreach(new i: Player) if(IsPlayerConnected(i)) Connected++;
        return Connected;
}
public NoRoof(playerid)
{
    new carid = GetPlayerSurfingVehicleID(playerid);
    if(carid != INVALID_VEHICLE_ID )
    {
        new Float:speed = GetVehicleSpeed(carid);
        new cm=GetVehicleModel(carid);
        switch(cm)
        {
            case 430,446,452,453,454,472,473,484,493,595:{return 1;}
            default:{}
        }
        if(speed > 0)
        {
            new Float:slx, Float:sly, Float:slz;
            GetPlayerPos(playerid, slx, sly, slz);
            SetPlayerPos(playerid, slx, sly, slz+2.5); 
            ApplyAnimation(playerid, "ped", "BIKE_fallR", 4.0, 0, 1, 0, 0, 0,0);
            new Float:hp;
            GetPlayerHealth(playerid, hp);
            SetPlayerHealth(playerid, hp-15);
            SetTimerEx("anim2", 1100, 0, "d", playerid);
        }
    }
    return 1;
}

public anim2(playerid)
{
    ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
    return 1;
}

stock TeleportPlayerGPS(playerid, Float: x, Float: y, Float: z)
{
	SetPlayerPos(playerid, x, y, z);
	return 1;
}

stock AddRentVehicle(id ,model, Float:X, Float:Y, Float:Z, Float:Angle, color1, color2, price)
{
    new newvid;
    newvid = AddStaticVehicle(model, X, Y, Z, Angle, color1, color2);
    RentCar[newvid][Rprice] = price;
    RentCar[newvid][Rcarid] = id;
    RentCar[newvid][ROwned] = 0;
    IsRentableVehicle[newvid] = 1;
    SetVehicleNumberPlate(newvid,"RENT");
}

TotalVehicles()
{
	new vid;
	vid = CreateVehicle(411, 0, 0, 0, 0, -1, -1, 10);
	DestroyVehicle(vid);
	vid--;
	return vid;
}
forward CountRentedVehicles();
public CountRentedVehicles()
{
	new count;
	for(new R=1; R<TotalVehicles(); R++)
	{
	    if(GetVehicleData(R, V_RENT) != -1)
	    {
	        count++;
		}
	}
}

stock GetPlayerCameraLookAt(playerid, &Float:rX, &Float:rY, &Float:rZ, Float:dist = 10.0)
{
    new Float: locAt[6];
    GetPlayerCameraFrontVector(playerid, locAt[0], locAt[1], locAt[2]);
    GetPlayerCameraPos(playerid, locAt[3], locAt[4], locAt[5]);
    rX = locAt[0] * dist + locAt[3];
    rY = locAt[1] * dist + locAt[4];
    rZ = locAt[2] * dist + locAt[5];
}

stock SetPlayerFermerChopCP(playerid)
{
	new rand = random(sizeof fermer_job_chop_cp);

	SetPlayerCheckpoint(playerid, fermer_job_chop_cp[rand][0], fermer_job_chop_cp[rand][1], fermer_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_FERMER_TAKE);
}

stock SetPlayerFermerChopCPSbor(playerid)
{
	new rand = random(sizeof fermer_job_chop_cp_sbor);

	SetPlayerCheckpoint(playerid, fermer_job_chop_cp_sbor[rand][0], fermer_job_chop_cp_sbor[rand][1], fermer_job_chop_cp_sbor[rand][2], 2.0, CP_ACTION_TYPE_FERMER_TAKE_SBOR);
}

stock PoleFerma(playerid)
{
	new rand = random(sizeof pole_ferma);

	SetPlayerCheckpoint(playerid, pole_ferma[rand][0], pole_ferma[rand][1], pole_ferma[rand][2], 2.0, CP_ACTION_TYPE_FERMER_POLE);
}

public: SetPlayerFermerTake(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
	{
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_PUT);

		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		//ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);
		
		SetPlayerCheckpoint(playerid, 1657.2538,692.1829,16.4430, 2.0, CP_ACTION_TYPE_FERMER_PUT);

		//ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 2901, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);
	}
}

public: SetPlayerFermerTakeSbor(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FERMER)
	{
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_PUT_SBOR);

		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 0);

		SetPlayerCheckpoint(playerid, 1549.9178,637.3733,15.9206, 2.0, CP_ACTION_TYPE_FERMER_PUT_SBOR);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 2901, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);
	}
}

public: FermerPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FERMER_CHOP);

	if(message)
		SendClientMessage(playerid, 0xFF6600FF, "Вы уронили сено");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
//	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	//ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 0);

	SetPlayerFermerChopCP(playerid);
	return 1;
}

stock OstInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
//	new Float: dist = 0.6;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		x = GetOSTInfo(idx, OST_POS_X);
		y = GetOSTInfo(idx, OST_POS_Y);
		z = GetOSTInfo(idx, OST_POS_Z);
		rot_z = GetOSTInfo(idx, OST_ROT_Z);

		CreateDynamicObject(4640, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);

		CreateDynamic3DTextLabel("{"#cGold"}Остановка\n{"#cW"}Использование: {"#cGold"}л. ALT", -1, x, y, z + 0.7, 3.0);
	}
	print("[OST]: Все остановки созданы");
}

stock GetPlayerNearestOST(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new ost_id = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetOSTInfo(idx, OST_POS_X), GetOSTInfo(idx, OST_POS_Y), GetOSTInfo(idx, OST_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock GetMapNearestOst(playerid)
{
	new ost_id = -1;
	new Float: my_dist;
	new Float: dist = 650.0;

	new Float: x = GetPVarFloat(playerid, "click_x");
 	new Float: y = GetPVarFloat(playerid, "click_y");
 	new Float: z = GetPVarFloat(playerid, "click_z");

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		//my_dist = GetDistanceBetweenPoints(x, y, z, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		my_dist = PointToPoint(x, y, z, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock GetNearestOst(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new ost_id = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_ostanovka; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_ostanovka[idx][OST_POS_X], g_ostanovka[idx][OST_POS_Y], g_ostanovka[idx][OST_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			ost_id = idx;
		}
	}
	return ost_id;
}

stock GetDistanceBetweenPoints(Float: X, Float: Y, Float: Z, Float: PointX, Float: PointY, Float: PointZ)
{
	new Float: Distance;

	Distance = floatabs(floatsub(X, PointX)) + floatabs(floatsub(Y, PointY)) + floatabs(floatsub(Z, PointZ));

	return floatround(Distance);
}

stock CefBiz(playerid, biz_id)
{
	new lock;
	if(GetBusinessData(biz_id, B_LOCK_STATUS) == 1) lock = 0;
	if(GetBusinessData(biz_id, B_LOCK_STATUS) == 0) lock = 1;
	if(GetBusinessData(biz_id, B_OWNER_ID) != 0) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0, %d, \"%s\", \"%s\", %d, %d]", lock, GetBusinessData(biz_id, B_NAME), GetBusinessData(biz_id, B_OWNER_NAME), GetBusinessData(biz_id, B_ENTER_PRICE), GetBusinessData(biz_id, B_PRICE));
	else format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0, %d, \"%s\", \"Государство\", %d, %d]", lock, GetBusinessData(biz_id, B_NAME), GetBusinessData(biz_id, B_ENTER_PRICE), GetBusinessData(biz_id, B_PRICE));
	CEF_CREATE(playerid, 2, 4, "Business", STRING_GLOBAL);
	
	STRING_GLOBAL[0] = EOS;
	return 1;
}

stock HideBizInfoPick(playerid)
{
	CEF_HIDE(playerid, "Business");
}

public: OneSecond()
{
	new
		hour, minute, second,
		day, month, year;

	gettime(hour, minute, second);
	getdate(day, month, year);

    return 1;
}

//------------------------------Система точек в числах-------------------------------------
stock bool:FormatIntWithDelimiters(value, outstr[], delimiter = '.', size = sizeof(outstr))
{
static delimiter_string[2] = { '\0', '\0' };
static len;
delimiter_string[0] = delimiter;
if (value != cellmin)
format(outstr, size, "%d", value);
else
outstr[0] = '\0', strcat(outstr, "-2147483648", size);
len = strlen(outstr);
switch (len - _:(value < 0))
{
case 10:
{
if (len + 3 >= size)
return false;
strins(outstr, delimiter_string, len - 3, 1);
strins(outstr, delimiter_string, len - 6, 1);
strins(outstr, delimiter_string, len - 9, 1);
}
case 7..9:
{
if (len + 2 >= size)
return false;
strins(outstr, delimiter_string, len - 3, 1);
strins(outstr, delimiter_string, len - 6, 1);
}
case 4..6:
{
if (len + 1 >= size)
return false;
strins(outstr, delimiter_string, len - 3, 1);
}
}
return true;
}
stock formatInt(amount, delimiter[2] = ".")
{
	new int_string[15];
	format(int_string, sizeof(int_string), "%d", amount >= 0 ? amount : -amount);

	new value = strlen(int_string);

	switch(value)
	{
		case 4..6:
			strins(int_string, delimiter, value - 3, 1);

		case 7..9:
			strins(int_string, delimiter, value - 3, 1),
			strins(int_string, delimiter, value - 6, 1);

		case 10..12:
			strins(int_string, delimiter, value - 3, 1),
			strins(int_string, delimiter, value - 6, 1),
			strins(int_string, delimiter, value - 9, 1);
	}

	if(amount < 0) strins(int_string, "-", 0);

	new money[16];
	format(money, sizeof(money), "%s", int_string);

	return money;
}
//------------------------------------------------------------------------------
forward EndedInitializeBrowser(playerid);
forward OnRegistrationData(playerid, email[], password_first[], password_second[]);
forward OnRegistrationCharacter(playerid, eventid, row, skin);
forward OnRegistrationBonuses(playerid, name[]);
forward OnAuthorizationStart(playerid, password[]);
forward OnAuthorizationCode(playerid, code[]);

public EndedInitializeBrowser(playerid)
{
    CEF_CREATE(playerid, 1, 2, "confirmBrowserInitialize()");
	return 1;
}

public OnRegistrationBonuses(playerid, name[])
{
	if(g_player_auth_inputs[playerid] == 1) return 1;

	if(g_player_account_state[playerid] != 2)
	{
		return 0;
	}

	format(g_player[playerid][P_REFER], 32, "%s", name);

	bcrypt_hash(playerid, "OnPasswordHash", g_player[playerid][P_PASSWORD], BCRYPT_COSST);

	return 1;
}

public OnRegistrationCharacter(playerid, eventid, row, skin)
{
	if(eventid == 0)
	{
		if(row == 0)
		{
			_player_skin_sex[playerid] = false;
			CEF_CREATE(playerid, 1, 2,
				"interface(\"Authorization\").setSkins(\"[78,135,137,212,160,230,15327,15353,15354,15355,15524,15525]\")");

			new const skins[12] = {78,135,137,212,160,230,15327,15353,15354,15355,15524,15525};

			if(skin < 0 || skin >= sizeof(skins))
			{
				_player_skin[playerid] = skins[0];
			}
			else
			{
				_player_skin[playerid] = skins[skin];
			}

			if(IsValidActor(PlayerRegActor[playerid]))
				DestroyActor(PlayerRegActor[playerid]);

			PlayerRegActor[playerid] = CreateActor(_player_skin[playerid], 237.75, 2772.30, 13.39, 332.51);
			SetActorVirtualWorld(PlayerRegActor[playerid], 1 + playerid);
			ApplyActorAnimation(PlayerRegActor[playerid], "COP_AMBIENT", "COPLOOK_NOD", 4.10, false, false, false, true, 0);
		}
		else if(row == 1)
		{
			_player_skin_sex[playerid] = true;
			CEF_CREATE(playerid, 1, 2,
				"interface(\"Authorization\").setSkins(\"[89,15345,15352,88,39,38,75,15522,15523]\")");

			new const skins[9] = {89,15345,15352,88,39,38,75,15522,15523};

			if(skin < 0 || skin >= sizeof(skins))
			{
				_player_skin[playerid] = skins[0];
			}
			else
			{
				_player_skin[playerid] = skins[skin];
			}

			if(IsValidActor(PlayerRegActor[playerid]))
				DestroyActor(PlayerRegActor[playerid]);

			PlayerRegActor[playerid] = CreateActor(_player_skin[playerid], 237.75, 2772.30, 13.39, 332.51);
			SetActorVirtualWorld(PlayerRegActor[playerid], 1 + playerid);
			ApplyActorAnimation(PlayerRegActor[playerid], "COP_AMBIENT", "COPLOOK_NOD", 4.10, false, false, false, true, 0);
		}

		SetPlayerData(playerid, P_SEX, _player_skin_sex[playerid]);
		SetPlayerSkin(playerid, _player_skin[playerid]);
	}

	if(eventid == 1)
	{
		CEF_CREATE(playerid, 1, 2, "interface('Authorization').setRegistrationStage(3)");
	}

	return true;
}

public OnRegistrationData(playerid, email[], password_first[], password_second[])
{
	if(g_player_account_state[playerid] != 2)
	{
		return printf("%s попытался выебнуться типо крутой", GetPlayerNameEx(playerid));
	}

	if(GetPlayerSqlIDByName(GetPlayerNameEx(playerid)) != -1) return 1;

	SetPlayerData(playerid, P_REG_TIME, gettime());
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, gettime());
	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_PASSWORD], 85, "%s", password_first);
	format(g_player[playerid][P_EMAIL], 61, "%s", email);
	CEF_CREATE(playerid, 1, 2, "interface('Authorization').setRegistrationStage(2)");
	return GetPlayerAccountID(playerid);
}

public OnAuthorizationCode(playerid, code[])
{
    new time_now = gettime();
    new entered = strval(code);

    new expectedNow = GoogleAuthenticatorCode(g_player[playerid][P_AUTH_TOKEN], time_now);
    new expectedPrev = GoogleAuthenticatorCode(g_player[playerid][P_AUTH_TOKEN], time_now - 30);
    new expectedNext = GoogleAuthenticatorCode(g_player[playerid][P_AUTH_TOKEN], time_now + 30);

    if(entered == expectedNow || entered == expectedPrev || entered == expectedNext)
    {
        AuthorizationCompleted(playerid);
    }
    else
    {
        CEF_CREATE(playerid, 1, 2, "window.addDialogInQueue('[0,0,\"{FF6600}Неверный код\",\"\",\"Закрыть\",\"\",0,0]',\
	    \"{FFFFFF}Код с приложения Google Authenticator введён<n>неправильно. Попробуйте выполнить следующее:<n><n>1. Введите {FFCD00}/q {FFFFFF}для выхода из игры.<n><n>2. Попробуйте синхронизировать время на Вашем<n>устройстве. Допустимое отклонение - {FF66A3}не более 3 секунд.<n>{FFFFFF}Для проверки используйте сайт {http://www.time.is|http://www.time.is|F9C110}<n><n>\", 0)");
	
	    FixKick(playerid);
    }

    return 1;
}

public OnAuthorizationStart(playerid, password[])
{
	if(strlen(GetPlayerData(playerid, P_PASSWORD)) < 1) return 1;

	if(strfind(password,"~") != -1 || strfind(password,"%") != -1) return 0;

	if(strlen(password) < 1) return CEF_CREATE(playerid, 1, 2,"interface(\"Authorization\").$refs.auth.setError(\"password\", \"Вы не ввели пароль\")");

	new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
	new bool: wrong_password = false;
	new str_len = strlen(password);

	if(1 <= str_len <= 64)
	{
		bcrypt_verify(playerid, "OnPasswordVerify", password, g_player[playerid][P_PASSWORD]);
	}
	else
	{
		wrong_password = true;
		login_step--;
		ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
		CEF_CREATE(playerid, 1, 2, "interface('Authorization').$refs.auth.setError(\"password\", \"Некорректная длинна пароля\")");
	}
	return 1;
}

public: OnPlayerLoading(playerid)
{
	new query[512];
	format(query, sizeof query, "UPDATE accounts_canvasdev SET serialid_temp = '%e' WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_HARDWARE_ID_TEMP), GetPlayerAccountID(playerid));
	mysql_tquery(mysql, query);

	CEF_CREATE(playerid, 1, 2, "window.stopSound()");

    if(GetPlayerData(playerid, P_LAST_EXIT) + 300 > gettime())
    {
        IntfDialogCallRemote(playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_MSGBOX,"{FFFFFF}Восстановление позиции","Хотите вернуться на место последнего выхода из игры?","Да", "Нет");
	}
	else CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, LOGIN_STATE_LOAD_ACC, false);

	return 1;
} 
#include "systems/dialog.inc"
public: Phone_OnOpenContact(playerid)
{
	CEF_CREATE(playerid, 1, 2, "interface('Phone').addContact('[[\"Больница\",3,-1,1],[\"Полиция\",2,-1,1],[\"МЧС\",101,-1,1], [\"Автомеханики\",90,-1,1],[\"Время\",60,-1,1],[\"Баланс\",111,-1,1]]')");
}

stock IntfDialogCallRemote(playerid, dialogid, style, caption[], info[], button1[], button2[], page_1 = 0, page_2 = 0, info1[] = "")
{
	return ShowClientDialogRedAgeOnline(playerid, dialogid, style, caption, info, button1, button2, page_1, page_2, info1);
}

stock InterfaceShowNumberBuy(playerid, bool:status)
{
	if(status)
	{
		SetPVarInt(playerid, "buynumbertype", 0);
	    CEF_CREATE(playerid, 2, 4, "BuyCarNumber", "[false, 5000, 153000, 0, 0]");
	}
	else CEF_CREATE(playerid, 1, 2, "closeInterface('BuyCarNumber')");
}

stock GetNumPriceCefDonate(t[])
{
	new e =  GetNumPriceInt(t) + 1;
	new price = 72 * e;
	return price;
}

stock GetNumPriceInt(t[])
{
	new e = 0;
	new n = strlen(t);
	for(new r = 0; r < n; r++)
	{
		for(new i = r + 1; i < n; i++)
		{
			if(t[r] == t[i])
				e += 1;
		}
	}
	return e;
}

stock GetNumPriceCef(t[])
{
	new e =  GetNumPriceInt(t) + 1;
	new price = 153000 * pow(e, 2);
	return price;
}

stock IsACarNumberRu(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}
stock IsACarRegionRu(text[])
{
	new status;

	for(new i; i < sizeof is_a_car_region; i++)
	{
		if(strcmp(text, is_a_car_region[i], false)) continue;
		status = 1;
		break;
	}
	return status;
}

stock IsACarNumberKz(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 3..5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 0, 1, 2:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

stock IsACarNumberBy(text[], text2[])
{
	new length = strlen(text);
    new length2 = strlen(text2);
	if(length != 4)
	{
		return 0;
	}
	if(length2 != 4)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	for(new i; i < length2; i ++)
	{
		switch(i)
		{
			case 0, 1:
			{
				switch(text2[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
			case 2:
			{
			    if(text2[i] == '-') continue;
			    else return 0;
			}
			case 3:
			{
				switch(text2[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

stock IsACarNumberUa(text[], text2[])
{
	new length = strlen(text);
    new length2 = strlen(text2);
	if(length != 4) return 0;
	if(length2 != 4) return 0;
	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}
	for(new i; i < length2; i ++)
	{
		switch(i)
		{
			case 0..3:
			{
				switch(text2[i])
				{
					case 'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y': continue;
					default: return 0;
				}
			}
		}
	}
	return 1;
}

public: BuyVehicleLicensePlate(playerid, type33, number[], region[])
{
	new fmt_text[505],
		Cache: result,
		rows;


	new numbercheck[40];
	format(numbercheck, sizeof numbercheck, "%s%s", number, region);
	if(GetPVarInt(playerid, "buynumbertype") == 1)
	{
		new price = GetNumPriceCefDonate(numbercheck);
		
		if(type33 == 5) price = 1800;

		format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "Данный номер уже зарегистрирован", "", "Закрыть");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM family_cars WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "Данный номер уже зарегистрирован", "", "Закрыть");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM items WHERE number='%s' and region='%s' and typenumber=%d and type_item=1", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "Данный номер уже зарегистрирован", "", "Закрыть");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "Данный номер уже зарегистрирован", "", "Закрыть");

		if(type33 == 1) if(!IsACarRegionRu(region)) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "Данного региона не существует", "", "Закрыть");

		if(QueryPlayerDonationBalance(playerid) < price) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация", "У вас недостаточно доната на счету", "", "Закрыть");
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

		ProcessPlayerCredit(playerid, -price, "Покупка номеров");

		format(fmt_text, sizeof fmt_text, "{66CC00}Вы купили номера формата {F0CE4C}\"%s %s\" {66CC00}за %d донат-монет", number, region, price);
	}
	else
	{
		if(type33 == 1) if(strlen(number) != 6 || strlen(region) < 2 || strval(region) > 977) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 2) if(strlen(number) != 6 || strlen(region) != 2) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 3) if(strlen(number) != 4 || strlen(region) != 4) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 4) if(strlen(number) != 4 || strlen(region) != 4) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 5) if(strlen(number) != 1 || strlen(number) != 7) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
	
		if(type33 == 1) if(!IsACarNumberRu(number)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 1) if(!IsACarRegionRu(region)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат региона\")");
		
		if(type33 == 2) if(!IsACarNumberKz(number)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 3) if(!IsACarNumberBy(number, region)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");
		if(type33 == 4) if(!IsACarNumberUa(number, region)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Неверный формат номера\")");

		new price = GetNumPriceCef(numbercheck);
		if(!strcmp(number, ranomnomber[playerid]) && !strcmp(region, ranomnomberreg[playerid]))
		{
			price = 5000;
		}

		format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Данный номер уже занят\")");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM family_cars WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Данный номер уже занят\")");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM items WHERE number='%s' and region='%s' and typenumber=%d and type_item=1", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Данный номер уже занят\")");

		format(fmt_text, sizeof fmt_text, "SELECT * FROM kiosks_items WHERE number='%s' and region='%s' and typenumber=%d", number, region, type33);
		result = mysql_query(mysql, fmt_text, true);
		rows = cache_num_rows();
		cache_delete(result);
		if(rows) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"Данный номер уже занят\")");

		if(!VerifyIntString(QueryPlayerBalance(playerid), price)) return CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(0, \"У вас недостаточно денег\")");
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);

		ModifyCashBalance(playerid, -price, "Покупка номеров", true, true);

		CEF_CREATE(playerid, 1, 2, "window.interface('BuyCarNumber').buyResponse(1)");

		new index = GetVehicleData(GetPVarInt(playerid, "ownablecar_id"), V_ACTION_ID);
		SetOwnableCarData(index, OC_NUMBER_STATUS, 1);

		format(fmt_text, sizeof fmt_text, "{66CC00}Вы купили номера формата: {F0CE4C}\"%s %s\" {66CC00}за %d руб", number, region, price);
	}
	SendClientMessage(playerid, 0x66CC00FF, fmt_text);

	CreateItemsCarNumber(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), number, region, type33, -1, -1, 0, 1);

	return 1;
}

public: GetRandomUnusedLicensePlate(playerid, type22)
{
	new numberplate[15] = EOS,
	buyplate[150] = EOS;
	switch(type22)
	{
		case 1:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumber(playerid), GenerateCarNumberRegRu(playerid));
		}
		case 2:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumberKz(playerid), GenerateCarNumberRegKz(playerid));
		}
		case 3:
		{
			format(numberplate, sizeof numberplate, "%s  %s", GenerateCarNumberBy(playerid), GenerateCarNumberRegBy(playerid));
		}
		case 4:
		{
			format(numberplate, sizeof numberplate, "%s", GenerateCarNumberUK(playerid));
		}
	}
	format(buyplate, sizeof buyplate, "window.interface('BuyCarNumber').getRandomResponse('%s')", numberplate);
	CEF_CREATE(playerid, 1, 2, buyplate);
	return 1;
}

stock GenerateCustomCarNumber(playerid)
{
    static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
    new number[8] = EOS;

    for (new i = 0; i < 7; i++)
    {
        if (random(2))
        {
            number[i] = chars[random(sizeof(chars))];
        }
        else 
        {
            number[i] = random('9' - '0' + 1) + '0';
        }
    }

    number[7] = EOS;
    
    format(ranomnomber[playerid], sizeof ranomnomber[], "%s", number);
    return number;
}

stock GenerateCarNumber(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new number[7] = EOS;

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];

	format(number, sizeof number, "%c%c%c%c%c%c", number[0], number[1], number[2], number[3], number[4], number[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c%c%c", number[0], number[1], number[2], number[3], number[4], number[5]);

	return number;
}

stock GenerateCarNumberRegRu(playerid)
{
	new number = random(sizeof is_a_car_region);

	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s",  is_a_car_region[number]);
	return is_a_car_region[number];
}
stock GenerateCarNumberKz(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberkz[7] = EOS;

	numberkz[0] = random('9' - '0') + '0';
	numberkz[1] = random('9' - '0') + '0';
	numberkz[2] = random('9' - '0') + '0';
	numberkz[3] = chars[random(sizeof chars)];

	if(numberkz[0] == numberkz[1] && numberkz[1] == numberkz[2] && numberkz[2] == '0')
		numberkz[2] = random('9' - '0') + '1';

	numberkz[4] = chars[random(sizeof chars)];
	numberkz[5] = chars[random(sizeof chars)];

	format(numberkz, sizeof numberkz, "%c%c%c%c%c%c", numberkz[0], numberkz[1], numberkz[2], numberkz[3], numberkz[4], numberkz[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c%c%c", numberkz[0], numberkz[1], numberkz[2], numberkz[3], numberkz[4], numberkz[5]);
	return numberkz;
}

stock GenerateCarNumberPolice()
{
	static const chars[12] = {'A', 'B', 'E', 'K', 'M', 'X', 'O', 'P', 'C', 'H', 'T', 'Y'};
	new number[6];

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];

	return number;
}

stock GenerateCarNumberRegKz(playerid)
{
	new numberrkz[4] = EOS;
	format(numberrkz, sizeof numberrkz, "%d", RandomEx(10, 99));
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s",  numberrkz);
	return numberrkz;
}

stock GenerateCarNumberBy(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberby[7] = EOS;

	numberby[0] = random('9' - '0') + '0';
	numberby[1] = random('9' - '0') + '0';
	numberby[2] = random('9' - '0') + '0';
	numberby[3] = random('9' - '0') + '0';

	if(numberby[0] == numberby[1] && numberby[1] == numberby[2] && numberby[2] == numberby[3] && numberby[3] == '0')
		numberby[3] = random('9' - '0') + '1';

	numberby[4] = chars[random(sizeof chars)];
	numberby[5] = chars[random(sizeof chars)];

	format(numberby, sizeof numberby, "%c%c%c%c%c%c", numberby[0], numberby[1], numberby[2], numberby[3], numberby[4], numberby[5]);
	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c", numberby[0], numberby[1], numberby[2], numberby[3]);
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%c%c",  numberby[4], numberby[5]);

	return numberby;
}

stock GenerateCarNumberRegBy(playerid)
{
	new numberregby[4] = EOS;
	format(numberregby, sizeof numberregby, "%d", RandomEx(1, 9));
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%s-%s",  ranomnomberreg[playerid], numberregby);

	return numberregby;
}

stock GenerateCarNumberUK(playerid)
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new numberuk[9] = EOS;

	numberuk[0] = chars[random(sizeof chars)];
	numberuk[1] = chars[random(sizeof chars)];
	numberuk[2] = random('9' - '0') + '0';
	numberuk[3] = random('9' - '0') + '0';
	numberuk[4] = random('9' - '0') + '0';
	numberuk[5] = random('9' - '0') + '0';
	if(numberuk[2] == numberuk[3] && numberuk[3] == numberuk[4] && numberuk[4] == numberuk[5] && numberuk[5] == '0')
		numberuk[5] = random('9' - '0') + '1';
	numberuk[6] = chars[random(sizeof chars)];
	numberuk[7] = chars[random(sizeof chars)];

	format(ranomnomber[playerid], sizeof ranomnomber[], "%c%c%c%c", numberuk[2], numberuk[3], numberuk[4], numberuk[5]);
	format(ranomnomberreg[playerid], sizeof ranomnomberreg[], "%c%c%c%c",  numberuk[0], numberuk[1], numberuk[6], numberuk[7]);
	return numberuk;
}
stock pow(dig, deg)
{
	new res = dig;
	if(deg == 0) return 1;
	for(new i=1;i<deg;i++) res *= dig;
	return res;
}

stock GetVehicleNumber(vehicleid)
{
	return g_vehicle_data[vehicleid][V_NUMBER];
}  

stock LoadPlayerCarsShop(playerid)
{
	loadcars[playerid] = 0;
	loadcarsmax[playerid] = 10;
	loadcarsmax_2[playerid] = 10;
	loadtypecars[playerid] = 0;

	if(GetPVarInt(playerid, "STONKScar") == 1) loadcarsmax[playerid] = 7, loadcarsmax_2[playerid] = 7, loadtypecars[playerid] = 3;
	else if(GetPVarInt(playerid, "sredcar") == 1) loadcarsmax[playerid] = 1, loadcarsmax_2[playerid] = 1, loadtypecars[playerid] = 2;
	else if(GetPVarInt(playerid, "gruzcar") == 1) loadcarsmax[playerid] = 11, loadcarsmax_2[playerid] = 11, loadtypecars[playerid] = 8;
	else if(GetPVarInt(playerid, "aviacar") == 1) loadcarsmax[playerid] = 3, loadcarsmax_2[playerid] = 3, loadtypecars[playerid] = 5;
	else if(GetPVarInt(playerid, "katercar") == 1) loadcarsmax[playerid] = 8, loadcarsmax_2[playerid] = 8, loadtypecars[playerid] = 6;
	else if(GetPVarInt(playerid, "motocar") == 1) loadcarsmax[playerid] = 10, loadcarsmax_2[playerid] = 10, loadtypecars[playerid] = 4;
	else if(GetPVarInt(playerid, "homecar") == 1) loadcarsmax[playerid] = 3, loadcarsmax_2[playerid] = 3, loadtypecars[playerid] = 9;
	else loadcarsmax[playerid] = 1, loadcarsmax_2[playerid] = 1, loadtypecars[playerid] = 1;

	STRING_GLOBAL = "";
	new query[248];
	for(new i; i < sizeof g_load_car_shop; i++)
	{
		if(loadcars[playerid] <= loadcarsmax[playerid])
		{
			if(g_load_car_shop[i][CAR_CLASS_TYPE] == loadtypecars[playerid])
			{
				format(query, sizeof query, "[%d,\"%s\",%d,%d,%d,%d,%d,%d,%f,%d,%d,%d],", 
				g_load_car_shop[i][CAR_ID],
				g_load_car_shop[i][CAR_NAME],
				g_load_car_shop[i][CAR_PRICE],
				g_load_car_shop[i][CAR_RENT_PRICE],
				g_load_car_shop[i][CAR_FUEL_TYPE],
				g_load_car_shop[i][CAR_CLASS_TYPE],
				g_load_car_shop[i][CAR_MAX_SEATS],
				g_load_car_shop[i][CAR_LOTTERY_CHANGE],
				g_load_car_shop[i][CAR_FUEL_MAX],
				g_load_car_shop[i][CAR_CONTRY_TYPE],
				g_load_car_shop[i][CAR_BRAND_TYPE],
				g_load_car_shop[i][CAR_YEAR_ISSUE]);

				strcat(STRING_GLOBAL, query);
				if(loadcars[playerid] == loadcarsmax_2[playerid])
				{
					new str_len;
					str_len = strlen(STRING_GLOBAL);
					strdel(STRING_GLOBAL, str_len - 1, str_len);

					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d,[%s]]", loadtypecars[playerid], STRING_GLOBAL); 
					CEF_CREATE(playerid, 2, 4, "CarsShop", STRING_GLOBAL);
					loadcarsmax[playerid] = loadcarsmax[playerid] + loadcarsmax_2[playerid];
					SetPVarInt(playerid, "LastCarsShop", i);
					STRING_GLOBAL[0] = EOS;
					loadcars[playerid]++;
					return 1;
				}
				loadcars[playerid]++;
			}
			CEF_CREATE(playerid, 1, 2, "interface('CarsShop').addCars('[]')");
		}
	}
	return 1;
}
stock DopLoadPlayerCarsShop(playerid)
{
	STRING_GLOBAL[0] = EOS;

	if(loadcars[playerid] != -1)
	{
		STRING_GLOBAL = "";
		new query[248];
		for(new i = GetPVarInt(playerid, "LastCarsShop") + 1; i < sizeof g_load_car_shop; i++)
		{
			if(loadcars[playerid] <= loadcarsmax[playerid])
			{
				if(g_load_car_shop[i][CAR_CLASS_TYPE] == loadtypecars[playerid])
				{
					format(query, sizeof query, "[%d,\"%s\",%d,%d,%d,%d,%d,%d,%f,%d,%d,%d],", 
					g_load_car_shop[i][CAR_ID],
					g_load_car_shop[i][CAR_NAME],
					g_load_car_shop[i][CAR_PRICE],
					g_load_car_shop[i][CAR_RENT_PRICE],
					g_load_car_shop[i][CAR_FUEL_TYPE],
					g_load_car_shop[i][CAR_CLASS_TYPE],
					g_load_car_shop[i][CAR_MAX_SEATS],
					g_load_car_shop[i][CAR_LOTTERY_CHANGE],
					g_load_car_shop[i][CAR_FUEL_MAX],
					g_load_car_shop[i][CAR_CONTRY_TYPE],
					g_load_car_shop[i][CAR_BRAND_TYPE],
					g_load_car_shop[i][CAR_YEAR_ISSUE]);

					strcat(STRING_GLOBAL, query);

					if(loadcars[playerid] > loadcarsmax_2[playerid])
					{
						if(loadcars[playerid] == loadcarsmax[playerid])
						{
							new str_len;
							str_len = strlen(STRING_GLOBAL);
							strdel(STRING_GLOBAL, str_len - 1, str_len);

							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('CarsShop').addCars('[%s]')", STRING_GLOBAL);
							CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
							loadcarsmax[playerid] = loadcarsmax[playerid] + loadcarsmax_2[playerid];
							STRING_GLOBAL = "";
						}
					}
					loadcars[playerid]++;
				}
			}
		}
		CEF_CREATE(playerid, 1, 2, "interface('CarsShop').addCars('[]')");
	}
	return 1;
}

public: OnPlayerShowroomSelectColor(playerid, color)
{
	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), color, color);
	color_veh[playerid] = color;
}
public: OnPlayerShowroomMenu(playerid, type, current, vehid)
{
	DopLoadPlayerCarsShop(playerid), loadcars[playerid] = -1;

	if(type == 1)
	{
		if(GetPlayerHouse(playerid) == -1) 
		{
			if(GetPlayerOwnableCars(playerid) + 1 > 2) 
			{
	 			return GameText(playerid, "Вы можете иметь только 2 личных транспорта~n~не имея личного дома", 3000, 0);
			}
		}
		if(!VerifyIntString(QueryPlayerBalance(playerid), GetVehicleInfo(vehid, VI_PRICE))) return GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

		if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return GameText(playerid, "Все слоты для транспорта заняты", 3000, 0);

		if(GetCarMarket(vehid) == 0) return GameText(playerid, "В наличии нет данной модели", 3000, 0);
		else 
		{
			new query[64];
			format(query, sizeof query, "UPDATE car_market SET count=%d WHERE modelid = %d", GetCarMarket(vehid) - 1, vehid);
			mysql_query(mysql, query);
		}

		CEF_CREATE(playerid, 1, 2, "interface('CarsShop').result(1, 1)");
	}
	if(type == 3)
	{
		if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;

		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
		TogglePlayerControllable(playerid, true);

		CEF_HIDE(playerid, "CarsShop");
		color_veh[playerid] = 0;

		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerInBiz(playerid, GetPlayerInBiz(playerid));
		else SetPlayerInBiz(playerid, -1);

		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerPosEx(playerid, -1996.4236,-1301.0692,1034.9375,18.1966, 4, 4), DeletePVar(playerid, "sredcar");
		else if(GetPVarInt(playerid, "STONKScar") == 1) SetPlayerPosEx(playerid, 1864.2574,2825.5852,12.0000,298.1628, 0, 0), DeletePVar(playerid, "STONKScar");
		else if(GetPVarInt(playerid, "gruzcar") == 1) SetPlayerPosEx(playerid, 1040.7661,-1895.5298,34.3527,51.5618, 0, 0), DeletePVar(playerid, "gruzcar");
		else if(GetPVarInt(playerid, "aviacar") == 1) SetPlayerPosEx(playerid, -42.5926,922.9457,12.0000,154.8150, 0, 0), DeletePVar(playerid, "aviacar");
		else if(GetPVarInt(playerid, "katercar") == 1) SetPlayerPosEx(playerid, 2641.8796,-3431.8113,3.2069,11.7120, 0, 0), DeletePVar(playerid, "katercar");
		else if(GetPVarInt(playerid, "motocar") == 1) SetPlayerPosEx(playerid, -2243.3259,266.2355,24.5337,1.9492, 0, 0), DeletePVar(playerid, "motocar");
		else if(GetPVarInt(playerid, "homecar") == 1) SetPlayerPosEx(playerid, -2401.2058,189.0401,21.1746,319.5407, 0, 0), DeletePVar(playerid, "homecar");
		else SetPlayerPosEx(playerid, 2597.0801,-629.3310,12.0825,180.0100, 0, 0);
	}
	if(type == 6)
	{
		new car_price = GetCarShopPrice(vehid);
		if(!VerifyIntString(QueryPlayerBalance(playerid), car_price)) return SendClientMessage(playerid, 0x3399FFFF, "У вас недостаточно средств");

		new query[220],Cache: result;
		if(GetPVarInt(playerid, "arendacar_buy") == 1)
		{
			ModifyCashBalance(playerid, -car_price, "Покупка машины", true);
			new businessids = GetPVarInt(playerid, "ownablebiz_id");
			new mesto = GetBusinessCars(businessids);

			new idm = GetFreeRentCarID();
			new idx = idm;
			new vehicleid;
			SetRentCarData(idm, R_MODEL_ID, 	vehid);
			SetRentCarData(idm, R_RENT_BIZ, 	businessids);
			SetRentCarData(idm, R_COLOR_1, 		color_veh[playerid]);
			SetRentCarData(idm, R_COLOR_2, 		color_veh[playerid]);

			SetRentCarData(idm, R_IZNOS,		0.0);
			SetRentCarData(idm, R_MASLO, 		0.0);

			SetRentCarData(idm, R_KOLESO_1, 		0.0);
			SetRentCarData(idm, R_KOLESO_2, 		0.0);
			SetRentCarData(idm, R_KOLESO_3, 		0.0);
			SetRentCarData(idm, R_KOLESO_4, 		0.0);

			SetRentCarData(idm, R_PRICE, 		11111);
			SetRentCarData(idm, R_MESTO, 		mesto);
			SetRentCarData(idm, R_CREATE, 		gettime());
			SetRentCarData(idm, R_RENT_OWNER, 		-1);

			if(GetRentCarData(idm, R_RENT_BIZ) == 56)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[0][i][0],Rent_Mesto[0][i][1],Rent_Mesto[0][i][2],Rent_Mesto[0][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			if(GetRentCarData(idm, R_RENT_BIZ) == 57)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[1][i][0],Rent_Mesto[1][i][1],Rent_Mesto[1][i][2],Rent_Mesto[1][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			if(GetRentCarData(idm, R_RENT_BIZ) == 58)
			{
				for(new i; i < 8; i++)
				{
					if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[2][i][0],Rent_Mesto[2][i][1],Rent_Mesto[2][i][2],Rent_Mesto[2][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
				}
			}
			SetVehicleVirtualWorld(vehicleid, GetRentCarData(idm, R_RENT_BIZ));

			SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);
			SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());

			format
			(
				query, sizeof query,
				"INSERT INTO arenda_cars \
				(owner_id,model_id,color_1,color_2,create_time, world,mesto,vehicleid) \
				VALUES \
				('%d','%d','%d','%d','%d', '%d','%d','%d')",
				businessids,
				vehid,
				color_veh[playerid],
				color_veh[playerid],
				gettime(),
				businessids,
				mesto,
				vehicleid
			);
			mysql_query(mysql, query, true);

			new fmt_text[144];
			mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM arenda_cars WHERE vehicleid='%d'", vehicleid);
			result = mysql_query(mysql, fmt_text, true);

			SetRentCarData(idm, R_SQL_ID, 		cache_get_field_content_int(0, "id"));

			SetPVarInt(playerid, "arendacar_buy", 0);
			cache_delete(result);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "pos_x"), GetPVarFloat(playerid, "pos_y"), GetPVarFloat(playerid, "pos_z"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "player_world"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "player_int"));

			DeletePVar(playerid, "sredcar");
			DeletePVar(playerid, "STONKScar");
			DeletePVar(playerid, "gruzcar");
			DeletePVar(playerid, "motocar");
			DeletePVar(playerid, "aviacar");
			DeletePVar(playerid, "katercar");
			DeletePVar(playerid, "homecar");
			if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;

			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

			TogglePlayerControllable(playerid, true);
			CEF_HIDE(playerid, "CarsShop");
			color_veh[playerid] = 0;
			CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		if(GetCarMarket(vehid) == 0) return GameText(playerid, "Произошла ошибка", 3000, 0), OnPlayerShowroomMenu(playerid, 3, 0, 0);

		new RandomMesto = RandomEx(0,10);
		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[3][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[3][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[3][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[3][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[1][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[1][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[1][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[1][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[6][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[6][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[6][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[6][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[8][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[8][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[8][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[8][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[9][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[9][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[9][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[9][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[0][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[0][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[0][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[0][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			new Float: pos_x = cars_pos_after_purchase[7][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[7][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[7][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[7][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}
		else
		{
			new Float: pos_x = cars_pos_after_purchase[2][RandomMesto][0];
			new Float: pos_y = cars_pos_after_purchase[2][RandomMesto][1];
			new Float: pos_z = cars_pos_after_purchase[2][RandomMesto][2];
			new Float: angle = cars_pos_after_purchase[2][RandomMesto][3];
			GiveCar(playerid, vehid, color_veh[playerid], color_veh[playerid], -1, -1, pos_x, pos_y, pos_z, angle, gettime());
		}

		OnBattlePass_Perfomance(playerid, 0, 1);

		ModifyCashBalance(playerid, -car_price, "Покупка машины", true);

		SendClientMessage(playerid, 0x66CC00FF, "Поздравляем с покупкой нового транспорта!");
		SendClientMessage(playerid, 0x66CC00FF, "Напишите {0099FF}/car {66CC00}чтобы загрузить авто");
		SendClientMessage(playerid, 0x3399FFFF, "Документы на транспорт будут оформлены в течении нескольких минут");
		
		if(GetPVarInt(playerid, "quest") == 4)
        {
		    SetPVarInt(playerid, "quest", 0);
		    SetPlayerData(playerid, P_QUEST_6_STATS, 1);
		    CEF_HIDE(playerid, "QuestsProgressInfo");
		    SendClientMessage(playerid, -1, "");
		    SendClientMessage(playerid, 0xFFA500FF, "Задание успешно выполнено, Вы получили {"#cGold"}10000 руб {FFA500}и {"#cGold"}3 exp.");
			ShowDisplayText(playerid, "Задание выполнено<br><font color=#F1B50C>10000 руб и 3 EXP", 4000);
			SendClientMessage(playerid, -1, "");
			ModifyCashBalance(playerid, 7500, "выполнение квеста", true, true);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			UpdatePlayerDatabaseInt(playerid, "quest_6_stats", GetPlayerData(playerid, P_QUEST_6_STATS));
			AddPlayerData(playerid, P_EXP, +, 1);
			OnClickQuests(playerid, 6);

            if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
			{
			    SetPlayerData(playerid, P_EXP, 0);
			    AddPlayerData(playerid, P_LEVEL, +, 1);
				SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
				SetPlayerLevelInit(playerid);
			}
		}
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

		TogglePlayerControllable(playerid, true);

		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerPosEx(playerid, -1996.4236,-1301.0692,1034.9375,18.1966, 4, 4);
		else if(GetPVarInt(playerid, "STONKScar") == 1) SetPlayerPosEx(playerid, 1864.2574,2825.5852,12.0000,298.1628, 0, 0);
		else if(GetPVarInt(playerid, "gruzcar") == 1) SetPlayerPosEx(playerid, 1040.7661,-1895.5298,34.3527,51.5618, 0, 0);
		else if(GetPVarInt(playerid, "aviacar") == 1) SetPlayerPosEx(playerid, -42.5926,922.9457,12.0000,154.8150, 0, 0);
		else if(GetPVarInt(playerid, "katercar") == 1) SetPlayerPosEx(playerid, 2690.7903, -3408.1589, -0.2678, 189.6871, 0, 0);
		else if(GetPVarInt(playerid, "motocar") == 1) SetPlayerPosEx(playerid, -2243.3259,266.2355,24.5337,1.9492, 0, 0);
		else if(GetPVarInt(playerid, "homecar") == 1) SetPlayerPosEx(playerid, -2401.2058,189.0401,21.1746,319.5407, 0, 0);
		else SetPlayerPosEx(playerid, 2597.0801,-629.3310,12.0825,180.0100, 0, 0);

		CEF_HIDE(playerid, "CarsShop");

		color_veh[playerid] = 0;

		new businessid = GetPlayerInBiz(playerid);

		if(GetPVarInt(playerid, "sredcar") == 1) SetPlayerInBiz(playerid, GetPlayerInBiz(playerid));
		else SetPlayerInBiz(playerid, -1);

		DeletePVar(playerid, "sredcar");
		DeletePVar(playerid, "STONKScar");
		DeletePVar(playerid, "gruzcar");
		DeletePVar(playerid, "motocar");
		DeletePVar(playerid, "aviacar");
		DeletePVar(playerid, "katercar");
		DeletePVar(playerid, "homecar");

		if(businessid != -1)
		{
			AddBusinessProfit(playerid, businessid, car_price * 20 / 100, 0);
		}
	}
	if(type == 5)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2000.7031,-1296.6309,1034.5972,170.2028, color_veh[playerid], color_veh[playerid], 4));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1847.1146,2819.2698,20.5752,321.0539, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1027.6141,-1892.0331,34.7166,298.6746, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -31.9133,936.1386,21.8680,160.1091, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid,  2690.7903, -3408.1589, -0.2678, 189.6871, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2246.7114,277.0202,23.9346,262.9701, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2398.1365,192.3909,21.4967,260.1879, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 262.2371,2431.2175,1000.7915,326.5478, color_veh[playerid], color_veh[playerid], 5));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
	}
	if(type == 4)
	{
		//вниз
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));

		if(GetPVarInt(playerid, "sredcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2000.7031,-1296.6309,1034.5972,170.2028, color_veh[playerid], color_veh[playerid], 4));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
		else if(GetPVarInt(playerid, "STONKScar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1847.1146,2819.2698,20.5752,321.0539, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "gruzcar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 1027.6141,-1892.0331,34.7166,298.6746, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "aviacar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -31.9133,936.1386,21.8680,160.1091, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "katercar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid,  2690.7903, -3408.1589, -0.2678, 189.6871, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "motocar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2246.7114,277.0202,23.9346,262.9701, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else if(GetPVarInt(playerid, "homecar") == 1)
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, -2398.1365,192.3909,21.4967,260.1879, color_veh[playerid], color_veh[playerid], 0));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 0);
		}
		else
		{
			DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
			SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(vehid, 262.2371,2431.2175,1000.7915,326.5478, color_veh[playerid], color_veh[playerid], 5));
			SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
			LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 4);
		}
	}
	return true;
}
public:GPS_OnPlayerGetDirection(playerid, Float:x, Float:y)
{
	EnablePlayerGPS
	(
		playerid,
		56,
		x,
		y,
		10.0,
		"Место отмечено на карте"
	);
	CEF_CREATE(playerid, 1, 2, "closeInterface('GPS')");
}

stock GameText(playerid, const string[], time, style)
{
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('GameText').add('[%d,\"%s\",%d,0,-1,1]')", style, string, time);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 	return 1;
}

stock GameTextForParams(playerid, style, const string[], time, param1, param2, param3, param4, Float:param5)
{
	format(STRING_GLOBAL, sizeof(STRING_GLOBAL), "interface('GameText').add('[%d,\"%s\",%d,%d,%d,%d,%d,%f]')", 
	style, string, time, param1, param2, param3, param4, param5);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
 	return 1;
}

stock GetPlayerOwnableGarage(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}
stock GetPlayerOwnableHouse(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}
stock GetPlayerOwnableBiz(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock UpdateSpectateMenu(playerid)
{
	new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);

	new Float:health; 
	GetPlayerHealth(spec_player, health);
	
	new Float:armours;
	GetPlayerArmour(spec_player, armours);

	new hour, minute, day, month, year;
	gettime(hour, minute); // %d:%02d
	getdate(year, month, day);

	new vehicleid = GetPlayerVehicleID(playerid);

	str_2[0] = EOS;
	format
	(
		str_2, sizeof str_2, "interface('AdminSpectate').setInfo('[\"%d/%d/%d %d:%02d\",[%d,\"%s\",%d,%d,%.1f,%d,%d,%d,\"%s\",%d,\"%s\",%.1f,\"%s\",\"%d/%d/%d\",%.1f,%.1f,%d,%d,1,%d]]')",
		year, month, day, hour, minute,
		spec_player,
		GetPlayerNameEx(spec_player),
		GetPlayerLevel(spec_player),
		GetPlayerExp(spec_player),
		health,
		GetPlayerData(spec_player, P_WARN),
		GetPlayerPing(spec_player),
		GetPlayerPing(spec_player),
		GetPlayerTeamName(spec_player),
		GetPlayerJob(spec_player),
		g_family[GetPlayerFamily(spec_player)][F_NAME],
		armours,
		GetWeaponName(GetPlayerWeapon(spec_player)),
		GetPlayerData(spec_player, P_SKILL_DEAGLE),
		GetPlayerData(spec_player, P_SKILL_M4),
		GetPlayerData(spec_player, P_SKILL_AK47),
		GetVehicleData(vehicleid, V_HEALTH),
		GetPlayerSpeed(spec_player),
		GetVehicleParamEx(vehicleid, V_ENGINE),
		GetPlayerData(spec_player, P_MASK),
		GetPlayerData(spec_player, P_NAKOLKA)
	);

	CEF_CREATE(playerid, 1, 2, str_2);

	return 1;
}

public: OnChangeSpectatePlayer(playerid, item, none)
{
    new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
    if(spec_player == INVALID_PLAYER_ID) return 0;

    new players[1000], count = 0;

    for(new i = 0; i < 1000; i++)
    {
        if(IsPlayerConnected(i) && IsPlayerAdminLevel(i) <= IsPlayerAdminLevel(playerid))
        {
            players[count++] = i;
        }
    }

    if(count == 0) return 0;

    new currentIndex = -1;
    for(new i = 0; i < count; i++)
    {
        if(players[i] == spec_player)
        {
            currentIndex = i;
            break;
        }
    }
    if(currentIndex == -1) currentIndex = 0;

    new targetIndex;
    if(item == 0)
    {
        targetIndex = (currentIndex + count - 1) % count;
    }
    else if(item == 1)
    {
        targetIndex = (currentIndex + 1) % count;
    }
    else return 0;

    StartSpectate(playerid, players[targetIndex]);
    UpdateSpectateMenu(playerid);
    return 1;
}


public:OnSelectSpectateMenu(playerid, item)
{
	new spec_player = GetPlayerSpectateData(playerid, S_PLAYER);
	switch(item)
	{
	    case 0:
	    {
			StartSpectate(playerid, spec_player);
			UpdateSpectateMenu(playerid);
	    }
	    case 1:
	    {
            ShowPlayerStats(spec_player, playerid);
	    }
		case 2:
		{
		}
		case 3:
		{
		    if(IsPlayerAdminLevel(playerid) < 2) return 1;

			if(GetPlayerData(spec_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
			if(IsPlayerAdminLevel(spec_player) > IsPlayerAdminLevel(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");

 			new fmt_msg[128];
			format(fmt_msg, sizeof fmt_msg, "Администратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(spec_player), 60);
			SendClientMessageToAll(0xFF5533FF, fmt_msg);

			SetPlayerData(spec_player, P_MUTE, 60 * 60);
			UpdatePlayerDatabaseInt(spec_player, "mute", 60 * 60);
		}
		case 4:
		{
		    if(IsPlayerAdminLevel(playerid) < 1) return 1;
			new Float: x, Float: y, Float: z, fmt_text[85];
			GetPlayerPos(spec_player, x, y, z);

			SetPlayerPos(spec_player, x, y, z + 5);
			PlayerPlaySound(spec_player, 1130, 0.0, 0.0, 0.0);

			format(fmt_text, sizeof fmt_text, "Вы подбросили игрока %s", GetPlayerNameEx(spec_player));
			SendClientMessage(playerid, -1, fmt_text);

			format(fmt_text, sizeof fmt_text, "Администратор %s подбросил Вас", GetPlayerNameEx(playerid));
			SendClientMessage(spec_player, -1, fmt_text);

		}
		case 5:
		{
		    new fmt_text[128];
		    format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
			GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
			SendClientMessage(playerid, 0x00CC66FF, fmt_text);
		}
		case 6:
		{
			StopSpectate(playerid);
			HideSpecmenuTD(playerid);
			CEF_CREATE(playerid, 1, 2, "window.SetCursorStatus(1, 0)");
			SCM(playerid, 0xFFDE7AFF, "Вы покинули режим зрителя");
		}
	}
	return 1;
}

public: ClothingStore_OnPlayerEvent(playerid, event, item)
{
    new bizid = GetPlayerInBiz(playerid);

    if(bizid == -1) return 1;

    new sex = GetPlayerSex(playerid),
        item_ = (p_business_clothing_page[playerid] * 8) + item;

	if(event == 0)
	{
		new str[512 + 1];

		if(item == 1)
		{
			if(p_business_clothing_page[playerid] >= floatround(g_business_clothing_quantity[sex]) / 8) return 1;

			new str_len,
				page = ++p_business_clothing_page[playerid];

			strcat(str, "interface('ClothingStore').loadItems('[");
			
			for(new i = (page * 8); i < (g_business_clothing_quantity[sex] < ((page + 1) * 8) ? (g_business_clothing_quantity[sex]) : ((page + 1) * 8)); i++) 
			{
				format(str, sizeof(str), "%s[%d,%d],", str, g_business_clothing_skins[sex][i][g_cost], g_business_clothing_skins[sex][i][g_model]);
			}

			str_len = strlen(str);
			strdel(str, str_len - 1, str_len);
			strcat(str, "]')");

			CEF_CREATE(playerid, 1, 2, str);

			format(str, sizeof(str), "interface('ClothingStore').setPage(%i, 22)", page + 1);
			CEF_CREATE(playerid, 1, 2, str);
		}
		if(item == -1)
		{
			if(p_business_clothing_page[playerid] < 1) return 1;

			new str_len,
				page = --p_business_clothing_page[playerid];

			strcat(str, "interface('ClothingStore').loadItems('[");
			for(new i = (page * 8); i < (g_business_clothing_quantity[sex] < ((page + 1) * 8) ? (g_business_clothing_quantity[sex]) : ((page + 1) * 8)); i++) 
			{
				format(str, sizeof(str), "%s[%d,%d],", str, g_business_clothing_skins[sex][i][g_cost], g_business_clothing_skins[sex][i][g_model]);
			}

			str_len = strlen(str);
			strdel(str, str_len - 1, str_len);
			strcat(str, "]')");

			CEF_CREATE(playerid, 1, 2, str);

			format(str, sizeof(str), "interface('ClothingStore').setPage(%i, 22)", page + 1);
			CEF_CREATE(playerid, 1, 2, str);
		}
	}
	if(event == 1)
	{
		SetPlayerData(playerid, P_SELECT_SKIN, item_);
		SetPlayerSkin(playerid, g_business_clothing_skins[sex][item_][g_model]);
	}
	if(event == 2)
	{
        if(GetPlayerData(playerid, P_SELECT_SKIN) == -1) return 1;

		IntfDialogCallRemote
		(
			playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Магазин одежды",
			"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
			"Да", "Нет"
		);
		return true;
	} 
	if(event == 3)
	{
		new skinid = g_business_clothing_skins[sex][item_][g_model];

        SetPlayerData(playerid, P_SKIN, skinid);
		UpdatePlayerDatabaseInt(playerid, "skin", skinid);

		SetPlayerSkin(playerid, skinid);

		Action(playerid, "переодевается в другую одежду", _, false);

		CEF_HIDE(playerid, "ClothingStore");
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);

		SetPlayerVirtualWorld(playerid, bizid + 255);
		SetPlayerData(playerid, P_SELECT_SKIN, -1);
		p_business_clothing_page[playerid] = 0;
	}
	if(event == 4)
	{
		CEF_HIDE(playerid, "ClothingStore");

		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);

		SetPlayerVirtualWorld(playerid, bizid + 255);
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));

		SetPlayerData(playerid, P_SELECT_SKIN, -1);
		p_business_clothing_page[playerid] = 0;
	}
    return 1;
}

stock ShowPlayerSelectPanelSkin(playerid)
{
    CEF_CREATE(playerid, 2, 4, "ClothingStore", "[22, [[3000,14],[3000,20],[3000,21],[3000,22],[3000,24],[3000,25],[3000,52],[3000,15327]]]");
    SetPlayerSkin(playerid, 14);
}

forward Drift();
forward AngleUpdate();
forward DriftCancellation(playerid);

Float:GetPlayerTheoreticAngle(i)
{
        new Float:sin;
        new Float:dis;
        new Float:angle2;
        new Float:x,Float:y,Float:z;
        new Float:tmp3;
        new Float:tmp4;
        new Float:MindAngle;

        if(IsPlayerConnected(i))
        {
                GetPlayerPos(i,x,y,z);
                dis = floatsqroot(floatpower(floatabs(floatsub(x,ppos[i][0])),2)+floatpower(floatabs(floatsub(y,ppos[i][1])),2));
                if(IsPlayerInAnyVehicle(i)){GetVehicleZAngle(GetPlayerVehicleID(i), angle2);}else{GetPlayerFacingAngle(i, angle2);}
                if(x>ppos[i][0]){tmp3=x-ppos[i][0];}else{tmp3=ppos[i][0]-x;}
                if(y>ppos[i][1]){tmp4=y-ppos[i][1];}else{tmp4=ppos[i][1]-y;}
                if(ppos[i][1]>y && ppos[i][0]>x)
                {
                    sin = asin(tmp3/dis);
                    MindAngle = floatsub(floatsub(floatadd(sin, 90), floatmul(sin, 2)), -90.0);
                }
                if(ppos[i][1]<y && ppos[i][0]>x)
                {
                    sin = asin(tmp3/dis);
                    MindAngle = floatsub(floatadd(sin, 180), 180.0);
                }
                if(ppos[i][1]<y && ppos[i][0]<x)
                {
                    sin = acos(tmp4/dis);
                    MindAngle = floatsub(floatadd(sin, 360), floatmul(sin, 2));
                }
                if(ppos[i][1]>y && ppos[i][0]<x)
                {
                    sin = asin(tmp3/dis);
                    MindAngle = floatadd(sin, 180);
                }
        }

        if(MindAngle == 0.0)
        {
            return angle2;
        }
        else
        {
            return MindAngle;
        }
}

public DriftCancellation(playerid)
{
    PlayerDriftCancellation[playerid] = 0;
    new point = GetPlayerData(playerid, P_SCORE);
    SetPlayerData(playerid, P_SCORE, point += DriftPointsNow[playerid]);//addplayerdata
    UpdatePlayerDatabaseInt(playerid, "score", GetPlayerData(playerid, P_SCORE));
    scores[playerid] = 0;
    DriftPointsNow[playerid] = 0;
    if(GetPVarInt(playerid, "drift_x") > 0) DeletePVar(playerid, "drift_x");
    CEF_CREATE(playerid, 1, 2, "interface('Drift').isResultOpen = 0");
    DeletePVar(playerid, "drift");
	//BattlePass_Completingtasks(playerid, 0, 0);
	SetPlayerData(playerid, P_DOSTIJ21, GetPlayerData(playerid, P_DOSTIJ21) + GetPlayerData(playerid, P_SCORE));
	UpdatePlayerDatabaseInt(playerid, "dostij21", GetPlayerData(playerid, P_DOSTIJ21) + GetPlayerData(playerid, P_SCORE));
}

Float:ReturnPlayerAngle(playerid)
{
    new Float:Ang;
    if(IsPlayerInAnyVehicle(playerid))GetVehicleZAngle(GetPlayerVehicleID(playerid), Ang); else GetPlayerFacingAngle(playerid, Ang);
    return Ang;
}

public Drift()
{
    new Float:Angle1, Float:Angle2, Float:BySpeed;
    new Float:Z;
    new Float:X;
    new Float:Y;
    new Float:SpeedX;
    new send_packet[250];
    for(new g=0;g<MAX_PLAYERS;g++)
    {
        if(IsPlayerInRangeOfPoint(g, 350.0, 3283.0530,-320.1913,14.9361))
        {
        GetPlayerPos(g, X, Y, Z);
        SpeedX = floatsqroot(floatadd(floatadd(floatpower(floatabs(floatsub(X,SavedPos[ g ][ sX ])),2),floatpower(floatabs(floatsub(Y,SavedPos[ g ][ sY ])),2)),floatpower(floatabs(floatsub(Z,SavedPos[ g ][ sZ ])),2)));
        Angle1 = ReturnPlayerAngle(g);
        Angle2 = GetPlayerTheoreticAngle(g);
        BySpeed = floatmul(SpeedX, 12);
        if(IsPlayerInAnyVehicle(g) && IsCar(GetPlayerVehicleID(g)) && floatabs(floatsub(Angle1, Angle2)) > DRIFT_MINKAT && floatabs(floatsub(Angle1, Angle2)) < DRIFT_MAXKAT && BySpeed > DRIFT_SPEED)
        {
            if(PlayerDriftCancellation[g] > 0)KillTimer(PlayerDriftCancellation[g]);
            if(GetPVarInt(g, "drift_x") == 0)
            {
            SetPVarInt(g, "drift_x", 1);
            format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
			CEF_CREATE(g, 1, 2, send_packet);
            }
            PlayerDriftCancellation[g] = 0;
            DriftPointsNow[g] += 1 * GetPVarInt(g, "drift_x");
            scores[g]++;
            PlayerDriftCancellation[g] = SetTimerEx("DriftCancellation", 2000, 0, "d", g);
        }
        if(DriftPointsNow[g] > 0)
        {
            if(scplay[g] == 1)
            {
				if(GetPVarInt(g, "drift") == 0)
				{
					SetPVarInt(g, "drift",1);
				}
				if(DriftPointsNow[g] > 500)
				{
					SetPVarInt(g, "drift_x", 2);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 2000)
				{
					SetPVarInt(g, "drift_x", 3);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 5000)
				{
					SetPVarInt(g, "drift_x", 4);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 8000)
				{
					SetPVarInt(g, "drift_x", 5);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 10000)
				{
					SetPVarInt(g, "drift_x", 6);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 15000)
				{
					SetPVarInt(g, "drift_x", 7);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 17000)
				{
					SetPVarInt(g, "drift_x", 8);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 18000)
				{
					SetPVarInt(g, "drift_x", 9);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] > 20000)
				{
					SetPVarInt(g, "drift_x", 10);
					format(send_packet, sizeof(send_packet), "interface('Drift').factor = %d", GetPVarInt(g, "drift_x"));
					CEF_CREATE(g, 1, 2, send_packet);
				}
				if(DriftPointsNow[g] == 3000)
				{
					AddPlayerAchiv(g, 20);
				}
                CEF_CREATE(g, 1, 2, "interface('Drift').isResultOpen = 1");
                format(send_packet, sizeof(send_packet), "interface('Drift').currentValue = %d", DriftPointsNow[g]);
				CEF_CREATE(g, 1, 2, send_packet);
            }
        }
        SavedPos[ g ][ sX ] = X;
        SavedPos[ g ][ sY ] = Y;
        SavedPos[ g ][ sZ ] = Z;
        }
    }
    return 1;
}

IsCar(model)
{
    switch(model)
    {
        case 443:return 0;
        case 448:return 0;
        case 461:return 0;
        case 462:return 0;
        case 463:return 0;
        case 468:return 0;
        case 521:return 0;
        case 522:return 0;
        case 523:return 0;
        case 581:return 0;
        case 586:return 0;
        case 481:return 0;
        case 509:return 0;
        case 510:return 0;
        case 430:return 0;
        case 446:return 0;
        case 452:return 0;
        case 453:return 0;
        case 454:return 0;
        case 472:return 0;
        case 473:return 0;
        case 484:return 0;
        case 493:return 0;
        case 595:return 0;
        case 417:return 0;
        case 425:return 0;
        case 447:return 0;
        case 465:return 0;
        case 469:return 0;
        case 487:return 0;
        case 488:return 0;
        case 497:return 0;
        case 501:return 0;
        case 548:return 0;
        case 563:return 0;
        case 406:return 0;
        case 444:return 0;
        case 556:return 0;
        case 557:return 0;
        case 573:return 0;
        case 460:return 0;
        case 464:return 0;
        case 476:return 0;
        case 511:return 0;
        case 512:return 0;
        case 513:return 0;
        case 519:return 0;
        case 520:return 0;
        case 539:return 0;
        case 553:return 0;
        case 577:return 0;
        case 592:return 0;
        case 593:return 0;
        case 471:return 0;
    }
    return 1;
}


public AngleUpdate()
{
    for(new g=0;g<MAX_PLAYERS;g++)
    {
        new Float:x, Float:y, Float:z;
        if(IsPlayerInAnyVehicle(g))GetVehiclePos(GetPlayerVehicleID(g), x, y, z); else GetPlayerPos(g, x, y, z);
        ppos[g][0] = x;
        ppos[g][1] = y;
        ppos[g][2] = z;
    }
}
stock ShowHomeInfoPick(playerid, houseid)
{
	new fmt_text[248];
	format(fmt_text, sizeof fmt_text, "[%d, \"Дом №%d\", \"%s\", \"%s\", %d, %d, %d]", GetHouseData(houseid, H_LOCK_STATUS) ? 0 : 1, houseid, GetHouseData(houseid, H_OWNER_NAME), GetHouseData(houseid, H_NAME),
	GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS), GetHouseData(houseid, H_RENT_PRICE), GetHouseData(houseid, H_PRICE));
	CEF_CREATE(playerid, 2, 4, "Appartament", fmt_text);

	SetPlayerUseListitem(playerid, houseid);
}

stock ShowBussinesInfo(playerid, action_id)
{
	new i = action_id;

	new fmt_text[248];
	format(fmt_text, sizeof(fmt_text), "[0, %d, '%s', '%s', %d, %d]", GetBusinessData(i, B_LOCK_STATUS) ? 0 : 1, GetBusinessData(i, B_NAME), GetBusinessData(i, B_OWNER_NAME), GetBusinessData(i, B_ENTER_PRICE), GetBusinessData(i, B_PRICE));
	CEF_CREATE(playerid, 2, 4, "Business", fmt_text);
}
public: HouseInfoBuy(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);

			new fmt_str[60];
			string_dialog[0] = EOS;
			new type = GetHouseData(houseid, H_TYPE);

			if(IsHouseOwned(houseid))
			{
				if(!GetHouseData(houseid, H_EVICTION))
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
					strcat(string_dialog, fmt_str);
				}
				else
				{
					strcat(string_dialog, "{FFFFFF}Владелец:\t\t\t{33CCFF}Выселен\n\n");

				}
			}

			format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseData(houseid, H_NAME));
			strcat(string_dialog, fmt_str);

			if(GetHouseData(houseid, H_ENTRACE) != -1)
			{
				format(fmt_str, sizeof fmt_str, "Номер квартиры:\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) + 1);
				strcat(string_dialog, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string_dialog, "\n");

				format(fmt_str, sizeof fmt_str, "Номер подъезда:\t\t%d\n", GetHouseData(houseid, H_ENTRACE) + 1);
				strcat(string_dialog, fmt_str);
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "Номер дома:\t\t\t%d\n", houseid);
				strcat(string_dialog, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string_dialog, "\n");
			}

			format(fmt_str, sizeof fmt_str, "Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
			strcat(string_dialog, fmt_str);

			format(fmt_str, sizeof fmt_str, "Стоимость:\t\t\t%s руб\n", formatInt(GetHouseData(houseid, H_PRICE)));
			strcat(string_dialog, fmt_str);

			format(fmt_str, sizeof fmt_str, "Ежедневная квартплата:\t%s руб", formatInt(GetHouseData(houseid, H_RENT_PRICE)));
			strcat(string_dialog, fmt_str);

			if(IsHouseOwned(houseid))
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 3)
				{
					format(fmt_str, sizeof fmt_str, " {33CC99}(%d руб)", GetHouseData(houseid, H_RENT_PRICE) / 2);
					strcat(string_dialog, fmt_str);
				}
				IntfDialogCallRemote(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "{FF9900}Дом занят", string_dialog, "Войти", "Отмена");
			}
			else IntfDialogCallRemote(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "{33CC00}Дом свободен", string_dialog, "Купить", "Отмена");
		}
	}
}


forward Metro_Ostanovka(playerid);
public Metro_Ostanovka(playerid)
{
	metro_zarplata[playerid] += 5000000;

	new fmt_td_text[300];

	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').speed.value = '2-120'");
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').money = %d",metro_zarplata[playerid]);
	CEF_CREATE(playerid, 1, 2, fmt_td_text);
	format(fmt_td_text, sizeof fmt_td_text, "interface('Machinist').semaphore = [1,1,1,1]");
	CEF_CREATE(playerid, 1, 2, fmt_td_text);

	KillTimer(metro_taimer[playerid][0]);
	return 1;
}

stock OnFirstPerson(playerid)
{
	switch_fp[playerid] = true;
 	FirstPerson[playerid] = CreateObject(19300, 0, 0, 0, 0, 0, 0);
 	ChangeView(playerid, 0, 1);
}
stock OnFirstPersonMetro(playerid)
{
	switch_fp[playerid] = true;
 	FirstPerson[playerid] = CreateObject(19300, 0, 0, 0, 0, 0, 0);
 	ChangeView(playerid, 0, 4);
}
stock OffFirstPerson(playerid)
{
	switch_fp[playerid] = false, SetCameraBehindPlayer(playerid);
}

stock ChangeView(playerid, oldstate, newstate)
{
    new Float: X[3], Float: Y[3], Float: Z[3];
    if(GetPlayerVehicleID(playerid) > 0)
    {
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 1, X[0], Y[0], Z[0]);
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 2, X[1], Y[1], Z[1]);
        GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), 3, X[2], Y[2], Z[2]);
    }
    if(oldstate == newstate) AttachCameraToObject(playerid, FirstPerson[playerid]);
    switch(newstate)
    {
        case 1: AttachObjectToPlayer(FirstPerson[playerid], playerid, 0.0, 0.13, 0.65, 0, 0, 0), AttachCameraToObject(playerid, FirstPerson[playerid]);
        case 2, 3:
        {
            switch(GetPlayerVehicleSeat(playerid))
            {
                case 0: { X[1] -= (X[0] / 2.43), Y[1] -= 0.1, Z[1] += 0.6; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1], Z[1], 0, 0, 0); }
                case 1: { X[1] += 0.0, Y[1] -= 0.1, Z[1] += 0.55; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1], Z[1], 0, 0, 0); }
                case 2: { X[2] -= (X[0] / 2.43), Y[2] += 0.0, Z[2] += 0.6; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2], Z[2], 0, 0, 0); }
                case 3: { X[2] += 0.0, Y[2] += 0.0, Z[2] += 0.55; AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2], Z[2], 0, 0, 0); }
                default:
                {
                    switch(GetPlayerVehicleSeat(playerid))
                    {
                        case 0: AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[1], Y[1] + 0.45, Z[1] + 0.6, 0, 0, 0);
                        case 1: AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), X[2], Y[2] + 0.4, Z[2] + 0.5, 0, 0, 0);
                    }
                }
            }
            AttachCameraToObject(playerid, FirstPerson[playerid]);
        }
        case 4: // для машиниста метрополитена
        {
       		AttachObjectToVehicle(FirstPerson[playerid], GetPlayerVehicleID(playerid), -0.01761, 8.35003, 1.61000,   0.00000, 0.00000, 0.00000);
       		AttachCameraToObject(playerid, FirstPerson[playerid]);
        }
    }
    return 0;
}

public: OnPlayerClientSideKey(playerid, key)
{
	if(key == 27)
	{
		if(gPlayerTuningMenu[playerid] == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			CEF_HIDE(playerid, "TuningMenu");
		}
	}
	if(key == 18)
	{
		if(g_cursor[playerid] == 1) CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 1)"), g_cursor[playerid] = 2;
		else if(g_cursor[playerid] == 2) CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)"), g_cursor[playerid] = 1;
	}
	if(RouletteTable[playerid] != 0)
    {
        new ci = PositionChip[playerid];
		if(ci != -1 && RouletteStatus[playerid] == 0)
		{
			if(key == 87) // вверх
			{   
				if(ci != 0 && ci != 3 && ci != 6 && ci != 9 && ci != 12 && ci != 15 && ci != 18 && ci != 21 && ci != 24 && ci != 27 && ci != 30 && ci != 33 && ci != 36 && ci != 39)
				{
					if(ci == 40) PositionChip[playerid] = 1;
					else if(ci == 41) PositionChip[playerid] = 13;
					else if(ci == 42) PositionChip[playerid] = 25;
					else if(ci == 45 || ci == 47) PositionChip[playerid] = 40;
					else if(ci == 43 || ci == 44) PositionChip[playerid] = 41;
					else if(ci == 48 || ci == 46) PositionChip[playerid] = 42;
					else PositionChip[playerid] = PositionChip[playerid] + 1;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			} 
			if(key == 65) // налево
			{
				if(ci != 0 && ci != 40 && ci != 45)
				{
					if(ci == 42 || ci == 41 || ci == 44) PositionChip[playerid] = PositionChip[playerid] - 1;
					else if(ci == 46) PositionChip[playerid] = 48;
					else if(ci == 48) PositionChip[playerid] = 44;
					else if(ci == 43) PositionChip[playerid] = 47;
					else if(ci == 47) PositionChip[playerid] = 45;
					else if(ci == 2 || ci == 1) PositionChip[playerid] = 0;
					else PositionChip[playerid] = PositionChip[playerid] - 3;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			}
			if(key == 68) // направо
			{
				if(ci != 37 && ci != 38 && ci != 39 && ci != 42 && ci != 46)
				{
					if(ci == 40 || ci == 41 || ci == 43) PositionChip[playerid] = PositionChip[playerid] + 1;
					else if(ci == 45) PositionChip[playerid] = 47;
					else if(ci == 47) PositionChip[playerid] = 43;
					else if(ci == 44) PositionChip[playerid] = 48;
					else if(ci == 48) PositionChip[playerid] = 46;
					else if(ci == 0) PositionChip[playerid] = 1;
					else PositionChip[playerid] = PositionChip[playerid] + 3;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			} 
			if(key == 83) // вниз
			{
				if(ci != 0 && ci != 37 && ci != 43 && ci != 44 && ci != 45 && ci != 46 && ci != 47 && ci != 48)
				{
					if(ci == 1 || ci == 4 || ci == 7 || ci == 10) PositionChip[playerid] = 40;
					else if(ci == 13 || ci == 16 || ci == 19 || ci == 22) PositionChip[playerid] = 41;
					else if(ci == 25 || ci == 28 || ci == 31 || ci == 34) PositionChip[playerid] = 42;
					else if(ci == 40) PositionChip[playerid] = 45;
					else if(ci == 41) PositionChip[playerid] = 43;
					else if(ci == 42) PositionChip[playerid] = 48;
					else PositionChip[playerid] = PositionChip[playerid] - 1;
				}
				MoveDynamicObject(RouletteChip[playerid], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][0], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][1], ChipPosition[RouletteTable[playerid] - 1][PositionChip[playerid]][2],50,   0.00000, 0.00000, 0.0);
			}    
		}
		if(key == 13)
		{
			if(PositionChip[playerid] != -1)
			{
				if(RouletteStatus[playerid] == 1)  SCM(playerid, 0xFFA500FF, "Вы уже поставили ставку, ожидайте окончания");
				else CEF_CREATE(playerid, 1, 2, "interface('CasinoRullet').setBet.show = 1");
			}
		}
		if(key == 18)
		{
			if(RouletteStatus[playerid] == 1) SCM(playerid, 0xFFA500FF, "Вы уже поставили ставку, ожидайте окончания");
			else if(StatusChip[playerid] == 0) LoadRoulette(playerid);
		}
	}
	if(key == 114)
    {
        STRING_GLOBAL[0] = EOS;

        strcat(STRING_GLOBAL, "[[\"Общая громкость\",-1,100]");

        new Float:x1, Float:y1, Float:z1;
        GetPlayerPos(playerid, x1, y1, z1);

        new temp[64];

        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(i == playerid || !IsPlayerConnected(i)) continue;

            new Float:x2, Float:y2, Float:z2;
            GetPlayerPos(i, x2, y2, z2);

            if(GetPlayerDistanceFromPoint(playerid, x2, y2, z2) <= 12.0)
            {
                format(temp, sizeof(temp), ",[\"%s\",%d,100]", GetPlayerNameEx(i), i);
                strcat(STRING_GLOBAL, temp);
            }
        }

        strcat(STRING_GLOBAL, "]");

        CEF_CREATE(playerid, 2, 4, "VoiceChatSettings", STRING_GLOBAL);
    }
	if(key == 77) ShowMainMenu(playerid);
	if(key == 79) callcmd::craft(playerid);
	if(key == 80) callcmd::phone(playerid);
	if(key == 90) callcmd::anim(playerid, "");

 	if(key == 67) //C
	{
	    if(GetPVarInt(playerid,"Metro_work") == 1)
		{
			IntfDialogCallRemote(playerid, DIALOG_EXIT_METRO, DIALOG_STYLE_MSGBOX, "Работа машиниста", "Вы хотите закончить работу машиниста?", "Да", "Нет");
		}
	}
	if(key == 69) //E
	{
	    if(GetPVarInt(playerid, "medhelp") == 1)
		{
			ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
			TogglePlayerControllable(playerid, true);
			DeletePVar(playerid, "medhelp");
			DestroyDynamic3DTextLabel(medhelplabel[playerid]);
		    CEF_HIDE(playerid, "Death");
			SetPlayerData(playerid, P_HEALTH, 0);
			SetPlayerHealthEx(playerid, 0);
		}
	}
	if(key == 32)
	{
		if(GetPVarInt(playerid, "medhelp") == 1)
		{
			if(!VerifyIntString(QueryPlayerBalance(playerid), 5000)) return SCM(playerid, -1, "У вас недостаточно средств для вызова скорой помощи");
			SCM(playerid, COLOR_GREY, "Бригада скорой помощи уже выехала, ожидайте");
			ModifyCashBalance(playerid, -5000, "Вызов скорой помощи");
		}
	}
 	if(GetPVarInt(playerid, "Button") != 0)
	{
		if(GetPVarInt(playerid,"Button") == key)
		{
			new press = RandomEx(1,5);
			new fmt_str[500];
			switch (press)
			{
				case 1:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(1, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					CEF_CREATE(playerid, 1, 2, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 2:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(2, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					CEF_CREATE(playerid, 1, 2, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 3:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(3, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					CEF_CREATE(playerid, 1, 2, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 4:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(4, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					CEF_CREATE(playerid, 1, 2, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
				case 5:
				{
					format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(5, 800, %d)", GetPVarInt(playerid, "Ochko")+10);
					CEF_CREATE(playerid, 1, 2, fmt_str);
					SetPVarInt(playerid, "Ochko", GetPVarInt(playerid, "Ochko")+10);
				}
			}
			SetPVarInt(playerid, "Button", 0);
		}
		else if(GetPVarInt(playerid,"Button") != key)
		{
			new press2 = RandomEx(1,5);
			new fmt_str[500];
			switch (press2)
			{
				case 1:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(6, 800, %d)", GetPVarInt(playerid, "Ochko"));
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
				case 2:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(7, 800, %d)", GetPVarInt(playerid, "Ochko"));
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
				case 3:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(8, 800, %d)", GetPVarInt(playerid, "Ochko"));
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
				case 4:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(9, 800, %d)", GetPVarInt(playerid, "Ochko"));
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
				case 5:
				{
				    format(fmt_str, sizeof fmt_str, "interface('DanceTrack').pressButton(10, 800, %d)", GetPVarInt(playerid, "Ochko"));
					CEF_CREATE(playerid, 1, 2, fmt_str);
				}
			}
			SetPVarInt(playerid, "Button", 0);

		}
	}
	return 1;
}

stock SetAnimPlayerNew(playerid, category, anim_id)
{
	switch(category)
	{
	    case 1:
	    {
	        switch(anim_id)
	        {
	    		case 1: ApplyAnimation(playerid, "ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
			    case 2: ApplyAnimation(playerid, "ped",				"endchat_03",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
			    case 3: ApplyAnimation(playerid, "RIOT",			"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
			    case 4: ApplyAnimation(playerid, "GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
			    case 5: ApplyAnimation(playerid, "GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
			    case 6: ApplyAnimation(playerid, "GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");

	        }
	    }
	    case 2:
	    {
	        switch(anim_id)
	        {
	        }
	    }
	    case 3:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "BEACH",			"bather",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "ped",				"cower", 				3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 9: ApplyAnimation(playerid, "BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 10: ApplyAnimation(playerid, "INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 11: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 12: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 13: ApplyAnimation(playerid, "INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 14: ApplyAnimation(playerid, "JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 15: ApplyAnimation(playerid, "MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 16: ApplyAnimation(playerid, "ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 17: ApplyAnimation(playerid, "SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 18: ApplyAnimation(playerid, "SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 4:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 5:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 6:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 9: ApplyAnimation(playerid, "GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 10: ApplyAnimation(playerid, "INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 11: ApplyAnimation(playerid, "KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 12: ApplyAnimation(playerid, "MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 13: ApplyAnimation(playerid, "MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 14: ApplyAnimation(playerid, "MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 15: ApplyAnimation(playerid, "MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 16: ApplyAnimation(playerid, "ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 17: ApplyAnimation(playerid, "ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 18: ApplyAnimation(playerid, "PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 19: ApplyAnimation(playerid, "ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 20: ApplyAnimation(playerid, "POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 21: ApplyAnimation(playerid, "POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 22: ApplyAnimation(playerid, "RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 7:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 8:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 9:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	    case 10:
	    {
	        switch(anim_id)
	        {
				case 1: ApplyAnimation(playerid, "TATTOOS",				"TAT_ARMR_IN_P", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 2: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_IN_P", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 3: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_IN_T", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 4: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_OUT_O", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 5: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_OUT_T", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 6: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_POSE_O", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 7: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_POSE_P", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 8: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_SIT_LOOP_P", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 9: ApplyAnimation(playerid, "TATTOOS",				"TAT_BACK_SIT_OUT_P", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 10: ApplyAnimation(playerid, "TATTOOS",			"TAT_BEL_IN_O", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 11: ApplyAnimation(playerid, "TATTOOS",			"TAT_BEL_IN_T", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
				case 12: ApplyAnimation(playerid, "TATTOOS",			"TAT_BEL_OUT_O", 		4.0, true, 0, 0, 0, 0), SetPlayerData(playerid, P_USE_ANIM, true), CEF_CREATE(playerid, 2, 4, "Interactions", "[[17, \"Выключить анимацию\"]]");
	        }
	    }
	}
	return 0;
}

stock Change(playerid, trade_id,type)
{
	switch(type)
	{
		case 1:
		{
			new garage_id = GetPVarInt(playerid, "ownablegarage_id");

			SetGarageData(garage_id, G_OWNER_ID, 	0);

			SetGarageData(garage_id, G_OWNER_ID, 		GetPlayerAccountID(trade_id));
			SetGarageData(garage_id, G_IMPROVEMENTS, 	0);

			format(g_garage[garage_id][G_OWNER_NAME], 21, GetPlayerNameEx(trade_id), 0);
			CallLocalFunction("UpdateGarageLabel", "i", garage_id);
			UpdateGarage(garage_id);
		}
		case 2:
		{
	    	new biz_id = GetPVarInt(playerid, "ownablebiz_id");
			SellBusiness(biz_id, trade_id, 0);
		}
		
		case 4:
		{
	    	new home_id = GetPlayerData(playerid, P_HOUSE);
			SellHouse(home_id, playerid, 0);
			SetPlayerData(playerid, P_HOUSE, -1);
			SetPlayerData(playerid, P_HOUSE_TYPE, -1);
			SetPlayerData(playerid, P_HOUSE_ROOM, -1);

			SetHouseData(home_id, H_OWNER_ID, 0);

			SetPlayerData(trade_id, P_HOUSE, home_id);

			SetHouseData(home_id, H_OWNER_ID, GetPlayerAccountID(trade_id));
			SetHouseData(home_id, H_IMPROVEMENTS, 0);

			format(g_house[home_id][H_OWNER_NAME], 21, GetPlayerNameEx(trade_id), 0);
			CallLocalFunction("EvictHouseRentersAll", "i", home_id);

		}
		case 5: SCM(playerid, -1, "В разработке...");
		case 6: SCM(playerid, -1, "В разработке...");
		case 7:
		{
			new number_phone = GetPlayerData(playerid, P_PHONE);

			SetPlayerData(playerid, P_PHONE, 0);
			SetPlayerData(trade_id, P_PHONE, number_phone);
		}
		case 8:
		{
			new garden_id = GetPVarInt(playerid, "ownablegarage_id");
			SetGardenData(garden_id, G_OWNER_ID, GetPlayerAccountID(playerid));
		}
	}
	new toner_id = GetPlayerInBiz(playerid);
	new price = 250000;
	new take_prods = 5;
	new query[256];
	if(GetBusinessData(toner_id, B_PRODS) >= take_prods)
	{
		AddBusinessProfit(playerid, toner_id, price, take_prods);
	}
	return true;
}

stock UpdatePlayerDataStr(const playerid, const field[], data[]) mysql_queryf(mysql, "UPDATE `accounts_canvasdev` SET `%e` = '%e' WHERE `id` = '%i' LIMIT 1", false, field, data, GetPlayerData(playerid, P_ACCOUNT_ID));

public: CheckAdmin(playerid, admlevel)
{
	new fifa[256];
	format(fifa, sizeof(fifa), "[Ошибка] У вас нет доступа. Доступно с %d уровня администрирования", admlevel);
	if(IsPlayerAdminLevel(playerid) < admlevel) return scm(playerid, COLOR_RED, fifa);
	//if(admin_logged[playerid] == false) return scm(playerid, COLOR_RED, "{FF5522}[Ошибка] Вы не авторизовались в админке, /alogin");
	return 0;
}

public:UpdatePhoneTimer(playerid){
	new hour, minute,
		day, month, year;

	gettime(hour, minute);
	getdate(year, month, day);
	
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').updateTime('[\"%d:%02d\",\"%d %s\",100,0]')",hour,minute, day,GetMonthName(month));
	
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

}

public:Phone_OnOpenAppPhone(playerid, app_id, xz){

	switch(app_id){
		case 3:{
		    CEF_CREATE(playerid, 1, 2, "interface('Phone').setLoadedDataApp(3)");
		    STRING_GLOBAL[0] = EOS;
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').loadProducts('[[0,\"Пеперони с зеленью\",700,1800,\"1.svg\",\"Пицца\"],[1,\"Пицца оливия\",800,1750,\"2.svg\",\"Пицца\"],[2,\"Маленький бургер\",300,900,\"6.svg\",\"Бургеры\"],[3,\"Филадельфия\",500,1700,\"3.svg\",\"Суши\"],[4,\"Большой сет\",1200,3000,\"9.svg\",\"Суши\"],[5,\"Шаурма\",400,1500,\"5.svg\",\"Шаурма\"],[6,\"Большая шаурма\",900,2700,\"14.svg\",\"Шаурма\"],[7,\"Наггетсы\",400,1500,\"7.svg\",\"Закуски\"],[8,\"Картошка\",400,1500,\"8.svg\",\"Закуски\"],[9,\"Coca Cola\",200,700,\"10.svg\",\"Напитки\"],[10,\"7 Up\",200,700,\"11.svg\",\"Напитки\"],[11,\"Mirinda\",200,700,\"12.svg\",\"Напитки\"],[12,\"Вафли\",500,1500,\"16.svg\",\"Десерты\"],[13,\"Кексы\",500,1500,\"17.svg\",\"Десерты\"],[14,\"Тирамису\",500,1500,\"18.svg\",\"Десерты\"],\"%s\"]')", GetPlayerNameEx(playerid));
		    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
		case 2:{
		    CEF_CREATE(playerid, 1, 4, "PhoneAppPhoto");
			SetSelfie(playerid, true);
			CEF_CREATE(playerid, 1, 2, "interface('Phone').hidePhone()");
		    //callcmd::phonehide(playerid);
		}
		case 4:{
			callcmd::phonehide(playerid);
			callcmd::menu(playerid);
			CEF_CREATE(playerid, 1, 2, "client.setCursorStatus(true)");

		}
		case 5:{
		    CEF_CREATE(playerid, 1, 2, "interface('Phone').getApp('taxi').setLoadApp()");
		}
		case 6:{
		    new Float: pos_x, Float: pos_y, Float: pos_z;

		    new Float: pos_xs, Float: pos_ys, Float: pos_zs, Float:angl;

		    GetVehiclePos(GetPlayerData(playerid, P_CARSH_CAR), pos_xs,pos_ys,pos_zs);
			GetVehicleZAngle(GetPlayerData(playerid, P_CARSH_CAR), angl);

		    GetPlayerPos(playerid, pos_x, pos_y, pos_z);
		    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
		    {
		    	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f],[%f,%f,%f]]')", pos_x, pos_y, pos_z,pos_xs, pos_ys, angl);
		    	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		    }
		    else
		    {
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, pos_z);
			    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			}
		}
		case 7:{
			//STRING_GLOBAL[0] = EOS;
			//format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('easter').onServerResponse(0, '[1,2,%d,3,4,5,6,[[1290,-2542],[2174,-2231],[-4279,-5221],[-159,398],[-4088,-5384],[304,-202],[790,-1810],[-3887,-5353],[-23,2677],[-4796,-5309],[539,-1042],[2445,-1448],[-4521,-5388],[68,1766],[3,-2929],[-3798,-5393],[-1862,-2835],[-2965,-4950],[-3156,-4916],[2329,-226],[164,-2380],[-1411,-2035],[-1162,2730],[-3744,-5064],[2513,-298],[-3299,-5493],[399,1046],[-4256,-5306],[-2063,-174],[-1061,2339]],[[\"Маска кролика\",6,15876,150],[\"Маска петушка\",6,15875,150],[\"Ушки кролика\",6,15885,150],[\"Автоаксессуар мишка\",6,15874,200],[\"Рюкзак яицо\",6,15877,400],[\"Рюкзак с кроликом\",6,15878,400],[\"Рюкзак с кроликом\",6,15879,400],[\"Костюм кролика\",4,15551,700]]]')", gettime());
			//CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

			//interface('Phone').getApp('easter').onServerResponse(0, '[0,5,1715072228,5,1,10,1,[[4015,4059],[480,-1226],[3264,-1495],[-943,318],[373,2999],[2391,-1834],[-2623,1794],[2439,-1758],[82,912],[-953,-1956],[2517,-2070],[-152,714],[2313,-2391],[2152,-2289],[1842,-2619],[501,741],[2395,-1832],[-1006,-2095],[2023,-2476],[765,-1768]],[["Ушки кролика",6,15885,180],["Маска кролика",6,15876,225],["Маска петушка",6,15875,225],["Бананка с зайцем",6,16994,500],["Рюкзак золотое яйцо",6,16993,675],["Костюм акулы",4,17049,1200]]]')
		
			OpenQuestEasterPhone(playerid);
		}
	}
}

public:PhoneCamera_Close(playerid){
    CEF_HIDE(playerid, "PhoneAppPhoto");
    SetSelfie(playerid, false);
    callcmd::phone(playerid);
}
stock SetSelfie(playerid, bool: status){
	if(status)
	{
        GetPlayerPos(playerid, positionCam[playerid][0], positionCam[playerid][1], positionCam[playerid][2]);
        static Float: n1X, Float: n1Y, Float:PositionCam;
        GetPlayerFacingAngle(playerid, PositionCam);
        n1X = positionCam[playerid][0] + Radiuses * floatcos(180.0, degrees);
        n1Y = positionCam[playerid][1] + Radiuses * floatsin(180.0, degrees);
        SetPlayerCameraPos(playerid, n1X, n1Y, positionCam[playerid][2] + Height);
        SetPlayerCameraLookAt(playerid, positionCam[playerid][0], positionCam[playerid][1], positionCam[playerid][2] + 1);
        SetPlayerFacingAngle(playerid, Reedeg[playerid] - 270.0);
        ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
        CEF_CREATE(playerid, 1, 2, "client.setCursorStatus(false)");
	}else{
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);
        ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
        CEF_HIDE(playerid, "PhoneAppPhoto");
        callcmd::phone(playerid);
	}

}
//Delivery
public: Delivery_OnPlayerAddCart(playerid, order_id){
	new hour, minute,
	day, month, year;

	gettime(hour, minute);
	getdate(year, month, day);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').setPage(4)");
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.id = %d", random(900));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.date = '%d %s, %d:%02d'", day, GetMonthName(month), hour, minute);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('delivery').paymentData.items = [%d]", order_id);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	STRING_GLOBAL[0] = EOS;
	SetPVarInt(playerid, "Delivery_Order", order_id);
	return true;
}
public: Phone_ContactAction(playerid, id_switch, id_xz, number){
	switch(id_switch)
	{
		case 1:
		{
			switch(id_xz)
			{
				case -1:
				{
				    switch(number)
					{
				        case 60:{
				            ShowCurrentTime(playerid);
				        }
		       			case 111:
						{
							string_dialog[0] = EOS;
							SetPlayerPhoneUseState(playerid, true);

							format
							(
								string_dialog, sizeof string_dialog,
								"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
								"На счету Вашего мобильного телефона {00FF00}%d руб\n\n"\
								"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
								"Всего доброго!",
								GetPlayerData(playerid, P_PHONE_BALANCE)
							);
							IntfDialogCallRemote(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFD83D}Оператор сотовой связи", string_dialog, "Ок", "Отмена");
						}
						/*case 222:
						{
						   	if(!(TEAM_MAFIA_RUSSIAN <= GetPlayerTeamEx(playerid) <= TEAM_MAFIA_ITALIAN))
								return SendClientMessage(playerid, 0xFF6600FF, "Вы не можете использовать это");
							CEF_CREATE(playerid, 1, 2, "interface('Phone').setCall('[1,\"Авиапоставки\",2]')");
							SCM(playerid, 0xFFFF00FF, "[Тел] Неизвестный: Какой нужен груз?");
							SCM(playerid, 0xCECECEFF, "Нажмите 1 и кнопку вызова на телефоне чтобы заказать ящики(наркотики и оружие)");
							SCM(playerid, 0xCECECEFF, "Нажмите 2 и кнопку вызова на телефоне чтобы заказать транспорт(автомобили определённого качества и цены)");
                            SetTimerEx("PhoneNumber", 1000, false, "i", playerid);
							SetPVarInt(playerid,"KontraPhone",1);

						}*/
				    }
				}
			}
		}
		case 2:{
			switch(id_xz){
				case -1:{
				    switch(number){
				        case 60:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
				        }
		       			case 111:
						{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 101:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 90:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 535:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 2:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
						case 3:{
							SCM(playerid, -1, "{ff8c00}[Ошибка] {ffffff}Важные службы удалить нельзя!");
						}
				    }
				}
			}
		}
	}
	return 1;
}
public:Phone_CreateContact(playerid, player_name[], number[]){

	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, player_name, number);

	return true;
}
public: Delivery_CreateOrder(playerid, method, status_id, xz){
	new get_order = GetPVarInt(playerid, "Delivery_Order");
	switch(method){
	    case 0:{ // карта
	        if(!VerifyIntString(GetPlayerBankMoney(playerid), GetPriceDelivery(get_order))) return SCM(playerid, -1, "У вас недостаточно средств на банковском счете!");
			CEF_CREATE(playerid, 1, 2, "interface('Phone').getApp('delivery').setPage(5)");
			format(g_player[playerid][P_BANK], 21, "%s", SetILPlayerInt(playerid, GetPlayerBankMoney(playerid), -GetPriceDelivery(get_order)));
			SetTimerEx("Delivery_OrderS", 100000, false, "i", playerid);
		}
	    case 1:{
			if(!VerifyIntString(QueryPlayerBalance(playerid), GetPriceDelivery(get_order))) return SCM(playerid, -1, "У вас недостаточно средств!");

	        CEF_CREATE(playerid, 1, 2, "interface('Phone').getApp('delivery').setPage(5)");
			//БАБКИ
			ModifyCashBalance(playerid, -GetPriceDelivery(get_order), "покупка еды", true);
			
			SetTimerEx("Delivery_OrderS", 100000, false, "i", playerid);
	    }
	}
	return true;
}
public:Delivery_OrderS(playerid){
	SCM(playerid, -1, "{ff8c00}[Delivery] {ffffff}Ваш заказ успешно доставлен! Чтобы покушать /eat");
    SetPlayerData(playerid, P_EAT_STATUS, 1);
}

stock GetPriceDelivery(order_id)
{
	new price = 0;
	switch(order_id){
		case 0:{
			price = 700;
		}
		case 1:{
			price = 800;
		}case 2:{
            price = 300;
		}case 3:{
		    price = 500;
		}case 4:{
		    price = 1200;
		}case 5:{
		    price = 400;
		}case 6:{
		    price = 900;
		}case 7:{
		    price = 400;
		}case 8:{
		    price = 400;
		}case 9:{
		    price = 200;
		}case 10:{
		    price = 200;
		}case 11:{
		    price = 200;
		}case 12:{
		    price = 500;
		}case 13:{
		    price = 500;
		}case 14:{
		    price = 500;
		}
	}
	return price;
}

public: Tuning_OnStageMenuEvent(playerid, sss1, sss2, sss3)
{
	if(sss1 == 0)
	{
		if(sss2 == 0) stagestats[playerid] = 1;
		if(sss2 == 1) stagestats[playerid] = 2;
		if(sss2 == 2) stagestats[playerid] = 3;
		
		new vehicleid = GetPlayerVehicleID(playerid);
		new idx = GetVehicleData(vehicleid, V_ACTION_ID);

		string_dialog[0] = EOS;
		format(string_dialog, sizeof string_dialog,
		"{E4E4DF}Деталь <t>{E4E4DF}Статус <t>{E4E4DF}Стоимость <n><n><n>{F6B243}Комплект STAGE 1 <n>{E4E4DF}Радиатор <t>%s <t>{91D643}300.000 руб<n>{E4E4DF}Выхлоп <t>%s <t>{91D643}400.000 руб<n><n><n>{946A1F}Комплект STAGE 2 <n>{5C5D5C}Турбина <t>%s <t>{55703F}2.000.000 руб<n><n><n>{946A1F}Комплект STAGE 3 <n>{5C5D5C}Нагнетатель <t>%s <t>{55703F}4.000.000 руб<n>",
		GetOwnableCarData(idx, OC_STAGE1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE1_1) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE2) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено"),
		GetOwnableCarData(idx, OC_STAGE3) ? ("{00CC00}Устонавлено")  : ("{AF9795}Не устонавлено")
		);

		IntfDialogCallRemote(playerid, DIALOG_STAGE_1, DIALOG_STYLE_LIST, "{F6CC3F}Элементы установки", string_dialog, "Выбор", "Отмена");
	}
	if(sss1 == 1 && sss2 == -1)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		CEF_HIDE(playerid, "TuningStage");
		SpeedometrShowForPlayer(playerid);

		TogglePlayerControllable(playerid, true);

		SetCameraBehindPlayer(playerid);

		if(stagest[playerid] == 2) SetVehiclePos(vehicleid, 261.4367,703.0173,11.6926), SetVehicleZAngle(vehicleid, 246.6999);
		if(stagest[playerid] == 1) SetVehiclePos(vehicleid, 2328.7151,-2600.8962,21.8158), SetVehicleZAngle(vehicleid, 180.9891);
		
		stagest[playerid] = 0;
		SetPlayerInterior(playerid, 0); 
		SetVehicleVirtualWorld(vehicleid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		LinkVehicleToInterior(vehicleid, 0);
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
        if(response == EDIT_RESPONSE_FINAL)
		{
			if(GetPVarInt(playerid, "create_garden") == 1)
	    	{
				new Cache: result,
					idx = g_garden_loaded,price = GetPVarInt(playerid, "price"),rent_price = GetPVarInt(playerid, "rent_price");
				SetGardenData(idx, G_PRICE,	price);
				SetGardenData(idx, G_RENT_PRICE, rent_price);

				SetGardenData(idx, G_POS_X, x);
				SetGardenData(idx, G_POS_Y, y);
				SetGardenData(idx, G_POS_Z, z);
                new fmt_str[244];
				format
				(
					fmt_str, sizeof fmt_str,
					"INSERT INTO gardens \
					(price, rent_price, x, y, z)\
					VALUES ('%d', '%d', '%f', '%f', '%f')",
					price, rent_price,
					GetGardenData(idx, G_POS_X),
					GetGardenData(idx, G_POS_Y),
					GetGardenData(idx, G_POS_Z),
					0
				);
				result = mysql_query(mysql, fmt_str, true);

				SetGardenData(idx, G_SQL_ID, cache_insert_id());
				DestroyObject(EditObjectPlayer[playerid]);
				DestroyDynamicObject(gardenobj[idx]);
				gardenobj[idx] = CreateDynamicObject(16562, GetGardenData(idx, G_POS_X), GetGardenData(idx, G_POS_Y), GetGardenData(idx, G_POS_Z),   0.00000, 0.00000, 0);

				cache_delete(result);
			    format
				(
					fmt_str, sizeof fmt_str,
					"{FF8800}Огород {ffffff}№%d\n"\
					"{FF8800}Цена: {ffffff}%s {FF8800}руб\n"\
					"Для покупки введите  {ffffff}/buygarden",idx,formatInt(price)
				);
		        gardenlabel[idx] = CreateDynamic3DTextLabel(fmt_str, -1, GetGardenData(idx, G_POS_X),GetGardenData(idx, G_POS_Y),GetGardenData(idx, G_POS_Z)+4, 10.0);
				g_garden_loaded ++;

				STRING_GLOBAL[0] = EOS;
			    format(STRING_GLOBAL, 500, "[A] %s [%d] создал огород №%d", GetPlayerNameEx(playerid), playerid, idx);
				SendMessageToAdmins(STRING_GLOBAL, 0x66CC33FF);
				SetPVarInt(playerid, "create_garden",0);
	    	}
	    	if(GetPVarInt(playerid, "obj_edit"))
    	    {
    		    SetString(ObjInfo[TOTALOBJECTS][objName], ObjectNamePlayer[playerid]);
			    ObjInfo[TOTALOBJECTS][objModel] = GetPVarInt(playerid, "obj_model");

			    ObjInfo[TOTALOBJECTS][objPosX] = x;
			    ObjInfo[TOTALOBJECTS][objPosY] = y;
			    ObjInfo[TOTALOBJECTS][objPosZ] = z;

			    ObjInfo[TOTALOBJECTS][objRotX] = rx;
			    ObjInfo[TOTALOBJECTS][objRotY] = ry;
			    ObjInfo[TOTALOBJECTS][objRotZ] = rz;

			    DestroyDynamicObject(EditObjectPlayer[playerid]);
			    ObjInfo[TOTALOBJECTS][objID] = CreateDynamicObject(ObjInfo[TOTALOBJECTS][objModel], ObjInfo[TOTALOBJECTS][objPosX], ObjInfo[TOTALOBJECTS][objPosY], ObjInfo[TOTALOBJECTS][objPosZ], ObjInfo[TOTALOBJECTS][objRotX], ObjInfo[TOTALOBJECTS][objRotY], ObjInfo[TOTALOBJECTS][objRotZ]);

			    static const mysql_str[] = "INSERT INTO `create_objects` (`Name`, `Model`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`) VALUES ('%s', %d, '%f', '%f', '%f', '%f', '%f', '%f')";
			    new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];

			    format(str, sizeof(str), mysql_str,
				    ObjInfo[TOTALOBJECTS][objName],
				    ObjInfo[TOTALOBJECTS][objModel],
				    ObjInfo[TOTALOBJECTS][objPosX],
				    ObjInfo[TOTALOBJECTS][objPosY],
				    ObjInfo[TOTALOBJECTS][objPosZ],
				    ObjInfo[TOTALOBJECTS][objRotX],
				    ObjInfo[TOTALOBJECTS][objRotY],
				    ObjInfo[TOTALOBJECTS][objRotZ]);
			    mysql_query(mysql, str, false);

			    TOTALOBJECTS ++;
            }
	        if(GetPVarInt(playerid, "Sab"))
	    	{
	    	    new vehicleid = GetPlayerVehicleID(playerid);
	    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
	      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
	      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
	        	AttachDynamicObjectToVehicle(Obj_tune[playerid], vehicleid, Tx-x, Ty-y, z-Tz,   rx, ry, rz-Tr);
	         	if(GetPVarInt(playerid, "Staige_obj") == 13946)
				{
				    SetOwnableCarData(index, OC_SAB, 		1);
					SetOwnableCarData(index, OC_SAB_X, 		Tx-x);
					SetOwnableCarData(index, OC_SAB_Y, 		Ty-y);
					SetOwnableCarData(index, OC_SAB_Z, 		z-Tz);
					SetOwnableCarData(index, OC_SAB_RX, 		rx);
					SetOwnableCarData(index, OC_SAB_RY, 		ry);
					SetOwnableCarData(index, OC_SAB_RZ, 		rz-Tr);
					sab[vehicleid] = Obj_tune[playerid];

					new query[512];
					mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET sab=1 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, query, false);
	                STRING_GLOBAL[0] = EOS;
					format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%f,%f,%f,%f,%f,%f", GetOwnableCarData(index, OC_SAB_X), GetOwnableCarData(index, OC_SAB_Y), GetOwnableCarData(index, OC_SAB_Z), GetOwnableCarData(index, OC_SAB_RX), GetOwnableCarData(index, OC_SAB_RY), GetOwnableCarData(index, OC_SAB_RZ));

			        mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET sab_pos='%s' WHERE id=%d", STRING_GLOBAL, GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, query, false);
				}
			}
            if(GetPVarInt(playerid, "EditDecor"))
			{
				new id = GetPVarInt(playerid, "EditDecorID");
				new house_id = GetPlayerHousesBySQL(playerid);
				new Float:dist = GetPlayerDistanceFromPoint(playerid, GetHouseData(house_id, H_POS_X), GetHouseData(house_id, H_POS_Y), GetHouseData(house_id, H_POS_Z));
				if(dist > 17.0)
				{
					DestroyDynamicObject(DecorInfo[id][Decor_Object]);
					CancelEdit(playerid);

					DecorInfo[id][Decor_Object] = CreateDynamicObject(DecorInfo[id][Decor_Model], DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], DecorInfo[id][Decor_RotX], DecorInfo[id][Decor_RotY], DecorInfo[id][Decor_RotZ]);

					if(g_player_use_editing[playerid] == true)
					{
						new fmt_str[128];
						format(fmt_str, sizeof fmt_str, "[ID: %d]", DecorInfo[id][Decor_ID]);
						g_object_text[playerid][id] = CreatePlayer3DTextLabel(playerid, fmt_str, 0xFFA500FF, DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], 5.0);
					}

					return SCM(playerid, 0xC0C0C0FF, "Объект слишком далеко");
				}

				DecorInfo[id][Decor_Model] = GetPVarInt(playerid, "EditDecorObject");

				DecorInfo[id][Decor_PosX] = x;
				DecorInfo[id][Decor_PosY] = y;
				DecorInfo[id][Decor_PosZ] = z;

				DecorInfo[id][Decor_RotX] = rx;
				DecorInfo[id][Decor_RotY] = ry;
				DecorInfo[id][Decor_RotZ] = rz;

				new querys[256];
				mysql_format(mysql, querys, sizeof querys, "UPDATE decoration SET PosX = '%f', PosY = '%f', PosZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f' WHERE id = %d LIMIT 1",
				DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], DecorInfo[id][Decor_RotX], DecorInfo[id][Decor_RotY], DecorInfo[id][Decor_RotZ], id + 1);
				mysql_pquery(mysql, querys);

				if(g_player_use_editing[playerid] == true)
				{
					new fmt_str[128];
					format(fmt_str, sizeof fmt_str, "[ID: %d]", DecorInfo[id][Decor_ID]);
					g_object_text[playerid][id] = CreatePlayer3DTextLabel(playerid, fmt_str, 0xFFA500FF, DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], 5.0);
				}
			}
			if(GetPVarInt(playerid, "home_obj_edit"))
			{
				new house_id = GetPlayerHousesBySQL(playerid);
				new Float:dist = GetPlayerDistanceFromPoint(playerid, GetHouseData(house_id, H_POS_X), GetHouseData(house_id, H_POS_Y), GetHouseData(house_id, H_POS_Z));
				if(dist > 17.0)
				{
					DestroyDynamicObject(EditObjectPlayer[playerid]);
					CancelEdit(playerid);
					return SCM(playerid, 0xC0C0C0FF, "Объект слишком далеко");
				}
				DecorInfo[TOTALDECOR][Decor_Model] = GetPVarInt(playerid, "home_obj_model");

				DecorInfo[TOTALDECOR][Decor_PosX] = x;
				DecorInfo[TOTALDECOR][Decor_PosY] = y;
				DecorInfo[TOTALDECOR][Decor_PosZ] = z;

				DecorInfo[TOTALDECOR][Decor_RotX] = rx;
				DecorInfo[TOTALDECOR][Decor_RotY] = ry;
				DecorInfo[TOTALDECOR][Decor_RotZ] = rz;

				DecorInfo[TOTALDECOR][Decor_ID] = TOTALDECOR + 1;

				DecorInfo[TOTALDECOR][Decor_Owner] = GetPlayerHousesBySQL(playerid);

				DestroyDynamicObject(EditObjectPlayer[playerid]);
				DecorInfo[TOTALDECOR][Decor_Object] = CreateDynamicObject(DecorInfo[TOTALDECOR][Decor_Model], DecorInfo[TOTALDECOR][Decor_PosX], DecorInfo[TOTALDECOR][Decor_PosY], DecorInfo[TOTALDECOR][Decor_PosZ], DecorInfo[TOTALDECOR][Decor_RotX], DecorInfo[TOTALDECOR][Decor_RotY], DecorInfo[TOTALDECOR][Decor_RotZ]);


				if(g_player_use_editing[playerid] == true)
				{
					new fmt_str[128];
					format(fmt_str, sizeof fmt_str, "[ID: %d]", DecorInfo[TOTALDECOR][Decor_ID]);
					g_object_text[playerid][TOTALDECOR] = CreatePlayer3DTextLabel(playerid, fmt_str, 0xFFA500FF, DecorInfo[TOTALDECOR][Decor_PosX], DecorInfo[TOTALDECOR][Decor_PosY], DecorInfo[TOTALDECOR][Decor_PosZ], 5.0);
				}

				static const mysql_str[] = "INSERT INTO `decoration` (`Model`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`, `Owner`) VALUES (%d, '%f', '%f', '%f', '%f', '%f', '%f', %d)";
				new str[sizeof(mysql_str) + 30 + 10 + (6 * 6)];

				format(str, sizeof(str), mysql_str,
					DecorInfo[TOTALDECOR][Decor_Model],
					DecorInfo[TOTALDECOR][Decor_PosX],
					DecorInfo[TOTALDECOR][Decor_PosY],
					DecorInfo[TOTALDECOR][Decor_PosZ],
					DecorInfo[TOTALDECOR][Decor_RotX],
					DecorInfo[TOTALDECOR][Decor_RotY],
					DecorInfo[TOTALDECOR][Decor_RotZ],
					DecorInfo[TOTALDECOR][Decor_Owner]);
				mysql_tquery(mysql, str);

				TOTALDECOR ++;

				DestroyAcs(playerid, GetPVarInt(playerid, "home_inv_obj_id"), 1);

				SCM(playerid, 0xFFA500FF, "Вы установили новый предмет интерьера. Используйте /pa_edit, чтобы редактировать");
				DeletePVar(playerid, "home_obj_edit");
			}
            if(GetPVarInt(playerid, "stage_edit_1"))
	    	{
	    	    if(VerifyIntString(QueryPlayerBalance(playerid), 300000))
	    	    {
		    		new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    	    new fmt_text[144];
		    	    SetOwnableCarData(index, OC_STAGE1, 1);

					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 10.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 20.0);

					new Float:accel = GetOwnableCarData(index, OC_ENGINE_ACCELERATION);
                    new Float:maxvel = GetOwnableCarData(index, OC_MAX_VELOCITY);

                    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET engineacceleration='%f', maxgearvelocity='%f' WHERE id=%d LIMIT 1", accel, maxvel, GetOwnableCarData(index, OC_SQL_ID));
                    mysql_query(mysql, fmt_text, false);

					UpdateVehicleHandling(playerid, vehicleid);

		    	    SetOwnableCarData(index, OC_STAGE, 1);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1=1, stage=1 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);

		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;

					GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
	          		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);

					new Float:relX = x - Tx;
                    new Float:relY = y - Ty;
                    new Float:relZ = z - Tz;
                    new Float:relRZ = rz - Tr;

	            	AttachDynamicObjectToVehicle(EditStage1Player[vehicleid], vehicleid, relX, relY, relZ, rx, ry, relRZ);

					SetOwnableCarData(index, OC_ST1X, relX);
					SetOwnableCarData(index, OC_ST1Y, relY);
					SetOwnableCarData(index, OC_ST1Z, relZ);
					SetOwnableCarData(index, OC_ST1RX, rx);
					SetOwnableCarData(index, OC_ST1RY, ry);
					SetOwnableCarData(index, OC_ST1RZ, relRZ);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st1x='%f', st1y='%f', st1z='%f', st1rx='%f', st1ry='%f', st1rz='%f' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_ST1X), GetOwnableCarData(index, OC_ST1Y), GetOwnableCarData(index, OC_ST1Z), 
					GetOwnableCarData(index, OC_ST1RX), GetOwnableCarData(index, OC_ST1RY), GetOwnableCarData(index, OC_ST1RZ), GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
	                ModifyCashBalance(playerid, -300000);
		        	DeletePVar(playerid, "stage_edit_1");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage1Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_1_1"))
	    	{
	    	    if(VerifyIntString(QueryPlayerBalance(playerid), 400000))
	    	    {
		    	    new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		   			new fmt_text[144];
		   			SetOwnableCarData(index, OC_STAGE1_1, 1);

					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 15.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 30.0);

					new Float:accel = GetOwnableCarData(index, OC_ENGINE_ACCELERATION);
                    new Float:maxvel = GetOwnableCarData(index, OC_MAX_VELOCITY);

                    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET engineacceleration='%f', maxgearvelocity='%f' WHERE id=%d LIMIT 1", accel, maxvel, GetOwnableCarData(index, OC_SQL_ID));
                    mysql_query(mysql, fmt_text, false);

					UpdateVehicleHandling(playerid, vehicleid);

		   			SetOwnableCarData(index, OC_STAGE, 2);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage1_1=1, stage=2 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);

		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
	                ModifyCashBalance(playerid, -400000);

		      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
		      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);

                    new Float:relX = x - Tx;
                    new Float:relY = y - Ty;
                    new Float:relZ = z - Tz;
                    new Float:relRZ = rz - Tr;

	            	AttachDynamicObjectToVehicle(EditStage1_1Player[vehicleid], vehicleid, relX, relY, relZ, rx, ry, relRZ);

					SetOwnableCarData(index, OC_ST11X, relX);
					SetOwnableCarData(index, OC_ST11Y, relY);
					SetOwnableCarData(index, OC_ST11Z, relZ);
					SetOwnableCarData(index, OC_ST11RX, rx);
					SetOwnableCarData(index, OC_ST11RY, ry);
					SetOwnableCarData(index, OC_ST11RZ, relRZ);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st11x='%f', st11y='%f', st11z='%f', st11rx='%f', st11ry='%f', st11rz='%f' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_ST11X), GetOwnableCarData(index, OC_ST11Y), GetOwnableCarData(index, OC_ST11Z), 
					GetOwnableCarData(index, OC_ST11RX), GetOwnableCarData(index, OC_ST11RY), GetOwnableCarData(index, OC_ST11RZ), GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		        	DeletePVar(playerid, "stage_edit_1_1");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage1_1Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_2"))
	    	{
	    	    if(VerifyIntString(QueryPlayerBalance(playerid), 2000000))
	    	    {
		    	    new vehicleid = GetPlayerVehicleID(playerid);
		    	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
		    		new fmt_text[144];
		    		SetOwnableCarData(index, OC_STAGE2, 1);

					SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 25.0);
					SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 40.0);

					new Float:accel = GetOwnableCarData(index, OC_ENGINE_ACCELERATION);
                    new Float:maxvel = GetOwnableCarData(index, OC_MAX_VELOCITY);

                    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET engineacceleration='%f', maxgearvelocity='%f' WHERE id=%d LIMIT 1", accel, maxvel, GetOwnableCarData(index, OC_SQL_ID));
                    mysql_query(mysql, fmt_text, false);

					UpdateVehicleHandling(playerid, vehicleid);

		    		SetOwnableCarData(index, OC_STAGE, 3);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage2=1, stage=3 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);

		    	    new Float:Tx,Float:Ty,Float:Tz,Float:Tr;

		      		GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
		      		GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);
		      		
	                ModifyCashBalance(playerid, -2000000);

					new Float:relX = x - Tx;
                    new Float:relY = y - Ty;
                    new Float:relZ = z - Tz;
                    new Float:relRZ = rz - Tr;

	            	AttachDynamicObjectToVehicle(EditStage2Player[vehicleid], vehicleid, relX, relY, relZ, rx, ry, relRZ);

					SetOwnableCarData(index, OC_ST2X, relX);
					SetOwnableCarData(index, OC_ST2Y, relY);
					SetOwnableCarData(index, OC_ST2Z, relZ);
					SetOwnableCarData(index, OC_ST2RX, rx);
					SetOwnableCarData(index, OC_ST2RY, ry);
					SetOwnableCarData(index, OC_ST2RZ, relRZ);
					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st2x='%f', st2y='%f', st2z='%f', st2rx='%f', st2ry='%f', st2rz='%f' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_ST2X), GetOwnableCarData(index, OC_ST2Y), GetOwnableCarData(index, OC_ST2Z), 
					GetOwnableCarData(index, OC_ST2RX), GetOwnableCarData(index, OC_ST2RY), GetOwnableCarData(index, OC_ST2RZ), GetOwnableCarData(index, OC_SQL_ID));
					mysql_query(mysql, fmt_text, false);
		        	DeletePVar(playerid, "stage_edit_2");
	        	}
				else
				{
				    new vehicleid = GetPlayerVehicleID(playerid);
				    DestroyDynamicObject(EditStage2Player[vehicleid]);
				    return GameText(playerid, "~r~Недостаточно средств!", 4000, 2);
				}
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_3"))
	    	{
	    	    if(!VerifyIntString(QueryPlayerBalance(playerid), 4000000)) return DestroyDynamicObject(EditStage3Player[GetPlayerVehicleID(playerid)]), GameText(playerid, "~r~Недостаточно~n~средств", 3000, 2);

				new vehicleid = GetPlayerVehicleID(playerid);
				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new fmt_text[144];
 
				SetOwnableCarData(index, OC_STAGE3, 1);

				SetOwnableCarData(index, OC_ENGINE_ACCELERATION, GetOwnableCarData(index, OC_ENGINE_ACCELERATION) + 25.0);
				SetOwnableCarData(index, OC_MAX_VELOCITY, GetOwnableCarData(index, OC_MAX_VELOCITY) + 50.0);

				new Float:accel = GetOwnableCarData(index, OC_ENGINE_ACCELERATION);
                new Float:maxvel = GetOwnableCarData(index, OC_MAX_VELOCITY);

                mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET engineacceleration='%f', maxgearvelocity='%f' WHERE id=%d LIMIT 1", accel, maxvel, GetOwnableCarData(index, OC_SQL_ID));
                mysql_query(mysql, fmt_text, false);

				UpdateVehicleHandling(playerid, vehicleid);

				SetOwnableCarData(index, OC_STAGE, 4);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET stage3=1, stage=4 WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, fmt_text, false);

				new Float:Tx,Float:Ty,Float:Tz,Float:Tr;

				GetVehiclePos(GetPlayerVehicleID(playerid),Tx,Ty,Tz);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), Tr);

				new Float:relX = x - Tx;
                new Float:relY = y - Ty;
                new Float:relZ = z - Tz;
                new Float:relRZ = rz - Tr;

	            AttachDynamicObjectToVehicle(EditStage3Player[vehicleid], vehicleid, relX, relY, relZ, rx, ry, relRZ);

				SetOwnableCarData(index, OC_ST3X, relX);
				SetOwnableCarData(index, OC_ST3Y, relY);
				SetOwnableCarData(index, OC_ST3Z, relZ);
				SetOwnableCarData(index, OC_ST3RX, rx);
				SetOwnableCarData(index, OC_ST3RY, ry);
				SetOwnableCarData(index, OC_ST3RZ, relRZ);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET st3x='%f', st3y='%f', st3z='%f', st3rx='%f', st3ry='%f', st3rz='%f' WHERE id=%d LIMIT 1", GetOwnableCarData(index, OC_ST3X), GetOwnableCarData(index, OC_ST3Y), GetOwnableCarData(index, OC_ST3Z), 
				GetOwnableCarData(index, OC_ST3RX), GetOwnableCarData(index, OC_ST3RY), GetOwnableCarData(index, OC_ST3RZ), GetOwnableCarData(index, OC_SQL_ID));
				mysql_query(mysql, fmt_text, false);
				ModifyCashBalance(playerid, -4000000);
				DeletePVar(playerid, "stage_edit_3");
				
	    	}
			if(GetPVarInt(playerid, "EditCarAcs") == 1)
			{
				new vehicleid = GetPVarInt(playerid, "AcsVehicleCar");

				new index = GetVehicleData(vehicleid, V_ACTION_ID);
				new car_id = GetOwnableCarData(index, OC_SQL_ID);

				new Float:Tx,Float:Ty,Float:Tz,Float:Tr;
				GetVehiclePos(vehicleid,Tx,Ty,Tz);
				GetVehicleZAngle(vehicleid, Tr);

				new Float: ofx, Float: ofy, Float: ofz, Float: ofaz, Float: finalx, Float: finaly;
				ofx = x-Tx, ofy = y-Ty, ofz = z-Tz, ofaz = rz-Tr;

				finalx = ofx*floatcos(Tr, degrees)+ofy*floatsin(Tr, degrees), finaly = -ofx*floatsin(Tr, degrees)+ofy*floatcos(Tr, degrees);

				new query[234];
				format(query, sizeof query, "INSERT INTO `cars_accessories` (`car_id`, `model_id`, `indx`, `PosX`, `PosY`, `PosZ`, `RotX`, `RotY`, `RotZ`) VALUES (%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f')", 
				car_id, GetPVarInt(playerid, "model_id"), GetPVarInt(playerid, "AcsindxCar"), finalx, finaly, ofz, rx, ry, ofaz);
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM items WHERE type=%d AND slots=%d AND owner_id=%d LIMIT 1", GetPVarInt(playerid, "event"), GetPVarInt(playerid, "slot"), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				for(new i; i < MAX_PLAYER_ITEMS; i ++)
				{
					if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
					if(GetPlayerItem(i, PI_TYPE) != GetPVarInt(playerid, "event")) continue;
					if(GetPlayerItem(i, PI_SLOTS) != GetPVarInt(playerid, "slot")) continue;

					DeleteItems(i);
					break;

				}

				DestroyDynamicObject(car_accessories[GetPVarInt(playerid, "AcsVehicleCar")][GetPVarInt(playerid, "AcsindxCar")]);

				LoadCarAccessories(car_id, vehicleid);

				DeletePVar(playerid, "AcsVehicleCar");
				DeletePVar(playerid, "EditCarAcs");
	    		DeletePVar(playerid, "AcsindxCar");
				DeletePVar(playerid, "model_id");
				DeletePVar(playerid, "event");
				DeletePVar(playerid, "slot");

				SCM(playerid, 0x2C83DBFF, "Вы установили украшение на свой транспорт");
				SCM(playerid, 0x2C83DBFF, "Чтобы снять украшение используйте радиальное меню на {E4B700}клавишу R");
			}
		}
        if(response == EDIT_RESPONSE_CANCEL)
        {
 			new vehicleid = GetPlayerVehicleID(playerid);
            if(GetPVarInt(playerid, "sab"))
            {
                DestroyDynamicObject(sab[playerid]);
                CancelEdit(playerid);
            }
	    	if(GetPVarInt(playerid, "stage_edit_1"))
	    	{
		        DestroyDynamicObject(EditStage1Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_1_1"))
	    	{
		        DestroyDynamicObject(EditStage1_1Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_2"))
	    	{
		        DestroyDynamicObject(EditStage2Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "stage_edit_3"))
	    	{
		        DestroyDynamicObject(EditStage3Player[vehicleid]);
		        CancelEdit(playerid);
	    	}
	    	if(GetPVarInt(playerid, "create_garden"))
	    	{
	            DestroyObject(EditObjectPlayer[playerid]);
		        CancelEdit(playerid);
		        DeletePVar(playerid, "create_garden");
	    	}
	    	if(GetPVarInt(playerid, "obj_edit"))
    	    {
	            DestroyDynamicObject(EditObjectPlayer[playerid]);
	            CancelEdit(playerid);
    	    }
			if(GetPVarInt(playerid, "EditDecor"))
			{
				new id = GetPVarInt(playerid, "EditDecorID");
				DestroyDynamicObject(DecorInfo[id][Decor_Object]);
				CancelEdit(playerid);
				DecorInfo[id][Decor_Object] = CreateDynamicObject(DecorInfo[id][Decor_Model], DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], DecorInfo[id][Decor_RotX], DecorInfo[id][Decor_RotY], DecorInfo[id][Decor_RotZ]);


				if(g_player_use_editing[playerid] == true)
				{
					new fmt_str[128];
					format(fmt_str, sizeof fmt_str, "[ID: %d]", DecorInfo[id][Decor_ID]);
					g_object_text[playerid][id] = CreatePlayer3DTextLabel(playerid, fmt_str, 0xFFA500FF, DecorInfo[id][Decor_PosX], DecorInfo[id][Decor_PosY], DecorInfo[id][Decor_PosZ], 5.0);
				}

				DeletePVar(playerid, "EditDecor");
			}
			if(GetPVarInt(playerid, "home_obj_edit"))
			{
				new id = GetPVarInt(playerid, "EditDecorID");

				DestroyDynamicObject(EditObjectPlayer[playerid]);
                CancelEdit(playerid);

				if(g_player_use_editing[playerid] == true)
				{
					DeletePlayer3DTextLabel(playerid, g_object_text[playerid][id]);
					g_object_text[playerid][id] = PlayerText3D: -1;
				}
				DeletePVar(playerid, "home_obj_edit");
			}
			if(GetPVarInt(playerid, "EditCarAcs") == 1)
			{
				DestroyDynamicObject(car_accessories[GetPVarInt(playerid, "AcsVehicleCar")][GetPVarInt(playerid, "AcsindxCar")]);
				CancelEdit(playerid);
				DeletePVar(playerid, "EditCarAcs");
			}
		}
        return 1;
}

public:OnPlayerClosedTicketInterface(playerid)
{
}

stock TextFind(const text[], const findtext[]) return strfind(text, findtext) != -1;

stock ValidChar(mailchar)
{
	if(
	(mailchar >= 'A' && mailchar <= 'Z') 	||
	(mailchar >= 'a' && mailchar <= 'z') 	||
	(mailchar >= '0' && mailchar <= '9') 	||
	(mailchar == '-') || (mailchar == '_') 	||
	(mailchar == '@') || (mailchar == '.'))return 1;
	return 0;
}
stock IsValidEMail(const email[])
{
	new bool:Succes = true;
	new bool:Good;
	for(new i;i < strlen(email);i ++)
	{
	    if(email[i] == '@')
		{
		    if(!Good) Good = true;
		    else
			{
				Good = false;
		    	break;
			}
		}
	    if(!ValidChar(email[i])) Succes = false;
	}
	if(!Good) Succes = false;
	if(!TextFind(email,".ru") && !TextFind(email,".com") && !TextFind(email,".ua") && !TextFind(email,".su")) Succes = false;
	if(!TextFind(email,"@")) Succes = false;
  	return Succes;
}

stock Convert(number)
{
	new hours = 0, mins = 0, secs = 0, string[30];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	if(hours > 0) format(string, 30, "%d:%02d:%02d", hours, mins, secs);
	else format(string, 30, "%d:%02d", mins, secs);
	return string;
}

stock SetFullness(playerid, ammount)
{
	new full[100];
	if(ammount > 100) GetPlayerData(playerid, P_EAT) = 100;
	else if(ammount < 0) GetPlayerData(playerid, P_EAT) = 0;
	else GetPlayerData(playerid, P_EAT) = ammount;
	format(full, sizeof(full), "interface('Hud').updateHungerLevel(%d)", GetPlayerData(playerid, P_EAT));
	CEF_CREATE(playerid, 1, 2, full);
	SetPlayerData(playerid, P_EAT, ammount);
	UpdatePlayerDataInt(playerid, "hunger", GetPlayerData(playerid, P_EAT));
	return 1;
}
stock GiveFullness(playerid, ammount)
{
	SetFullness(playerid,GetPlayerData(playerid, P_EAT) + ammount);
	if(GetPlayerData(playerid, P_EAT) + ammount > 100) GetPlayerData(playerid, P_EAT) = 100;
	return 1;
}

stock PlayerSpeed(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(!IsPlayerInAnyVehicle(playerid)) GetPlayerVelocity(playerid,X,Y,Z);
    return floatround( floatsqroot( X * X + Y * Y + Z * Z ) * 170.0 );
}

stock UpdatePlayerDataInt(const playerid, const field[], data) mysql_queryf(mysql, "UPDATE `accounts_canvasdev` SET `%e` = '%d' WHERE `ID` = '%i' LIMIT 1", false, field, data, GetPlayerAccountID(playerid));

stock Medhelp(playerid)
{
 	ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "medhelp");
	DestroyDynamic3DTextLabel(medhelplabel[playerid]);
	SetPlayerHealthEx(playerid, 60.0, true);
    CEF_HIDE(playerid, "Death");
	return 1;
}

stock ShowClientDialogRedAgeOnline(playerid, dialogid, style, caption[], info[], button1[], button2[], page_1, page_2, info1[])
{
	player_DialogID[playerid] = dialogid;

    for (new i = sizeof STRING_GLOBAL - 1; i != -1; i--)
        STRING_GLOBAL[i] = '\0';

    for (new i, j; info[i] != '\0'; i++) {
        if (info[i] == '\n')
            strcat(STRING_GLOBAL, "<n>"), j += 3;
        else if (info[i] == '\t')
            strcat(STRING_GLOBAL, "<t>"), j += 3;
        else if (info[i] == '\"')
            STRING_GLOBAL[j++] = '\'';
        else
            STRING_GLOBAL[j++] = info[i];
    }

    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.addDialogInQueue('[%i,%i,\"%s\",\"%s\",\"%s\",\"%s\",%d,%d]', \"%s\", 0)", dialogid, style, caption, info1, button1, button2, page_1, page_2, STRING_GLOBAL);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	STRING_GLOBAL[0] = EOS;
	return 1;
}

//new zanizenie[MAX_PLAYERS];
public: Tuning_OnPlayerPneumaEvent(playerid, type, event)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new query[148];

    new Float:x, Float:y, Float:z;
    new Float:angle;

	if(type == 0) // поднять определенную часть
	{
		if(GetOwnableCarData(index, OC_PNEWMA_1) >= 0.4) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);

		SetOwnableCarData(index, OC_PNEWMA_1, GetOwnableCarData(index, OC_PNEWMA_1) + 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
	
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_1));
		GameText(playerid, query, 3000, 1);

		OnBattlePass_Perfomance(playerid, 20, 1);
	}
	if(type == 1) // занизить определенную часть
	{
		if(GetOwnableCarData(index, OC_PNEWMA_1) <= -0.4) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);

		SetOwnableCarData(index, OC_PNEWMA_1, GetOwnableCarData(index, OC_PNEWMA_1) - 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
	
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_1));
		GameText(playerid, query, 3000, 1);

		OnBattlePass_Perfomance(playerid, 20, 1);
	}
	if(type == 2) // поднять всю машину
	{
		if(GetOwnableCarData(index, OC_PNEWMA_2) >= 0.5) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);

		SetOwnableCarData(index, OC_PNEWMA_2, GetOwnableCarData(index, OC_PNEWMA_2) + 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
	
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_2));
		GameText(playerid, query, 3000, 1);

		GetVehiclePos(vehicleid, x, y, z);
   		GetVehicleZAngle(vehicleid, angle);

		SetVehiclePos(vehicleid, x, y, z + 0.05);
    	SetVehicleZAngle(vehicleid, angle);

		OnBattlePass_Perfomance(playerid, 20, 1);
	}
	if(type == 3) // занизить всю машину
	{
		if(GetOwnableCarData(index, OC_PNEWMA_2) <= -0.5) return GameText(playerid, "~r~Максимальный наклон", 3000, 1);

		SetOwnableCarData(index, OC_PNEWMA_2, GetOwnableCarData(index, OC_PNEWMA_2) - 0.1);
		UpdateVehicleHandling(playerid, vehicleid);
	
		format(query, sizeof query, "Наклон~n~~o~%.2f", 1.0 + GetOwnableCarData(index, OC_PNEWMA_2));
		GameText(playerid, query, 3000, 1);

		GetVehiclePos(vehicleid, x, y, z);
    	GetVehicleZAngle(vehicleid, angle);

		SetVehiclePos(vehicleid, x, y, z + 0.05);
    	SetVehicleZAngle(vehicleid, angle);

		OnBattlePass_Perfomance(playerid, 20, 1);
	}
	
	if(type == 4) // закрытие цефа
	{
		CEF_HIDE(playerid, "TuningPlayerPneuma");
	}
	return 1;
}

public: Tuning_OnTuningPneumaEvent(playerid, type)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    
    if(vehicleid == 0) // Если игрок не в транспортном средстве
    {
        GameText(playerid, "Вы не в транспорте", 3000, 2);
        return 1;
    }

	new index = GetVehicleData(vehicleid, V_ACTION_ID);
			
	if(type == 4) // покупка
	{
		if(GetOwnableCarData(index, OC_PNEWMA) == 0)
		{
			if(GetOwnableCarData(index, OC_GIDRA) == 1087)
            {
                GameText(playerid, "Для установки снимите гидравлику", 4000, 2);
            }
            else
            {
                IntfDialogCallRemote
                (
                    playerid, DIALOG_PNEWMA_BUY, DIALOG_STYLE_MSGBOX, 
                    "{FFFFFF}Подтверждение", 
                    "{FFFFFF}Вы подтверждаете покупку и установку пневматической подвески?\n\n\
                    {c07700}Стоимость комплекта: 1.000.000 RUB\n\n\
                    {FFFFFF}Вы сможете управлять установленной подвеской при помощи\n\
                    {FFFFFF}специального пульта: {cfa62d}/spanel{FFFFFF}.", 
                    "Да", "Отмена"
                );
            }
		}
	}
	else if(type == 5)
	{
		if(GetOwnableCarData(index, OC_PNEWMA) == 1)
		{
			IntfDialogCallRemote
			(
				playerid, DIALOG_PNEWMA_DESTROY, DIALOG_STYLE_MSGBOX, 
				"{FFFFFF}Подтверждение", 
				"{FFFFFF}Вы подтверждаете снятие и продажу пневматической подвески?\n\n\
				{c07700}Вам вернут 25% от стоимости: 750.000 RUB",
				"Да", "Отмена"
			);
		}
	}
	else if(type == 6) // выход
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, -413.4231,1010.6860,12.0819);
		SetVehicleZAngle(vehicleid, 2.8581);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SpeedometrShowForPlayer(playerid);
	}
	else 
	{
		GameText(playerid, "В разработке", 3000, 2);
	}
    return 1;
}

public:Tuning_OnPlayerEventSpring(playerid, event, category) // Спил пружин на автомобиле (CEF)
{
   	if(event == 0)
    {
		ModifyCashBalance(playerid, -1, "Покупка пневмы");
    }
    if(event == 1)
    {
		if(category == 0)
		{
     		new query[512];
	       	new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!VerifyIntString(QueryPlayerBalance(playerid), 10000000)) return SendClientMessage(playerid, -1, "У вас недостаточно денег.");

			ModifyCashBalance(playerid, -10000000, "Покупка пневмы");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET cutsprings=1 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(category == 1)
		{
     		new query[512];
	       	new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!VerifyIntString(QueryPlayerBalance(playerid), 5000000)) return SendClientMessage(playerid, -1, "У вас недостаточно денег.");
			ModifyCashBalance(playerid, -5000000, "Покупка спила");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET cutsprings=2 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(category == 2)
		{
     		new query[512];
	       	new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!VerifyIntString(QueryPlayerBalance(playerid), 1000000)) return SendClientMessage(playerid, -1, "У вас недостаточно денег.");
			ModifyCashBalance(playerid, -1000000, "Покупка спила");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET cutsprings=3 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(category == 3)
		{
     		new query[512];
	       	new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!VerifyIntString(QueryPlayerBalance(playerid), 1000000)) return SendClientMessage(playerid, -1, "У вас недостаточно денег.");
			ModifyCashBalance(playerid, -1000000, "Покупка спила");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET cutsprings=4 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(category == 4)
		{
     		new query[512];
	       	new vehicleid = GetPlayerVehicleID(playerid);
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
            ModifyCashBalance(playerid, -1000000, "Покупка спила");
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET cutsprings=5 WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
			mysql_query(mysql, query, false);
		}
    }
    if(event == 2)
    {
  		new vehicleid = GetPlayerVehicleID(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);
		SetVehiclePos(vehicleid, 2566.1233,-1890.2800,21.5946);
		SetVehicleZAngle(vehicleid, 275.3137);
		SetCameraBehindPlayer(playerid);

		TogglePlayerControllable(playerid, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 0);

		CEF_CREATE(playerid, 1, 2, "showInterface('Hud')");
		SpeedometrShowForPlayer(playerid);
		CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
    }
	if(event == 3)
	{
		if(category == 0)
		{
            new vehicleid = GetPlayerVehicleID(playerid);
			//SetPlayerGravity(playerid, 0.008);
			SetVehicleSpeed(vehicleid, 3);
		}
		if(category == 1)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			//SetPlayerGravity(playerid, 0.0100);
			SetVehicleSpeed(vehicleid, -3);
		}
		if(category == 2)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			//SetPlayerGravity(playerid, 0.0130);
			SetVehicleSpeed(vehicleid, 3);
		}
		if(category == 3)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			//SetPlayerGravity(playerid, 0.0170);
			SetVehicleSpeed(vehicleid, -3);
		}
		if(category == 4)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			//SetPlayerGravity(playerid, 0.0205);
			SetVehicleSpeed(vehicleid, 3);
		}
    }
    if(event == 4)
    {
		SetPVarInt(playerid, "spil", 1);
  		new vehicleid = GetPlayerVehicleID(playerid);
  		CEF_CREATE(playerid, 1, 2, "closeInterface('TuningSprings')");
		SetPlayerVirtualWorld(playerid, 1);
		SetVehicleVirtualWorld(vehicleid, 1);
		SetVehiclePos(vehicleid, 2566.1233,-1890.2800,21.5946);
		SetVehicleZAngle(vehicleid, 275.3137);
		SetCameraBehindPlayer(playerid);

		TogglePlayerControllable(playerid, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1);

		LinkVehicleToInterior(vehicleid, 0);
		SetVehicleVirtualWorld(vehicleid, 1);

		CEF_CREATE(playerid, 1, 2, "showInterface('Hud')");
		SpeedometrShowForPlayer(playerid);
		CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
    }
    if(event == 5)
    {
	}
	return 1;
}

public:ClickPlayerShipMenuButton(playerid, event)
{
	if(event == 1)
	{
		if(!VerifyIntString(QueryPlayerBalance(playerid), 100000))
		    return SCM(playerid, 0xCECECEFF, "У вас недостаточно средств!");

		ModifyCashBalance(playerid, -100000, "Билет в Майами");

		SCM(playerid, 0xCECECEFF, "Вы успешно прибыли в Майами!");
        GameText(playerid, "Вы успешно прибыли в Майами!", 2000, 3);

		SetPlayerPos(playerid, -5361.2671,-4725.9209,3.0708);

		CEF_HIDE(playerid, "MiamiTicket");
		
		//BattlePass_Completingtasks(playerid, 1, 15);
	}
	if(event == 2)
	{
		page_cars[playerid] = 1;
		type_page_cars[playerid] = 3;
		ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);

	}
	if(event == 3)
	{
		CEF_HIDE(playerid, "MiamiTicket");
	}
	return 1;
}

stock IsACarshCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock GetFreeCarshCarID()
{
	for(new idx; idx < sizeof g_carsh_car; idx ++)
	{
		if(GetCarshCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

public:CarsharingPrice(playerid){
	pricecarsharing[playerid] = pricecarsharing[playerid] + 1;
	return 1;
}

public:UpdateCarsheringCar(playerid){
	KillTimer(timecarshs[playerid]);
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(4, '[%d,%d]')", GetPlayerData(playerid, P_CARSH_CAR), GetPlayerData(playerid, P_CARSH_TIME));
	CEF_CREATE(playerid, 1, 2,STRING_GLOBAL);
	return 1;
}

public:UpdateCarshering(playerid){
    new Float: pos_x, Float: pos_y, Float: pos_z, Float: angle;
    GetPlayerFacingAngle(playerid, angle);
    GetPlayerPos(playerid, pos_x, pos_y, pos_z);

    new Float: pos_xs, Float: pos_ys, Float: pos_zs, Float:angll;

    GetVehiclePos(GetPlayerData(playerid, P_CARSH_CAR), pos_xs,pos_ys,pos_zs);
	GetVehicleZAngle(GetPlayerData(playerid, P_CARSH_CAR), angll);

	STRING_GLOBAL[0] = EOS;
	if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f],[%f,%f,%f]]')", pos_x, pos_y, angle,pos_xs, pos_ys, angll);
		CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
    else
    {
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, angle);
	    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	}
    new query[170];
	STRING_GLOBAL[0] = EOS;
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
		{
		  	new Float: x, Float: y, Float: pos_zp,Float: angl;

			GetVehiclePos(i, x,y,pos_zp);
			GetVehicleZAngle(i, angl);
			new index = GetVehicleData(i, V_ACTION_ID);
		    new modelid = GetVehicleData(i, V_MODELID);
			format(query, sizeof query, ",[%f,%f,%f,%d,%f,%f,%f,%d,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(index, OC_PRICE),GetVehicleData(i, V_FUEL),GetVehicleData(i, V_MILEAGE),GetCarshCarData(index, OC_IZNOS),GetCarshCarData(index, OC_MASLO),i, GetCarshCarData(index, OC_NUMBER), GetCarshCarData(index, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
			strcat(STRING_GLOBAL, query);

    	}
    }
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(2, '[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]')", STRING_GLOBAL);
    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

}

public: CarSH_OnPlayerRequest(playerid, app_id, xz, ssss)
{
	if(app_id == 0)
	{
		KillTimer(timecarsh[playerid]);
	    timecarsh[playerid] = SetTimerEx("UpdateCarshering", 1000, true, "i", playerid);
		CEF_CREATE(playerid, 1, 2, "interface('Phone').getApp('carsharing').onServerResponse(0, '[1,0]')");
	    new Float: pos_x, Float: pos_y, Float: pos_z, Float: angle;
	    GetPlayerFacingAngle(playerid, angle);
	    GetPlayerPos(playerid, pos_x, pos_y, pos_z);

		STRING_GLOBAL[0] = EOS;
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(1, '[[%f,%f,%f]]')", pos_x, pos_y, angle);
	    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);


	    new query[170];
		STRING_GLOBAL[0] = EOS;
		for(new i = 1; i < MAX_VEHICLES; i++)
		{
			if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
			{
			  	new Float: x, Float: y, Float: pos_zp,Float: angl;

				GetVehiclePos(i, x,y,pos_zp);
				GetVehicleZAngle(i, angl);
				new index = GetVehicleData(i, V_ACTION_ID);
			    new modelid = GetVehicleData(i, V_MODELID);
				format(query, sizeof query, ",[%f,%f,%f,%d,71,195.04,0.45,83.95,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(index, OC_PRICE),i, GetCarshCarData(index, OC_NUMBER), GetCarshCarData(index, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
				strcat(STRING_GLOBAL, query);

	    	}
	    }
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(2, '[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]')", STRING_GLOBAL);
	    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	    {
            timecarshs[playerid] = SetTimerEx("UpdateCarsheringCar", 1000, true, "i", playerid);
	 	}

	}
	if(app_id == 4)
	{
	    if(GetPlayerData(playerid, P_CARSH_CAR) != INVALID_VEHICLE_ID)
	    {
	        SCM(playerid, -1, "Вы уже арендовали авто.");
	    }
	    else
	    {
		    new index = GetVehicleData(xz, V_ACTION_ID);
		    if(!VerifyIntString(QueryPlayerBalance(playerid), 500)) return SendClientMessage(playerid, 0x999999FF, "Недостаточно средств для аренды авто");
		    if(GetCarshCarData(index, OC_RENT_OWNER) == -1)
		    {
                SCM(playerid, COLOR_BLUENEW, "Вы успешно арендовали данный транспорт");
		 		CEF_CREATE(playerid, 1, 2,"interface('GameText').add('[3,\"~g~Успешно\",1000,0,-1,1]')");
		 		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(4, '[%d,%d]')", xz, gettime());
		 		pricecarsharing[playerid] = 1;
		 		timecarsharingprice[playerid] = SetTimerEx("CarsharingPrice", 60000, true, "i", playerid);
		 		CEF_CREATE(playerid, 1, 2,STRING_GLOBAL);
		 		SetPlayerData(playerid, P_CARSH_CAR, xz);
		 		SetPlayerData(playerid, P_CARSH_TIME, gettime());
		 		SetCarshCarData(index, OC_RENT_OWNER, GetPlayerAccountID(playerid));
		 		DestroyVehicleLabel(xz);
		 	}
		 	else
		 	{
		 	    CEF_CREATE(playerid, 1, 2,"interface('GameText').add('[3,\"~r~Ошибка транспорт уже арендован\",2000,0,-1,1]')");
		 	    return 1;
		 	}
		}
	}
	if(app_id == 5)
	{
	    new index = GetVehicleData(xz, V_ACTION_ID);
	    if(GetCarshCarData(index, OC_RENT_OWNER) == GetPlayerAccountID(playerid))
	    {
			STRING_GLOBAL[0] = EOS;
	        SCM(playerid, -1, "Вы успешно закончили аренду авто.");
	        RemovePlayerFromVehicle(playerid);
            KillTimer(timecarsharingprice[playerid]);
            format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Цена за аренду авто составила: %d рублей", GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid]);
            SCM(playerid, -1, STRING_GLOBAL);

	    	ModifyCashBalance(playerid, -GetCarshCarData(index, OC_PRICE) * pricecarsharing[playerid], "аренда авто", true, true);
	    	pricecarsharing[playerid] = 1;
			new typeauto[24];
		    if(GetCarshCarData(index, OC_VINIL) == 0)
		    {
		        format(typeauto, 11, "Бип Drive");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 1)
		    {
		        format(typeauto, 12, "Кар Шеринг");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 2)
		    {
		        format(typeauto, 12, "Crown Car");
		    }
		    if(GetCarshCarData(index, OC_VINIL) == 3)
		    {
		        format(typeauto, 12, "WOW Drive");
		    }

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(index, OC_MODEL_ID), VI_NAME), GetCarshCarData(index, OC_MODEL_ID), GetCarshCarData(index, OC_PRICE));
	        CreateVehicleLabel(xz, STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);

	        SetCarshCarData(index, OC_RENT_OWNER, -1);
	        SetPlayerData(playerid, P_CARSH_CAR, INVALID_VEHICLE_ID);
		    new query[170];
			for(new i = 1; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_CARSH_CAR)
				{
				  	new Float: x, Float: y, Float: pos_zp,Float: angl;

					GetVehiclePos(i, x,y,pos_zp);
					GetVehicleZAngle(i, angl);
					new indexs = GetVehicleData(i, V_ACTION_ID);
				    new modelid = GetVehicleData(i, V_MODELID);
					format(query, sizeof query, ",[%f,%f,%f,%d,71,195.04,0.45,83.95,%d,\"%s %s\",\"%s\",10,1,0,%d]", x, y, angl, GetCarshCarData(indexs, OC_PRICE),i, GetCarshCarData(indexs, OC_NUMBER), GetCarshCarData(indexs, OC_REGION), GetVehicleInfo(modelid , VI_NAME),modelid);
					strcat(STRING_GLOBAL, query);

		    	}
		    }
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Phone').getApp('carsharing').onServerResponse(5, '[%d,[[542.86,2822.77,268.79,1000,71,195.04,0.45,83.95,139,\"Y329AP 105\",\"Ford Focus 3\",10,1,0,15196] %s ]]')", xz ,STRING_GLOBAL);
		    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
		}
	}
	return 1;
}

public: LoadRentCar()
{
    new rows, vehicleid;
    new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM arenda_cars", true);
	rows = cache_num_rows();
	new idx;
    for(idx = 0; idx < rows; idx ++)
    {

		SetRentCarData(idx, R_SQL_ID, 		cache_get_field_content_int(idx, "id"));
        new idm = idx;
		SetRentCarData(idm, R_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetRentCarData(idm, R_RENT_BIZ, 	cache_get_field_content_int(idx, "owner_id"));
		SetRentCarData(idm, R_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetRentCarData(idm, R_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));

		SetRentCarData(idm, R_IZNOS,		cache_get_field_content_float(idx, "iznos"));
		SetRentCarData(idm, R_MASLO, 		cache_get_field_content_float(idx, "maslo"));

		SetRentCarData(idm, R_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetRentCarData(idm, R_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetRentCarData(idm, R_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetRentCarData(idm, R_ANGLE, 		cache_get_field_content_float(idx, "angle"));

		SetRentCarData(idm, R_KOLESO_1, 		cache_get_field_content_float(idx, "koleso_1"));
		SetRentCarData(idm, R_KOLESO_2, 		cache_get_field_content_float(idx, "koleso_2"));
		SetRentCarData(idm, R_KOLESO_3, 		cache_get_field_content_float(idx, "koleso_3"));
		SetRentCarData(idm, R_KOLESO_4, 		cache_get_field_content_float(idx, "koleso_4"));

        SetRentCarData(idm, R_PRICE, 		cache_get_field_content_int(idx, "price"));
        SetRentCarData(idm, R_MESTO, 		cache_get_field_content_int(idx, "mesto"));
		SetRentCarData(idm, R_CREATE, 		cache_get_field_content_int(idx, "create_time"));
        SetRentCarData(idm, R_RENT_OWNER, 		-1);

		if(GetRentCarData(idm, R_RENT_BIZ) == 56)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[0][i][0],Rent_Mesto[0][i][1],Rent_Mesto[0][i][2],Rent_Mesto[0][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		if(GetRentCarData(idm, R_RENT_BIZ) == 57)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[1][i][0],Rent_Mesto[1][i][1],Rent_Mesto[1][i][2],Rent_Mesto[1][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		if(GetRentCarData(idm, R_RENT_BIZ) == 58)
		{
			for(new i; i < 8; i++)
			{
				if(GetRentCarData(idm, R_MESTO) == i) vehicleid = CreateVehicle(GetRentCarData(idm, R_MODEL_ID),Rent_Mesto[2][i][0],Rent_Mesto[2][i][1],Rent_Mesto[2][i][2],Rent_Mesto[2][i][3],GetRentCarData(idm, R_COLOR_1),GetRentCarData(idm, R_COLOR_2),-1,0,VEHICLE_ACTION_TYPE_RENT_CAR,idx);
			}
		}
		new query[144];
		mysql_format(mysql, query, sizeof query, "UPDATE arenda_cars SET vehicleid=%d WHERE id=%d", vehicleid, GetRentCarData(idm, R_SQL_ID));
		mysql_query(mysql, query, false);

        SetVehicleVirtualWorld(vehicleid, cache_get_field_content_int(idx, "world"));

		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);

		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "milleage") );


		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());

	}
	cache_delete(result);
	printf("Загружено авто для аренды %d",  rows);
}

public: CreateCarsharingCar()
{
    new rows, vehicleid;
    new Cache: result;

	result = mysql_query(mysql, "SELECT * FROM carsharing_cars", true);
	rows = cache_num_rows();
	new idx;
    for(idx = 0; idx < rows; idx ++)
    {

		SetCarshCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
        new idm = idx;
		SetCarshCarData(idm, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetCarshCarData(idm, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetCarshCarData(idm, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));
		SetCarshCarData(idm, OC_VINIL, 		cache_get_field_content_int(idx, "vinil"));

		SetCarshCarData(idm, OC_IZNOS,		cache_get_field_content_int(idx, "iznos"));
		SetCarshCarData(idm, OC_MASLO, 		cache_get_field_content_int(idx, "maslo"));

		SetCarshCarData(idm, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetCarshCarData(idm, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetCarshCarData(idm, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetCarshCarData(idm, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));

        SetCarshCarData(idm, OC_PRICE, 		cache_get_field_content_int(idx, "price"));
		SetCarshCarData(idm, OC_ALARM, 		bool: cache_get_field_content_int(idx, "alarm"));
		SetCarshCarData(idm, OC_KEY_IN, 		cache_get_field_content_int(idx, "key_in"));

		SetCarshCarData(idm, OC_CREATE, 		cache_get_field_content_int(idx, "create_time"));
        SetCarshCarData(idm, OC_RENT_OWNER, 		-1);

		vehicleid = CreateVehicle
		(
			GetCarshCarData(idm, OC_MODEL_ID),
			GetCarshCarData(idm, OC_POS_X),
			GetCarshCarData(idm, OC_POS_Y),
			GetCarshCarData(idm, OC_POS_Z),
			GetCarshCarData(idm, OC_ANGLE),
			GetCarshCarData(idm, OC_COLOR_1),
			GetCarshCarData(idm, OC_COLOR_2),
			-1,
			0,
			VEHICLE_ACTION_TYPE_CARSH_CAR,
			idx
		);
		new typeauto[24];
	    if(GetCarshCarData(idm, OC_VINIL) == 0)
	    {
	        format(typeauto, 11, "Бип Drive");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 1)
	    {
	        format(typeauto, 12, "Кар Шеринг");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 2)
	    {
	        format(typeauto, 12, "Crown Car");
	    }
	    if(GetCarshCarData(idm, OC_VINIL) == 3)
	    {
	        format(typeauto, 12, "WOW Drive");
	    }

		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{20B2AA}Аренда авто '%s' \n\n Транспорт {ffffff}%s (№%d) \n {20B2AA}Статус: {ffffff}свободен\n{20B2AA}Цена за минуту: {ffffff}%d рублей\n\n{20B2AA}Для {ffffff}начала аредны {20B2AA}воспользуйтесь\n приложением в {ffffff}телефоне", typeauto,GetVehicleInfo(GetCarshCarData(idm, OC_MODEL_ID), VI_NAME), GetCarshCarData(idm, OC_MODEL_ID), GetCarshCarData(idm, OC_PRICE));
        CreateVehicleLabel(vehicleid, STRING_GLOBAL, 0xFFFFFFFF, 0.0, 0.0, 0.5, 5.0);

		SetVehicleData(vehicleid, V_TYPENUM, 1);
		SetVehicleNumber(vehicleid, 1, GenerateCarNumberRu(), GenerateCarRegRu());
		SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_OFF);

		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "milleage") );

		ChangeVehicleViniljob(vehicleid, GetCarshCarData(idm, OC_VINIL));

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());

		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(idx, "fuel"));
	}
	cache_delete(result);
	printf("Загружено авто для аренды %d",  rows);
}

stock GenerateCarRegRu()
{
	new numberrru[4] = EOS;
	format(numberrru, sizeof numberrru, "%d", RandomEx(10, 199));
	return numberrru;
}

stock GenerateCarNumberRu()
{
	static const chars[12] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X', 'Y'};
	new number[7] = EOS;

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];
	return number;
}

stock SetVehiclePosAc(vehicleid, Float: x, Float:y, Float:z, Float:angle)
{
	SetVehiclePos(vehicleid, x,y,z);
	SetVehicleZAngle(vehicleid, angle);
}
public: testdrive(playerid, vehicleid)
{
	SetPVarInt(playerid, "in_test_drive", 0);
	new index = GetVehicleData(vehicleid, V_ACTION_ID);
	SendClientMessage(playerid, 0x66CC00FF, "Время тест-драйва закончено!");
	if(GetOwnableCarData(index, OC_BY_ID) == 2)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 21)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_1],g_load_car_market[indx][POS_MESTO_Y_1],g_load_car_market[indx][POS_MESTO_Z_1],g_load_car_market[indx][POS_MESTO_ANGEL_1]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	if(GetOwnableCarData(index, OC_BY_ID) == 1)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 20)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_2],g_load_car_market[indx][POS_MESTO_Y_2],g_load_car_market[indx][POS_MESTO_Z_2],g_load_car_market[indx][POS_MESTO_ANGEL_2]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	if(GetOwnableCarData(index, OC_BY_ID) == 3)
	{
	    SetVehicleParam(vehicleid, V_ENGINE, false);
		new indx = GetOwnableCarData(index, OC_MESTOID);
		if(indx >= 1 || indx <= 13)
		{
			SetVehiclePosAc(vehicleid, g_load_car_market[indx][POS_MESTO_X_3],g_load_car_market[indx][POS_MESTO_Y_3],g_load_car_market[indx][POS_MESTO_Z_3],g_load_car_market[indx][POS_MESTO_ANGEL_3]);
			LinkVehicleToInterior(vehicleid, 4);
			SetVehicleVirtualWorld(vehicleid, 4);
			SetPlayerInterior(playerid, 4);
			SetPlayerVirtualWorld(playerid, 4);
		}
	}
	return 1;
}


public: arendatimer(playerid)
{

}

stock SetPlayerPosAcc(playerid, Float:x, Float:y, Float:z, Float:angle)
{
    if(playerid != INVALID_PLAYER_ID)
	{
        //
        SetPlayerPos(playerid, x, y, z);
        SetPlayerFacingAngle(playerid, angle);
    }
}

stock DropYas(playerid) // подноса
{
	TOTALY ++;
	new Float:f[4],string[50];
	GetPlayerPos(playerid,f[0],f[1],f[2]);
	DYaz[TOTALY][g_y][0] = f[0];
	DYaz[TOTALY][g_y][1] = f[1];
	DYaz[TOTALY][g_y][2] = f[2] - 0.95;
	DYaz[TOTALY][g_yid] = CreateDynamicObject(10024, f[0], f[1], f[2]-0.95, -23.3600, 22.6000, 90.0);
	DYaz[TOTALY][g_ypod] = 1;
	SetPVarInt(playerid,"respeat",0);
	format(string, 50, "       Поднять\n       {027BEB}/pick");
	DYaz[TOTALY][g_text] = Create3DTextLabel(string, COLOR_GOLD, f[0], f[1], f[2]-0.95, 20.0,0,0);
    g_podnos_alt[TOTALY] = CreateDynamicSphere(f[0], f[1], f[2], 2.0, -1, -1);
	return true;
}

stock ProxDetector(Float:radi, playerid, str[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i:Player)
	{
		GetPlayerPos(i, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SendClientMessage(i, col1, str);
		else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SendClientMessage(i, col2, str);
		else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SendClientMessage(i, col3, str);
		else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SendClientMessage(i, col4, str);
		else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SendClientMessage(i, col5, str);
	}
	return true;
}

stock ShowDisplayText(playerid, text[], time)
{
	format(STRING_GLOBAL, sizeof STRING_GLOBAL,"[\"%s\"]",text);
	CEF_CREATE(playerid, 2, 4, "DisplayText", STRING_GLOBAL);
	SetTimerEx("CloseDisplayText", time, false, "i", playerid);
}
public: CloseDisplayText(playerid){CEF_HIDE(playerid, "DisplayText");}

stock LoadBillBoard()
{
	new Cache:result, rows;
	result = mysql_query(mysql, "SELECT * FROM `billboard`");
	rows = cache_num_rows();
	new billtext[32 + 1];
	if(rows)
	{
		for(new i; i < rows; i++)
		{
		    billboardsload[i] = billboardsload[i] + 1;
			BillInfo[i][BillID] = cache_get_field_content_int(i, "id");
			BillInfo[i][BillType] = cache_get_field_content_int(i, "type");
			BillInfo[i][BillPosX] = cache_get_field_content_float(i, "pos_x", mysql);
			BillInfo[i][BillPosY] = cache_get_field_content_float(i, "pos_y", mysql);
			BillInfo[i][BillPosZ] = cache_get_field_content_float(i, "pos_z", mysql);
			BillInfo[i][BillRotX] = cache_get_field_content_float(i, "rot_x", mysql);
			BillInfo[i][BillRotY] = cache_get_field_content_float(i, "rot_y", mysql);
			BillInfo[i][BillRotZ] = cache_get_field_content_float(i, "rot_z", mysql);

            format(BillInfo[i][BillText_1], 14, "Пустая строка");
            format(BillInfo[i][BillText_2], 14, "Пустая строка");
            format(BillInfo[i][BillText_3], 14, "Пустая строка");

			BillInfo[i][BillID] = CreateDynamicObject(3627, BillInfo[i][BillPosX], BillInfo[i][BillPosY], BillInfo[i][BillPosZ], BillInfo[i][BillRotX], BillInfo[i][BillRotY], BillInfo[i][BillRotZ]);
			SetDynamicObjectMaterial(BillInfo[i][BillID], 2, 3627, "pilorama", "Ads-0", 0);
			BillInfo[i][BillIDText] = CreateDynamicObject(14267, BillInfo[i][BillPosX], BillInfo[i][BillPosY], BillInfo[i][BillPosZ], BillInfo[i][BillRotX], BillInfo[i][BillRotY], BillInfo[i][BillRotZ]);
			SetDynamicObjectMaterialText(BillInfo[i][BillIDText], 0, "Свободный биллборд\n\nДля аренды обратитесь в организацию\n\"ТРК Ритм\" или нажмите N\n", 130, "Arial", 30, 1, 0xFFFFFFFF, 0, 1);
			format(billtext, sizeof billtext, "{FFA500}Билборд: {FFFFFF}%d", i + 1);
			CreateDynamic3DTextLabel(billtext, 0xFFA500FF, BillInfo[i][BillPosX], BillInfo[i][BillPosY], BillInfo[i][BillPosZ] - 4.0, 10.0);
		}
		printf("[Билборды]: Билбордов создано: %d", rows);
	}
	cache_delete(result);
}

public: OnPlayerSelectBillboardItem(playerid, id)
{
    new bill_id = GetPVarInt(playerid, "select_billboard");
	if(GetPVarInt(playerid, "typebill1") == 1)
	{
	    new fmt_str[144];
		format(fmt_str, sizeof fmt_str, "Ads-%d", id);
		SetDynamicObjectMaterial(BillInfo[bill_id][BillID], 2, 3627, "pilorama", fmt_str, 0);
		BillInfo[bill_id][BillType] = id;
	}
	if(id == 0) SetPVarInt(playerid, "typebill2", 0),SetPVarInt(playerid, "typebill3", 0),SetPVarInt(playerid, "typebill4", 0),SetPVarInt(playerid, "typebill5", 0),SetPVarInt(playerid, "typebill1", 1);
	if(id == 1) SetPVarInt(playerid, "typebill2", 0),SetPVarInt(playerid, "typebill3", 0),SetPVarInt(playerid, "typebill4", 0),SetPVarInt(playerid, "typebill5", 0),SetPVarInt(playerid, "typebill2", 1);
	if(id == 2) SetPVarInt(playerid, "typebill2", 0),SetPVarInt(playerid, "typebill3", 0),SetPVarInt(playerid, "typebill4", 0),SetPVarInt(playerid, "typebill5", 0),SetPVarInt(playerid, "typebill3", 1);
	if(id == 3) SetPVarInt(playerid, "typebill2", 0),SetPVarInt(playerid, "typebill3", 0),SetPVarInt(playerid, "typebill4", 0),SetPVarInt(playerid, "typebill5", 0),SetPVarInt(playerid, "typebill4", 1);
	if(id == 4) SetPVarInt(playerid, "typebill2", 0),SetPVarInt(playerid, "typebill3", 0),SetPVarInt(playerid, "typebill4", 0),SetPVarInt(playerid, "typebill5", 0),SetPVarInt(playerid, "typebill5", 1);
}
public: OnPlayerSetupBillboard(playerid, id, type)
{
    new bill_id = GetPVarInt(playerid, "select_billboard");
    
	string_dialog[0] = EOS;
	if(id == -1)
	{
	    SetDynamicObjectMaterialText(BillInfo[bill_id][BillIDText], 0, "Свободный биллборд\n\nДля аренды обратитесь в организацию\n\"ТРК Ритм\" или нажмите N\n", 130, "Arial", 30, 1, 0xFFFFFFFF, 0, 1);
	    SetCameraBehindPlayer(playerid);
	    SetPVarInt(playerid, "typebill1", 0);
	    SetPVarInt(playerid, "typebill2", 0);
	    SetPVarInt(playerid, "typebill3", 0);
	    SetPVarInt(playerid, "typebill4", 0);
	    SetPVarInt(playerid, "typebill5", 0);
	    new fmt_str[144];
		format(fmt_str, sizeof fmt_str, "Ads-0");
		SetDynamicObjectMaterial(BillInfo[bill_id][BillID], 2, 3627, "pilorama", fmt_str, 0);
		BillInfo[bill_id][BillStatus] = 0;
		BillInfo[bill_id][BillArendaTime] = 0;

        SetPlayerPos(playerid, GetPVarFloat(playerid, "pos_x"), GetPVarFloat(playerid, "pos_y"), GetPVarFloat(playerid, "pos_z"));
        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "player_world"));
        SetPlayerInterior(playerid, GetPVarInt(playerid, "player_int"));

	}
	//format(STRING_GLOBAL, sizeof STRING_GLOBAL, "%d %d", id, type);
	//SendClientMessage(playerid, -1, STRING_GLOBAL);
	if(id == 0)
	{
	    SetPVarInt(playerid, "typebill1", 0);
	    SetPVarInt(playerid, "typebill2", 0);
	    SetPVarInt(playerid, "typebill3", 0);
	    SetPVarInt(playerid, "typebill4", 0);
	    SetPVarInt(playerid, "typebill5", 0);
	}
	if(id == 1)
	{
	    if(GetPVarInt(playerid, "typebill1") == 1)
	    {
		    SetPVarInt(playerid, "typebill2", 0);
		    SetPVarInt(playerid, "typebill3", 0);
		    SetPVarInt(playerid, "typebill4", 0);
		    SetPVarInt(playerid, "typebill5", 0);
		    CEF_CREATE(playerid, 1, 2, "interface('Billboard').setTab(1)");
	    }
	    if(GetPVarInt(playerid, "typebill2") == 1)
	    {
	        SetPVarInt(playerid, "typebill1", 0);
		    SetPVarInt(playerid, "typebill3", 0);
		    SetPVarInt(playerid, "typebill4", 0);
		    SetPVarInt(playerid, "typebill5", 0);
	        CEF_CREATE(playerid, 1, 2, "interface('Billboard').setTab(0)");

	        format(string_dialog, sizeof string_dialog, "%s<n>%s<n>%s<n>", BillInfo[bill_id][BillText_1], BillInfo[bill_id][BillText_2], BillInfo[bill_id][BillText_3]);

	        IntfDialogCallRemote(playerid, DIALOG_BILLBOR_SELEC_STROK, DIALOG_STYLE_LIST, "Выберите строку", string_dialog, "Далее", "Закрыть");
	    }
	    if(GetPVarInt(playerid, "typebill3") == 1)
	    {
	        SetPVarInt(playerid, "typebill1", 0);
		    SetPVarInt(playerid, "typebill2", 0);
		    SetPVarInt(playerid, "typebill4", 0);
		    SetPVarInt(playerid, "typebill5", 0);
	        CEF_CREATE(playerid, 1, 2, "interface('Billboard').setTab(0)");
	        IntfDialogCallRemote(playerid, DIALOG_BILLBORD_SELECT_COL, DIALOG_STYLE_LIST, "Выберите цвет текста", "{FFFFFF}Белый<n>{D1D1D1}Серый<n>", "Готово", "Закрыть");
	    }
	    if(GetPVarInt(playerid, "typebill4") == 1)
	    {
	        SetPVarInt(playerid, "typebill1", 0);
		    SetPVarInt(playerid, "typebill2", 0);
		    SetPVarInt(playerid, "typebill3", 0);
		    SetPVarInt(playerid, "typebill5", 0);
	        CEF_CREATE(playerid, 1, 2, "interface('Billboard').setTab(0)");
	        IntfDialogCallRemote(playerid, DIALOG_BILLBOARD_ARENDA1, DIALOG_STYLE_INPUT, "Настройка биллборда", "{FFFFFF}На сколько часов вы хотите арендовать биллборд?", "Готово", "Назад");
	    }
	    if(GetPVarInt(playerid, "typebill5") == 1)
	    {
	        SetPVarInt(playerid, "typebill1", 0);
		    SetPVarInt(playerid, "typebill2", 0);
		    SetPVarInt(playerid, "typebill3", 0);
		    SetPVarInt(playerid, "typebill4", 0);
	        CEF_CREATE(playerid, 1, 2, "interface('Billboard').setTab(0)");
	        if(BillInfo[bill_id][BillArendaTime] != 0)
	        {
	            IntfDialogCallRemote(playerid, DIALOG_BILLBOARD_ARENDA2, DIALOG_STYLE_MSGBOX, "Подтверждение аренды", "Желаете оформить аренду билборда за {FFA500}30000 руб{"#cW"}?", "Да", "Нет");
	        }
	        else
	        {
         		CEF_CREATE(playerid, 1, 2, "interface('GameText').add('[2,\"~r~Вы не указали длительность аренды.\",3000,0,-1,1]')");
	        }
	    }
	}
}
public: OnPlayerEventRentCar(playerid, id)
{
	if(id < 0) return 1;
    new biz_id = GetPVarInt(playerid, "arenda_id");
    new vhid = GetPVarInt(playerid, "vehid_arenda");
    new indexs = GetVehicleData(vhid, V_ACTION_ID);
	if(id == 0)
	{
	    if(GetRentCarData(indexs, R_RENT_BIZ) == biz_id && GetRentCarData(indexs, R_RENT_BIZ) == 56 || GetRentCarData(indexs, R_RENT_BIZ) == 57 || GetRentCarData(indexs, R_RENT_BIZ) == 58)
	    {
		    if(arendavibor[playerid] == 0)
		    {
		        arendavibor[playerid] = 1;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								SetPVarInt(playerid, "vehid_arenda", i);
								new Float:X,Float:Y,Float:Z;
								GetVehiclePos(i, X,Y,Z);
								SetPlayerVirtualWorld(playerid, biz_id);
								SetVehicleVirtualWorld(i, biz_id);
								SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
								SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
								return 1;
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 7)
		    {
		        arendavibor[playerid] = 0;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 6)
		    {
		        arendavibor[playerid] = 7;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 5)
		    {
		        arendavibor[playerid] = 6;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 4)
		    {
		        arendavibor[playerid] = 5;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X- 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 3)
		    {
		        arendavibor[playerid] = 4;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 3 || GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 2)
		    {
		        arendavibor[playerid] = 3;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) == 2 || GetRentCarData(index, R_MESTO) == 3 || GetRentCarData(index, R_MESTO) == 4 || GetRentCarData(index, R_MESTO) == 5 || GetRentCarData(index, R_MESTO) == 6 || GetRentCarData(index, R_MESTO) == 7)
								{
								    SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
								    SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		    if(arendavibor[playerid] == 1)
		    {
		        arendavibor[playerid] = 2;
				for(new i = 0; i < MAX_VEHICLES; i++)
				{
					if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
					{
					    new index = GetVehicleData(i, V_ACTION_ID);
					    if(GetRentCarData(index, R_RENT_OWNER) == -1)
					    {
							if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						    {
								if(GetRentCarData(index, R_MESTO) != 0)
								{
									SetPVarInt(playerid, "vehid_arenda", i);
									new Float:X,Float:Y,Float:Z;
									GetVehiclePos(i, X,Y,Z);
									SetPlayerVirtualWorld(playerid, biz_id);
									SetVehicleVirtualWorld(i, biz_id);
									SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
									SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
									return 1;
								}
						    }
						}
					 }
				}
		    }
		}
	}
	if(id == 1)
	{
	    if(GetRentCarData(indexs, R_RENT_BIZ) == biz_id && GetRentCarData(indexs, R_RENT_BIZ) == 56 || GetRentCarData(indexs, R_RENT_BIZ) == 57 || GetRentCarData(indexs, R_RENT_BIZ) == 58)
	    {
		    if(arendavibor[playerid] == 1) arendavibor[playerid] = 7;
			if(arendavibor[playerid] == 7) arendavibor[playerid] = 6;
			if(arendavibor[playerid] == 6) arendavibor[playerid] = 5;
			if(arendavibor[playerid] == 5) arendavibor[playerid] = 4;
			if(arendavibor[playerid] == 4) arendavibor[playerid] = 3;
			if(arendavibor[playerid] == 3) arendavibor[playerid] = 2;
		    if(arendavibor[playerid] == 2) arendavibor[playerid] = 0;
		    if(arendavibor[playerid] == 0) arendavibor[playerid] = 1;
		    
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
				{
					new index = GetVehicleData(i, V_ACTION_ID);
					if(GetRentCarData(index, R_RENT_OWNER) == -1)
					{
						if(GetRentCarData(index, R_RENT_BIZ) == biz_id)
						{
							if(GetRentCarData(index, R_MESTO) == arendavibor[playerid])
							{
								SetPVarInt(playerid, "vehid_arenda", i);
								new Float:X,Float:Y,Float:Z;
								GetVehiclePos(i, X,Y,Z);
								SetPlayerVirtualWorld(playerid, biz_id);
								SetVehicleVirtualWorld(i, biz_id);
								SetPlayerCameraPos(playerid, X+ 7, Y, Z+3);
								SetPlayerCameraLookAt(playerid, X, Y, Z+1, 2);
								return 1;
							}

						}
					}
				}
			}
		}
	}
	if(id == 2)
	{
	    new msg[600];
	    new vehicleid = GetPVarInt(playerid, "vehid_arenda");
		if(vehicleid == INVALID_VEHICLE_ID) return 1;
	    new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    new model_id = GetVehicleData(vehicleid, V_MODELID);
	    format(msg, sizeof msg, "Название автомобиля:<t>%s<n>Цена аренды:<t>%s руб <n><n>- Износ:<t>%.2f<n>- Пробег:<t>%.2f<n>- Загрязненность:<t>0<n>- Состояние масла:<t>%.2f<n>- Состояние фильтров:<t>0.00<n>- Бензин:<t>%.2f л.<n><n>{FFFFFF}Износ передней левой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ задней левой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ передней правой шины<t>{3399FF}%.2f (Летняя)<n>{FFFFFF}Износ задней правой шины<t>{3399FF}%.2f (Летняя)<n><n><n><n>{FFFFFF}Чтобы взять транспорт в аренду нажмите \'Аренда\'",
		GetVehicleInfo(model_id, VI_NAME), formatInt(GetRentCarData(index, R_PRICE)),GetRentCarData(index, R_IZNOS),GetVehicleData(vehicleid, V_MILEAGE),GetRentCarData(index, R_MASLO),GetVehicleData(vehicleid, V_FUEL),GetRentCarData(index, R_KOLESO_1),GetRentCarData(index, R_KOLESO_2),GetRentCarData(index, R_KOLESO_3),GetRentCarData(index, R_KOLESO_4));
		IntfDialogCallRemote
		(
			playerid, DIALOG_BIZ_ARENDA_CARS, DIALOG_STYLE_MSGBOX,
			"{FF9900}Аренда транспорта",
			msg,
			"Аренда", "Отмена"
		);
	}
	if(id == 3)
	{
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 0);

		TogglePlayerControllable(playerid, true);
		CEF_HIDE(playerid, "Select");
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
stock IsARentCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR)
		{
			return 1;
		}
	}
	return 0;
}
stock GetFreeRentCarID()
{
	for(new idx; idx < sizeof g_rent_car; idx ++)
	{
		if(GetRentCarData(idx, R_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock DestroySkin(playerid, skin_id, count_del)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SKIN_ID) != skin_id) continue;

		new query[148];
		format(query, sizeof query, "DELETE FROM items WHERE owner_id=%d AND slots=%d AND type=%d AND type_item=%d AND skin_id=%d LIMIT 1", GetPlayerItem(i, PI_OWNER_ID), GetPlayerItem(i, PI_SLOTS), GetPlayerItem(i, PI_TYPE), GetPlayerItem(i, PI_TYPE_ITEM), GetPlayerItem(i, PI_SKIN_ID));
		mysql_query(mysql, query, false);

		DeleteItems(i);
		count++;
		if(count == count_del) return 1;
	}
	return 1;
}

stock DestroyAcs(playerid, aks_id, count_del)
{
	new count;
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_AKS_ID) != aks_id) continue;

		new query[148];
		format(query, sizeof query, "DELETE FROM items WHERE owner_id=%d AND slots=%d AND type=%d AND type_item=%d AND aks_id=%d LIMIT 1", GetPlayerItem(i, PI_OWNER_ID), GetPlayerItem(i, PI_SLOTS), GetPlayerItem(i, PI_TYPE), GetPlayerItem(i, PI_TYPE_ITEM), GetPlayerItem(i, PI_AKS_ID));
		mysql_query(mysql, query, false);

		DeleteItems(i);
		count++;
		if(count == count_del) return 1;
	}
	return 1;
}
stock GiveCar(playerid, model_id, color_1, color_2, vinil, viniltype, Float:pos_x, Float:pos_y, Float:pos_z, Float:angle, create_time, iznos = 0, Float:gryaz = 0.0)
{
	new querys[248];
	mysql_format(mysql, querys, sizeof querys, "INSERT INTO ownable_cars (owner_id,model_id,color_1,color_2,vinil,viniltype,pos_x,pos_y,pos_z,angle,create_time,iznos,gryaz) VALUES ('%d','%d','%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%f')",GetPlayerAccountID(playerid),model_id,color_1,color_2,vinil,viniltype,pos_x,pos_y,pos_z,angle,create_time,iznos,gryaz);
	mysql_tquery(mysql, querys, "", "");
}
stock GiveSkin(playerid, skin_id)
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

	CreateItemsSkin(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), skin_id, 0, -1, -1, 0, 3);

	return 1;
}

stock GiveAcs(playerid, aks_id, type)
{
    if(GetInventorySlots(playerid) == -1) return false;
	
    new typeacs = -1, indx = -1;

    switch(type)
    {
		case 0, 181: typeacs = 181, indx = 7;//очки 
	    case 1, 182: typeacs = 182, indx = 1;//бандана
	    case 2, 183: typeacs = 183, indx = 1;//маска
	    case 3, 184: typeacs = 184, indx = 3;//берет
	    case 4, 185: typeacs = 185, indx = 3;//шляпа
	    case 5, 219: typeacs = 219, indx = 2;//Сумка
	    case 6, 220: typeacs = 220, indx = 8;//Ремень
	    case 7, 221: typeacs = 221, indx = 4;//украшение на руку
	    case 8, 222: typeacs = 222, indx = 0;//Рюкзак
	    case 9, 246: typeacs = 246, indx = 5;//Украшение на шею
	    case 10, 263: typeacs = 263, indx = 6;//Плащ
	    case 11, 277: typeacs = 277, indx = 9;//бронtжелет
	    case 12, 289: typeacs = 289, indx = 4;//Посох
	    case 13, 287: typeacs = 287, indx = 6;//Крылья
	    case 14, 285: typeacs = 285, indx = 0;//Украшение на транспорт
	    case 15: typeacs = 285, indx = 1;//Украшение на транспорт
	    case 16: typeacs = 285, indx = 2;//Украшение на транспорт
	    case 17: typeacs = 285, indx = 3;//Украшение на транспорт
	    case 18, 324: typeacs = 324, indx = 6;//скейтборд
	    case 19, 275: typeacs = 275, indx = 5;//украшение на левое плечо
	    case 20: typeacs = 285, indx = 4;//Украшение на транспорт
	    case 21: typeacs = 285, indx = 5;//Украшение на транспорт
	    case 22, 291: typeacs = 291, indx = 9;//аксессуар на спину
	    case 23, 41: typeacs = 41, indx = 0;//украшение для дома
	}

    if(typeacs == -1 || indx == -1)
        return SendClientMessage(playerid, -1, "Ошибка: неизвестный тип аксессуара.");

    CreateItemsAcs(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), aks_id, typeacs, 0, indx, -1, -1, 0, 2);
    return 1;
}

stock CreateIteam(playerid, iteamid, count, index = 0, text[] = "")
{
	if(GetInventorySlots(playerid) == -1) return GameText(playerid, "В вашем инвентаре нет свободного места", 3000, 0);

	CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), iteamid, count, index, -1, -1, 0, 0);

	AddItemsLog(playerid, iteamid, 0, count, text);

	return 1;
}

stock GiveIteam(playerid, iteamid, status, count, type, text[] = "")
{
	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		if(GetPlayerItem(i, PI_INDX) != type) continue;

		new count1 = GetPlayerItem(i, PI_COUNT);
		new id = GetPlayerItem(i, PI_SQL_ID);

		if(status == 0)
		{
			if(count1 - count > 0)
			{
				new query[94];
				format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count1 - count, id);
				mysql_tquery(mysql, query, "", "");

				SetPlayerItem(i, PI_COUNT, count1 - count);

				AddItemsLog(playerid, iteamid, 0, -count, text);
				return 1;
			}
			else
			{
				if(iteamid == 279)
                {
					if(GetPlayerItem(i, PI_COUNT) == 479)
                    {
                        new query[94];
                        format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
                        mysql_tquery(mysql, query, "", "");

                        DeleteItems(i);

                        AddItemsLog(playerid, iteamid, 0, -count, text);
                        return 1;
                    }
				}

				new query[94];
				format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1",id);
				mysql_tquery(mysql, query, "", "");

				DeleteItems(i);

				AddItemsLog(playerid, iteamid, 0, -count, text);
				return 1;
			}
		}
		else if(status == 1)
		{
			if(iteamid == 279)
            {
                if(GetInventorySlots(playerid) == -1) return SCM(playerid, COLOR_GREY, "Ошибка! Вам не был выдан предмет так как все слоты в инвентаре заняты.");

	            CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), iteamid, count, type, -1, -1, 0, 0);

	            AddItemsLog(playerid, iteamid, 0, count, text);
                return 1;
            }

			new query[94];
			format(query, sizeof query, "UPDATE items SET count=%d WHERE id=%d LIMIT 1", count1 + count, id);
			mysql_tquery(mysql, query, "", "");

			SetPlayerItem(i, PI_COUNT, count1 + count);

			AddItemsLog(playerid, iteamid, 0, count, text);
			return 1;
		}
		return 1;
	}

	if(GetInventorySlots(playerid) == -1) return SCM(playerid, COLOR_GREY, "Ошибка! Вам не был выдан предмет так как все слоты в инвентаре заняты.");

	CreateItemsItem(GetPlayerAccountID(playerid), 0, 1, GetInventorySlots(playerid), iteamid, count, type, -1, -1, 0, 0);

	AddItemsLog(playerid, iteamid, 0, count, text);

	return 1;
}
stock GetSkin(playerid, skin_id)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_SKIN_ID) != skin_id) continue;
		
		count++;
	}
	return count;
}
stock GetAcs(playerid, aks_id)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_AKS_ID) != aks_id) continue;
		
		count++;
	}
	return count;
}
stock GetIteam(playerid, iteamid)
{
    new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_TYPE_ITEM) != 0) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		
		count = GetPlayerItem(i, PI_COUNT);
		return count;
	}
	return count;
}

stock GetIteamIndx(playerid, iteamid, indx)
{
	new count;

	for(new i; i < MAX_PLAYER_ITEMS; i++)
	{
		if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
		if(GetPlayerItem(i, PI_ITEM) != iteamid) continue;
		if(GetPlayerItem(i, PI_TYPE) != 1) continue;
		if(GetPlayerItem(i, PI_INDX) != indx) continue;
		
		count = GetPlayerItem(i, PI_COUNT);
		return count;
	}
	return count;
}

public: NextBusRouteCP(playerid)
{
	if(HasJob(playerid, 7))
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
			new next_cp = route_step + 1;

			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}

			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}

public:CloseMpTeleport()
{
	for(new i = 0; i < 3; i++) mpPos[i] = 0;
	for(new i = 0; i < 2; i++) mpWorld[i] = 0;
	number_mp_player = 0;
	mp_status = 2;
	for(new i; i < MAX_PLAYERS; i++) DeletePVar(i, "statusMP");

	KillTimer(mptp);
}

stock CookDrugs_OnCompleteTask(playerid)
{
    GameText(playerid, "~r~~h~Вы сварили наркотики +10 гр", 3000, 1);

    CEF_HIDE(playerid, "Drugs");
}

stock Lottery_OnShowResult(playerid)
{
	if(GetIteam(playerid, 257) < 1) return SendClientMessage(playerid, 0xFF6600FF, "У Вас нет лотерейного билета");

	GiveIteam(playerid, 257, 0,1,0);

    new babki = RandomEx(100, 1000);

	if(babki == 666) babki = 100000000;
	else babki = 40000;

    new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "interface('Lottery').setResult(%d)", babki);
	CEF_CREATE(playerid, 1, 2, fmt_str);

	ModifyCashBalance(playerid, babki, "Лотерея");

	OnBattlePass_Perfomance(playerid, 4, 1);

	return true;
}

public: Lottery_OnAcceptResult(playerid) CEF_HIDE(playerid, "Lottery"); 

public: PhoneNumber(playerid) CEF_CREATE(playerid, 1, 2, "interface('Phone').openKeyBoard()");

public: OnTrainingHintsClose(playerid) SetCameraBehindPlayer(playerid);

stock GetInvIdWeapon(weapon)
{
	if(weapon == 1) return weapon = 31;

    if(weapon == 4) return weapon = 7;

	if(weapon == 6) return weapon = 125;

    if(weapon == 42) return weapon = 5;

    if(weapon == 5) return weapon = 8;

    if(weapon == 8) return weapon = 9;

    if(weapon == 9) return weapon = 10;

    if(weapon == 18) return weapon = 11;

    if(weapon == 22) return weapon = 12;

    if(weapon == 23) return weapon = 13;

    if(weapon == 25) return weapon = 14;

    if(weapon == 26) return weapon = 15;

    if(weapon == 27) return weapon = 16;

    if(weapon == 28) return weapon = 17;

    if(weapon == 29) return weapon = 18;

    if(weapon == 24) return weapon = 19;

    if(weapon == 31) return weapon = 20;

	if(weapon == 32) return weapon = 12;

    if(weapon == 30) return weapon = 21;
    
    if(weapon == 33) return weapon = 42;

    if(weapon == 34) return weapon = 22;

    if(weapon == 35) return weapon = 23;

    if(weapon == 16) return weapon = 24;

	return weapon;
}

stock StartSpectatee(playerid, for_player)
{
	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
	}
	else PlayerSpectatePlayer(playerid, for_player);

	SCM(playerid, 0xFFDE7AFF, "Используйте команду {FFFFFF}\"/spinfo\"{FFDE7A} если вам понадобится информация об управлении.");
	return 1;
}

stock StopSpectatee(playerid)
{
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE)
	);

	return 1;
}

stock MakeStroboskopes(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	STRING_GLOBAL[0] = EOS;

	if(stroboskopes[vehicleid] == 0)
	{
		if(GetVehicleModel(vehicleid) == 525)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,0.95,1.40,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,0.95,1.40,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15186) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.18,0.85,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.18,0.85,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 596)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 597)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.20,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.20,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 598)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.45,0.90,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.45,0.90,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15609) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.36,0.74,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.36,0.74,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15608) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.37,0.88,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.37,0.88,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15607) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.22,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.22,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15606) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.38,0.95,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.38,0.95,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15241) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,0.75,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,0.75,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15610) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.25,0.85,-0.05,150.00,200,%d,-1,45.00,%d],[%d,1,0.25,0.85,-0.05,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 523)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.25,0.85,-0.05,150.00,200,%d,-1,45.00,%d],[%d,1,0.25,0.85,-0.05,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 427)	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,0.95,1.40,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,0.95,1.40,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15604) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.6,0.45,0.73,150.00,200,%d,-1,45.00,%d],[%d,1,-0.56,0.45,0.73,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15282) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.34,2.90,0.03,150.00,200,%d,-1,45.00,%d],[%d,1,0.34,2.90,0.03,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15283) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,2.90,0.24,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,2.90,0.24,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15143) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.40,0.70,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.40,0.70,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 528) 	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.02,1.02,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.02,1.02,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15620) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.30,0.77,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.30,0.77,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		if(GetVehicleModel(vehicleid) == 15217) format(STRING_GLOBAL, sizeof STRING_GLOBAL, "addStroboscopes(\"[[%d,0,-0.31,-0.21,0.90,150.00,200,%d,-1,45.00,%d],[%d,1,0.31,-0.21,0.90,150.00,400,%d,-1,45.00,%d]]\")", vehicleid,vehicleid, vehicleid * 2, vehicleid * 2, vehicleid, vehicleid);
		
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;

			CEF_CREATE(i, 1, 2, STRING_GLOBAL);
		}
		stroboskopes[vehicleid] = 1;
		return 1;
	}
	if(stroboskopes[vehicleid] == 1)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "delStroboscopes(\"[[%d],[%d]]\")", vehicleid, vehicleid * 2);

		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;

			CEF_CREATE(i, 1, 2, STRING_GLOBAL);
		}
		stroboskopes[vehicleid] = 0;
		return 1;
	}
	return 0;
}
stock CarSiren_OnPlayerBeepEnable(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleData(vehicleid, V_MODELID);
	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x,y,z);
	if(modelid == 15610 || modelid == 15606 || modelid == 15607|| modelid == 15608|| modelid == 15609 || modelid == 15123 || modelid == 598 || modelid == 596 || modelid == 525 || modelid == 528 || modelid == 15241 || modelid == 523)
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.createSound3D(%d, 'car/horn/sound_11.mp3', %f, %f, %f, 0.80, 5.00, 90.00, true, true) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,x,y,z,vehicleid,vehicleid);
        for(new i; i < GetMaxPlayers(); i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(kryak[vehicleid][i] == 1)CEF_CREATE(i, 1, 2,STRING_GLOBAL);
		}
	}
	else
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.createSound3D(%d, 'car/horn/sound_%d.mp3', %f, %f, %f, 0.80, 5.00, 90.00, true, true) || window.attachSoundToVehicle(%d, %d, 0.00, 0.00, 0.00, 0.00)",vehicleid,horn[vehicleid],x,y,z,vehicleid,vehicleid);
		for(new i; i < GetMaxPlayers(); i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(beepplayer[vehicleid][i] == 1)CEF_CREATE(i, 1, 2,STRING_GLOBAL);
		}
	}
	soundveh[vehicleid] = 1;
}

stock CarSiren_OnPlayerBeepDisable(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    new Float: x, Float: y, Float: z;
    GetVehiclePos(vehicleid, x,y,z);

    soundveh[vehicleid] = 0;

    format(STRING_GLOBAL, sizeof STRING_GLOBAL,"window.destroySound(%d, 30)",vehicleid);

    foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
        if(beepplayer[vehicleid][i] == 1 || kryak[vehicleid][i] == 1) CEF_CREATE(i, 1, 2,STRING_GLOBAL);
    }
}

public: VetrMove()
{
	if(status_vetr == 0){
		if(GetBusinessData(92, B_VETR_WORK) == 1){MoveDynamicObject(vetr1, 928.1540, 81.2516, 60.5637,0.013, 0.000000, 180, 0);}
		if(GetBusinessData(93, B_VETR_WORK) == 1){MoveDynamicObject(vetr2, 884.0400, 127.763, 60.5318,0.013, 0.000000, 180, 0);}
		if(GetBusinessData(95, B_VETR_WORK) == 1){MoveDynamicObject(vetr4, -2059.39, 2638.64, 101.310,0.013, 0.000000, 180, 0);}
		if(GetBusinessData(96, B_VETR_WORK) == 1){MoveDynamicObject(vetr5, -1994.93, 2673.58, 97.0886,0.013, 0.000000, 180, 0);}
		if(GetBusinessData(97, B_VETR_WORK) == 1){MoveDynamicObject(vetr6, 2582.850, 1227.96, 64.1720,0.013, 0.000000, 180, 0);}
		if(GetBusinessData(98, B_VETR_WORK) == 1){MoveDynamicObject(vetr7, 2553.670, 1272.70, 61.8685,0.013, 0.000000, 180, 0);}

		timervetr = 13;
		status_vetr = 1;

		for(new idx; idx < g_business_loaded; idx ++)
	    {
		    if(GetBusinessData(idx, B_TYPE) != 36) continue;
        
		    new query[435];

		    if(GetBusinessData(idx, B_VETR_WORK) == 1)
		    {
				if(GetBusinessData(idx, B_IMPROVEMENTS) == 0)
				{
					if(GetBusinessData(idx, B_IZNOS) != 1000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}
				else if(GetBusinessData(idx, B_IMPROVEMENTS) == 1)
				{
					if(GetBusinessData(idx, B_IZNOS) != 5000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}
				else if(GetBusinessData(idx, B_IMPROVEMENTS) == 2)
				{
					if(GetBusinessData(idx, B_IZNOS) != 10000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}
			    new polomka = random(10000);

                if(polomka < 1)
		        {
			        SetBusinessData(idx, B_WORK, 0);
					SetBusinessData(idx, B_WORK_2, 0);
					SetBusinessData(idx, B_VETR_WORK, 0);

			        mysql_format(mysql, query, sizeof query, "UPDATE business SET `work`=%d,`work_2`=%d,`vetr_work`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_WORK), GetBusinessData(idx, B_WORK_2), GetBusinessData(idx, B_VETR_WORK), GetBusinessData(idx, B_SQL_ID));
			        mysql_query(mysql, query, false);
		        } 
		    }
	    }
		return 1;
	}
	if(status_vetr == 1){
		if(GetBusinessData(92, B_VETR_WORK) == 1){MoveDynamicObject(vetr1, 928.2540, 81.3516, 60.6637,0.013, 0.000000, 359, 0);}
		if(GetBusinessData(93, B_VETR_WORK) == 1){MoveDynamicObject(vetr2, 884.1400, 127.863, 60.6318,0.013, 0.000000, 359, 0);}
		if(GetBusinessData(95, B_VETR_WORK) == 1){MoveDynamicObject(vetr4, -2059.49, 2638.74, 101.410,0.013, 0.000000, 359, 0);}
		if(GetBusinessData(96, B_VETR_WORK) == 1){MoveDynamicObject(vetr5, -1995.03, 2673.68, 97.1886,0.013, 0.000000, 359, 0);}
		if(GetBusinessData(97, B_VETR_WORK) == 1){MoveDynamicObject(vetr6, 2582.950, 1228.06, 64.2720,0.013, 0.000000, 359, 0);}
		if(GetBusinessData(98, B_VETR_WORK) == 1){MoveDynamicObject(vetr7, 2553.770, 1272.80, 61.9685,0.013, 0.000000, 359, 0);}
	
		timervetr = 13;
		status_vetr = 0;

		for(new idx; idx < g_business_loaded; idx ++)
	    {
		    if(GetBusinessData(idx, B_TYPE) != 36) continue;
        
		    new query[435];

		    if(GetBusinessData(idx, B_VETR_WORK) == 1)
		    {
                if(GetBusinessData(idx, B_IMPROVEMENTS) == 0)
				{
					if(GetBusinessData(idx, B_IZNOS) != 1000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}
				else if(GetBusinessData(idx, B_IMPROVEMENTS) == 1)
				{
					if(GetBusinessData(idx, B_IZNOS) != 5000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}
				else if(GetBusinessData(idx, B_IMPROVEMENTS) == 2)
				{
					if(GetBusinessData(idx, B_IZNOS) != 10000)
				    {
                        AddBusinessData(idx, B_IZNOS, +, 1);

		                mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_IZNOS), GetBusinessData(idx, B_SQL_ID));
		                mysql_query(mysql, query, false);
				    }
				}

			    new polomka = random(10000);

                if(polomka < 1)
		        {
			        SetBusinessData(idx, B_WORK, 0);
					SetBusinessData(idx, B_WORK_2, 0);
					SetBusinessData(idx, B_VETR_WORK, 0);

			        mysql_format(mysql, query, sizeof query, "UPDATE business SET `work`=%d,`work_2`=%d,`vetr_work`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(idx, B_WORK), GetBusinessData(idx, B_WORK_2), GetBusinessData(idx, B_VETR_WORK), GetBusinessData(idx, B_SQL_ID));
			        mysql_query(mysql, query, false);
		        }
			}
	    }
		return 1;
	}
	return 0;
}

public: CheckVetrProfit()
{
    new currentTick = GetTickCount();

    if (currentTick < lastProfitTick)
    {
        lastProfitTick = currentTick;
    }

    if (currentTick - lastProfitTick >= 3600000)
    {
        lastProfitTick = currentTick;
        VetrProfitFunc();
    }
    return 1;
}

public: VetrProfitFunc()
{
    for(new i = 0; i < g_business_loaded; i++)
    {
        if(GetBusinessData(i, B_TYPE) != 36) 
            continue;

        if(GetBusinessData(i, B_VETR_WORK) == 1)
        {
			if(GetBusinessData(i, B_TYPEWETRIKI) > 0)
			{
				if(GetBusinessData(i, B_IZNOS) != 0)
				{
                    new profit = random(2000000) + 1000000;
                    AddBusinessProfit(0, i, profit, 0);

					AddBusinessData(i, B_IZNOS, -, 17);
   
                    new query[148];
		            mysql_format(mysql, query, sizeof query, "UPDATE business SET `iznos`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(i, B_IZNOS), GetBusinessData(i, B_SQL_ID));
		            mysql_query(mysql, query, false);
			    }
			}
        }
    }
    return 1;
}


public: ChangeVehicleViniljob(vehicleid, event)
{
	new fmt_text[124];

	if(event != -1)
	{
		format(fmt_text, sizeof fmt_text, "setVehiclePaintJob(%d, \"common/livery%d\", \"livery%d\")", vehicleid, event, event);
	}
	else format(fmt_text, sizeof fmt_text, "resetVehiclePaintJob(%d)", vehicleid);

	SetVehicleData(vehicleid, V_VINIL, event);
	SetVehicleData(vehicleid, V_VINILTYPE, 1);

	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i)) continue;
		CEF_CREATE(i, 1, 2, fmt_text);
	}
}

public: ChangeVehicleDefaultViniljob(vehicleid, event)
{
    new fmt_text[124];

    if(event != -1)
    {
        for(new i = 0; i < sizeof e_vinils; i++)
        {
            if(e_vinils[i][eVinilModel] == GetVehicleModel(vehicleid) && event == e_vinils[i][eVinilID])
            {
                format(fmt_text, sizeof fmt_text, "setVehiclePaintJob(%d, \"individual/%d\", \"%s\")", vehicleid, GetVehicleModel(vehicleid), e_vinils[i][eVinilName]);
                break;
            }
        }
    }
    else
    {
        format(fmt_text, sizeof fmt_text, "resetVehiclePaintJob(%d)", vehicleid);
    }

    SetVehicleData(vehicleid, V_VINIL, event);
    SetVehicleData(vehicleid, V_VINILTYPE, 0);

    foreach(new i : Player)
    {
        if(!IsPlayerLogged(i)) continue;
        CEF_CREATE(i, 1, 2, fmt_text);
    }
}

public: OnMiniGamePlayerComplete(playerid)
{
     CEF_HIDE(playerid, "Wires");
     SCM(playerid, 0x66CC00FF, "Вы успешно починили проводку");
     SCM(playerid, -1, "Возвращайтесь в {FFCD00}рабочий транспорт{ffffff} для продолжения работы");
     AddPlayerData(playerid, P_TOTAL_ELEKTRIK, +, 1);
     GameText(playerid, "~g~Успешно", 2000, 1);
     ClearPlayerAnim(playerid);
     GiveRandCase(playerid);
     
     SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);
     
     ElectrikUse[playerid] = 1;

	 new businessid = g_electrician_listitem[playerid];
	 Iter_Remove(ElectricanPlayerBiz[playerid], g_business[businessid][B_SQL_ID]);
	 return 1;
}
forward ServerRestart();
public ServerRestart()
{
    foreach(new i: Player)
    {
        if(IsPlayerConnected(i)) StopAudioStreamForPlayer(i);

		SCM(i, COLOR_RED, "Сервер возообновит работу в течении минуты");
		GameText(i, "Перезагрузка сервера", 10000, 1);
		SCM(i, COLOR_RED, "");
		CEF_HIDE(i, "InformationTimer");
    }
    GameModeExit();
    return 1;
}

forward TestDrivePack(playerid);
public TestDrivePack(playerid)
{
    CEF_HIDE(playerid, "Interactions");
    SCM(playerid, 0x6699CCFF, "{ecf96a}Тест-драйв {FFFFFF}донат-пакета {ecf96a}был завершён.");
	GameText(playerid, "~g~Тест-Драйв Завершён", 3000, 2);
	TestDrive[playerid] = 0;
	DestroyVehicle(g_temp_vehicle2[playerid]);
    g_temp_vehicle2[playerid] = INVALID_VEHICLE_ID;
    CEF_HIDE(playerid, "InformationTimer");
    SetPlayerVirtualWorld(playerid, 0);
	SetVehicleVirtualWorld(g_temp_vehicle2[playerid], 0);
	if(PosTestDrive[playerid] == 1)
    {
        SetPlayerPos(playerid, 1919.7533,-1978.5594,31.5505);
        SetPlayerFacingAngle(playerid, 142.9231);
        PosTestDrive[playerid] = 0;
    }
    if(PosTestDrive[playerid] == 2)
    {
        SetPlayerPos(playerid, 1867.2260,2803.1262,12.0000);
        SetPlayerFacingAngle(playerid, 125.4598);
        PosTestDrive[playerid] = 0;
	}
    if(PosTestDrive[playerid] == 3)
    {
        SetPlayerPos(playerid, -1938.8820,2909.1531,5.9990);
        SetPlayerFacingAngle(playerid, 264.6414);
        PosTestDrive[playerid] = 0;
    }
    if(PosTestDrive[playerid] == 4)
    {
        SetPlayerPos(playerid, -1912.2034,1917.0387,175.2322);
        SetPlayerFacingAngle(playerid, 0.0000);
        PosTestDrive[playerid] = 0;
	}
    if(PosTestDrive[playerid] == 5)
    {
        SetPlayerPos(playerid, -406.2524,746.5653,12.2882);
        SetPlayerFacingAngle(playerid, 75.3678);
        PosTestDrive[playerid] = 0;
    }
    return 1;
}
stock SellDebtorsProperty()
{
	new count[6];
	for(new i; i < g_house_loaded; i ++)
	{
		if(GetHouseData(i, H_OWNER_ID) != 0)
	    {
	    	new rent_days = GetElapsedTime(GetHouseData(i, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE houses SET owner_id=0 WHERE id=%d", GetHouseData(i, H_SQL_ID));
				mysql_query(mysql, query, false);
	            
				SetHouseData(i, H_OWNER_ID,			0);
				SetHouseData(i, H_IMPROVEMENTS,		0);
				SetHouseData(i, H_EVICTION,			0);
				SetHouseData(i, H_RENT_DATE,		0);
				SetHouseData(i, H_LOCK_STATUS,	false);
				UpdateHouse(i);
				HouseHealthInit(i);
				HouseStoreInit(i);

				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetHouseData(i, H_SQL_ID), GetHouseData(i, H_PRICE) / 1000000, 0);

				count[0]++;
			}
		}
	}
    for(new i; i < g_garage_loaded; i ++)
	{
		if(GetGarageData(i, G_OWNER_ID) != 0)
	    {
	    	new rent_days = GetElapsedTime(GetGarageData(i, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE garage SET `owner_id`='0', `lock`='0', `eviction`='0' WHERE `id`='%d'", GetGarageData(i, G_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE accounts_canvasdev SET car_slots=4 WHERE id='%d'", GetGarageData(i, G_OWNER_ID));
				mysql_query(mysql, query, false);

				SetGarageData(i, G_OWNER_ID,			0);
				SetGarageData(i, G_IMPROVEMENTS,		0);
				SetGarageData(i, G_EVICTION,			0);
				SetGarageData(i, G_RENT_DATE,			0);
				SetGarageData(i, G_LOCK_STATUS,		false);
				UpdateGarage(i);
				CallLocalFunction("UpdateGarageLabel", "i", i);

				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetGarageData(i, G_SQL_ID), GetGarageData(i, G_PRICE) / 1000000, 2);

				count[1]++;
			}
		}
	}
	for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_OWNER_ID) != 0)
	    {
		    new rent_days = GetElapsedTime(GetBusinessData(i, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
			if(rent_days < 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE business SET `owner_id` = '0', `products` = '0', `prod_price` = '0', `lock` = '0', `eviction` = '0' WHERE `id` = '%d'", GetBusinessData(i, B_SQL_ID));
				mysql_query(mysql, query, false);
				
				SetBusinessData(i, B_OWNER_ID, 			0);
				SetBusinessData(i, B_IMPROVEMENTS, 		0);
				SetBusinessData(i, B_EVICTION, 			0);
				SetBusinessData(i, B_PRODS, 			0);
				SetBusinessData(i, B_PROD_PRICE,		0);
				
				format(g_business[i][B_BALANCE], 21, "0");
				SetBusinessData(i, B_RENT_DATE,			0);
				SetBusinessData(i, B_ENTER_MUSIC,		0);
				SetBusinessData(i, B_LOCK_STATUS,	false);
				BusinessHealthPickupInit(i);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
				mysql_query(mysql, query, false);

				CallLocalFunction("UpdateBusinessLabel", "i", i);

				new status_auction = RandomEx(1,2);
				if(status_auction == 2) AddAuctionLot(GetBusinessData(i, B_SQL_ID), GetBusinessData(i, B_PRICE) / 1000000, 1);
				 
				count[2]++;
			}
		}
	}
	for(new i; i < g_garden_loaded; i ++)
	{
		if(GetGardenData(i, G_OWNER_ID) != 0)
		{
			if(GetGardenData(i, G_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE gardens SET `owner_id`='0', `owner_name`='None', `rent`='0', `g_lock`='0', `improvements`='0' WHERE `id`='%d'", GetGardenData(i, G_SQL_ID));
				mysql_query(mysql, query, false);
				SetGardenData(i, G_OWNER_ID,			0);
				SetGardenData(i, G_IMPROVEMENTS,		0);
				SetGardenData(i, G_RENT_DATE,		0);
				SetGardenData(i, G_LOCK_STATUS,		false);
				CallLocalFunction("UpdateGardenLabel", "i", i);
				UpdateGardenLabel(i);

				count[3]++;
			}
		}
	}
	for(new i; i < g_kiosk_loaded; i ++)
	{
		if(GetKioskData(i, K_OWNER_ID) != 0)
		{
			if(GetKioskData(i, K_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE kiosk SET `owner_id`='0', `balance`='0', `lock`='0', `rent`='0', `improvements`='0', `name`='Киоск' WHERE `id`='%d'", GetKioskData(i, K_SQL_ID));
				mysql_query(mysql, query, false);
				SetKioskData(i, K_OWNER_ID,		0);
				SetKioskData(i, K_IMPROVEMENTS,	0);
				format(g_kiosk[i][K_BALANCE], 21, "0");
				SetKioskData(i, K_RENT_DATE,	0);
				SetKioskData(i, K_LOCK_STATUS,	false);
				format(g_kiosk[i][K_NAME],33,"Киоск");
				count[4]++;
			}
		}
	}
	for(new i; i < g_neft_loaded; i ++)
	{
		if(GetNeftData(i, N_OWNER_ID) != 0)
		{
			if(GetNeftData(i, N_RENT_DATE) <= 0)
			{
				new	query[148];
				format(query, sizeof query, "UPDATE neftenasos SET `owner_id`='0', `balance`='0', `work`='0', `neftfuels`='0', `improvements`='0', `owner_name`='None' WHERE `id`='%d'", GetNeftData(i, N_SQL_ID));
				mysql_query(mysql, query, false);

				SetNeftData(i, N_OWNER_ID,		0);
				SetNeftData(i, N_IMPROVEMENTS,	0);
				SetNeftData(i, N_BALANCE,		0);
				SetNeftData(i, N_RENT_DATE,	0);
				SetNeftData(i, N_WORK_STATUS,	0);
				format(g_neft[i][N_OWNER_NAME],33,"None");

				DestroyDynamicObject(neftobj[i]); 
				DestroyDynamicObject(neftobj1[i]);
				DestroyDynamicObject(neftobj2[i]);
				DestroyDynamicObject(neftobj3[i]);
				DestroyDynamicObject(neftobj4[i]);
				DestroyDynamicObject(neftobj5[i]);

				DestroyDynamicObject(neftobj6[i]);
				DestroyPickup(neftpickup[i]);
				DestroyDynamic3DTextLabel(neftlabelty[i]);
				DestroyDynamic3DTextLabel(neftlabel[i]);

				AddAuctionLot(GetNeftData(i, N_SQL_ID), 300000, 7);

				count[5]++;
			}
		}
		else
		{
			AddAuctionLot(GetNeftData(i, N_SQL_ID), 300000, 7);
		}
	}

	DebtorsAuctionSIM();
	return 1;
}
stock DebtorsAuctionSIM()
{
	new query[148],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE last_login < %d AND phone <> 0", gettime() - 1209600);
	result = mysql_query(mysql, query);

	new rows = cache_num_rows();

	if(!mysql_errno())
	{
		if(rows)
		{
			for(new i; i < rows; i ++)
			{
				format(query, sizeof query, "UPDATE accounts_canvasdev SET phone=0 WHERE id='%d'", cache_get_field_content_int(i, "id"));
				mysql_query(mysql, query, false);
			}
		}
	}

	cache_delete(result);
}

stock UpdateCodeDialog(playerid)
{
	STRING_GLOBAL[0] = EOS;
	for(new i; i < MAX_PRIZES_CODE; i++)
	{
		if(code_additionally[i] != 0)
		{
			new query[64];
			if(code_additionally_type[i] == 1) format(query, sizeof query, "\nПриз: Деньги: %s руб", formatInt(code_additionally_count[i]));
			if(code_additionally_type[i] == 2) format(query, sizeof query, "\nПриз: Донат: %s руб", formatInt(code_additionally_count[i]));
			if(code_additionally_type[i] == 3) format(query, sizeof query, "\nПриз: EXP: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 4) format(query, sizeof query, "\nПриз: %s[№%d]: %d шт", ItemsInfo[code_additionally_id[i]][i_item_name], code_additionally_id[i], code_additionally_count[i]);
			if(code_additionally_type[i] == 5) format(query, sizeof query, "\nПриз: Транспорт[№%d]", code_additionally_id[i], code_additionally_count[i]);
			if(code_additionally_type[i] == 6) format(query, sizeof query, "\nПриз: Слоты на бизнес: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 7) format(query, sizeof query, "\nПриз: Слоты на дом: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 8) format(query, sizeof query, "\nПриз: Слоты на гараж: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 9) format(query, sizeof query, "\nПриз: Слоты на авто: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 10) format(query, sizeof query, "\nПриз: Слоты на киоск: %d шт", code_additionally_count[i]);
			if(code_additionally_type[i] == 11) format(query, sizeof query, "\nПриз: Одежда[№%d]", code_additionally_id[i]);
			if(code_additionally_type[i] == 12) format(query, sizeof query, "\nПриз: Аксессуар[№%d]", code_additionally_id[i]);
			if(code_additionally_type[i] == 13 && code_additionally_id[i] == 1) format(query, sizeof query, "\nПриз: Купон на выход из Деморгана (%d мин)", code_additionally_count[i]);

			strcat(STRING_GLOBAL, query);
		}
	}

	if(typecode == 1) DLGF(playerid, DIALOG_SETTINGS_CODE_2, DIALOG_STYLE_LIST, "Промокод", "{FFFFFF}Продолжить\nСоздать приз\nУдалить все призы%s","Выбрать", "Закрыть", STRING_GLOBAL);
	if(typecode == 2) DLGF(playerid, DIALOG_SETTINGS_CODE_2, DIALOG_STYLE_LIST, "Бонус-код", "{FFFFFF}Продолжить\nСоздать приз\nУдалить все призы%s","Выбрать", "Закрыть", STRING_GLOBAL);
    if(typecode == 3) DLGF(playerid, DIALOG_SETTINGS_CODE_2, DIALOG_STYLE_LIST, "Ютуберский промокод", "{FFFFFF}Продолжить\nСоздать приз\nУдалить все призы%s","Выбрать", "Закрыть", STRING_GLOBAL);
	return true;
}

stock IsVehicleOccupied(vehicleid)
{
    foreach(new i: Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid) return 1;

            else return 0;
        }
    }
	return 0;
} 


stock GetCarMarket(vehid)
{
	new count,
		query[70],
		Cache: result;

	format(query, sizeof query, "SELECT count FROM car_market WHERE modelid=%d", vehid);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows()) count = cache_get_row_int(0, 0);

	cache_delete(result);

	return count;
}

stock CreateDetelingGarage()
{
	for(new i; i < sizeof g_deteling_pos; i++)
	{
		CreateDynamic3DTextLabel
		(
			"{FFD700}Детейлинг Центр{FFFFFF}\nПосигнальте, чтобы въехать внутрь\nи поставить тонировку или винил\n\n{9ACD32}Свободно", -1,
			g_deteling_pos[i][0],
			g_deteling_pos[i][1],
			g_deteling_pos[i][2],
			8.0
		);
		g_deteling_alt[i] = CreateDynamicSphere(g_deteling_pos[i][0], g_deteling_pos[i][1], g_deteling_pos[i][2], 4.0, -1, -1);

	}
}
stock CreateStoGarage()
{
	// сто южки
	sto_garage_label[0][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2149.1106, -1842.4911, 18.8190 + 0.3, 15.0);
	CreatePickup(1239, 64, 2149.1106, -1842.4911, 18.8190, -1);

	sto_garage_label[0][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2154.2119, -1842.4924, 18.8135 + 0.3, 15.0);
	CreatePickup(1239, 64, 2154.2119, -1842.4924, 18.8135, -1);

	sto_garage_label[0][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2159.3481, -1842.4906, 18.8135 + 0.3, 15.0);
	CreatePickup(1239, 64, 2159.3481, -1842.4906, 18.8135, -1);

	sto_garage_label[0][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, 2164.5259, -1842.4922, 18.8048 + 0.3, 15.0);
	CreatePickup(1239, 64, 2164.5259, -1842.4922, 18.8048, -1);

	// сто лытка
	sto_garage_label[1][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2506.4739, 1087.8359, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2506.4739, 1087.8359, 8.7268, -1);

	sto_garage_label[1][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2505.1187, 1091.5752, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2505.1187, 1091.5752, 8.7268, -1);

	sto_garage_label[1][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2502.2227, 1099.5433, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2502.2227, 1099.5433, 8.7268, -1);

	sto_garage_label[1][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -2500.9036, 1103.1984, 8.7268 + 0.3, 15.0);
	CreatePickup(1239, 64, -2500.9036, 1103.1984, 8.7268, -1);

	// сто арз
	sto_garage_label[2][0] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №1 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -319.8949,300.4803,13.1182 + 0.3, 15.0);
	CreatePickup(1239, 64, -319.8949,300.4803,13.1182, -1);

	sto_garage_label[2][1] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №2 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -323.7070,301.0323,13.1182 + 0.3, 15.0);
	CreatePickup(1239, 64, -323.7070,301.0323,13.1182, -1);

	sto_garage_label[2][2] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №3 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -332.1658,302.5240,13.0760 + 0.3, 15.0);
	CreatePickup(1239, 64, -332.1658,302.5240,13.0760, -1);

	sto_garage_label[2][3] = CreateDynamic3DTextLabel("{FFFF00}- Гараж: №4 -\n{ffffff}Статуc: {66CC00}свободен", 0xFFFFFFFF, -336.0356,303.2074,13.0577 + 0.3, 15.0);
	CreatePickup(1239, 64, -336.0356,303.2074,13.0577, -1);
}

stock UpdateStoGarage(type, event, status)
{
	if(status == 0) 
	{
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "{FFFF00}- Гараж: №%d -\n{ffffff}Статуc: {66CC00}свободен", event + 1);
		UpdateDynamic3DTextLabelText(sto_garage_label[type][event], 0xFFFFFFFF, fmt_text);
		sto_garage_status[type][event] = 0;
	}
	if(status == 1) 
	{
		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "{FFFF00}- Гараж: №%d -\n{ffffff}Статуc: {FF7F50}занят", event + 1);
		UpdateDynamic3DTextLabelText(sto_garage_label[type][event], 0xFFFFFFFF, fmt_text);
		sto_garage_status[type][event] = 1;
	}
}

/*public:Market_OnSelect(playerid, item)
{
	if(item == 17405) {if(GetIteam(playerid,359) < 40000) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); GiveIteam(playerid, 359, 1, -40000, 0); GivePlayerMyPrizes(playerid, "Gaz-24-95 Кочевник", 3, 17405, 0, 1, -1); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Gaz-24-95 Кочевник\"! Купленное находится в меню наград."), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17989) {if(GetIteam(playerid,359) < 11500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -11500, 0); GiveAcs(playerid, 17989, 12); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Посох Щелкунчик\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17008) {if(GetIteam(playerid,359) < 8500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -8500, 0); GiveSkin(playerid, 17008); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Костюм Гусара\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 11006) {if(GetIteam(playerid,359) < 6500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -6500, 0); GiveAcs(playerid, 11006, 19); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Снеговик на плечо\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17984) {if(GetIteam(playerid,359) < 3500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -3500, 0); GiveAcs(playerid, 17984, 8); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Рюкзак Щелкунчик\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17992) {if(GetIteam(playerid,359) < 3500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -3500, 0); GiveAcs(playerid, 17992, 8); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Рюкзак Ёлка\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17996) {if(GetIteam(playerid,359) < 3500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -3500, 0); GiveAcs(playerid, 17996, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Коричневая Ушанка\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17997) {if(GetIteam(playerid,359) < 3500) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -3500, 0); GiveAcs(playerid, 17997, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Синяя Ушанка\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17976) {if(GetIteam(playerid,359) < 3000) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -3000, 0); GiveAcs(playerid, 17976, 14); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Аксессуар на Транспорт\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 15752) {if(GetIteam(playerid,359) < 1750) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -1750, 0); GiveAcs(playerid, 15752, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Шапка Бинни\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 18297) {if(GetIteam(playerid,359) < 1000) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -1000, 0); GiveAcs(playerid, 18297, 23); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Декоративный Поезд Для Дома\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 18296) {if(GetIteam(playerid,359) < 950) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -950, 0); GiveAcs(playerid, 18296, 23); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Декоративный Мопед Для Дома\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 18298) {if(GetIteam(playerid,359) < 950) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -950, 0); GiveAcs(playerid, 18298, 23); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Декоративные Лединцы\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 14793) {if(GetIteam(playerid,359) < 750) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -750, 0); GiveAcs(playerid, 14793, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Шапка Ушанка Серая\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17995) {if(GetIteam(playerid,359) < 650) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -650, 0); GiveAcs(playerid, 17995, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Ободок Единорога\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	if(item == 17988) {if(GetIteam(playerid,359) < 650) return GameText(playerid, "~r~Недостаточно Ледяных механизмов", 3000, 2); if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~Не хватает места", 3000, 2); GiveIteam(playerid, 359, 1, -650, 0); GiveAcs(playerid, 17988, 4); SCM(playerid, COLOR_GOLD, "Вы успешно купили \"Ободок Рожки\"! Предмет находится в вашем инвентаре"), GameText(playerid, "~g~Успешная покупка", 3000, 2);}
	return 1;
}*/

stock OnPlayerTicketTime(playerid)
{
	new query[90],
		Cache: result;

	format(query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			new time = cache_get_field_content_int(i, "time");

			if(time + 259200 < gettime())
			{
				SCM(playerid, 0xFFA500FF, "{ffa500}В связи с неуплатой штрафов ваше вод.удостоверение аннулировано");
				SetPlayerData(playerid, P_DRIVING_LIC, 0);
				UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
				cache_delete(result);
				return 1;
			}
		}
	}
	cache_delete(result);
	return 1;
}


stock ShowOwnableTickets(playerid, page, type)
{
	type_page_cars[playerid] = 0;

	new query[90],
		Cache: result,
		index,
		page_1,
		page_2, 
		next,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	ClearPlayerListitemValues(playerid);

	string_dialog[0] = EOS;
	if(rows)
	{
		for(new i; i < rows; i ++)
		{
			if(i >= (page * 20) && i < (page * 20) + 20)
            next++;

			if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        	{
				new reason[64];

				cache_get_field_content(i, "description", reason);

				format(query, sizeof query, "#%d\t%d руб.\t%s\n", cache_get_field_content_int(i, "id"),
				cache_get_field_content_int(i, "amount"), reason);

				strcat(string_dialog, query);

				g_player_listitem[playerid][index] = cache_get_field_content_int(i, "id");

				index++;
			}
		}
	}
	else format(string_dialog, sizeof string_dialog, "У Вас нет неоплаченных штрафов");

	cache_delete(result);

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}

	if(type == 0) IntfDialogCallRemote(playerid, DIALOG_ATM_TICKET_LIST, DIALOG_STYLE_LIST,"{FFD83D}Список штрафов",string_dialog,"Выбор", "Отмена", page_1, page_2);
	if(type == 1) IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_LIST,"{FFD83D}Список штрафов",string_dialog,"", "Закрыть", page_1, page_2);

	return 1;
}
stock ShowBizlist(playerid, page)
{
	new index,
		page_1,
		page_2, 
		next;

	new fmt_text[94];

	ClearPlayerListitemValues(playerid);

	string_dialog = "{FFFFFF}Бизнес\tТребуется\tОплата работы";

	for(new i; i < sizeof g_order; i ++)
	{
		if(!GetOrderData(i, O_AMOUNT)) continue;

		if(i >= (page * 20) && i < (page * 20) + 20)
		next++;

		if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
		{
			format(fmt_text, sizeof fmt_text, "\n№%d: %s\t%d ед.\t%s руб",
			GetOrderData(i, O_COMPANY_ID), GetBusinessData(GetOrderData(i, O_COMPANY_ID), B_NAME), GetOrderData(i, O_AMOUNT), formatInt(GetOrderData(i, O_PRICE)));

			strcat(string_dialog, fmt_text);

			SetPlayerListitemValue(playerid, index, i);

			index++;
		}
	}
	if(!index) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}

	IntfDialogCallRemote(playerid, DIALOG_BIZ_ORDERS, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Контракты на доставку", string_dialog, "Выбрать", "Закрыть", page_1, page_2);

	return true;
}

stock ShowFuellist(playerid, page)
{
	new index,
		page_1,
		page_2, 
		next;

	new fmt_text[94];

	ClearPlayerListitemValues(playerid);

	string_dialog = "{FFFFFF}Бизнес\tТребуется\tОплата работы";

	for(new i; i < sizeof g_fuelorder; i ++)
	{
		if(!GetFuelOrderData(i, F_AMOUNT)) continue;

		if(i >= (page * 20) && i < (page * 20) + 20)
		next++;

		if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
		{
			format(fmt_text, sizeof fmt_text, "\n№%d: %s\t%d ед.\t%s руб",
			GetFuelOrderData(i, F_COMPANY_ID), GetBusinessData(GetFuelOrderData(i, F_COMPANY_ID), B_NAME), GetFuelOrderData(i, F_AMOUNT), formatInt(GetFuelOrderData(i, F_PRICE)));

			strcat(string_dialog, fmt_text);

			SetPlayerListitemValue(playerid, index, i);

			index++;
		}
	}
	if(!index) return SendClientMessage(playerid, 0xCECECEFF, "Сейчас нет ни одного заказа");

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}

	IntfDialogCallRemote(playerid, DIALOG_FUEL_ORDERS, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Контракты на доставку", string_dialog, "Выбрать", "Закрыть", page_1, page_2);

	return true;
}

stock ShowAdminLists(playerid, page)
{
	new query[248],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		page_1,
		page_2, 
		next,
		name[21];

	string_dialog[0] = EOS;

	string_dialog = "Имя\tТип\tРанг\tВ игре вчера\tВ игре сегодня\tСтатус{FFFFFF}";

	result = mysql_query(mysql, "SELECT * FROM accounts_canvasdev WHERE admin > 0 ORDER BY admin DESC", true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		if(i >= (page * 20) && i < (page * 20) + 20)
            next++;

		if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
		{
			new buyadmin = cache_get_field_content_int(i, "buyadmin");

			new day_time[4];

			admin = cache_get_field_content_int(i, "admin");
			day_prev = cache_get_field_content_int(i, "game_for_day_prev");
			day_last = cache_get_field_content_int(i, "game_for_day");

			day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
			day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);

			day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
			day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);

			cache_get_field_content(i, "name", name);

			new fix_tabulation[21] = "";

			format
			(
				query, sizeof query,
				"\n{FFFFFF}%s%s\t%s{FFFFFF}\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t%s", 
				name,
				fix_tabulation[strlen(name)],
				buyadmin < 1 ? ("{FF5533}Штатный") : ("{66CC33}Покупной"),
				admin,
				day_time[0] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
				day_time[0],
				day_time[1],
				day_time[2] >= 3 ? day_time[0] > 3 ? "{66CC33}" : "{FFCD00}" : "{FF5533}",
				day_time[2],
				day_time[3],
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline"
			);

			strcat(string_dialog, query);
		}
	}

	cache_delete(result);

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}

	IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_TABLIST_HEADERS, "{FFCD00}Список администрации", string_dialog, "Закрыть", "", page_1, page_2);
}
stock ShowOwnableCars(playerid, dialogid, page)
{
	dialogid = 0;

	new fmt_text[148], 
		page_1,
		page_2, 
		next,
		index,
		Cache: result;

	next = dialogid;

	switch(type_page_cars[playerid])
	{
		case 1: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 2: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 3: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 4: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(GetPVarInt(playerid, "to_player")));
		case 5: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 6: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 9: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 15: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 17: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 18: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		case 20: format(fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	}

	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(type_page_cars[playerid] != 4) if(!rows) return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта"), cache_delete(result);
	else if(!rows) return SendClientMessage(playerid, 0x999999FF, "У данного игрока нет личного транспорта"), cache_delete(result);

	string_dialog[0] = EOS;
	STRING_GLOBAL[0] = EOS;
	for(new i; i < rows; i ++)
	{
		if(i >= (page * 20) && i < (page * 20) + 20)
            next++;

        if(i >= (page - 1) * 20 && i < ((page - 1) * 20) + 20)
        {
			new id = cache_get_field_content_int(i, "id");
			new model_id = cache_get_field_content_int(i, "model_id");

			new veh_id = INVALID_VEHICLE_ID;
			for(new idx = 0; idx < MAX_VEHICLES; idx++)
			{
				if(GetVehicleData(idx, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
				{
					new iddx = GetVehicleData(idx, V_ACTION_ID);
					if(GetOwnableCarData(iddx,OC_SQL_ID) == id)
					{
						veh_id = i;
					}
				}
			}

			if(veh_id == INVALID_VEHICLE_ID)
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{888888}- %s (%d)\n", GetVehicleInfo(model_id, VI_NAME), model_id);
			}
			else
			{
				format(STRING_GLOBAL, sizeof STRING_GLOBAL, "{FFFFFF}- %s (%d)\n", GetVehicleInfo(model_id, VI_NAME), model_id);
			}

			strcat(string_dialog, STRING_GLOBAL);
			g_player_listitem[playerid][index] = id;

			index++;
		}
	}

	cache_delete(result);

	if(next && page > 1)
	{
		page_1 = 1;
		page_2 = 1;
	}
	else if(!next && page > 1)
	{
		page_1 = 1; page_2 = 0;
	}
	else if(next && page <= 1)
	{
		page_1 = 0;
		page_2 = 1;
	}
	else if(!next && page <= 1)
	{
		page_1 = 0;
		page_2 = 0;
	}
	switch(type_page_cars[playerid])
	{
		case 1: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_LIST2, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 2: IntfDialogCallRemote(playerid, DIALOG_SELL_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 3: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_LIST3, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 4: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_SELECT, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 5: IntfDialogCallRemote(playerid, DIALOG_SELL_OWNABLE_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 6: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 9: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 15: IntfDialogCallRemote(playerid, DIALOG_CAR_LIST_NOTARY, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 17: IntfDialogCallRemote(playerid, DIALOG_OWNABLE_CAR_SPAWN, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 18: IntfDialogCallRemote(playerid, DIALOG_DISKI_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
		case 20: IntfDialogCallRemote(playerid, DIALOG_CRAFT_CAR, DIALOG_STYLE_LIST, "{0099FF}Выберите транспорт", string_dialog, "Выбрать", "Закрыть", page_1, page_2);
	}

	return 1;
}

public: OnMultiDialogClickNavigButton(playerid, page, dialogid, priority)
{
	if(page == 1)
	{
		page_cars[playerid]++;
  
		switch(type_page_cars[playerid])
		{
			case 0:	ShowOwnableTickets(playerid, page_cars[playerid], 0);
			case 1: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST2, page_cars[playerid]);
			case 2: ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
			case 3: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);
			case 4: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);
			case 5: ShowOwnableCars(playerid, DIALOG_SELL_OWNABLE_CAR, page_cars[playerid]);
			case 6: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST, page_cars[playerid]);
			case 7: ShowAdminLists(playerid, page_cars[playerid]);
			case 8: ShowBizlist(playerid, page_cars[playerid]);
			case 9: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			case 10: ShowDialogDonatePerfect(playerid, 1, page_cars[playerid]);
			case 11: ShowDialogDonatePerfect(playerid, 2, page_cars[playerid]);
			case 12: ShowDialogDonatePerfect(playerid, 3, page_cars[playerid]);
			case 13: ShowDialogDonatePerfect(playerid, 4, page_cars[playerid]);
			case 14: ShowDialogDonatePerfect(playerid, 5, page_cars[playerid]);
			case 15: ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
			case 17: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
			case 18: ShowOwnableCars(playerid, DIALOG_DISKI_CAR, page_cars[playerid]);
			case 19: ShowFuellist(playerid, page_cars[playerid]);
			case 20: ShowOwnableCars(playerid, DIALOG_CRAFT_CAR, page_cars[playerid]);
		}
	}
	else
	{
		page_cars[playerid]--;

		switch(type_page_cars[playerid])
		{
			case 0:	ShowOwnableTickets(playerid, page_cars[playerid], 0);
			case 1: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST2, page_cars[playerid]);
			case 2: ShowOwnableCars(playerid, DIALOG_SELL_CAR, page_cars[playerid]);
			case 3: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST3, page_cars[playerid]);
			case 4: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SELECT, page_cars[playerid]);
			case 5: ShowOwnableCars(playerid, DIALOG_SELL_OWNABLE_CAR, page_cars[playerid]);
			case 6: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_LIST, page_cars[playerid]);
			case 7: ShowAdminLists(playerid, page_cars[playerid]);
			case 8: ShowBizlist(playerid, page_cars[playerid]);
			case 9: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			case 10: ShowDialogDonatePerfect(playerid, 1, page_cars[playerid]);
			case 11: ShowDialogDonatePerfect(playerid, 2, page_cars[playerid]);
			case 12: ShowDialogDonatePerfect(playerid, 3, page_cars[playerid]);
			case 13: ShowDialogDonatePerfect(playerid, 4, page_cars[playerid]);
			case 14: ShowDialogDonatePerfect(playerid, 5, page_cars[playerid]);
			case 15: ShowOwnableCars(playerid, DIALOG_CAR_LIST_NOTARY, page_cars[playerid]);
			case 17: ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_SPAWN, page_cars[playerid]);
			case 18: ShowOwnableCars(playerid, DIALOG_DISKI_CAR, page_cars[playerid]);
			case 19: ShowFuellist(playerid, page_cars[playerid]);
			case 20: ShowOwnableCars(playerid, DIALOG_CRAFT_CAR, page_cars[playerid]);
		}
	}

	return true;
}

stock LoadCarAccessories(car_id, vehicleid, playerid = -1)
{
	for(new i; i < 9; i++)
	{
		if(IsValidDynamicObject(car_accessories[vehicleid][i])) DestroyDynamicObject(car_accessories[vehicleid][i]);
		car_accessories[vehicleid][i] = INVALID_OBJECT_ID;
	}

	new query[250],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM cars_accessories WHERE car_id='%d'", car_id);
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; i++)
		{
			new accessory_id = cache_get_field_content_int(i, "id");
			new model_id = cache_get_field_content_int(i, "model_id");
			new indx = cache_get_field_content_int(i, "indx");
			
			new Float: PosX = cache_get_field_content_float(i, "PosX");
			new Float: PosY = cache_get_field_content_float(i, "PosY");
			new Float: PosZ = cache_get_field_content_float(i, "PosZ");

			new Float: RotX = cache_get_field_content_float(i, "RotX");
			new Float: RotY = cache_get_field_content_float(i, "RotY");
			new Float: RotZ = cache_get_field_content_float(i, "RotZ");

            if(playerid != -1 && active_acs_id[playerid] == accessory_id) continue;

			car_accessories[vehicleid][indx] = CreateDynamicObject(model_id, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(car_accessories[vehicleid][indx], vehicleid, PosX, PosY, PosZ, RotX, RotY, RotZ);
		}
	}
	cache_delete(result);
	return true;
}

public: CB_BanHWIDoff(playerid, name[], reason[])
{
	if(!cache_num_rows()) 
		return SCM(playerid,-1,"Аккаунт с таким именем не найден.");

	new serialid[300],
		query[548];

	cache_get_row(0, 1, serialid);

	mysql_format(mysql, query, sizeof query, "INSERT INTO `hardware_bans` (`acc_id`, `hardware_id`, `type`, `reason`) VALUES ('%d', '%s', 1, '%s')", cache_get_row_int(0,0), serialid, reason);
	mysql_pquery(mysql, query);

	format(query, sizeof query, "[А] %s[%d] забанил игрока %s по hwid навсегда", GetPlayerNameEx(playerid), playerid, name);

	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);

	SendMessageToAdmins(query, 0x3399FFFF);

	return true;
}

stock SetPlayerGameStateConnection(playerid)
{
    new BitStream:bsn = BS_New();

    BS_WriteValue(bsn, PR_UINT8, 33);
	PR_SendPacket(bsn, playerid);

	BS_Delete(bsn);

	return 1;
}

stock GetHardwareIDBanned(playerid, hardware[])
{
	printf("Name Player [%s] | Serial ID [%s]", GetPlayerNameEx(playerid), hardware);

	new query[348];
	mysql_format(mysql, query, sizeof query, "SELECT * FROM hardware_bans WHERE hardware_id = '%s' LIMIT 1", hardware);
	mysql_tquery(mysql, query, "CB_GetHardwareIDBanned", "i", playerid);

	return 1;
}

public: CB_GetHardwareIDBanned(playerid)
{
	if(cache_num_rows())
	{
		g_player[playerid][P_HARDWARE_BAN] = 1;
		
		SetPlayerGameStateConnection(playerid);
		
		return true;
	}
	else 
		AccountInitilization(playerid);

	return true;
}

stock InformationServers()
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		new query[540];

		format
		(
			query, sizeof query, "interface('ScreenNotification').add('\
			[1,\"Информация\",\"{"SERVER_COLOR"}Наш Telegram: {ffffff}"SERVER_TELEGRAM"<br>\",\""SERVER_COLOR"\",5000]')");

		CEF_CREATE(i, 1, 2, query);
	}
	return true;
}

public: Employment_OnPlayerQuit(playerid, event)
{
	if(employment_kd[playerid] != 0) return GameTextForParams(playerid, 2,"~y~Подождите немного..",1500,0,-1,1,0,3.00);

	new i = event;

	SetPVarInt(playerid, "jobs_id", i);

	employment_kd[playerid] = 5;

	string_dialog[0] = EOS;
	format(string_dialog, 148, "{FFFFFF}Вы действительно хотите уволиться с работы: {FFFF00}'%s' {FFFFFF}?", Job_Name[i]);
	IntfDialogCallRemote(playerid, DIALOG_UNINVITE_JOB, DIALOG_STYLE_MSGBOX, "{FFFFFF}Увольнение с работы", string_dialog, "УВОЛИТЬСЯ", "ЗАКРЫТЬ");
	return 1;
}

enum jobs_mark_structs
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}

new jobs_mark[19][jobs_mark_structs] =
{
	{-1078.55, 2184.04, 38.07},
	{-489.55, 3337.13, 31.04},
	{435.01, -2442.06, 34.93},
	{0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
	{299.19, 434.36, 11.95},
	{-2085.54, -134.70, 25.99},
	{780.04, 807.69, 12.06},
	{0.0, 0.0, 0.0},
	{1801.60, 2506.59, 16.39},
	{0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
	{0.0, 0.0, 0.0},
	{-411.38, 1029.62, 12.11},
	{2890.72, 1415.85, 2.61},
	{0.0, 0.0, 0.0},
	{1970.24, -2603.84, 11.48},
	{-381.19, 381.09, 12.08},
	{2785.39, -2031.20, 21.39}
};

stock Employment_OnPlayerMark(playerid, jobs_type)
{
	switch(jobs_type)
	{
	    case 3: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "Для трудоустройства Вам необходимо приехать на любую ферму.\nНавигатор > по работе > ферма", "Понятно", ""); 
		case 4: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "На данную работу можно устроиться выбрав нужное приложение в телефоне", "Понятно", ""); 
		case 8: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "Для трудоустройства Вам необходимо приехать в любой таксопарк и арендовать транспорт.\nНавигатор > по работе > таксопарк\n\nПодробнее можно ознакомиться в приложении телефона", "Понятно", ""); 
		case 10: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "{FFFFFF}Для получения работы тонировщика вам нужно связаться с руководством детейлинг центра\n\nНа данный момент работают:\n- Детейлинг Центр \'Нижегородск\' | Город: Нижегородская обл.\n- Детейлинг Центр \'Батырево\' | Город: Батырево\n- Детейлинг Центр \'Южный\' |", "Понятно", "");
		case 11: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "Для трудоустройства Вам необходимо приехать на любую станцию тех. обслуживания.\nКарта > по работе > стоянка автомехаников\n\nНа данный момент работают:\n- СТО 1 | Город: Арзамас\nСТО 2 | Город: Лыткарино\nСТО 3 | Город: Южный", "Понятно", ""); 
		case 12: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "{FFFFFF}Для получения работы нотариуса вам нужно связаться с руководством нотариальной фирмы\n\nНа данный момент работают:\n- Нотариус \'ЮрШтамп\' | Город: Арзамас\n- Нотариальное бюро \'Легитимус\' | Город: Арзамас\n- Нотариальное бюро \'ЮрШтамп\' | Город: Бусаево\n", "Понятно", ""); 
		case 15: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "{FFFFFF}Для получения работы дальнобойщика вам нужно связаться с руководством транспортной компании\n\nНа данный момент работают:\n- ТК \'Южный\' | Город: Нижегородская обл.\n- ТК \'Лыткарино\' | Город: Лыткарино\n- ТК \'Батырево\' | Город: Батырево\n", "Понятно", ""); 
	}

	EnablePlayerGPS(playerid, 98, jobs_mark[jobs_type][PosX], jobs_mark[jobs_type][PosY], jobs_mark[jobs_type][PosZ], "На карте отмечено местоположение работы.");
	GameText(playerid, "~w~На карте отмечено~n~Местоположение работы", 3000, 2);
	return 1;
}

public: Employment_OnPlayerApply(playerid, type)
{
	if(employment_kd[playerid] != 0) return GameTextForParams(playerid, 2,"~y~Подождите немного..",1500,0,-1,1,0,3.00);

	if(GetPlayerTeamEx(playerid) != TEAM_NONE) return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Центр занятости", "Вы не можете устроиться на работу, находясь во фракции", "Понятно", "");
	
	new job_slot_1 = g_player_jobs[playerid][0];
	new job_slot_2 = g_player_jobs[playerid][1];
	new job_slot_3 = g_player_jobs[playerid][2];

	if(job_slot_1 != -1 && job_slot_2 != -1 && job_slot_3 != -1){
        SendClientMessage(playerid, COLOR_GREY, "Вы уже имеете максимальное количество профессий.");
		GameTextForParams(playerid, 2,"~r~Максимальное~n~кол-во профессий",1500,0,-1,1,0,3.00);
		return 0;
	}

	switch(type){
		case 0..3: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{C0D897}Центр занятости", "{FFFFFF}Вы не можете устроиться на временную работу.\nДля начала работы Вам необходимо отметить её на карте.\nПосле этого приехать на нее, переодеться и приступить к работе", "", "Понятно"); 
	    case 4: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{C0D897}Центр занятости", "{FFFFFF}На данную работу можно устроиться выбрав нужное приложение в телефоне", "", "Понятно");
	    case 5:{
			SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу в дорожной службе.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}навигатор {FFFFFF}чтобы найти стоянку транспорта дорожной службы.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте радиальное меню -> персонаж -> список профессий для ознакомления с Вашими профессиями.");
		}
		case 6:{
			SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу электрика.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}навигатор {FFFFFF}чтобы добраться до работы.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте радиальное меню -> персонаж -> список профессий для ознакомления с Вашими профессиями.");
		}
	    case 7:{
            SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу водителя автобуса.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки автобусов находятся в АТП. Используйте {0099FF}навигатор {FFFFFF}чтобы найти ближайшие к вам.");
            SendClientMessage(playerid, 0xFFFFFFFF, "Используйте радиальное меню -> персонаж -> список профессий для ознакомления с Вашими профессиями.");
		}
		case 8:{
			SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу таксиста.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Для того чтобы начать работать в такси, откройте приложение в телефоне.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Либо найдите любой таксопарк в навигаторе > таксопарк и арендуйте транспорт для работы.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте радиальное меню -> персонаж -> список профессий для ознакомления с Вашими профессиями.");
		}
		case 9:{
            SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {66CC00}Вы устроились на работу водителя мусоровоза.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}навигатор {FFFFFF}чтобы добраться до работы.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Используйте радиальное меню -> персонаж -> список профессий для ознакомления с Вашими профессиями.");
		}
		case 15: return IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Информация о работе", "{FFFFFF}Для получения работы дальнобойщика вам нужно связаться с руководством транспортной компании\n\nНа данный момент работают:\n- ТК \'Южный\' | Город: Нижегородская обл.\n- ТК \'Лыткарино\' | Город: Лыткарино\n- ТК \'Батырево\' | Город: Батырево\n", "Закрыть", "");
		default: return 0;
	}

    JobInvite(playerid, type);
    InterfaceEmploymentUpdate(playerid);

    CEF_CREATE(playerid, 1, 2, "interface('Employment').showNotification()");

	employment_kd[playerid] = 5;
	return 1;
}

stock InterfaceEmploymentUpdate(playerid)
{
	new str[128] = "interface('Employment').setCurrentEmployments([";
	new appended = 0;

    for(new i = 0; i < 3; i++){
		new job_id = g_player_jobs[playerid][i];
		if(job_id == -1) continue;

		if(appended > 0) strcat(str, ",");

		new buf[8];
		format(buf, sizeof(buf), "%d", job_id);
		strcat(str, buf);
		appended++;
	}

	strcat(str, "])");
	CEF_CREATE(playerid, 1, 2, str);
	return 1;
}

stock JobInvite(playerid, job)
{
	for(new i; i < 3; i++)
    {
        if(g_player_jobs[playerid][i] != -1) continue;
        if(g_player_jobs[playerid][i] == -1) g_player_jobs[playerid][i] = job;
		break;
    }

	mysql_string[0] = EOS;
    format(mysql_string, sizeof mysql_string, "UPDATE jobs_player SET jobs='%d,%d,%d' WHERE uid = %d LIMIT 1", g_player_jobs[playerid][0], g_player_jobs[playerid][1], g_player_jobs[playerid][2], GetPlayerAccountID(playerid));
    mysql_query(mysql, mysql_string);

	return 1;
}

public: Employment_OnPlayerClose(playerid)
{
	CEF_HIDE(playerid, "Employment");
	return true;
}

stock CreateProdsOrders()
{
	for(new i; i < g_business_loaded; i++)
	{
		if(GetBusinessData(i, B_TYPE) != BUSINESS_TYPE_SHOP_24_7) continue;
		if(GetBusinessData(i, B_ORDER_ID) != -1) continue;

		new random_ = RandomEx(2000, 7000);
		new random_price = RandomEx(1500000, 25000000);
		CreateOrder(0, i, random_, random_price);
	}
}

stock CreateFuelOrders()
{
	for(new i; i < g_business_loaded; i++)
	{
		if(GetBusinessData(i, B_TYPE) != BUSINESS_TYPE_FUEL_STATION) continue;
		if(GetBusinessData(i, B_ORDER_ID) != -1) continue;

		new random_ = RandomEx(2000, 7000);
		new random_price = RandomEx(1500000, 25000000);
		CreateFuelOrder(0, i, random_, random_price);
	}
}

stock ShowPlayerJMenu(playerid)
{
	if(HasJob(playerid, 15))
	{
		IntfDialogCallRemote
		(
			playerid, DIALOG_TK_JMENU, DIALOG_STYLE_LIST, 
			"{FFCD00}Меню сотрудника компании", 
			"1. {ffe36c}Информация о компании\n\
			2. Руководство по работе\n\
			3. Список сотрудников на работе\n\
			4. {ff986c}Уволиться из компании",
			"Далее", "Закрыть"
		);
	}
}

stock SendClientMessageTruck(playerid, text[], type)
{
	new fmt_text[148];

	if(type == 1)
	{
		if(GetPlayerData(playerid, P_TK_JOB) == 1) format(fmt_text, sizeof fmt_text, "Штатный дальнобойщик %s[%d]: %s", GetPlayerNameEx(playerid), playerid, text);
		if(GetPlayerData(playerid, P_TK_JOB) == 2) format(fmt_text, sizeof fmt_text, "Внештатный дальнобойщик %s[%d]: %s", GetPlayerNameEx(playerid), playerid, text);
	}
	else
	{
		if(GetPlayerData(playerid, P_TK_JOB) == 1) format(fmt_text, sizeof fmt_text, "Штатный дальнобойщик %s[%d]: (( %s ))", GetPlayerNameEx(playerid), playerid, text);
		if(GetPlayerData(playerid, P_TK_JOB) == 2) format(fmt_text, sizeof fmt_text, "Внештатный дальнобойщик %s[%d]: (( %s ))", GetPlayerNameEx(playerid), playerid, text);
	}

	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;

		if(GetPlayerData(i, P_JOB) != 4) continue;
		if(GetPlayerData(i, P_TK_JOB) != GetPlayerData(playerid, P_TK_JOB)) continue;

		SendClientMessage(i, 0x2e9f5eFF, fmt_text);
	}
}

stock AddBusinessProfit(playerid, businessid, price, prods = 1)
{
	new VetrId[] = {0, 92, 93, 95, 96, 97, 98};

	new city = GetBusinessData(businessid, B_ELECTRICITY);
	new Vetr = (city >= 1 && city <= 6) ? VetrId[city] : -1;
	new storage = (Vetr > 0) ? GetBusinessData(Vetr, B_IZNOS) : 0;

    if(GetBusinessData(businessid, B_TYPE) != 36 && GetBusinessData(businessid, B_TYPE) != 37)
	{
		if(Vetr > 0 && storage <= 0) return 0;
    }

	format(g_business[businessid][B_BALANCE], 21, "%s", SetILPlayerInt(playerid, GetBusinessData(businessid, B_BALANCE), price));
	AddBusinessData(businessid, B_PRODS, -, prods);

	new query[164];
	mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (business_id, player_id, time, money, view) VALUES (%d,%d,%d,%d, 1)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), gettime(), price);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "UPDATE business SET products=%d, balance=%s WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_SQL_ID));
	mysql_query(mysql, query, false);

	return 1;
}
 
stock GivePlayerExp(playerid, count)
{
	AddPlayerData(playerid, P_EXP, +, count);

	if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
	{
		SetPlayerData(playerid, P_EXP, 0);
		AddPlayerData(playerid, P_LEVEL, +, 1);

		SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");

		SetPlayerLevelInit(playerid);

		if(GetPlayerData(playerid, P_LEVEL) == 4)
		{
			new query[148],
			Cache: result;

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts_canvasdev WHERE name='%e' LIMIT 1", GetPlayerData(playerid, P_REFER));
			result = mysql_query(mysql, query);

			if(!mysql_errno())
			{
				new id = cache_get_field_content_int(0, "id");

				CreatePlayerBonus(id, 50000000, "Приглашенного игрока");

				format(query, sizeof query, "{FFFFFF}Бонус за реферала {a2a451}%s {FFFFFF}в размере {b48158}%s руб", GetPlayerNameEx(playerid), formatInt(50000000));
				CreatePlayerNotification(id, query);
			}

			cache_delete(result);
		}
	}

	UpdatePlayerDatabaseInt(playerid, "exp", GetPlayerData(playerid, P_EXP));
	UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
}

stock CreatePlayerBonus(id, count, text[])
{
	new query[190];
	mysql_format(mysql, query, sizeof query, "INSERT INTO player_bonus (owner_id, count, text) VALUES (%d, %d, '%s')", id, count, text);
	mysql_query(mysql, query, false);
	return true;
}

stock CreatePlayerNotification(id, text[], note_text[] = "")
{
	foreach(new i: Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;

		if(id != GetPlayerAccountID(i)) continue;

		CEF_CREATE(i, 2, 4, "Notification", "[0]");
		break;
	}

	new query[248];
	mysql_format(mysql, query, sizeof query, "INSERT INTO notification (owner_id, text, note_text, time, status) VALUES (%d, '%s', '%s', NOW(), 1)", id, text, note_text);
	mysql_query(mysql, query, false);
	return true;
}

stock ModifyCashBalance(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	format(fmt_str, sizeof fmt_str, "%d", money);

	format(g_player[playerid][P_MONEY], 21, "%s", EditCountSInteger(playerid, QueryPlayerBalance(playerid), fmt_str));

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,last_money,description) VALUES (%d,'%s',NOW(),'%s','%s','%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), formatStr(fmt_str), formatStr(g_player[playerid][P_MONEY]), description);
	mysql_query(mysql, fmt_str, false);

	format(fmt_str, sizeof fmt_str, "window.interface('Hud').info.money = %s", QueryPlayerBalance(playerid));
	CEF_CREATE(playerid, 1, 2, fmt_str);

	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts_canvasdev SET money=%s WHERE id=%d LIMIT 1", QueryPlayerBalance(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	if(game_text)
	{
		format(fmt_str, sizeof(fmt_str), "%s%s рублей", money < 0 ? ("~r~") : ("~g~+"), formatInt(money));
		GameText(playerid, fmt_str, 3000, 2);
	}
	return 1;
}

stock GivePlayerMoneyStr(playerid, money[], description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[360];

	if(game_text)
	{
		if(strfind(money,"-") != -1) format(fmt_str, sizeof fmt_str, "~r~%s рублей", formatStr(money));
		else format(fmt_str, sizeof fmt_str, "~g~+%s рублей", formatStr(money));
		GameText(playerid, fmt_str, 3000, 2);
	}
	
	format(g_player[playerid][P_MONEY], 21, "%s", EditCountSInteger(playerid, QueryPlayerBalance(playerid), money));

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,last_money,description) VALUES (%d,'%s',NOW(),'%s','%s','%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), formatStr(money), formatStr(g_player[playerid][P_MONEY]), description);
	mysql_query(mysql, fmt_str, false);


	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts_canvasdev SET money='%s' WHERE id=%d LIMIT 1", QueryPlayerBalance(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}

	format(fmt_str, sizeof fmt_str, "window.interface('Hud').info.money = %s", QueryPlayerBalance(playerid));
	CEF_CREATE(playerid, 1, 2, fmt_str);

	return 1;
}

public: WoshTimer(playerid)
{
	if(wosh_status[playerid] < 100)
	{
		wosh_status[playerid] = wosh_status[playerid] + 3;

		new fmt_text[64];
		format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", wosh_status[playerid]);
		CEF_CREATE(playerid, 1, 2, fmt_text);
	}
	else
	{
		CEF_HIDE(playerid, "ProgressBar");

		KillTimer(woshtimer[playerid]);

		wosh_status[playerid] = 0;

		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));

		ModifyCashBalance(playerid, -12500000, "Стирка одежды");

		new price = (12500000 / 100) * 50;

		AddBusinessProfit(playerid, GetPlayerInBiz(playerid), price);

		TogglePlayerControllable(playerid, true);

		new i = GetPVarInt(playerid, "skin_wosh");

		SetPlayerItem(i, PI_SKIN_IZNOS, 3);

		new query[94];
		format(query, sizeof query, "UPDATE items SET skin_iznos=%d WHERE id=%d", GetPlayerItem(i, PI_SKIN_IZNOS), GetPlayerItem(i, PI_SQL_ID));
		mysql_query(mysql, query, false);

		SetPVarInt(playerid, "skin_wosh", 0);

		SCM(playerid, 0xFF7F00FF, "Вы постирали свою одежду");
	}
	return true;
}

public: MinerTimer(playerid, type)
{
	if(type == 1){
	    if(byr_status[playerid] < 100){
		    byr_status[playerid] = byr_status[playerid] + 20;

		    new fmt_text[64];
		    format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", byr_status[playerid]);
		    CEF_CREATE(playerid, 1, 2, fmt_text);
	    }else{
		    CEF_HIDE(playerid, "ProgressBar");

		    KillTimer(byr_timer[playerid]);

		    byr_status[playerid] = 0;

		    if(g_player_mine_status[playerid] == 2){
			    new rack = g_player_mine_rack[playerid];

			    g_player_mine_cp[playerid] = 4;
			    GameText(playerid, "~y~Готово!~n~Возьмите кирку со стойки", 3000, 2);
			    SetPlayerCheckpoint(playerid, g_mine_rack[rack][0], g_mine_rack[rack][1], g_mine_rack[rack][2], 1.0);
			    g_player_mine_status[playerid] = 3;

			    new id = g_player_mine_ore[playerid];

			    g_mine_ore[id][MO_STATUS] = 2;

			    TogglePlayerControllable(playerid, true);

			    if(IsValidDynamicObject(g_mine_ore[id][MO_OBJECT])) 
				    DestroyDynamicObject(g_mine_ore[id][MO_OBJECT]);
			
			    g_mine_ore[id][MO_OBJECT] = INVALID_OBJECT_ID;

			    if(IsValidDynamic3DTextLabel(g_mine_ore[id][MO_LABEL])) 
				    DestroyDynamic3DTextLabel(g_mine_ore[id][MO_LABEL]);

			    g_mine_ore[id][MO_LABEL] = Text3D: INVALID_3DTEXT_ID;

			    if(g_mine_ore[id][MO_TYPE] == 1)
				    g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17106, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
                else if(g_mine_ore[id][MO_TYPE] == 2)
				    g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17165, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
			    else if(g_mine_ore[id][MO_TYPE] == 3)
				    g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17164, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
			    else if(g_mine_ore[id][MO_TYPE] == 4)
				    g_mine_ore[id][MO_OBJECT] = CreateDynamicObject(17166, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 0.0, 0.0, 0.0);
			    g_mine_ore[id][MO_LABEL] = CreateDynamic3DTextLabel("{"MINE_COLOR"}Груда камней", -1, g_mine_ore_pos[id][MOP_DOWN][0], g_mine_ore_pos[id][MOP_DOWN][1], g_mine_ore_pos[id][MOP_DOWN][2], 15.0);

			    SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.0290, 0.1280, 0.1020, -24.0000, -14.8000, 0.0000, 1.0000, 1.0000, 1.0000, 0, 0);

			    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
			}
		}
	}
	if(type == 2){
	    if(zagruz_status[playerid] < 100){
		    zagruz_status[playerid] = zagruz_status[playerid] + 20;

		    new fmt_text[64];
		    format(fmt_text, sizeof fmt_text, "interface('ProgressBar').setFill(0,%d)", zagruz_status[playerid]);
		    CEF_CREATE(playerid, 1, 2, fmt_text);
	    }else{
		    CEF_HIDE(playerid, "ProgressBar");

		    KillTimer(zagruz_timer[playerid]);

		    zagruz_status[playerid] = 0;

		    TogglePlayerControllable(playerid, true);
	
		    new id = g_player_mine_ore[playerid];

		    ClearAnimations(playerid);

		    g_mine_ore[id][MO_STATUS] = 4;
 
		    if(IsValidDynamicObject(g_mine_ore[id][MO_OBJECT])) 
			    DestroyDynamicObject(g_mine_ore[id][MO_OBJECT]);

		    if(IsValidDynamicObject(g_player_mine_object[playerid])) 
			    DestroyDynamicObject(g_player_mine_object[playerid]);
			
		    g_mine_ore[id][MO_OBJECT] = INVALID_OBJECT_ID;

		    g_player_mine_object[playerid] = INVALID_OBJECT_ID;

		    if(IsValidDynamic3DTextLabel(g_mine_ore[id][MO_LABEL])) 
			    DestroyDynamic3DTextLabel(g_mine_ore[id][MO_LABEL]);

		    g_mine_ore[id][MO_LABEL] = Text3D: INVALID_3DTEXT_ID;

	        g_player_mine_status[playerid] = 8;

		    RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
		    SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 17108, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0, 0);
		    GameText(playerid, "Отвезите тележку к вагонетке", 3000, 2);
			GivePlayerWeapon(playerid, 6, 0);
		    SetPlayerAmmo(playerid, 6, 0);

		    new random_vagon = random(4);

		    g_player_mine_cp[playerid] = 8;
		    SetPlayerCheckpoint(playerid, g_mine_vagon[random_vagon][0], g_mine_vagon[random_vagon][1], g_mine_vagon[random_vagon][2], 2.0);
		}
	}	
	return true;
}

stock Contraband_Notify()
{
    SendClientMessageToAll(0xFF6600FF, "Внимание! Через 10 минут начнется миссия по захвату сброшенной контрабанды!");

    contraband_status = 1;
    contraband_time_spawn = gettime() + 600;
}

stock Contraband_Spawn()
{
    new rand_pos = RandomEx(0, MAX_CONTRABAND);

    contraband_amount = 5;
    contraband_status = 2;

    contraband_pos_x = g_contraband_pos[rand_pos][E_POS_X];
    contraband_pos_y = g_contraband_pos[rand_pos][E_POS_Y];
    contraband_pos_z = g_contraband_pos[rand_pos][E_POS_Z];

    contraband_pickup = CreatePickup
    (
        11745,
        23,
        g_contraband_pos[rand_pos][E_POS_X],
        g_contraband_pos[rand_pos][E_POS_Y],
        g_contraband_pos[rand_pos][E_POS_Z],
        -1,
        PICKUP_ACTION_TYPE_CONTRABAND
    );

    contraband_map_icon = CreateDynamicMapIcon
    (
        g_contraband_pos[rand_pos][E_POS_X],
        g_contraband_pos[rand_pos][E_POS_Y],
        g_contraband_pos[rand_pos][E_POS_Z],
        12,
        0,
        -1,
        -1,
        -1,
        5000.0
    );

    contraband_label = CreateDynamic3DTextLabel
    (
        "{FFA500}Контрабанда\n{FFFFFF}Количиство груза:\n{FFA500}5 шт",
        -1,
        g_contraband_pos[rand_pos][E_POS_X],
        g_contraband_pos[rand_pos][E_POS_Y],
        g_contraband_pos[rand_pos][E_POS_Z] + 0.4,
        7.0
    );
    
    Contraband_UpdateLabel();
    
    new playerid;
    contraband_block_time[playerid] = 300;
    contraband_time_destroy = gettime() + 1500;

    SendClientMessageToAll(0xFF6600FF, "Открыто наземное окно для захвата контрабанды! {FFFFFF}(/get_contraband)");
    SendClientMessageToAll(0xFF6600FF, "У вас есть 25 минут чтобы забрать контрабанду!");
}

stock Contraband_UpdateLabel()
{
    new fmt_str[300 + 1];

    format(fmt_str, sizeof fmt_str, "{FFA500}Контрабанда\n{FFFFFF}Количиство груза:\n{FFA500}%d шт", contraband_amount);

	UpdateDynamic3DTextLabelText(contraband_label, -1, fmt_str);

    if(contraband_amount < 1)
    {
        Contraband_Destroy();
    }
}

stock Contraband_Destroy()
{
    if(IsValidDynamicMapIcon(contraband_map_icon)) DestroyDynamicMapIcon(contraband_map_icon);
    if(IsValidPickupID(contraband_pickup)) DestroyPickup(contraband_pickup);
    if(IsValidDynamic3DTextLabel(contraband_label)) DestroyDynamic3DTextLabel(contraband_label);

    SendClientMessageToAll(0xFF6600FF, "Наземное окно для захвата контрабанды закрыто!");
    
    contraband_status = 0;
    contraband_time_spawn = -1;
    contraband_time_destroy = -1;
}

public: OnInteractionsClick(playerid, event)
{
	switch(event)
	{
		case -1:
		{
			return 1;
		}
		case 0:
		{
			return 1;
		}
		case 1:
		{
			new idx = GetNearestBusiness(playerid, 15.0);

			if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DETEYLING)
			{
				new vehicleid = GetPlayerVehicleID(playerid);

				if(GetPlayerOwnableCarLast(playerid) != vehicleid) return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

				foreach(new i: Player)
				{
					if(!IsPlayerConnected(i)) continue;
					if(!IsPlayerLogged(i)) continue;
					if(i == playerid) continue;
					if(IsPlayerInVehicle(i, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
					break;
				}

				SetVehiclePos(vehicleid, -6.6451,503.9987,1001.0556);
				SetVehicleZAngle(vehicleid, 178.8139);
				TogglePlayerControllable(playerid, 0);

				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, playerid + 1);

				LinkVehicleToInterior(vehicleid, 3);
				SetVehicleVirtualWorld(vehicleid, playerid + 1);

				SetPlayerCameraPos(playerid,-3.6452, 498.7973, 1001.8854);
				SetPlayerCameraLookAt(playerid,-6.6452, 501.9935, 1001.2854);

				if(GetBusinessData(idx, B_TYPE) == BUSINESS_TYPE_DETEYLING)
				{
					SetPlayerInBiz(playerid, idx);
					CEF_CREATE(playerid, 1, 4, "TintingOrder");
				}
			}
		}
		case 2:
		{
            OpenTuningVinil(playerid, GetNearestBusiness(playerid, 15.0));
		}
		case 3:
		{
			if(g_player_status_fish[playerid] != 0)
	        {
		        if(g_player_status_fish[playerid] == 4)
		        {
				    if(g_player_fish_timer[playerid] > 0)
				    {
					    SCM(playerid, 0xf1951aFF, "Рыба сорвалась с крючка.");
					    g_player_status_fish[playerid] = 3;

					    CEF_HIDE(playerid, "Fishing");
					    CEF_HIDE(playerid, "Interactions");
					    CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");

					    TogglePlayerControllable(playerid,true);
					    SetCameraBehindPlayer(playerid);
						ClearAnimations(playerid);
					    return true;
				    }
				    if(g_player_fish_timer[playerid] < -1)
				    {
					    SCM(playerid, 0xf1951aFF, "Подсечка не удалась, рыба съела наживку и уплыла.");
					    g_player_status_fish[playerid] = 2;

					    CEF_HIDE(playerid, "Fishing");
					    CEF_HIDE(playerid, "Interactions");
					    CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");

					    TogglePlayerControllable(playerid,true);
				        SetCameraBehindPlayer(playerid);

						ClearAnimations(playerid);
					    return true;
				    }

				    g_player_status_fish[playerid] = 2;

				    g_player_type_fish[playerid] = random(10);
				    g_player_type_fish_ves[playerid] = RandomEx(1,15);

				    player_DialogID[playerid] = DIALOG_ACTION_FISH;

				    STRING_GLOBAL[0] = EOS;
				    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.addDialogInQueue('[%i,6,\"Улов\",\"\",\"Забрать\",\"Отпустить\",0,0]', [\"Вы поймали %s весом %d кг.<n><n>Вы хотите забрать или отпустить рыбу?\", \"fishing/fish/%d.png\"], 0)", DIALOG_ACTION_FISH, indxFishType[g_player_type_fish[playerid]], g_player_type_fish_ves[playerid], fishImageMap[g_player_type_fish[playerid]]);
				    CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

				    SCMF(playerid, 0x56e65eFF, "Вы словили рыбу {FFFFFF}\"%s\" {56e65e}весом %d кг.", indxFishType[g_player_type_fish[playerid]], g_player_type_fish_ves[playerid]);
				}
			}
		}
		case 4:
		{
            CEF_HIDE(playerid, "Fishing");
			CEF_HIDE(playerid, "Interactions");
			CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");
			g_player_status_fish[playerid] = 1;
            TogglePlayerControllable(playerid,true);
            SetCameraBehindPlayer(playerid);
		}
		case 5:
		{
            new str[128],name[MAX_PLAYER_NAME],action[21],actions[21];
            if(IsPlayerConnected(playerid))
	        {
                if(GetPVarInt(playerid,"respeat")== 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет c собой еды");

		        if(GetPlayerData(playerid, P_EAT) == 100) return SCM(playerid, 0xCECECEFF, "* Вы не голодны");

				if(GetPVarInt(playerid,"training") == 1) CEF_CREATE(playerid, 2, 4, "News", "[\"Начальное обучение\",[[\"Полезная информация\",\"Дома распределены по всей игровой карте, а те, где есть огород или гараж, пользуются высокой ценностью на вторичном рынке.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/1.png\"],[\"Улучшения для дома\",\"У каждого дома есть свой уникальный интерьер, а также платные улучшения, расширяющие его функциональность.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/2.png\"],[\"Гардероб и коллекции\",\"Гардероб предоставляет возможность удобного хранения множества одежды и формирования стильных коллекций.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/3.png\"],[\"Холодильник\",\"Пользуйтесь возможностью заказать доставку еды на дом прямо через телефон, используя доступ к холодильнику.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/4.png\"],[\"Стиральная машина\",\"Одежда часто изнашивается, поэтому для её восстановления необходимо периодически стирать.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/5.png\"],[\"Домашняя аптечка\",\"Наличие аптечки в доме обеспечивает возможность полноценного восстановления здоровья три раза в день.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/6.png\"],[\"Шкаф для вещей\",\"Шкаф для вещей обеспечивает удобное хранение предметов в доме.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/7.png\"],[\"Совместное проживание\",\"Совместное проживание дает возможность приютить человека у себя дома.\",\"https://hassle.fra1.cdn.digitaloceanspaces.com/learning/2/8.png\"]],[2,3,3]]");

		        ApplyAnimation(playerid,"FOOD","EAT_Burger", 2.0,0,0,0,0,5000,1);

		        if(GetPVarInt(playerid,"respeat") == 1) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 30);
		        if(GetPVarInt(playerid,"respeat") == 2) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 50);
		        if(GetPVarInt(playerid,"respeat") == 3) SetPlayerData(playerid, P_EAT, GetPlayerData(playerid, P_EAT) + 70);

		        if(GetPlayerData(playerid, P_EAT) > 100) SetPlayerData(playerid, P_EAT, 100);
		        UpdatePlayerDataInt(playerid, "hunger", GetPlayerData(playerid, P_EAT));

		        GetPlayerName(playerid, name, sizeof(name));

		        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('Hud').updateHungerLevel(%d)",GetPlayerData(playerid, P_EAT));
		        CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

 		        if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
		        ApplyAnimation(playerid,"FOOD","EAT_Burger", 2.0,0,0,0,0,5000,1);
		        SetTimerEx("RemovePlayerAttachedObjectDelay",4000,false,"ii",playerid,0);
		        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		        g_cursor[playerid] = 0;
				CEF_HIDE(playerid, "Interactions");
		        CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
                new Hour;
		        gettime(Hour, _, _);
		        SetWorldTime(Hour);
                switch(Hour)
		        {
                   case 7..12: strcat(action," завтракает");
			       case 13..17: strcat(action," обедает");
			       case 18..23: strcat(action," ужинает");
			       default: strcat(action, " ест");//
		        }
		        new Hour1;
		        gettime(Hour1, _, _);
		        SetWorldTime(Hour1);
                switch(Hour1)
		        {
                   case 7..12: strcat(actions,"позавтракали");
			       case 13..17: strcat(actions,"поoбедали");
			       case 18..23: strcat(actions,"поужинали");
			       default: strcat(actions, "покушали");
		        }
		        SetPlayerChatBubble(playerid, action, 0xFFFF00FF, 40.0, 3000);
		        strcat(str, name);
		        strcat(str, action);
		        ProxDetector(10.0, playerid, str, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF, 0xDD90FFFF);
                SetPVarInt(playerid,"respeat",0);
                return true;
	        }
		}
		case 6:
		{
            if(GetPVarInt(playerid,"respeat")== 0) return SendClientMessage(playerid, COLOR_GREY, "У Вас нет c собой еды");
			if(GetPVarInt(playerid,"training") == 1) return SendClientMessage(playerid, COLOR_GREY, "Вы не можете выбросить поднос во время обучения.");
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	        if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
	        ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,0,0);
	        DropYas(playerid);
	        g_cursor[playerid] = 0;
			CEF_HIDE(playerid, "Interactions");
	        CEF_CREATE(playerid, 1, 2, "window.setCursorStatus(1, 0)");
	        return true;
		}
		case 7:
		{
            AltAssembly(playerid);
		}
		case 8:
		{
            SkladAssembly(playerid);
		}
		case 9:
		{
            if(GetPVarInt(playerid, "kiosk_inter") != 0)
		    {
			   DestroyPlayerObject(playerid, GetPVarInt(playerid, "kiosk_object"));
			   SetCameraBehindPlayer(playerid);
			   SetPVarInt(playerid, "kiosk_inter", 0);
			   CEF_HIDE(playerid, "Interactions");
		    }
		    new kiosk_id = GetNearestKiosk(playerid, 4.0);
		    if(kiosk_id != -1)
		    {
			   if(IsPlayerInRangeOfPoint(playerid, 3.0, GetKioskData(kiosk_id, K_POS_X), GetKioskData(kiosk_id, K_POS_Y), GetKioskData(kiosk_id, K_POS_Z)))
			   {

				  if(!IsKioskOwned(kiosk_id))
				  {
					  SetPVarInt(playerid, "buy_kiosk_id", kiosk_id);

					  IntfDialogCallRemote(playerid, DIALOG_KIOSK_BUY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Выберите действие", "{FFFFFF}Киоск на продаже<n>{FFDD00}Хотите приобрести его?", "Да", "Нет");
				  }
				  else
				  {
					  CEF_HIDE(playerid, "StallCard");
					  CEF_HIDE(playerid, "Interactions");
					  CEF_CREATE(playerid, 1, 4, "StallCard");
				  }
			   }
			}
		}
		case 10:
		{
            if(vehicle_house_id[playerid] != 0) ExitVehicleHouse(playerid);
		    else if(IsVehicleIdHouse(playerid)) EnterVehicleHouse(playerid);
		}
		case 11:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.5, 203.0826, -311.5590, 1011.7958) ||
		    IsPlayerInRangeOfPoint(playerid, 2.5, 203.1743, -316.7673, 1011.7958) ||
		    IsPlayerInRangeOfPoint(playerid, 2.5, 199.7251, -306.3018, 1011.7958) ||
		    IsPlayerInRangeOfPoint(playerid, 2.5, 199.3137, -311.7275, 1011.7958) ||
		    IsPlayerInRangeOfPoint(playerid, 2.5, 203.5401, -306.3388, 1011.7958) ||
		    IsPlayerInRangeOfPoint(playerid, 2.5, 199.5047, -316.9757, 1011.7958))
		    OpenCasinoBlackJack(playerid);
		}
		case 12:
		{
            if(IsPlayerInRangeOfPoint(playerid, 4.0, 222.2848,-324.3180,1011.3044))
		    {
			    STRING_GLOBAL[0] = EOS;
                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[1000,980],[%s,%d]]", QueryPlayerBalance(playerid), GetIteam(playerid, 293));
                CEF_CREATE(playerid, 2, 4, "CasinoExchange", STRING_GLOBAL);
		    }
		}
		case 13:
		{
            if(IsPlayerInRangeOfPoint(playerid, 100.0, 428.8445,1704.5200,1001.0000) || IsPlayerInRangeOfPoint(playerid, 100.0, 431.1976,1732.5670,1301.0000))
		    {
			    new bedid = -1;

			    for(new i; i < sizeof g_med_bed_pos; i++)
			    {
				    if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
				    bedid = i;
				    break;
			    }

			    if(bedid == -1) return 1;
			    else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
			    else if(GetPlayerHealthEx(playerid) >= 95.0)
			    {
				    return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
			    }
			    else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

                else
			    {
				    SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

				    g_med_bed_used[bedid] = true;

				    new fmt_msg[85];

				    format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{FFCC00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
				    UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);

				    format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
				    SendClientMessage(playerid, 0x66CC00FF, fmt_msg);

				    SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}
		}
		case 14:
		{
            OpenVorota(playerid);
		}
		case 15:
		{
            OpenPlayersContainers(playerid);
		}
		case 16:
		{
            OpenItemContainers(playerid);
		}
		case 17:
		{
            if(IsPlayerUseAnim(playerid)) ClearPlayerUseAnim(playerid), CEF_HIDE(playerid, "Interactions");
		}
		case 18:
		{
            for(new i; i < MAX_ITEMS; i++)
		    {
			    if(items_objs[i] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, itempos[i][0], itempos[i][1], itempos[i][2])) OnPlayerTakeIteam(playerid);
		    }
		}
		case 19:
		{
            for(new i; i < MAX_SVALKA_CARS; i++)
		    {
			    if(g_svalka_cars[i][S_CAR_TIME] == 0) continue;
			    if(IsPlayerInRangeOfPoint(playerid, 4.0, g_svalka_pos_cars[i][0], g_svalka_pos_cars[i][1], g_svalka_pos_cars[i][2])) return OnPlayerOpenDump(playerid, i, 1);
		    }
		    for(new i; i < MAX_SVALKA_ITEMS; i++)
		    {
			    if(g_svalka_items[i][S_ITEM_TIME] == 0) continue;
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, g_svalka_pos_items[i][0], g_svalka_pos_items[i][1], g_svalka_pos_items[i][2])) return OnPlayerOpenDump(playerid, i, 2);
		    }
		}
		case 21:
		{
            if(IsPlayerInRangeOfPoint(playerid, 6.0, -1759.6050,2894.0237,5.9712)) OnPlayerOpenBlackMarket(playerid);
		}
		case 22:
		{
            for(new i; i < sizeof g_load_sto_garage; i++)
		    {
			    for(new idx; idx < 4; idx++)
			    {
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, g_load_sto_garage[i][idx][0], g_load_sto_garage[i][idx][1], g_load_sto_garage[i][idx][2]))
				    {
					    if(sto_garage_status[i][idx] == 1) return SCM(playerid, COLOR_GREY, "Данный гараж используется игроком.");

					    new vehicleid = GetPlayerVehicleID(playerid);

					    new vehicleid1 = GetPlayerOwnableCarLast(playerid);

					    if(vehicleid1 != GetPlayerVehicleID(playerid))
						    return SendClientMessage(playerid, 0xFF6600FF, "Вы должны находиться в личном транспорте");

					    foreach(new idxx: Player)
					    {
						    if(!IsPlayerConnected(idxx)) continue;
						    if(!IsPlayerLogged(idxx)) continue;
						    if(idxx == playerid) continue;
						    if(IsPlayerInVehicle(idxx, vehicleid)) return SendClientMessage(playerid, 0x3399FFFF, "Вы не можете заехать сюда пока в нём кто-то сидит");
						    break;
					    }

					    SetVehiclePos(vehicleid, -2498.8906, -597.7437, 1001.0588);
					    SetVehicleZAngle(vehicleid, 89.6331);

					    SetPlayerInterior(playerid, 4);
					    SetPlayerVirtualWorld(playerid, playerid + 1);

					    LinkVehicleToInterior(vehicleid, 4);
					    SetVehicleVirtualWorld(vehicleid, playerid + 1);

						gPlayerTuningMenu_2[playerid] = 1;

					    UpdateStoGarage(i, idx, 1);

					    SetPVarInt(playerid, "sto_id", GetNearestBusiness(playerid, 50.0));
					    SetPVarInt(playerid, "sto_id_exit_1", i);
					    SetPVarInt(playerid, "sto_id_exit_2", idx);
					    SetPVarInt(playerid, "cl1", 1);
					    SetPVarInt(playerid, "diski", -1);
					    SetPVarInt(playerid, "vinil", -2);
					    SetPVarInt(playerid, "color_id", -1);
					    SetPVarInt(playerid, "color_id1", -1);
					
					    break;
					}
				}
			}
		}
		case 23:
		{
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -1852.6345,1277.0465,1115.8447))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_ZAKUS)
				    {
					    callcmd::buy(playerid, "");
				    }
			    }
		    }
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.7572,1801.3663,1031.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_KONDITER)
				    {
					    callcmd::buy(playerid, "");
				    }
			    }
		    }
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, -2708.6167, -0.1650, 1060.9922))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_CELL_SALON)
				    {
					    callcmd::buy(playerid, "");
				    }
			    }
		    }
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2003.4229,1901.8441,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_CLOTHING_SHOP)
				    {
					    ShowPlayerClothingShopPanel(playerid);
				    }
			    }
		    }
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1238.5682,-2774.2454,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    SetPVarInt(playerid, "akstype", 0);
			        SetPVarInt(playerid, "category_bs", 0);
				    CEF_CREATE(playerid, 2, 4, "Accessories", "[[[\"Очки\",0],[\"Банданы\",1],[\"Маски\",2],[\"Береты\",3],[\"Шляпы\",4],[\"Сумка\",5],[\"Аксессуар на пояс\",6],[\"Часы\",7],[\"Рюкзак\",8],[\"Чокер\",9]],[[19006,\"Красные\",300000,0,0],[19007,\"Желтые\",350000,0,1],[19008,\"Зеленые\",350000,0,2],[19009,\"Синие\",350000,0,3],[19010,\"Розовые\",350000,0,4],[19011,\"Гипноз\",350000,0,5],[19012,\"Черные\",350000,0,6],[19013,\"Глаза\",350000,0,7],[19014,\"Шахматы\",350000,0,8],[19015,\"Обычные\",350000,0,9],[19016,\"X-ray\",350000,0,10],[13953,\"Для сноуборда\",8750000,0,11],[13995,\"Gucci\",1050000,0,12],[13996,\"American\",1050000,0,13],[13997,\"С обводкой\",1050000,0,14],[13998,\"Синий тигр\",1050000,0,15],[13999,\"Желтые\",1050000,0,16],[14462,\"Модные очки\",1665000,0,187]]]");
				    SetPlayerVirtualWorld(playerid, playerid + 10);
				    SetPlayerPos(playerid, 1238.4243,-2777.9377,1001.0000);
				    SetPlayerFacingAngle(playerid, 89.0);
				    SetPlayerCameraPos(playerid,1237.894775,-2778.349853,1001.36);
				    SetPlayerCameraLookAt(playerid,1247.072998,-2774.717529,999.0);
				    ApplyAnimation(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0, 1);
			    }
		    }
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 1555.7836,-2400.7815,1001.0000))
		    {
			    new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_AVTOZAP)
				    {
					    callcmd::buy(playerid, "");
				    }
			    }
		    }
            if(IsPlayerInRangeOfPoint(playerid, 2.0, -502.3552,1504.4075,1001.0025))
		    {
		        new businessid = GetPlayerInBiz(playerid);
			    if(businessid != -1)
			    {
				    new typebiz = GetBusinessData(businessid, B_TYPE);
				    if(typebiz == BUSINESS_TYPE_SHOP_24_7)
				    {
					    callcmd::buy(playerid, "");
				    }
			    }
		    }
		}
		case 24:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 300.5571,304.2417,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 294.5605,304.2592,1001.0000) || IsPlayerInRangeOfPoint(playerid, 2.0, 418.3971,572.8312,-36.6100) || IsPlayerInRangeOfPoint(playerid, 2.0, 412.5228,574.4662,-36.6100))
		    {
	            new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
	            new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
			    if(action_id)
			    {
				    callcmd::bank(playerid, "");
			    }
			    else ShowPlayerPayForRentDialog(playerid);
		    }
		}
		case 25:
		{
            new garage_id = GetPVarInt(playerid, "pickup_garage");

		    if(IsPlayerInRangeOfPoint(playerid, 2.0, GetGarageData(garage_id, G_POS_X), GetGarageData(garage_id, G_POS_Y), GetGarageData(garage_id, G_POS_Z)))
		    {
	            ShowPlayerGarageInfo(playerid, garage_id);
		    }
		}
		case 26:
		{
            new garage_id = GetPlayerInGarage(playerid);
		    if(garage_id != -1)
		    {
			    if(GetGarageData(garage_id, G_IMPROVEMENTS) > 1)
			    {
				   if(IsPlayerInRangeOfPoint(playerid, 2.5, g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][0],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][1],g_garage_pos_workbench[GetGarageData(garage_id, G_TYPE)-1][2]))
				   {
					  callcmd::craft(playerid);
				   }
				}
			}
		}
		case 27:
		{
            if(IsPlayerInRangeOfPoint(playerid, 5, 214.88200, -276.60931, 1012.79022))
   			{
				ShowPlayerCasinoRollMenu(playerid);
   			}
		}
		case 28:
		{
            new garden = GetNearestGarden(playerid, 10.0);

	        if(garden != -1)
	        {
                if(GetGardenData(garden, G_OWNER_ID) == GetPlayerAccountID(playerid))
		        {
                    if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z) + 1)) return 1;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z) + 1)) return 1;
			        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 1.5, GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z) + 1)) return 1;

			        if(GetGardenData(garden, G_LOCK_STATUS) != 0) return SCM(playerid, 0xABCDEFFF,"Дверь заперта.");

			        if(Garden_Status[garden] == 1)
			        {
			            if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 90.0);
				        Garden_Status[garden] = 0;
			        }
			        else
			        {
				        if(GetGardenData(garden, G_IMPROVEMENTS) < 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.97934, GetGardenData(garden, G_POS_Y) + 0.393404, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 3) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 3.75328, GetGardenData(garden, G_POS_Y) + 0.393359, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				        if(GetGardenData(garden, G_IMPROVEMENTS) == 4) MoveObject(gardendver[garden], GetGardenData(garden, G_POS_X) + 2.20977, GetGardenData(garden, G_POS_Y) + -2.19371, GetGardenData(garden, G_POS_Z),5,   0.00000, 0.00000, 0.0);
				        Garden_Status[garden] = 1;
			        }
		        }
		        else SCM(playerid, COLOR_GREY, "*Вы не владелец данного огорода.");
		    }
		}
		case 29:
		{
            new garden = GetNearestGarden(playerid, 10.0);

	        if(garden != -1)
	        {
		        if(GetGardenData(garden, G_OWNER_ID) == GetPlayerAccountID(playerid))
		        {
                   new idgarden;
			       if(GetGardenData(garden, G_IMPROVEMENTS) < 3) idgarden = 10;
			       if(GetGardenData(garden, G_IMPROVEMENTS) == 3) idgarden = 14;
			       if(GetGardenData(garden, G_IMPROVEMENTS) == 4) idgarden = 20;

			       for(new i; i < idgarden; i ++)
			       {
				       if(GetGardenData(garden, G_IMPROVEMENTS) < 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_1[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_1[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_1[i][2] + 1)) continue;
				       if(GetGardenData(garden, G_IMPROVEMENTS) == 3) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_2[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_2[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_2[i][2] + 1)) continue;
				       if(GetGardenData(garden, G_IMPROVEMENTS) == 4) if(!IsPlayerInRangeOfPoint(playerid, 0.6, GetGardenData(garden, G_POS_X) + GardenGryadka_3[i][0], GetGardenData(garden, G_POS_Y) + GardenGryadka_3[i][1], GetGardenData(garden, G_POS_Z) + GardenGryadka_3[i][2] + 1)) continue;

				       if(G_STATUS_YAM[garden][i] == 0)
				       {
					        SetPVarInt(playerid, "garden_id",garden);
					        SetPVarInt(playerid, "yamka_id",i);
					        IntfDialogCallRemote
					        (
						        playerid, DIALOG_GARDEN, DIALOG_STYLE_LIST,
						        "Какое растение вы хотите посадить?",
						        "Название\tВремя роста\tИнтервал полива\n\
						        {FFFFFF}Помидоры\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Огурцы\t{"#cGold"}20 мин.\t4 мин.\n\
						        {FFFFFF}Марихуана\t{"#cGold"}30 мин.\t4 мин.\n\
						        {FFFFFF}Картофель\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Свёкла\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Перец\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Баклажан\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Капуста\t{"#cGold"}10 мин.\t4 мин.\n\
						        {FFFFFF}Морковь\t{"#cGold"}10 мин.\t4 мин.",
						        "Готово", "Закрыть"
					        );
				       }
				       if(G_STATUS_YAM[garden][i] == 1)
				       {
					      new fmt_text[148];

					      if(G_STATUS_WOTER[garden][i] == 2) return 1;

					      if(GetIteam(playerid, 247) < 1) return SCM(playerid, 0x66CC33FF, "У вас мало воды чтобы полить грядку, требуется 1 наполненных леек!");

					      if(G_WT_ST[garden][i] == 0)
					      {
						      G_WT_ST[garden][i] = 1;
						      if(G_TYPE_YAM[garden][i] == 1) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
						      if(G_TYPE_YAM[garden][i] == 2) rost[garden][i] = SetTimerEx("gardengryadka", 12000, true, "ii", garden,i);
						      if(G_TYPE_YAM[garden][i] == 3) rost[garden][i] = SetTimerEx("gardengryadka", 18000, true, "ii", garden,i);
						      if(G_TYPE_YAM[garden][i] > 3) rost[garden][i] = SetTimerEx("gardengryadka", 6000, true, "ii", garden,i);
					      }
					      if(G_STATUS_WOTER[garden][i] == 1)
					      {
						      G_STATUS_WOTER[garden][i] = 2;
						      format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.0%\n{FFFFFF}Почва: {FF8800}очень мокрая",garden_name[G_TYPE_YAM[garden][i]-1],G_STATUSS[garden][i]);
					      }
					      if(G_STATUS_WOTER[garden][i] == 0)
					      {
						      format(fmt_text, sizeof fmt_text,"{FF8800}%s\n{FFFFFF}Прогресс: {FF8800}%d.0%\n{FFFFFF}Почва: {FF8800}влажная",garden_name[G_TYPE_YAM[garden][i]-1],G_STATUSS[garden][i]);
						      G_STATUS_WOTER[garden][i] = 1;
					      }
					      ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 0, 0, 0, 0, 0, 0);
					      UpdateDynamic3DTextLabelText(gardendyamkalab[garden][i], 0xFFFF00FF, fmt_text);
					      GiveIteam(playerid,247, 0, 1, 0);
					      if(GetIteam(playerid, 247) == 0) GiveIteam(playerid,168, 1, 1, 0);
				       }
				       if(G_STATUS_YAM[garden][i] == 2)
				       {
					      SetPVarInt(playerid, "g_garden_loaded", garden + 1);
					      SetPVarInt(playerid, "idgarden", i + 1);
					      CEF_CREATE(playerid, 1, 4, "Harvesting");
					      ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 2.0, 1, 0, 0, 0, 0, 0);
				       }
				       break;
				    }
		        }
			}
		    else SCM(playerid, COLOR_GREY, "*Вы не владелец данного огорода.");
		}
		case 30:
		{
			return 1;
		}
		case 31:
		{
            if(IsPlayerInRangeOfPoint(playerid, 15.0, 512.768, 431.684, 12) || IsPlayerInRangeOfPoint(playerid, 15.0, 550.892, 1209.29, 4.9099) || IsPlayerInRangeOfPoint(playerid, 15.0, 726.887, 2559.55, 12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 1890.06, -2909.72, 3.8898) || IsPlayerInRangeOfPoint(playerid, 15.0, -435.2222, -1363.3528, 40.3683) || IsPlayerInRangeOfPoint(playerid, 15.0, -2037.01, -2007.55, 8.5077) || IsPlayerInRangeOfPoint(playerid, 15.0, -2620.5, -37.8617, 12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, -2583.21, 1964.54, 52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 1894.89, -865.783, 14.7136) || IsPlayerInRangeOfPoint(playerid, 15.0, 1913.65, 1706.91, 15.94) || IsPlayerInRangeOfPoint(playerid, 15.0, 2247.17, -1715.46, 22.0362) || IsPlayerInRangeOfPoint(playerid, 15.0, 2571.79, -1834.46, 21.97) || IsPlayerInRangeOfPoint(playerid, 15.0, 3980.1, 4324.28, 7.9306) || IsPlayerInRangeOfPoint(playerid, 15.0, -479.4297,-1835.9199,41.3267))
	        {
			    callcmd::i(playerid, "");
		    }
		}
		case 32:
		{
            if(IsPlayerInRangeOfPoint(playerid, 15.0, 740.6722,2593.2686,12.1875) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.7357,1216.0225,4.9021) || IsPlayerInRangeOfPoint(playerid, 15.0, 524.3786,407.8583,12.0000) || IsPlayerInRangeOfPoint(playerid, 15.0, -2603.8452,-11.4564,12.1909) || IsPlayerInRangeOfPoint(playerid, 15.0, 2222.0361,-1700.8455,22.0557) || IsPlayerInRangeOfPoint(playerid, 15.0, 1884.8348,-2943.7678,3.8352) || IsPlayerInRangeOfPoint(playerid, 15.0, 1912.0714,-848.0580,15.7839) || IsPlayerInRangeOfPoint(playerid, 15.0, -2557.9216,1946.0831,52.9992) || IsPlayerInRangeOfPoint(playerid, 15.0, 3970.4331,4347.5366,7.9306) || IsPlayerInRangeOfPoint(playerid, 15.0, -2042.2933,-1984.5055,8.5077))
	        {
	            callcmd::ic(playerid);
	        }
		}
		case 33:
		{
            for(new i; i < sizeof g_carwash_object_pos; i++)
		    {
			    if(!IsPlayerInRangeOfPoint(playerid, 4.5, g_carwash_object_pos[i][0][G_CARWASH_X],g_carwash_object_pos[i][0][G_CARWASH_Y],g_carwash_object_pos[i][0][G_CARWASH_Z])) continue;

			    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

			    if(g_carwash_status[i] == 1) return SendClientMessage(playerid, 0xCECECEFF, "Данная автомойка уже моет");

			    new business = GetNearestBusiness(playerid, 18.0);

			    if(business == -1) return 1;

			    DLGF(playerid, DIALOG_CARWASH_START, DIALOG_STYLE_MSGBOX,"{ffffff}Автомойка","{ffffff}Вы хотите помыть свой транспорт?\n{eaaf55}Стоимость услуги на данной автомойке составляет: %d руб", "Далее", "Отмена", GetBusinessData(business, B_PROD_PRICE));

			    g_carwash_player_id[playerid] = i;

			    return 1;
		    }
		}
		case 34:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.0, -1633.4974,950.1698,112.0641) || IsPlayerInRangeOfPoint(playerid, 2.0, -1633.3749,950.4099,147.9468))// 2.0, -1633.3749,950.4099,147.9468))
            {
                if(vorota_status == 0) return MoveDynamicObject(vetrlift,-1633.41, 950.784, 146.767,0.7, 0.000000, 0.000000, 0), vorota_status = 1;
                else return MoveDynamicObject(vetrlift,-1633.41, 950.819, 110.884,0.7, 0.000000, 0.000000, 0), vorota_status = 0;
            }
		}
		case 35:
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0, -1633.3900,947.4431,147.8163))
		    {
			    if(GetPlayerInBiz(playerid) != -1)
			    {
				    if(IsPlayerInBuyPosBiz(playerid, GetPlayerInBiz(playerid), 36))
				    {
					    Progress_Bar_Menu(playerid, 8, 50, 50);
				    }
			    }
		    }
		}
		case 36:
		{
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 2492.6079, 1394.9854, 1000.0214))
		    {
			    if(GetPlayerOwnableCarLast(playerid) == 0)
				    SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
			    else
			    {
				    page_cars[playerid] = 1;
				    type_page_cars[playerid] = 9;
				    ShowOwnableCars(playerid, DIALOG_OWNABLE_CAR_NUMBER, page_cars[playerid]);
			    }
		    }
		}
		case 37:
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0, 1919.5667,-1979.0081,31.5505)) DonateCar(playerid);
		    if(IsPlayerInRangeOfPoint(playerid,2.0, 1866.8685,2802.9614,12.0000)) DonateCar(playerid);
		    if(IsPlayerInRangeOfPoint(playerid,2.0, -406.2713,746.6798,12.2886)) DonateCar(playerid);
		    if(IsPlayerInRangeOfPoint(playerid,2.0, -1938.4094,2909.4106,5.9990)) DonateCar(playerid);
		    if(IsPlayerInRangeOfPoint(playerid,2.0, -1912.6632,1917.0247,175.2158)) DonateCar(playerid);
		}
		case 38:
		{
            if(IsPlayerInRangeOfPoint(playerid, 3.5, -2508.9167,1478.8176,1080.4944))
		    {
			    IntfDialogCallRemote
			    (
				    playerid, DIALOG_BUY_LIC, DIALOG_STYLE_TABLIST_HEADERS,
				    "{FFFFFF}Список лицензий",
				    "Название\tЦена\tТребования\n\
				    Водительские права\t150.000 руб\tОтсутствуют\n\
				    Разрешение на оружие\t350.000 руб\tОтсутствуют\n\
				    Проф. права\t200.000 руб\tОтсутствуют\n",
				    "Далее", "Закрыть"
			    );
		    }
		}
		case 39:
		{
            callcmd::dice(playerid);
		}
		case 40:
		{
            if(GetPlayerInHouse(playerid) != -1) ExitPlayerFromHouse(playerid, 1.1);
		}
		case 41:
		{
            if(IsPlayerInRangeOfPoint(playerid, 3.0, -2503.8015,1479.2994,1080.4944)) PlayerFamilyCreate(playerid);
		}
		case 42:
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0, 4008.3857,3860.5872,8.0616) || IsPlayerInRangeOfPoint(playerid,2.0, -3180.8489,825.0446,6.4200) || IsPlayerInRangeOfPoint(playerid,2.0, 1944.6792,-46.1749,6.4177)) PlayerGangCreate(playerid);
		}
		case 43:
		{
            if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
		    {
			    for(new i; i < sizeof g_mine_rack; i++)
			    {
			 	    if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_rack[i][0], g_mine_rack[i][1], g_mine_rack[i][2])) continue;

				    if(g_player_mine_status[playerid] == 0)
				    {
					    g_player_mine_status[playerid] = 1;
					    SCM(playerid, 0xb1cbe5FF, "Теперь вам необходимо найти рудное месторождение: осматривайте стены.");
					    GameText(playerid, "Вы взяли инструмент~n~Отыщите рудное месторождение", 3000, 2);

					    RemovePlayerAttachedObjects(playerid);
					    SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.0290, 0.1280, 0.1020, -24.0000, -14.8000, 0.0000, 1.0000, 1.0000, 1.0000, 0, 0);
					    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);

					    CEF_HIDE(playerid, "Interactions");
				    }
			    }
	        }
		}
		case 44:
		{
            if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
		    {
		        for(new i; i < MAX_MINE_ORE; i++)
			    {
				    if(IsPlayerInRangeOfPoint(playerid, 2.5, g_mine_ore_pos[i][MOP_DOWN][0], g_mine_ore_pos[i][MOP_DOWN][1], g_mine_ore_pos[i][MOP_DOWN][2]))
				    {
					    if(g_player_mine_status[playerid] == 1)
					    {
						    if(g_mine_ore[i][MO_OWNER_ID] != -1 && g_mine_ore[i][MO_OWNER_ID] != playerid) return 1;

						    if(g_mine_ore[i][MO_OWNER_ID] == -1)
							    g_player_mine_ore[playerid] = i,
							    g_mine_ore[i][MO_OWNER_ID] = playerid;

						    byr_timer[playerid] = SetTimerEx("MinerTimer", 1000, true, "ii", playerid, 1);

				            CEF_CREATE(playerid, 2, 4, "ProgressBar", "[[\"Бурение\", 0, 1000]]");

						    TogglePlayerControllable(playerid, false);

						    ApplyAnimationEx(playerid, "SHOP", "SHP_GUN_AIM", 4.0, true, 0, 0, 1, 0, 0, USE_ANIM_TYPE_NONE);

						    SetPlayerAttachedObject(playerid, 0, 17114, 6, 0.010, -0.02, 0.02, 64.0, -100.8, 0.0, 1.0, 1.0, 1.0, 0, 0);

						    CEF_HIDE(playerid, "Interactions");
					    }
					    break;
				    }
			    }
	        }
		}
		case 46:
		{
            ChestUse(playerid);
		}
		case 47:
		{
            if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCarLast(playerid)))
	        {
		        new job_car = GetPlayerJobCar(playerid);
		        if(IsPlayerInVehicle(playerid, job_car))
		        {
                    if(GetPlayerTempJob(playerid) == TEMP_JOB_ELECTRICIAN)
			        {
                        new query[512], randomed, count;

				        if(Iter_Count(ElectricanPlayerBiz[playerid]) <= 0)
                        {
					        Iter_Clear(ElectricanPlayerBiz[playerid]);
					        for(new i; i < 5; i++)
					        {
						        randomed = RandomEx(1, 105);
						        g_electrician_generated[playerid] = 1;
						        Iter_Add(ElectricanPlayerBiz[playerid], g_business[randomed][B_SQL_ID]);
				            }
				        }

                        foreach(new i : ElectricanPlayerBiz[playerid])
				        {
					        if(i == 0) continue;
					        SetPlayerListitemValue(playerid, count, i);

					        ElectrikUse[playerid] = 1;

						    CEF_HIDE(playerid, "Interactions");

					        format(query, sizeof query, "%s %s (№:%d) \t %.2f м. \n", query, g_business[i][B_NAME], g_business[i][B_SQL_ID], GetPlayerDistanceFromPoint(playerid, g_business[i][B_POS_X], g_business[i][B_POS_Y], g_business[i][B_POS_Z]));
					        count++;
				        }
				        IntfDialogCallRemote(playerid, DIALOG_ELECT_BUSINESS, DIALOG_STYLE_LIST, "Список бизнесов", query, "Выбрать", "Закрыть");
				    }
			    }
		    }
		}
		case 49:
		{
            if(g_player_status_fish[playerid] != 0)
		    {
			    if(g_player_status_fish[playerid] == 1) return SCM(playerid, 0xfcdb70FF, "Сначала намотайте леску на вашу удочку.");
			    if(g_player_status_fish[playerid] == 2) return SCM(playerid, 0xfcdb70FF, "Сначала насадите наживку на вашу удочку.");

			    if(g_player_status_fish[playerid] == 3)
			    {
				    SCM(playerid, 0xa2d5f9FF, "Нажмите {FFFFFF}\"Подсечь рыбу\" {a2d5f9}чтобы подсечь рыбу, когда посчитаете нужным.");
				    SCM(playerid, 0xa2d5f9FF, "Нажмите {FFFFFF}\"Закончить рыбалку\" {a2d5f9}если захотите закончить рыбалку.");

				    CEF_HIDE(playerid, "Interactions");

				    CEF_CREATE(playerid, 2, 4, "Fishing", "[0, 0, 0.0, false, 45]");

				    CEF_CREATE(playerid, 2, 4, "Interactions", "[[3, \"Подсечь рыбу\"], [4, \"Закончить рыбалку\"]]");

				    g_player_status_fish[playerid] = 4;

				    g_player_fish_timer[playerid] = RandomEx(6,12);

				    new Float:cam_x,
					    Float:cam_y;

				    new Float:x,
					    Float:y,
					    Float:z,
					    Float:angle;


                    GetPlayerPos(playerid, x, y, z);
				    GetPlayerFacingAngle(playerid, angle);

				    cam_x = x + (2 * floatsin(-angle, degrees));
				    cam_y = y + (2 * floatsin(-angle, degrees));

				    SetPlayerCameraPos(playerid, x,y,z),
				    SetPlayerCameraLookAt(playerid, cam_x, cam_y, z);

				    //TogglePlayerControllable(playerid,false);

				    return true;
			    }
		    }
		}
		case 50:
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0, 2188.9487,1371.6503,11.4361))
		    {
			    SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}эй... да, ты-ты... не интересует немного счастья?");
			    SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}счастье у каждого своё, хех, поэтому я пытаюсь угодить всем...");
			    SendClientMessage(playerid, 0xFF8800FF, "Торговец: {FFFFFF}кто-то хочет поднять денег, кто-то провести хорошо время... а ладно, о чем это я.");
			    IntfDialogCallRemote(playerid, DIALOG_BUY_MARIH, DIALOG_STYLE_INPUT, "{FFFFFF}Покупка семян конопли", "{FFFFFF}Давай шустрее... пока полицаи не приехали\n{FFFFFF}Сколько пачек семян берёшь? Продаю по {FFD83D}300 {FFFFFF}руб за пачку\nНе больше {FFD83D}20 {FFFFFF}пачек за раз", "Купить", "Закрыть");
		    }
		}
		case 52:
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, 477.9655,-2438.9414,34.7629))
		    {
			    if(Lesopilka[playerid] == 1)
			    {
                    SendClientMessage(playerid, 0xabcdefFF, "Отнесите бревно на пилораму.");
        
				    SetPlayerAttachedObject(playerid, 2, 14039, 1, 0.226999, 0.513001, -0.026, -89.6, 132.2, -89.1, 0.472, 0.593, 0.594);
			        ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                    SetPlayerCheckpoint(playerid, 470.9107, -2371.8191, 34.778301, 2.0);
				    lesopilka_cp[playerid] = 1;
			        Lesopilka[playerid] = 2;
			    }
		    }
		}
		case 53:
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, 470.9422,-2371.9453,34.7626))
		    {
			    if(Lesopilka[playerid] == 2)
			    {
                    Progress_Bar_Menu(playerid, 5, 15, 15);
			    }
		    }
		}
		case 54:
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, 488.5046,-2383.2627,34.7459))
		    {
			    if(Lesopilka[playerid] == 3)
			    {
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                    SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                    SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				    lesopilka_cp[playerid] = 1;
			        Lesopilka[playerid] = 4;
			    }
				else if(Lesopilka[playerid] == 5)
			    {
			        ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                    SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
			        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                    SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				    lesopilka_cp[playerid] = 1;
			        Lesopilka[playerid] = 6;
			    }
				else if(Lesopilka[playerid] == 7)
			    {
			        ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                    SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                    SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
				    lesopilka_cp[playerid] = 1;
			        Lesopilka[playerid] = 8;
			    }
				else if(Lesopilka[playerid] == 9)
			    {
			        ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0);
                    SetTimerEx("PlayCarryAnimation", 2000, false, "i", playerid);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
                    SetPlayerCheckpoint(playerid, 505.4260, -2376.7654, 34.7800, 2.0);
			        lesopilka_cp[playerid] = 1;
			        Lesopilka[playerid] = 10;
			    }
		    }
		}
		case 55:
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, 505.4260,-2376.7654,34.7800))
		    {
			    if(Lesopilka[playerid] == 4)
			    {
					new pay_sum = 50000;
                    new final_pay = pay_sum * g_xbonus;

                    TotalEarnings[playerid] += final_pay;

				    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                    STRING_GLOBAL[0] = EOS;
	                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	                GameText(playerid, STRING_GLOBAL, 3000, 2);
			        ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				    RemovePlayerAttachedObject(playerid, 2);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        Lesopilka[playerid] = 5;
			    }
				else if(Lesopilka[playerid] == 6)
			    {
					new pay_sum = 50000;
                    new final_pay = pay_sum * g_xbonus;

                    TotalEarnings[playerid] += final_pay;

				    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                    STRING_GLOBAL[0] = EOS;
	                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	                GameText(playerid, STRING_GLOBAL, 3000, 2);
			        ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				    RemovePlayerAttachedObject(playerid, 2);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        Lesopilka[playerid] = 7;
			    }
				else if(Lesopilka[playerid] == 8)
			    {
					new pay_sum = 50000;
                    new final_pay = pay_sum * g_xbonus;

                    TotalEarnings[playerid] += final_pay;

				    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

                    STRING_GLOBAL[0] = EOS;
	                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	                GameText(playerid, STRING_GLOBAL, 3000, 2);
			        ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				    RemovePlayerAttachedObject(playerid, 2);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        Lesopilka[playerid] = 9;
				    lesopilka_cp[playerid] = 1;
			    }
				else if(Lesopilka[playerid] == 10)
			    {
					new pay_sum = 50000;
                    new final_pay = pay_sum * g_xbonus;

                    TotalEarnings[playerid] += final_pay;

				    SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

				    SendClientMessage(playerid, 0xabcdefFF, "Вы перенесли все распиленные брёвна, отправляйтесь на склад за новым бревном.");

				    SetPlayerCheckpoint(playerid, 477.8635, -2439.0234, 34.762901, 2.0);

                    STRING_GLOBAL[0] = EOS;
	                format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+50.000 руб~n~~w~Заработано: ~g~%d", TotalEarnings[playerid]);
	                GameText(playerid, STRING_GLOBAL, 3000, 2);
			        ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
				    RemovePlayerAttachedObject(playerid, 2);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        Lesopilka[playerid] = 1;
				    lesopilka_cp[playerid] = 1;
			    }
		    }
		}
		case 56:
		{
			callcmd::pick(playerid, " ");
		}
		case 57:
		{
			OnPlayerKeyStateChange(playerid,1024,0);
		}
	}
	return 1;
}

stock SnowStatus(playerid, snow)
{
    new BitStream:bsn = BS_New();

	BS_WriteValue(bsn, PR_UINT8, PACKET);
    BS_WriteValue(bsn, PR_UINT16, 16);
    BS_WriteValue(bsn, PR_UINT32, snow);

    PR_SendPacket(bsn, playerid);
    BS_Delete(bsn);
}

stock GetCarCraft(playerid, car_id)
{
	new count, 
		query[100],
		Cache:result;

	mysql_format(mysql, query, sizeof query, "SELECT model_id FROM ownable_cars WHERE owner_id=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(rows == 0)
    {
        cache_delete(result);
        return 0;
    }

	for(new i = 0; i < rows; i++)
    {
        new model = cache_get_row_int(i, 0);
        if(model == car_id)
        {
            count++;
        }
    }

	cache_delete(result);
	return count;
}

forward CheckPlayerPing();
public CheckPlayerPing()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;

        if(GetPlayerPing(i) > MAX_ALLOWED_PING)
        {
            Kick(i);
			printf("%s кикнут за высокий пинг", GetPlayerNameEx(i));
        }
    }
    return 1;
}

forward PlayCarryAnimation(playerid);
public PlayCarryAnimation(playerid)
{
    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);

	SetPlayerAttachedObject(playerid, 2, 14040, 1, -0.183001, 0.487, -0.026, 86.7, 7.00008, -95.7999, 0.398, 1, 0.57);
}

forward FishYdochka(playerid);
public FishYdochka(playerid)
{
    TogglePlayerControllable(playerid, false);

	ApplyAnimation(playerid, "SWORD", "SWORD_IDLE", 4.0, 0, 1, 1, 1, 0);

	SCM(playerid, 0xa2d5f9FF, "Нажмите {FFFFFF}\"Подсечь рыбу\" {a2d5f9}чтобы подсечь рыбу, когда посчитаете нужным.");
	SCM(playerid, 0xa2d5f9FF, "Нажмите {FFFFFF}\"Закончить рыбалку\" {a2d5f9}если захотите закончить рыбалку.");

	CEF_HIDE(playerid, "Interactions");

	CEF_CREATE(playerid, 2, 4, "Fishing", "[0, 0, 0.0, false, 45]");

	CEF_CREATE(playerid, 2, 4, "Interactions", "[[3, \"Подсечь рыбу\"], [4, \"Закончить рыбалку\"]]");

	g_player_status_fish[playerid] = 4;

	g_player_fish_timer[playerid] = RandomEx(6,12);

	new Float:cam_x,
		Float:cam_y;

	new Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	cam_x = x + (2 * floatsin(-angle, degrees));
	cam_y = y + (2 * floatsin(-angle, degrees));

	SetPlayerCameraPos(playerid, x,y,z),
	SetPlayerCameraLookAt(playerid, cam_x, cam_y, z);

	return true;
}

forward FishYdochkaSpin(playerid);
public FishYdochkaSpin(playerid)
{
	CEF_HIDE(playerid, "Fishing");
	CEF_CREATE(playerid, 2, 4, "Interactions", "[[49, \"Начать рыбалку\"]]");
	g_player_status_fish[playerid] = 2;

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);

	ClearAnimations(playerid);
}

forward ContainerCamera(playerid);
public: ContainerCamera(playerid)
{
    SetCameraBehindPlayer(playerid);
}

stock BizUpdate()
{
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		SetTimerEx("UpdateBusinessLabel", 100, false, "d", i);
	}
}

stock UpdateSklad()
{
	SetTimer("LoadSkladFamily", 100, false);
}

stock PrizesGive(playerid)
{
	new id = GetPVarInt(playerid, "id_priz");

	new fmt_text[84],
		Cache: result;
				
	format(fmt_text, sizeof fmt_text, "SELECT * FROM prizes WHERE id='%d'", id);
	result = mysql_query(mysql, fmt_text, true);

	new size = cache_get_field_content_int(0, "size");
	new item = cache_get_field_content_int(0, "item");
	new count = cache_get_field_content_int(0, "count");
	new indx = cache_get_field_content_int(0, "indx");

	cache_delete(result);

	//size - Это тип предмета (0 - значек вопроса | 1 - оружие | 2 - ехp | 3 - авто | 4 - скин | 5 - деньги | 6 - аксессуар | 7 - вип | 8 - предмет | 9 - патроны | 10 - донат)

    if(size == 2)
	{
		AddPlayerData(playerid, P_EXP, +, indx);
			                            
        if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
		{
		    SetPlayerData(playerid, P_EXP, 0);
            AddPlayerData(playerid, P_LEVEL, +, 1);
			SendClientMessage(playerid, 0xCECECEFF, "Поздравляем! Ваш уровень повышен");
			SetPlayerLevelInit(playerid);
		}
	}
    if(size == 3)
	{
		if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid)) return GameText(playerid, "~r~Все слоты для транспорта~n~заняты", 3000, 2);
		GiveCar(playerid, item, 1, 1, indx, 0, 1882.5557,2832.2222,12.0596,89.8854, gettime());
	}
	if(size == 4)
	{
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
		GiveSkin(playerid, item);
	}
	if(size == 5)
	{	
		ModifyCashBalance(playerid, count, "Получение денег с моих наград");
	}
	if(size == 6)
	{
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
		GiveAcs(playerid, item, indx);
	}
	if(size == 7)
    {
		if(GetPlayerPremium(playerid) == 0) 
		{
			SetPlayerData(playerid, P_PREMIUM, item);
			SetPlayerData(playerid, P_PREMIUM_TIME, gettime() + indx * 86400);
			UpdatePlayerDatabaseInt(playerid, "premium", GetPlayerData(playerid, P_PREMIUM));
			UpdatePlayerDatabaseInt(playerid, "premium_time", gettime() + indx * 86400); //
		}
		else SendClientMessage(playerid, -1, "{ff0000}[Ошибка] {ffffff}У вас уже есть VIP!");
	}
	if(size == 8)
	{
		if(GetInventorySlots(playerid) == -1) return GameText(playerid, "~r~В вашем инвентаре~n~нет свободного места", 3000, 2);
		GiveIteam(playerid, item, 1, count, 0, "Забрал с моих наград [Мои награды]");
	}
	if(size == 10) ProcessPlayerCredit(playerid, count, "Получение доната с моих наград", true, true);
	if(size == 16) 
	{
		if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			if((GetPlayerData(playerid, P_JAIL) / 60) > item)
			{
				AddPlayerData(playerid, P_JAIL, -, item * 60);
				UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));
			}
			else
			{
				SetPlayerData(playerid, P_JAIL, 0);
				UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));

				SendClientMessage(playerid, 0x66CC00FF, "Срок заключения закончился"),
				UnjailPlayer(playerid);
			}
		}
		else 
		{
			SCM(playerid, COLOR_GREY, "Для активации купона вы должны находится в Тюрьме.");
			GameText(playerid, "Для активации купона ~n~вы должны находится в Тюрьме", 3000, 2);
			return true;
		}

	}
	if(size == 21) 
	{
		new Float:X,Float:Y,Float:Z,Float:angle;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, angle);

		new Float: cam_x = X + (1.3 * floatsin(-angle + 90.0, degrees)),Float: cam_y = Y + (1.3 * floatcos(-angle + 90.0, degrees)),Float: cam_z = Z + 0.3;

		new Float: case_x, Float:case_y;

		kase_open[playerid] = 0;

		if(item == 1)
		{
			case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(14349, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(14348, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 1);
		}
		else if(item == 2)
		{
			new Float: krx = X + (1.41 * floatsin(-angle, degrees)),Float: kry = Y + (1.41 * floatcos(-angle, degrees));
			case_x = X + (1.4 * floatsin(-angle, degrees)),case_y = Y + (1.4 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(14594, krx, kry, Z-0.81, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(14593, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			OnBattlePass_Perfomance(playerid, 25, 1);
			SetPVarInt(playerid, "case_type", 2);
		}
		else if(item == 3)
		{
			case_x = X + (1.44 * floatsin(-angle, degrees)),case_y = Y + (1.44 * floatcos(-angle, degrees));
			new Float: krx = X + (1.455 * floatsin(-angle, degrees)),Float: kry = Y + (1.455 * floatcos(-angle, degrees));
			kase_osnova[playerid] = CreateDynamicObject(14692, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			kase_krishka[playerid] = CreateDynamicObject(14693, krx, kry, Z-0.82, 0.0,0.0,angle);
			OnBattlePass_Perfomance(playerid, 26, 1);
			SetPVarInt(playerid, "case_type", 3);
		}
		else if(item == 4)
		{
			new Float: krishka_x = X + (1.6 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.6 * floatcos(-angle, degrees));
			case_x = X + (1.37 * floatsin(-angle, degrees)),case_y = Y + (1.37 * floatcos(-angle, degrees));
			kase_osnova[playerid] = CreateDynamicObject(14783, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			kase_krishka[playerid] = CreateDynamicObject(14784, krishka_x, krishka_y, Z-0.6, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 4);
		}
		else if(item == 5)
		{
			case_x = X + (1.3 * floatsin(-angle, degrees)),case_y = Y + (1.3 * floatcos(-angle, degrees));
			new Float: krishka_x = X + (1.45 * floatsin(-angle, degrees)),Float: krishka_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_osnova[playerid] = CreateDynamicObject(15709, case_x, case_y, Z-1, 0.0,0.0,angle);
			kase_krishka[playerid] = CreateDynamicObject(15710, krishka_x, krishka_y, Z-0.71, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 5);
		}
		else if(item == 6)
		{
			case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(15845, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(15844, case_x, case_y, Z-0.8, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 6);
		}
		else if(item == 7)
		{
			case_x = X + (1.4 * floatsin(-angle, degrees)), case_y = Y + (1.4 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(15962, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(15961, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 7);
		}
		else if(item == 8)
		{
			case_x = X + (1.7 * floatsin(-angle, degrees)), case_y = Y + (1.7 * floatcos(-angle, degrees));
			new Float: kr_x = X + (1.85 * floatsin(-angle, degrees)),Float: kr_y = Y + (1.85 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(16452, kr_x, kr_y, Z-0.74, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(16451, case_x, case_y, Z-1.0, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 8);
		}
		else if(item == 9)
		{
			case_x = X + (1.6 * floatsin(-angle, degrees)), case_y = Y + (1.6 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(16663, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(16662, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 9);
		}
		else if(item == 10)
		{
			case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(16772, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(16771, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 10);
		}
		else if(item == 11)
		{
			case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(16965, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(16964, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 11);
		}
		else if(item == 12)
		{
			case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(17205, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(17206, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 12);
		}
		else if(item == 13)
		{
			case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(17608, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(17609, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 13);
		}
		else if(item == 14)
		{
			case_x = X + (1.45 * floatsin(-angle, degrees)), case_y = Y + (1.45 * floatcos(-angle, degrees));
			kase_krishka[playerid] = CreateDynamicObject(18237, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			kase_osnova[playerid] = CreateDynamicObject(18238, case_x, case_y, Z-0.7, 0.0,0.0,angle);
			SetPVarInt(playerid, "case_type", 14);
		}
		else return CEF_HIDE(playerid, "Case");

		OpenCasePlayer(playerid, 0);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, X + (0.95 * floatsin(-angle, degrees)), Y + (0.95 * floatcos(-angle, degrees)), Z + 0.2, 5000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, X + (0.5 * floatsin(-angle, degrees)), Y + (0.5 * floatcos(-angle, degrees)), Z - 0.5, case_x, case_y, Z - 0.85, 5000, CAMERA_MOVE);
		SetTimerEx("OpenCase", 7000, false, "i", playerid);
		SetPVarInt(playerid, "CaseFree", 1);
	}
	if(size == 23)
	{
		AddPlayerData(playerid, P_BP_GOLDS, +, count);
	    UpdatePlayerDatabaseInt(playerid, "bp_golds", GetPlayerData(playerid, P_BP_GOLDS));
	}

	GameText(playerid, "~g~Успешно", 4000, 2);
	SCM(playerid, 0x5DA130FF, "Награда была добавлена на Ваш аккаунт.");

	format(fmt_text, sizeof fmt_text, "DELETE FROM prizes WHERE id='%d'", id);
	mysql_query(mysql, fmt_text, false);

	LoadMainMenu(playerid, MENU_MAIN_PRIZE);
	return 1;
}

stock MainMenuUpdate(playerid)
{
	STRING_GLOBAL[0] = EOS;

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.setPlayerNickName('%s') || window.setPlayerLevel('%d') || window.setPlayerMoney('%s') || window.setPlayerPassedHours('%d') || \
	window.setPlayerBankMoney('%s') || window.setPlayerDonate('%d') || window.setPlayerCasinoChips('%d') || window.setCurrentServer('%d') || window.setGameVersion('%s') || \
	window.setPlayerSkinId('%d') || window.setPlayerNotification('[0,[]]') || window.setDonatePaymentUrl('https://t.me/canvasdevtg') || interface('MainMenu').setTabNotification([[7,0,%d]])", GetPlayerNameEx(playerid), GetPlayerLevel(playerid), 
	QueryPlayerBalance(playerid), ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS), GetPlayerBankMoney(playerid), QueryPlayerDonationBalance(playerid), 
	GetIteam(playerid, 293), SERVER, SERVER_VERSION, GetPlayerSkin(playerid), PrizesCount(playerid));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}

stock GetPlayerCountHouses(playerid)
{
	new count = 0;

	for(new i; i < g_house_loaded; i++)
	{
		if(GetHouseData(i, H_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			count++;
		}
	}
	return count;
}

public:DS_OnPlayerClickItem(playerid, index)
{
	new interface[146];
    switch(index) 
	{
        case 8: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[8,\"\"]')");
		case 9: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[9,\"\"]')");
		case 10: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[10,\"\"]')");
		case 11: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[11,\"\"]')");
		case 12: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[12,\"\"]')");
        case 13: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[13,\"Audi R8 Titan\",[[17404,3,\"Audi R8 Titan\",3,\"Легендарный\"]]]')");
        case 15: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[15,\"\",[\"Деньги {AEDC2D}(+262500 руб) \",\"Лицензия на вождение  \",\"Проф.лицензия на вождение  \",\"Медицинская карта  \",\"Военный билет  \",\"Владение Desert Eagle {AEDC2D}(+100%) \",\"Владение Remington 870 {AEDC2D}(+100%) \",\"Владение АКС 74У {AEDC2D}(+50%) \",\"Владение AKМ {AEDC2D}(+50%) \",\"Ур.работы инкассатора {AEDC2D}(+1 ур) \",\"Ур.работы мойщика окон {AEDC2D}(+1 ур) \",\"Ур.работы спасателя {AEDC2D}(+1 ур) \",\"Ур.работы фермера {AEDC2D}(+1 ур) \",\"Ур.навыка компьютерщика {AEDC2D}(+1 ур) \",\"Ур.навыка взлома {AEDC2D}(+1 ур) \",\"Выносливость {AEDC2D}(+5000 очка(ов)) \",\"Сила {AEDC2D}(+5000 очка(ов)) \",\"Игровой опыт (до 3 лвл) {AEDC2D}(+4 очка(ов)) \"]]')");
        case 16: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[16,\"\",[\"Деньги {AEDC2D}(+225010 руб) \",\"Лицензия на вождение  \",\"Проф.лицензия на вождение  \",\"Медицинская карта  \",\"Военный билет  \",\"Владение Desert Eagle {AEDC2D}(+100%) \",\"Владение Remington 870 {AEDC2D}(+50%) \",\"Ур.работы инкассатора {AEDC2D}(+1 ур) \",\"Ур.работы фермера {AEDC2D}(+1 ур) \",\"Ур.работы мойщика окон {AEDC2D}(+1 ур) \",\"Выносливость {AEDC2D}(+3000 очка(ов)) \",\"Сила {AEDC2D}(+3000 очка(ов)) \",\"Игровой опыт (до 3 лвл) {AEDC2D}(+2 очка(ов)) \"]]')");
	    case 17: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[17,\"\",[\"Деньги {AEDC2D}(+150000 руб) \",\"Лицензия на вождение  \",\"Медицинская карта  \",\"Ур.работы фермера {AEDC2D}(+1 ур) \",\"Ур.навыка компьютерщика {AEDC2D}(+1 ур) \",\"Выносливость {AEDC2D}(+3000 очка(ов)) \",\"Игровой опыт (до 3 лвл) {AEDC2D}(+1 очка(ов)) \",\"Владение Desert Eagle {AEDC2D}(+50%) \",\"Военный билет  \"]]')");
	    case 21: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[21,\"\",[\"Водительское удостоверение \",\"Профессиональное водительское удостоверение \",\"Лицензия на ношение и хранение оружия \",\"Лицензия на рыболовство \",\"Лицензия на охоту \",\"Медицинская карта \"]]')");
		case 22: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[22,\"\",[\"Мужик|63|||\",\"Козёл|126|Возможность воровать металл на подработке в тюрьме||\",\"Пацан|189|Возможность занимать должность заместителя в банде|Возможность воровать металл на подработке в тюрьме|\",\"Бык|252||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде|\",\"Барыга|315|Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы|Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде|\",\"Вор|378||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы|\",\"Пахан|441|Возможность создавать личную банду|Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы|\",\"Блатной|504||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы$Возможность создавать личную банду|\",\"Вор в законе|567||Возможность воровать металл на подработке в тюрьме$Возможность занимать должность заместителя в банде$Возможность создавать оружие (/makegun) и продавать его (/sellgun) вне Вашей базы$Возможность создавать личную банду|\"]]')");
	    case 23: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[23,\"\"]')");
		case 24: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[24,\"Покупка автомобильного номера\"]')");
		case 26:{
			format(interface, sizeof interface, "interface('MainMenu').onServerResponse(14, '[26,\"\",[\"10 очков законопослушности\"],\"У Вас {ffffff}%d очков {a8a5b2}законопослушности\"]')", GetPlayerData(playerid, P_LAW_ABIDING));
			CEF_CREATE(playerid, 1, 2, interface);
		}
		case 27: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[27,\"\"]')");
		case 28: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[28,\"\",[\"Электрошокер||0\",\"Desert Eagle||0\",\"Remington 870||0\",\"АКС-74У||0\",\"AKM||0\",\"HK416||0\",\"AWM||0\"]]')");
	    case 29: CEF_CREATE(playerid, 1, 2, "interface('MainMenu').onServerResponse(14, '[29,\"\",[\"Электрошокер|63||||0\",\"Desert Eagle|63||||0\",\"Remington 870|63||||0\",\"АКС-74У|63||||0\",\"AKM|63||||0\",\"HK416|63||||0\",\"AWM|63||||0\"]]')");
	}
    return 1;
}
public:DS_OnPlayerBuy(playerid,index,listitem,name[]) {
    if(QueryPlayerDonationBalance(playerid) < g_donate_data[index][DCurrentPrice]) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средтсв для покупки", "Назад", "");
    switch(index) {
        case 7: {
            if(listitem < 1 || 2000000000 < listitem) return GameText(playerid, "~r~Неправильное кол-во", 3000, 2);
			if(QueryPlayerDonationBalance(playerid) < listitem) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средтсв для покупки", "Назад", "");

			SCMF(playerid, COLOR_YELLOW, "Вы сконвертировали {33AA33}%d.00 руб. {FFFF00}в {33AA33}%d рублей", listitem, listitem * g_donate_data[index][DPrice]);
			SCM(playerid, 0x4169E1FF, "Вся сумма была перечислена наличными в игре");

			STRING_GLOBAL[0] = EOS;

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "Конвертация %d руб. в игровую валюту", listitem);
			ProcessPlayerCredit(playerid, -listitem, STRING_GLOBAL, true, false);
			ModifyCashBalance(playerid, listitem * g_donate_data[index][DPrice], STRING_GLOBAL, true, true);

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~+%d рублей~n~~r~-%d доната", listitem * g_donate_data[index][DPrice], listitem);
			GameText(playerid, STRING_GLOBAL, 3000, 2);

			STRING_GLOBAL[0] = EOS;

			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Конвертация валюты\",%d,%d]]])", listitem, listitem);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 8: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice],"Покупка в магазине");
            ModifyCashBalance(playerid, 22500000,"Покупка в магазине");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([0, [[1,\"Игровая валюта\",5000,5000]]])");
        }
        case 9: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice],"Покупка в магазине");
            ModifyCashBalance(playerid, 4170000,"Покупка в магазине");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([0, [[1,\"Игровая валюта\",1000,1000]]])");
        }
        case 10: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice],"Покупка в магазине");
            ModifyCashBalance(playerid, 1650000,"Покупка в магазине");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([0, [[1,\"Игровая валюта\",500,500]]])");
        }
        case 11: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice],"Покупка в магазине");
            ModifyCashBalance(playerid, 750000,"Покупка в магазине");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([0, [[1,\"Игровая валюта\",250,250]]])");
        }
        case 12: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice],"Покупка в магазине");
            ModifyCashBalance(playerid, 300000,"Покупка в магазине");
			CEF_CREATE(playerid, 1, 2, "interface('MainMenu').openCelebrationModal([0, [[1,\"Игровая валюта\",113,133]]])");
        }
        case 13: return IntfDialogCallRemote(playerid, DIALOG_BUY_DONATE_PACK_1, DIALOG_STYLE_MSGBOX, "Подтверждение", "Вы дейстительно хотите приобрести R8 Titan?", "Да", "Нет");
        case 15..17: return GameText(playerid,"~r~Недоступно", 3000, 3);
        case 21: {
            SetPlayerData(playerid, P_WEAPON_LIC, GetPlayerData(playerid, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(playerid, "weapon_lic", GetPlayerData(playerid, P_WEAPON_LIC));
			SetPlayerData(playerid, P_DRIVING_LIC, GetPlayerData(playerid, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
			SetPlayerData(playerid, P_DRIVING_LIC_PROF, GetPlayerData(playerid, P_DRIVING_LIC_PROF) ^ 1);
			UpdatePlayerDatabaseInt(playerid, "driving_lic_prof", GetPlayerData(playerid, P_DRIVING_LIC_PROF));
			ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Все лицензии\",%d,%d]]])", g_donate_data[index][DPrice], g_donate_data[index][DPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 22: {
            if(QueryPlayerDonationBalance(playerid) < g_donate_taty_price[listitem][tatyPrice]) return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX, "{FF6600}Ошибка", "{FFFFFF}Недостаточно средств для покупки", "Назад", "");
			
            ProcessPlayerCredit(playerid, -g_donate_taty_price[listitem][tatyPrice]);
            SetPlayerData(playerid, P_NAKOLKA, g_donate_taty_price[listitem][tatyid]);
            UpdatePlayerDatabaseInt(playerid, "nakolka", g_donate_taty_price[listitem][tatyid]);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Наколка\",%d,%d]]])", g_donate_taty_price[listitem][tatyPrice], g_donate_taty_price[listitem][tatyPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 23: {
            if(GetPlayerData(playerid, P_WARN) == 0) return GameText(playerid, "У вас нет предупреждений", 3000, 2);
	
			SetPlayerData(playerid, P_WARN, 0);
			UpdatePlayerDatabaseInt(playerid, "warn", 0);
			ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Снять все предупреждения\",%d,%d]]])", g_donate_taty_price[listitem][tatyPrice], g_donate_taty_price[listitem][tatyPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 25: {
            new len = strlen(name);
			if(4 <= len <= 20)
			{
				new bool: valid_name = true;
				for(new idx; idx < len; idx ++)
				{
					switch(name[idx])
					{
						case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
						default:
							valid_name = false;
					}
				}
				if(!strcmp(GetPlayerNameEx(playerid), name, true)) SendClientMessage(playerid, 0xFF6600FF, "Вы уже используете это имя");
				else if(valid_name)
				{
					new query[128];
					new Cache: result, rows;

					mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();
					cache_delete(result);

					if(!rows)
					{
						if(ChangePlayerName(playerid, name, false))
						{

							ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);

							format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Смена игрового никнейма\",%d,%d]]])", g_donate_data[index][DPrice], g_donate_data[index][DPrice]);
			                CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

							SCM(playerid, -1, "{ff8c00}[Уведомление] {ffffff}Вы успешно сменили никнейм. Перезайдите.");

							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "При смене ника произошла ошибка");

					}
					else SendClientMessage(playerid, 0xFF6600FF, "Введенное Вами имя уже используется");
				}
				else
				{
					SendClientMessage(playerid, 0xFF6600FF, "Имя уже используется или содержит недопустимые символы");
					SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
				}
			}
			else SendClientMessage(playerid, 0xFF6600FF, "Недопустимый формат ввода");
        }
        case 26: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);
			SetPlayerData(playerid, P_LAW_ABIDING, GetPlayerData(playerid, P_LAW_ABIDING) + 10);
			UpdatePlayerDatabaseInt(playerid, "law_abiding", GetPlayerData(playerid, P_LAW_ABIDING));
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"+10 Законопослушности\",%d,%d]]])", g_donate_data[index][DPrice], g_donate_data[index][DPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 27: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);
			SetPlayerData(playerid, P_VOEN, 1);
			UpdatePlayerDatabaseInt(playerid, "voennik", 1);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Военный билет\",%d,%d]]])", g_donate_data[index][DPrice], g_donate_data[index][DPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
        }
        case 28,29: {
            ProcessPlayerCredit(playerid, -g_donate_data[index][DPrice]);
			format(STRING_GLOBAL, sizeof STRING_GLOBAL, "interface('MainMenu').openCelebrationModal([0, [[1,\"Навыки на все оружия\",%d,%d]]])", g_donate_data[index][DPrice], g_donate_data[index][DPrice]);
			CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
			SetPlayerData(playerid, P_SKILL_COLT, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_colt", 100);
			SetPlayerData(playerid, P_SKILL_SDPISTOL, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", 100);
			SetPlayerData(playerid, P_SKILL_DEAGLE, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_deagle", 100);
			SetPlayerData(playerid, P_SKILL_SHOTGUN, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_shotgun", 100);
			SetPlayerData(playerid, P_SKILL_MP5, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_mp5", 100);
			SetPlayerData(playerid, P_SKILL_AK47, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_ak47", 100);
			SetPlayerData(playerid, P_SKILL_M4, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_m4", 100);
			SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", 100);
			SetPlayerData(playerid, P_SKILL_SAWNOFF, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", 100);
			SetPlayerData(playerid, P_SKILL_COMBAT_SG, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", 100);
			SetPlayerData(playerid, P_SKILL_MICRO_UZI, 100);
			UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", 100);
        }
        case 30: return GameText(playerid,"~r~Недоступно", 3000, 3);
    }
    GameText(playerid,"~g~Успешно", 3000, 2);
	CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([0, \"0\"])");
    return 1;
}

stock GetCarId(model_id) {
    for(new i,fa = sizeof(g_vehicle_info);i<fa;i++)
	{
		if(g_vehicle_info[i][VI_ID] != model_id) continue;
		return i;
	}
    return 0;
}

public: OnGenerateRandomLicensePlate(playerid, type22)
{
	new numberplate[15] = EOS,
	buyplate[150] = EOS;
	switch(type22)
	{
		case 1:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumber(playerid), GenerateCarNumberRegRu(playerid));
		}
		case 2:
		{
			format(numberplate, sizeof numberplate, "%s %s", GenerateCarNumberKz(playerid), GenerateCarNumberRegKz(playerid));
		}
		case 3:
		{
			format(numberplate, sizeof numberplate, "%s  %s", GenerateCarNumberBy(playerid), GenerateCarNumberRegBy(playerid));
		}
		case 4:
		{
			format(numberplate, sizeof numberplate, "%s", GenerateCarNumberUK(playerid));
		}
		case 5:
		{
			format(numberplate, sizeof numberplate, "%s", GenerateCustomCarNumber(playerid));
		}
	}
    format(buyplate, sizeof buyplate, "interface('MainMenu').setGeneratedCarNumber('%s')", numberplate);
	CEF_CREATE(playerid, 1, 2, buyplate);
	return 1;
}

public: DS_OnPlayerBuyVIP(playerid, viptype, useGameMoney, isYearly)
{
    for(new i; i < (isYearly ? sizeof(g_vip_yearly) : sizeof(g_vip_monthly)); i++)
    {
        if((isYearly ? g_vip_yearly[i][V_ID] : g_vip_monthly[i][V_ID]) != viptype) continue;

        new price = useGameMoney ? 
            (isYearly ? g_vip_yearly[i][V_PRICE_MONEY] : g_vip_monthly[i][V_PRICE_MONEY]) : 
            (isYearly ? g_vip_yearly[i][V_PRICE] : g_vip_monthly[i][V_PRICE]);

        new timePeriod = isYearly ? g_vip_yearly[i][V_TIME] : g_vip_monthly[i][V_TIME];

        if(useGameMoney)
        {
            if(!VerifyIntString(QueryPlayerBalance(playerid), price))
                return CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"У вас недостаточно средств для покупки\"])");

            ModifyCashBalance(playerid, -price);
        }
        else
        {
            if(QueryPlayerDonationBalance(playerid) < price) 
                return CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"У вас недостаточно средств для покупки\"])");

            ProcessPlayerCredit(playerid, -price, "Покупка VIP");
        }

        new currentVIP = GetPlayerData(playerid, P_PREMIUM);

        new newPremiumTime;
        if(currentVIP == (isYearly ? g_vip_yearly[i][V_VIP] : g_vip_monthly[i][V_VIP])) 
        {
            newPremiumTime = max(gettime(), GetPlayerData(playerid, P_PREMIUM_TIME)) + timePeriod;
        } 
        else 
        {
            newPremiumTime = gettime() + timePeriod;
        }

        GameText(playerid, "~g~Успешная покупка", 4000, 2);
        SetPlayerData(playerid, P_PREMIUM, isYearly ? g_vip_yearly[i][V_VIP] : g_vip_monthly[i][V_VIP]);
        SetPlayerData(playerid, P_PREMIUM_TIME, newPremiumTime);
        UpdatePlayerDatabaseInt(playerid, "premium", isYearly ? g_vip_yearly[i][V_VIP] : g_vip_monthly[i][V_VIP]);
        UpdatePlayerDatabaseInt(playerid, "premium_time", newPremiumTime);

        SCMF(playerid, -1, "{ff8c00}[Уведомление] {ffffff}Вы успешно приобрели %s на %d дней.", g_vip_names[viptype], timePeriod / 86400);
    }
    return true;
}

public:OnActivateBonusOrPromocode(playerid, inputtext[])
{
    new query[256],
	Cache: result,
	rows,
	count_activation,
	count_time,
	type_prize[6],
	id_prize[6],
	type_code,
	count_prize[6];

	string_dialog[0] = EOS;
				
	mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE owner_id='%d' AND name='%s'", GetPlayerAccountID(playerid), inputtext);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) 
	{
        return IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Вы уже активировали данный промокод-бонус код","", "Хорошо");
	}

	mysql_format(mysql, query, sizeof query, "SELECT * FROM prizes_code WHERE name='%s' AND count_activation > 0", inputtext);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		count_activation = cache_get_field_content_int(0, "count_activation");
		count_time = cache_get_field_content_int(0, "count_time");
		type_code = cache_get_field_content_int(0, "type_code");

		type_prize[0] = cache_get_field_content_int(0, "type_prize_1");
		id_prize[0] = cache_get_field_content_int(0, "id_prize_1");
		count_prize[0] = cache_get_field_content_int(0, "count_prize_1");

		type_prize[1] = cache_get_field_content_int(0, "type_prize_2");
		id_prize[1] = cache_get_field_content_int(0, "id_prize_2");
		count_prize[1] = cache_get_field_content_int(0, "count_prize_2");
					
		type_prize[2] = cache_get_field_content_int(0, "type_prize_3");
		id_prize[2] = cache_get_field_content_int(0, "id_prize_3");
		count_prize[2] = cache_get_field_content_int(0, "count_prize_3");

		type_prize[3] = cache_get_field_content_int(0, "type_prize_4");
		id_prize[3] = cache_get_field_content_int(0, "id_prize_4");
		count_prize[3] = cache_get_field_content_int(0, "count_prize_4");

		type_prize[4] = cache_get_field_content_int(0, "type_prize_5");
		id_prize[4] = cache_get_field_content_int(0, "id_prize_5");
		count_prize[4] = cache_get_field_content_int(0, "count_prize_5");

		type_prize[5] = cache_get_field_content_int(0, "type_prize_6");
		id_prize[5] = cache_get_field_content_int(0, "id_prize_6");
		count_prize[5] = cache_get_field_content_int(0, "count_prize_6");
	}
	cache_delete(result);

	if(!rows) return CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Промокод или бонус-код не был найден\"])");

	if(type_code == 2) // Бонус-код
	{
	    if(count_activation > 0)
	    {
		    mysql_format(mysql, query, sizeof query, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, inputtext);
		    mysql_query(mysql, query, false);

		    mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (owner_id, name, time, type, status) VALUES (%d, '%s', 0, 0, 2)", GetPlayerAccountID(playerid), inputtext);
		    mysql_query(mysql, query, false);

		    for(new i; i < MAX_PRIZES_CODE; i++)
		    {	
			    if(type_prize[i] == 1) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Деньги: %d руб {3599f5}за активацию бонус кода", count_prize[i]), 
				    GivePlayerMyPrizes(playerid, "Деньги", 5, 0, 0, count_prize[i], 0),
				    format(query, sizeof query, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 2) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Донат: %d руб {3599f5}за активацию бонус кода", count_prize[i]), 
				    GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, count_prize[i], 0),
				    format(query, sizeof query, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 3) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%d EXP {3599f5}за активацию бонус кода", count_prize[i]), 
				    GivePlayerExp(playerid, count_prize[i]),
				    format(query, sizeof query, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 4) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%s в количестве %d шт. {3599f5}за активацию бонус кода",ItemsInfo[id_prize[i]][i_item_name], count_prize[i]), 
				    format(query, sizeof query, "%s", ItemsInfo[id_prize[i]][i_item_name]),
				    GivePlayerMyPrizes(playerid, query, 8, id_prize[i], 0, count_prize[i], 0),
				    format(query, sizeof query, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 5) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}%s {3599f5}за активацию бонус кода", GetVehicleInfo(id_prize[i], VI_NAME)), 
				    format(query, sizeof query, "%s[№%d]", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
				    GivePlayerMyPrizes(playerid, query, 3, id_prize[i], 0, 1, -1),
				    format(query, sizeof query, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),
				    strcat(string_dialog, query);
			
			    if(type_prize[i] == 6) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на бизнес в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]), 
				    AddPlayerData(playerid, P_BIZ_SLOTS, +, count_prize[i]),
				    UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS)),
				    format(query, sizeof query, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 7) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на дом в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]), 
				    AddPlayerData(playerid, P_HOUSE_SLOTS, +, count_prize[i]),
				    UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS)),
				    format(query, sizeof query, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);
				
			    if(type_prize[i] == 8) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на гараж в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]), 
				    AddPlayerData(playerid, P_GARAGE_SLOTS, +, count_prize[i]),
				    UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS)),
				    format(query, sizeof query, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);
				
			    if(type_prize[i] == 9) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на транспорт в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]), 
				    AddPlayerData(playerid, P_CAR_SLOTS, +, count_prize[i]),
				    UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS)),
				    format(query, sizeof query, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 10) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Слот на киоск в количестве %d шт. {3599f5}за активацию бонус кода", count_prize[i]), 
				    AddPlayerData(playerid, P_KIOSK_SLOTS, +, count_prize[i]),
				    UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS)),
				    format(query, sizeof query, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),
				    strcat(string_dialog, query);
			
			    if(type_prize[i] == 11)
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Одежда[№%d] {3599f5}за активацию бонус кода", id_prize[i]), 
				    format(query, sizeof query, "Одежда[№%d]", id_prize[i]),
				    GivePlayerMyPrizes(playerid, query, 4, id_prize[i], 0, 1, 0),
				    format(query, sizeof query, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),
				    strcat(string_dialog, query);
				
			    if(type_prize[i] == 12) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Аксессуар[№%d] {3599f5}за активацию бонус кода", id_prize[i]), 
				    format(query, sizeof query, "Аксессуар[№%d]", id_prize[i]),
				    GivePlayerMyPrizes(playerid, query, 6, id_prize[i], 0, 1, count_prize[i]),
				    format(query, sizeof query, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),
				    strcat(string_dialog, query);

			    if(type_prize[i] == 13 && id_prize[i] == 1) 
				    SCMF(playerid, COLOR_ORANGE, "{3599f5}Вам начислен приз {FFFFFF}Купон на выход из Деморгана (%d мин) {3599f5}за активацию бонус кода", count_prize[i]), 
				    format(query, sizeof query, "Купон для выхода из тюрьмы Деморган (%d мин)", count_prize[i]),
				    GivePlayerMyPrizes(playerid, query, 16, count_prize[i], 0, 0, 0),
				    format(query, sizeof query, "{FFFFFF}- Купон для выхода из Деморган (%d мин)\n", count_prize[i]),
				    strcat(string_dialog, query);
		    }

		    format(string_dialog, sizeof string_dialog, 
		        "{bebfba}Вы успешно активировали бонус код и получили:\n\n%s",
		        string_dialog
		    );
		    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Успешная активация", string_dialog,"", "Хорошо");
	    }
	    else 
	    {
	        IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","{bebfba}Достигнут лимит использований бонус кода","", "Хорошо");
	    }
	}
	else if(type_code == 1) // Промокод
	{
	    if(count_activation > 0)
	    {
		    mysql_format(mysql, query, sizeof query, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, inputtext);
		    mysql_query(mysql, query, false);

		    CreatePlayerPromo(playerid, inputtext, count_time);

		    SCMF(playerid, 0x66CC33FF, "{ffff00}Вы активировали промокод \"%s\"", inputtext);
		    SCM(playerid, COLOR_GREY, "Примечание: бонусы выдаются во время зарплаты");

		    string_dialog[0] = EOS;

		    for(new i; i < MAX_PRIZES_CODE; i++)
		    {	
			    if(type_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),strcat(string_dialog, query);

			    if(type_prize[i] == 2) format(query, sizeof query, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),strcat(string_dialog, query);

		        if(type_prize[i] == 3) format(query, sizeof query, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);

			    if(type_prize[i] == 4) format(query, sizeof query, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),strcat(string_dialog, query);

			    if(type_prize[i] == 5) format(query, sizeof query, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),strcat(string_dialog, query);
				
			    if(type_prize[i] == 6) format(query, sizeof query, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);

			    if(type_prize[i] == 7) format(query, sizeof query, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
					
			    if(type_prize[i] == 8) format(query, sizeof query, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
					
			    if(type_prize[i] == 9) format(query, sizeof query, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);

			    if(type_prize[i] == 10) format(query, sizeof query, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
				
			    if(type_prize[i] == 11) format(query, sizeof query, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),strcat(string_dialog, query);
					
		        if(type_prize[i] == 12) format(query, sizeof query, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),strcat(string_dialog, query);

			    if(type_prize[i] == 13 && id_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- Купон на выход из Деморгана (%d мин)\n", count_prize[i]),strcat(string_dialog, query);
		    }

		    format
		    (
			    string_dialog, sizeof string_dialog, 
			    "{bebfba}Вы активировали промокод \'%s\'\n\
			    {FFFFFF}После {6cbbea}%02d {FFFFFF}минут игры на сервере (не AFK), Вы получите:\n\n\
			    %s\n\
			    Примечание: призы выдаются во время отыгранной зарплаты\n\n\
			    Успейте выполнить все условия для получения награды",
			    inputtext, floatround(count_time / 60), string_dialog
		    );
		    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Активация промокода", string_dialog,"", "Хорошо");
	    }
	    else 
	    {
	        IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","{bebfba}Достигнут лимит использований промокода","", "Хорошо");
	    }
	}
	else if(type_code == 3) // Промокод YT
	{
	    if(count_activation > 0)
	    {
			if(GetPlayerData(playerid, P_YT_PROMO) != 1)
			{
                mysql_format(mysql, query, sizeof query, "UPDATE prizes_code SET count_activation='%d' WHERE name='%s'", count_activation - 1, inputtext);
		        mysql_query(mysql, query, false);

		        CreatePlayerPromo(playerid, inputtext, count_time);

				SetPlayerData(playerid, P_YT_PROMO, 1);
                UpdatePlayerDatabaseInt(playerid, "yt_promo", 1);

		        SCMF(playerid, 0x66CC33FF, "{ffff00}Вы активировали промокод \"%s\"", inputtext);
		        SCM(playerid, COLOR_GREY, "Примечание: бонусы выдаются во время зарплаты");

		        string_dialog[0] = EOS;

		        for(new i; i < MAX_PRIZES_CODE; i++)
		        {	
			        if(type_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- %s рублей\n", formatInt(count_prize[i])),strcat(string_dialog, query);
			        if(type_prize[i] == 2) format(query, sizeof query, "{FFFFFF}- %s донат-монет\n", formatInt(count_prize[i])),strcat(string_dialog, query);
		            if(type_prize[i] == 3) format(query, sizeof query, "{FFFFFF}- Игровой опыт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 4) format(query, sizeof query, "{FFFFFF}- %s в количестве %d шт.\n", ItemsInfo[id_prize[i]][i_item_name], count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 5) format(query, sizeof query, "{FFFFFF}- %s [№%d]\n", GetVehicleInfo(id_prize[i], VI_NAME), id_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 6) format(query, sizeof query, "{FFFFFF}- Слот на бизнес в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 7) format(query, sizeof query, "{FFFFFF}- Слот на дом в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 8) format(query, sizeof query, "{FFFFFF}- Слот на гараж в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 9) format(query, sizeof query, "{FFFFFF}- Слот на транспорт в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 10) format(query, sizeof query, "{FFFFFF}- Слот на киоск в количестве %d шт.\n", count_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 11) format(query, sizeof query, "{FFFFFF}- Одежда[№%d]\n", id_prize[i]),strcat(string_dialog, query);
		            if(type_prize[i] == 12) format(query, sizeof query, "{FFFFFF}- Аксессуар[№%d]\n", id_prize[i]),strcat(string_dialog, query);
			        if(type_prize[i] == 13 && id_prize[i] == 1) format(query, sizeof query, "{FFFFFF}- Купон на выход из Деморгана (%d мин)\n", count_prize[i]),strcat(string_dialog, query);
		        }

		        format
		        (
			        string_dialog, sizeof string_dialog, 
			        "{bebfba}Вы активировали промокод \'%s\'\n\
			        {FFFFFF}После {6cbbea}%02d {FFFFFF}минут игры на сервере (не AFK), Вы получите:\n\n\
			        %s\n\
			        Примечание: призы выдаются во время отыгранной зарплаты\n\n\
			        Успейте выполнить все условия для получения награды",
			        inputtext, floatround(count_time / 60), string_dialog
		        );
		        IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFFFFF}Активация промокода", string_dialog,"", "Хорошо");
			}
			else IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","Вы уже активировали ютуберский промокод","", "Хорошо");
	    }
	    else 
	    {
	        IntfDialogCallRemote(playerid, -1, DIALOG_STYLE_MSGBOX,"Ошибка активации","{bebfba}Достигнут лимит использований промокода","", "Хорошо");
		}
	}
	CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([0, \"0\"])");
	return 1;
}

public: PlayerSetting_OnChangePassword(playerid, oldpass[], newpass[])
{
	if(strlen(oldpass) < 8 || strlen(oldpass) > 64) 
    {
        CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Длина пароля должна быть от 8 до 64 символов\"])");
        return 0;
    }

    if(strlen(newpass) < 8 || strlen(newpass) > 64) 
    {
        CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Длина пароля должна быть от 8 до 64 символов\"])");
        return 0;
    }

	format(g_player_newpass[playerid], sizeof(g_player_newpass), "%s", newpass);

	bcrypt_verify(playerid, "OnVerifyOldPass", oldpass, g_player[playerid][P_PASSWORD]);

	return 1;
}

forward OnVerifyOldPass(playerid, bool:success);
public OnVerifyOldPass(playerid, bool:success)
{
    if(!success)
    {
        CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Вы ввели неверный старый пароль\"])");
        return 0;
    }

    bcrypt_hash(playerid, "OnHashNewPass", g_player_newpass[playerid], BCRYPT_COSST);
	return 1;
}

forward OnHashNewPass(playerid);
public OnHashNewPass(playerid)
{
    new hash[BCRYPT_HASH_LENGTH];
    bcrypt_get_hash(hash);
    
	new query[200];
    mysql_format(mysql, query, sizeof query, "UPDATE accounts_canvasdev SET players_password='%e' WHERE id=%d LIMIT 1", hash, GetPlayerAccountID(playerid));
    mysql_query(mysql, query, false);

    if(!mysql_errno())
    {
		new fmt[148];
		format(g_player[playerid][P_PASSWORD], 85, "%s", hash); 
	    format(fmt, sizeof fmt, "{4169E1}Ваш новый пароль:%s\n{FFFFFF}Рекомендуем сделать снимок экрана чтобы сохранить информацию о новом пароле!", g_player_newpass[playerid]);
		IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,"Смена пароля", fmt,"Закрыть", "");
		GameText(playerid, "~g~Пароль успешно изменен", 4000, 2);
		CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([0, \"0\"])");
		g_player_newpass[playerid][0] = '\0';
        return 1;
    }
    else 
    {
        SendClientMessage(playerid, 0xFF6600FF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
        return 0;
    }
}

public: PlayerSetting_OnPlayerName(playerid, inputtext[])
{
	if(!GetPVarInt(playerid, "change_name_status"))
	{
	    new len = strlen(inputtext);
	    if(4 <= len <= 20)
	    {
		    new bool: valid_name = true;
		    for(new idx; idx < len; idx ++)
		    {
			    switch(inputtext[idx])
			    {
				    case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
					    default:
						    valid_name = false;
				}
		    }

			if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
			{
				CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Вы уже используете это имя\"])");
			}
			else if(valid_name)
			{
				new query[128];
				new Cache: result, rows;

				mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts_canvasdev WHERE name='%e' LIMIT 1", inputtext);
				result = mysql_query(mysql, query, true);

			    rows = cache_num_rows();
				cache_delete(result);

				if(!rows)
				{
					SetPVarInt(playerid, "change_name_status", 1);
					SetPVarString(playerid, "change_name", inputtext);

					CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([0, \"0\"])");

					GameText(playerid, "~g~Заявка отправлена~n~Ожидайте ответа администрации", 4000, 2);

				    IntfDialogCallRemote
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{FFD83D}Заявка на изменение имени",
						"{FFFFFF}Ваша просьба об изменении ника отправлена администрации.\n"\
						"Вы получите сообщение, как только заявка будет обработана.\n\n"\
						"Если в течении нескольких минут Ваше имя не было изменено,\n"\
						"то, скорее всего, оно не соответствует RP правилам,\n"\
						"либо Вы уже используете RP имя.",
						"Ок", ""
					);

					format(query, sizeof query, "[Смена non rp имени] %s >> %s {FFCD00}| /okay %d для одобрения" , GetPlayerNameEx(playerid), inputtext, playerid);
					SendMessageToAdmins(query, 0x66CC99FF);
				}
				else CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Указанный никнейм уже используется\"])");
		    }
		}
		else CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Недопустимый формат ввода\"])");
	}
	else CEF_CREATE(playerid, 1, 2, "interface(\"MainMenu\").onServerModalResponse([1, \"Вы уже подавали заявку на изменение имени\"])");
}

stock EmploymentUpdate(playerid)
{
	new basic_lic = GetPlayerData(playerid, P_DRIVING_LIC) ? 0 : -1;
	new prof_lic = GetPlayerData(playerid, P_DRIVING_LIC_PROF) ? 1 : -1;
	new medcarta = GetPlayerData(playerid, P_MEDCARTA) ? 5 : -1;

	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[%d,\
	[%d,%d,%d],[%d,%d,%d],\
	[[0,1,20000,0,[]],[1,1,20000,0,[]],[2,1,0,0,[]],[3,1,0,0,[]],\
	[4,2,0,0,[]],[5,2,30000,0,[0]],[6,6,35000,0,[0]],[7,4,40000,0,[0]],\
	[8,5,45000,0,[0]],[9,3,55000,0,[0]],[10,9,0,0,[5]],[11,8,60000,0,[0,5]],\
	[12,10,0,0,[]],[13,12,75000,0,[5]],[14,14,85000,0,[1,5]],[15,16,0,0,[0,5]],\
	[16,20,105000,0,[1,5]],[17,20,105000,0,[1,5]],[18,25,120000,0,[1,5]]]]", GetPlayerLevel(playerid), g_player_jobs[playerid][0], g_player_jobs[playerid][1], g_player_jobs[playerid][2], basic_lic, prof_lic, medcarta);
	CEF_CREATE(playerid, 2, 4, "Employment", STRING_GLOBAL);
}

stock AddPlayerAchiv(playerid, type)
{
	if(GetPlayerLevel(playerid) < 5) return 0;

	if(type == 1)
	{
		new items = GetPlayerJobLoadItems(playerid);

		new pay_sum = items * GetTempJobInfo(TEMP_JOB_ELECTRICIAN, TJ_PAY_FOR_LOAD);

		pay_sum = pay_sum * g_xbonus;

		AddPlayerData(playerid, P_ACHIV_1, +, pay_sum);
        UpdatePlayerDatabaseInt(playerid, "achiv_1", GetPlayerData(playerid, P_ACHIV_1));
        
		if(GetPlayerData(playerid, P_ACHIV_1) >= 5000000 && GetPlayerData(playerid, P_ACHIV_1_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 150, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Делать деньги вот так!\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_1_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_1_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[0, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 2)
	{
		AddPlayerData(playerid, P_ACHIV_2, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_2", GetPlayerData(playerid, P_ACHIV_2));
        
		if(GetPlayerData(playerid, P_ACHIV_2) >= 500 && GetPlayerData(playerid, P_ACHIV_2_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Дружелюбный\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_2_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_2_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[2, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 3)
	{
		AddPlayerData(playerid, P_ACHIV_3, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_3", GetPlayerData(playerid, P_ACHIV_3));
        
		if(GetPlayerData(playerid, P_ACHIV_3) >= 1 && GetPlayerData(playerid, P_ACHIV_3_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Здоровый дух\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_3_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_3_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[3, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 6)
	{
		AddPlayerData(playerid, P_ACHIV_6, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_6", GetPlayerData(playerid, P_ACHIV_6));
        
		if(GetPlayerData(playerid, P_ACHIV_6) >= 500 && GetPlayerData(playerid, P_ACHIV_6_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 50, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"На завод\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_6_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_6_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[6, 1, \"Вы получили достижение!\"]");
		}
	}
	if(type == 8)
	{
		AddPlayerData(playerid, P_ACHIV_8, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_8", GetPlayerData(playerid, P_ACHIV_8));
        
		if(GetPlayerData(playerid, P_ACHIV_8) >= 1 && GetPlayerData(playerid, P_ACHIV_8_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Мы открываем бизнес\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_8_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_8_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[8, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 9)
	{
		AddPlayerData(playerid, P_ACHIV_9, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_9", GetPlayerData(playerid, P_ACHIV_9));
        
		if(GetPlayerData(playerid, P_ACHIV_9) >= 1 && GetPlayerData(playerid, P_ACHIV_9_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Сила богатырская\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_9_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_9_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[9, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 11)
	{
		AddPlayerData(playerid, P_ACHIV_11, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_11", GetPlayerData(playerid, P_ACHIV_11));
        
		if(GetPlayerData(playerid, P_ACHIV_11) >= 100 && GetPlayerData(playerid, P_ACHIV_11_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Вин Дизель\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_11_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_11_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[11, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 12)
	{
		AddPlayerData(playerid, P_ACHIV_12, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_12", GetPlayerData(playerid, P_ACHIV_12));
        
		if(GetPlayerData(playerid, P_ACHIV_12) >= 15 && GetPlayerData(playerid, P_ACHIV_12_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Игровая зависимость\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_12_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_12_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[12, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 14)
	{
		AddPlayerData(playerid, P_ACHIV_14, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_14", GetPlayerData(playerid, P_ACHIV_14));
        
		if(GetPlayerData(playerid, P_ACHIV_14) >= 100 && GetPlayerData(playerid, P_ACHIV_14_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 50, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Король дорог\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_14_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_14_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[14, 1, \"Вы получили достижение!\"]");
		}
	}
	if(type == 16)
	{
		AddPlayerData(playerid, P_ACHIV_16, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_16", GetPlayerData(playerid, P_ACHIV_16));
        
		if(GetPlayerData(playerid, P_ACHIV_16) >= 1 && GetPlayerData(playerid, P_ACHIV_16_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Бракосочетание\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_16_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_16_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[16, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 17)
	{
		AddPlayerData(playerid, P_ACHIV_17, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_17", GetPlayerData(playerid, P_ACHIV_17));
        
		if(GetPlayerData(playerid, P_ACHIV_17) >= 10 && GetPlayerData(playerid, P_ACHIV_17_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Счастливая рука\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_17_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_17_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[17, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 18)
	{
		AddPlayerData(playerid, P_ACHIV_18, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_18", GetPlayerData(playerid, P_ACHIV_18));
        
		if(GetPlayerData(playerid, P_ACHIV_18) >= 100 && GetPlayerData(playerid, P_ACHIV_18_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Вращайте барабан\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_18_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_18_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[18, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 20)
	{
		AddPlayerData(playerid, P_ACHIV_20, +, 3000);
        UpdatePlayerDatabaseInt(playerid, "achiv_20", GetPlayerData(playerid, P_ACHIV_20));
        
		if(GetPlayerData(playerid, P_ACHIV_20) >= 3000 && GetPlayerData(playerid, P_ACHIV_20_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 25, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Валим боком\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_20_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_20_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[20, 0, \"Вы получили достижение!\"]");
		}
	}
	if(type == 23)
	{
		AddPlayerData(playerid, P_ACHIV_23, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_23", GetPlayerData(playerid, P_ACHIV_23));
        
		if(GetPlayerData(playerid, P_ACHIV_23) >= 1 && GetPlayerData(playerid, P_ACHIV_23_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Сезонный пропуск\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_23_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_23_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[23, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 24)
	{
		AddPlayerData(playerid, P_ACHIV_24, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_24", GetPlayerData(playerid, P_ACHIV_24));
        
		if(GetPlayerData(playerid, P_ACHIV_24) >= 20 && GetPlayerData(playerid, P_ACHIV_24_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Взломщик\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_24_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_24_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[24, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 25)
	{
		AddPlayerData(playerid, P_ACHIV_25, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_25", GetPlayerData(playerid, P_ACHIV_25));
        
		if(GetPlayerData(playerid, P_ACHIV_25) >= 1 && GetPlayerData(playerid, P_ACHIV_25_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Повезло повезло\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_25_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_25_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[25, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 33)
	{
		AddPlayerData(playerid, P_ACHIV_33, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_33", GetPlayerData(playerid, P_ACHIV_33));
        
		if(GetPlayerData(playerid, P_ACHIV_33) >= 20 && GetPlayerData(playerid, P_ACHIV_33_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Опытный открыватель\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_33_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_33_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[33, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 34)
	{
		AddPlayerData(playerid, P_ACHIV_34, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_34", GetPlayerData(playerid, P_ACHIV_34));
        
		if(GetPlayerData(playerid, P_ACHIV_34) >= 1 && GetPlayerData(playerid, P_ACHIV_34_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 480, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Инженер\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_34_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_34_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[34, 2, \"Вы получили достижение!\"]");
		}
	}
	if(type == 40)
	{
		AddPlayerData(playerid, P_ACHIV_40, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_40", GetPlayerData(playerid, P_ACHIV_40));
        
		if(GetPlayerData(playerid, P_ACHIV_40) >= 250 && GetPlayerData(playerid, P_ACHIV_40_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 50, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Страж порядка\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_40_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_40_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[40, 1, \"Вы получили достижение!\"]");
		}
	}
	if(type == 42)
	{
		AddPlayerData(playerid, P_ACHIV_42, +, 1);
        UpdatePlayerDatabaseInt(playerid, "achiv_42", GetPlayerData(playerid, P_ACHIV_42));
        
		if(GetPlayerData(playerid, P_ACHIV_42) >= 1 && GetPlayerData(playerid, P_ACHIV_42_COMPLETED) == 0)
		{
			GivePlayerMyPrizes(playerid, "Донат", 10, 0, 0, 120, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Поздравляем! Вы получили достижение: {FFFF00}\"Теневой магнат\"");
			SendClientMessage(playerid, 0xead671FF, "Вам выдана награда за получение достижения. Используйте {ffffff}клавишу M > Награды, {ead671}чтобы забрать её.");
		    
			SetPlayerData(playerid, P_ACHIV_42_COMPLETED, 1);
            UpdatePlayerDatabaseInt(playerid, "achiv_42_completed", 1);

			CEF_CREATE(playerid, 2, 4, "AchievementNotification", "[42, 2, \"Вы получили достижение!\"]");
		}
	}
	return 1;
}

forward CheckCaptureEvents();
public CheckCaptureEvents()
{
    new hour, minute, second;
    gettime(hour, minute, second);

    new year, month, day;
    getdate(year, month, day);

    new weekday = GetDayOfWeek(day, month, year);

    if(hour == 18 && minute == 0)
    {
        switch(weekday)
        {
            case 0: CentralMansionCapture = true;
            case 3: WestMansionCapture = true;
            case 5: NorthMansionCapture = true;
            case 6: PelaBaseCapture = true;
        }
    }
	else if(hour == 18 && minute == 45)
    {
		switch(weekday)
        {
            case 0: CentralMansionCapture = false;
            case 3: WestMansionCapture = false;
            case 5: NorthMansionCapture = false;
            case 6: PelaBaseCapture = false;
        }
	}
    return 1;
}

stock HackGame_OnPlayerChange(playerid)
{
    if(hackinghouse[playerid][0] == 1) 
	{
		format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~УСПЕШНО [1/4]~n~w~СТОЙТЕ ВОЗЛЕ ОХРАННОЙ СИСТЕМЫ");
  		GameText(playerid, STRING_GLOBAL, 4000, 2);
	    CEF_HIDE(playerid, "Hacking");
	    hackinghouse[playerid][0] = 0;
	    Timer_Oxrana1[playerid] = 15;
	}
	if(hackinghouse[playerid][1] == 1) 
	{
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~УСПЕШНО [2/4]~n~w~СТОЙТЕ ВОЗЛЕ ОХРАННОЙ СИСТЕМЫ");
  		GameText(playerid, STRING_GLOBAL, 4000, 2);
	    CEF_HIDE(playerid, "Hacking");
	    hackinghouse[playerid][1] = 0;
		Timer_Oxrana2[playerid] = 15;
	}
	if(hackinghouse[playerid][2] == 1) 
	{
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~УСПЕШНО [3/4]~n~w~СТОЙТЕ ВОЗЛЕ ОХРАННОЙ СИСТЕМЫ");
  		GameText(playerid, STRING_GLOBAL, 4000, 2);
	    CEF_HIDE(playerid, "Hacking");
	    hackinghouse[playerid][2] = 0;
		Timer_Oxrana3[playerid] = 15;
	}
	if(hackinghouse[playerid][3] == 1) 
	{
	    format(STRING_GLOBAL, sizeof STRING_GLOBAL, "~g~УСПЕШНО [4/4]~n~w~СТОЙТЕ ВОЗЛЕ ОХРАННОЙ СИСТЕМЫ");
  		GameText(playerid, STRING_GLOBAL, 4000, 2);
	    CEF_HIDE(playerid, "Hacking");
	    hackinghouse[playerid][3] = 0;
	}
}

public: HackGame_OnCloseInterface(playerid)
{
	foreach(new i:Player)
    {
	    CEF_HIDE(i, "GangTimer");
	}
	CEF_HIDE(playerid, "Hacking");
	DestroyZaxvat(playerid);
}

stock DestroyZaxvat(playerid)
{
	new fmt_text[567], fam_id = GetPlayerData(playerid,P_FAMILY);

	if(CentralMansionCapture == true)
    {
		if(ActiveWar == true)
        {
	        format(fmt_text, sizeof(fmt_text), "Группировке {FFDD00}\"%s\" {FFFFFF}не удается взломать охранную систему особняка {5db7e7}\"Особняк мафии №1\"", g_family[fam_id][F_NAME]);
	        SendClientMessageToAll(0xFFFFFFFF, fmt_text);
			ActiveWar = false;
			HackerID = INVALID_PLAYER_ID;
			Timer_CentralMansionCapture[playerid] = -1;
		
		    hackinghouse[playerid][0] = 0;
	        hackinghouse[playerid][1] = 0;
	        hackinghouse[playerid][2] = 0;
	        hackinghouse[playerid][3] = 0;
		    Timer_Oxrana1[playerid] = -1;
		    Timer_Oxrana2[playerid] = -1;
		    Timer_Oxrana3[playerid] = -1;
		}
	}
	if(WestMansionCapture == true)
    {
		if(ActiveWar == true)
        {
	        format(fmt_text, sizeof(fmt_text), "Группировке {FFDD00}\"%s\" {FFFFFF}не удается взломать охранную систему особняка {5db7e7}\"Особняк мафии №2\"", g_family[fam_id][F_NAME]);
	        SendClientMessageToAll(0xFFFFFFFF, fmt_text);
			ActiveWar = false;
			HackerID2 = INVALID_PLAYER_ID;
			Timer_WestMansionCapture[playerid] = -1;
		
		    hackinghouse[playerid][0] = 0;
	        hackinghouse[playerid][1] = 0;
	        hackinghouse[playerid][2] = 0;
	        hackinghouse[playerid][3] = 0;
		    Timer_Oxrana1[playerid] = -1;
		    Timer_Oxrana2[playerid] = -1;
		    Timer_Oxrana3[playerid] = -1;
		}
	}
	if(NorthMansionCapture == true)
    {
		if(ActiveWar == true)
        {
	        format(fmt_text, sizeof(fmt_text), "Группировке {FFDD00}\"%s\" {FFFFFF}не удается взломать охранную систему особняка {5db7e7}\"Особняк мафии №3\"", g_family[fam_id][F_NAME]);
	        SendClientMessageToAll(0xFFFFFFFF, fmt_text);
			ActiveWar = false;
			HackerID3 = INVALID_PLAYER_ID;
			Timer_NorthMansionCapture[playerid] = -1;
		
		    hackinghouse[playerid][0] = 0;
	        hackinghouse[playerid][1] = 0;
	        hackinghouse[playerid][2] = 0;
	        hackinghouse[playerid][3] = 0;
		    Timer_Oxrana1[playerid] = -1;
		    Timer_Oxrana2[playerid] = -1;
		    Timer_Oxrana3[playerid] = -1;
		}
	}
	if(PelaBaseCapture == true)
    {
		if(ActiveWar == true)
        {
	        format(fmt_text, sizeof(fmt_text), "Группировке {FFDD00}\"%s\" {FFFFFF}не удается взломать охранную систему особняка {5db7e7}\"Особняк мафии №4\"", g_family[fam_id][F_NAME]);
	        SendClientMessageToAll(0xFFFFFFFF, fmt_text);
			ActiveWar = false;
			HackerID4 = INVALID_PLAYER_ID;
			Timer_PelaBaseCapture[playerid] = -1;
		
		    hackinghouse[playerid][0] = 0;
	        hackinghouse[playerid][1] = 0;
	        hackinghouse[playerid][2] = 0;
	        hackinghouse[playerid][3] = 0;
		    Timer_Oxrana1[playerid] = -1;
		    Timer_Oxrana2[playerid] = -1;
		    Timer_Oxrana3[playerid] = -1;
		}
	}
}

stock CompleteZaxvat(playerid)
{
	new fmt_text[567], fam_id = GetPlayerData(playerid, P_FAMILY);

	if(CentralMansionCapture == true)
    {
		DellMansionOwner();

		format(fmt_text, sizeof fmt_text, "Группировка {FFDD00}\"%s\" {ffffff}успешно захватывает {5db7e7}\"Особняк мафии №1\"", GetFamilyData(fam_id, F_NAME));
		SendClientMessageToAll(-1, fmt_text);

        SetFamilyData(fam_id, F_CENTRAL_MANSION, 1);

		new query[250];
		mysql_format(mysql, query, sizeof query, "UPDATE family SET CentralMansion=1 WHERE id=%d LIMIT 1", fam_id);
		mysql_query(mysql, query, false);

		CentralMansionCapture = false;
		ActiveWar = false;

		HackerID = INVALID_PLAYER_ID;

		MansionOwner();

		foreach(new i:Player)
        {
	        STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, 150, "[\"`Особняк Мафии №1` окончена. Теперь он под контролем:\", \"%s\", 5000]", GetFamilyData(fam_id, F_NAME));
		    CEF_CREATE(i, 2, 4, "BattleMansionEnd", STRING_GLOBAL);
	    }
	}
	if(WestMansionCapture == true)
    {
		DellMansionOwner();

	    format(fmt_text, sizeof fmt_text, "Группировка {FFDD00}\"%s\" {ffffff}успешно захватывает {5db7e7}\"Особняк мафии №2\"", GetFamilyData(fam_id, F_NAME));
		SendClientMessageToAll(-1, fmt_text);

		SetFamilyData(fam_id, F_WEST_MANSION, 1);

		new query[250];
		mysql_format(mysql, query, sizeof query, "UPDATE family SET WestMansion=1 WHERE id=%d LIMIT 1", fam_id);
		mysql_query(mysql, query, false);

		WestMansionCapture = false;
		ActiveWar = false;

		HackerID2 = INVALID_PLAYER_ID;

		MansionOwner();

		foreach(new i:Player)
        {
	        STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, 150, "[\"`Особняк Мафии №2` окончена. Теперь он под контролем:\", \"%s\", 5000]", GetFamilyData(fam_id, F_NAME));
		    CEF_CREATE(i, 2, 4, "BattleMansionEnd", STRING_GLOBAL);
	    }
	}
	if(NorthMansionCapture == true)
    {
		DellMansionOwner();

	    format(fmt_text, sizeof fmt_text, "Группировка {FFDD00}\"%s\" {ffffff}успешно захватывает {5db7e7}\"Особняк мафии №3\"", GetFamilyData(fam_id, F_NAME));
		SendClientMessageToAll(-1, fmt_text);

		SetFamilyData(fam_id, F_NORTH_MANSION, 1);

		new query[250];
		mysql_format(mysql, query, sizeof query, "UPDATE family SET NorthMansion=1 WHERE id=%d LIMIT 1", fam_id);
		mysql_query(mysql, query, false);

		NorthMansionCapture = false;
		ActiveWar = false;

		HackerID3 = INVALID_PLAYER_ID;

		MansionOwner();

		foreach(new i:Player)
        {
	        STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, 150, "[\"`Особняк Мафии №3` окончена. Теперь он под контролем:\", \"%s\", 5000]", GetFamilyData(fam_id, F_NAME));
		    CEF_CREATE(i, 2, 4, "BattleMansionEnd", STRING_GLOBAL);
	    }
	}
	if(PelaBaseCapture == true)
    {
		DellMansionOwner();

	    format(fmt_text, sizeof fmt_text, "Группировка {FFDD00}\"%s\" {ffffff}успешно захватывает {5db7e7}\"Особняк мафии №4\"", GetFamilyData(fam_id, F_NAME));
		SendClientMessageToAll(-1, fmt_text);

		SetFamilyData(fam_id, F_PELA_BASE, 1);

		new query[250];
		mysql_format(mysql, query, sizeof query, "UPDATE family SET PelaBase=1 WHERE id=%d LIMIT 1", fam_id);
		mysql_query(mysql, query, false);

		PelaBaseCapture = false;
		ActiveWar = false;

		HackerID4 = INVALID_PLAYER_ID;

		MansionOwner();

		foreach(new i:Player)
        {
	        STRING_GLOBAL[0] = EOS;
		    format(STRING_GLOBAL, 150, "[\"`Особняк Мафии №4` окончена. Теперь он под контролем:\", \"%s\", 5000]", GetFamilyData(fam_id, F_NAME));
		    CEF_CREATE(i, 2, 4, "BattleMansionEnd", STRING_GLOBAL);
	    }
	}

	foreach(new i:Player)
    {
	    CEF_HIDE(i, "GangTimer");
	}
}

stock DellMansionOwner()
{
	for(new fam_id = 0; fam_id <= g_family_loaded; fam_id++)
	{
		if(CentralMansionCapture == true)
        {
		    if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
            {
                SetFamilyData(fam_id, F_CENTRAL_MANSION, 0);

		        new query[250];
		        mysql_format(mysql, query, sizeof query, "UPDATE family SET CentralMansion=0 WHERE id=%d LIMIT 1", fam_id);
		        mysql_query(mysql, query, false);
			}
        }
		if(WestMansionCapture == true)
        {
		    if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
            {
                SetFamilyData(fam_id, F_WEST_MANSION, 0);

		        new query[250];
		        mysql_format(mysql, query, sizeof query, "UPDATE family SET WestMansion=0 WHERE id=%d LIMIT 1", fam_id);
		        mysql_query(mysql, query, false);
			}
        }
		if(NorthMansionCapture == true)
        {
		    if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
            {
                SetFamilyData(fam_id, F_NORTH_MANSION, 0);

		        new query[250];
		        mysql_format(mysql, query, sizeof query, "UPDATE family SET NorthMansion=0 WHERE id=%d LIMIT 1", fam_id);
		        mysql_query(mysql, query, false);
			}
        }
		if(PelaBaseCapture == true)
        {
            if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
            {
                SetFamilyData(fam_id, F_PELA_BASE, 0);

		        new query[250];
		        mysql_format(mysql, query, sizeof query, "UPDATE family SET PelaBase=0 WHERE id=%d LIMIT 1", fam_id);
		        mysql_query(mysql, query, false);
			}
        }
	}
}

stock MansionOwner()
{
	for(new fam_id = 0; fam_id <= g_family_loaded; fam_id++)
	{
		if(GetFamilyData(fam_id, F_CENTRAL_MANSION) == 1) 
        {
            new str[128];
            format(str, sizeof(str), "{FF8000}Особняк мафии №1\n{ffffff}Контролирует: {a9acaf}%s", GetFamilyData(fam_id, F_NAME));
            UpdateDynamic3DTextLabelText(CentralMansion, 0xFFFFFFFF, str);
        }
		if(GetFamilyData(fam_id, F_WEST_MANSION) == 1) 
        {
            new str[128];
            format(str, sizeof(str), "{FF8000}Особняк мафии №2\n{ffffff}Контролирует: {a9acaf}%s", GetFamilyData(fam_id, F_NAME));
            UpdateDynamic3DTextLabelText(WestMansion, 0xFFFFFFFF, str);
        }
		if(GetFamilyData(fam_id, F_NORTH_MANSION) == 1) 
        {
            new str[128];
            format(str, sizeof(str), "{FF8000}Особняк мафии №3\n{ffffff}Контролирует: {a9acaf}%s", GetFamilyData(fam_id, F_NAME));
            UpdateDynamic3DTextLabelText(NorthMansion, 0xFFFFFFFF, str);
        }
        if(GetFamilyData(fam_id, F_PELA_BASE) == 1) 
        {
            new str[128];
            format(str, sizeof(str), "{FF8000}Особняк мафии №4\n{ffffff}Контролирует: {a9acaf}%s", GetFamilyData(fam_id, F_NAME));
            UpdateDynamic3DTextLabelText(PelaBase, 0xFFFFFFFF, str);
        }
	}
}

CMD:animcheck(playerid, params[])
{
	new animlib[24], animname[24];
	if(sscanf(params, "i", params[0]))
		return SCM(playerid, COLOR_WHITE, !"Введите команду /animcheck [ID анимации]");
	
	GetAnimationName(params[0], animlib, sizeof(animlib), animname, sizeof(animname));
	ApplyAnimation(playerid, animlib, animname, 4.1, 1, 0, 0, 0, 0, 1);
	new string[70];
	format(string, sizeof(string), "ID: %d | Библиотека: %s | Название: %s", params[0], animlib, animname);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

forward CheckGardenRent();
public CheckGardenRent()
{
    for(new gardenid = 0; gardenid < MAX_GARDENS; gardenid++)
    {
        if(GetGardenData(gardenid, G_OREND_ID) != 0)
        {
            if(gettime() > GetGardenData(gardenid, G_ARENDA_TIME))
            {
                SetGardenData(gardenid, G_OREND_ID, 0);
                SetGardenData(gardenid, G_ARENDA_TIME, 0);

				new query[263];

	            format(query, sizeof query, "UPDATE gardens SET orend_id=%d,arenda_time=%d WHERE id=%d", GetGardenData(gardenid, G_OREND_ID), GetGardenData(gardenid, G_ARENDA_TIME), GetGardenData(gardenid, G_SQL_ID));
	            mysql_query(mysql, query, false);
            }
        }
    }
    return 1;
}

public: StopFreeze(playerid) { TogglePlayerControllable(playerid, true); }

stock GetPlayerCount(playerid, type)
{
	new count, query[100];

	switch(type)
	{
		case 1: mysql_format(mysql, query, sizeof query, "SELECT * FROM houses WHERE owner_id=%d", GetPlayerAccountID(playerid));
		case 2: mysql_format(mysql, query, sizeof query, "SELECT * FROM business WHERE owner_id=%d", GetPlayerAccountID(playerid));
		case 3: mysql_format(mysql, query, sizeof query, "SELECT * FROM neftenasos WHERE owner_id=%d", GetPlayerAccountID(playerid));
		case 4: mysql_format(mysql, query, sizeof query, "SELECT * FROM gardens WHERE owner_id=%d", GetPlayerAccountID(playerid));
		case 5: mysql_format(mysql, query, sizeof query, "SELECT * FROM garage WHERE owner_id=%d", GetPlayerAccountID(playerid));
		case 6: mysql_format(mysql, query, sizeof query, "SELECT * FROM kiosk WHERE owner_id=%d", GetPlayerAccountID(playerid));
		default: return 0;
	}

	new Cache:result = mysql_query(mysql, query, true);
    count = cache_num_rows();
	cache_delete(result);
	return count;
}

stock PropertyPlayer(playerid)
{
	string_owned[0] = EOS;

    if(GetPlayerCount(playerid, 1) > 0)
    {
        for(new i; i < MAX_HOUSES; i++)
        {
            if(GetHouseData(i, H_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"house\",\"Дом №%d\",%d,30,0]",
                string_owned, i,
                GetHouseData(i, H_RENT_DATE) <= gettime() ? 0 :
                GetElapsedTime(GetHouseData(i, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS));
            }
        }
	}
    if(GetPlayerCount(playerid, 2) > 0)
    {
        for(new i; i < MAX_BUSINESS; i++)
        {
            if(GetBusinessData(i, B_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"business\",\"%s №%d\",%d,30,0]",
                string_owned, g_business[i][B_NAME], i,
                GetBusinessData(i, B_RENT_DATE) <= gettime() ? 0 :
                GetElapsedTime(GetBusinessData(i, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS));
            }
        }
    }
	if(GetPlayerCount(playerid, 3) > 0)
    {
        for(new i; i < MAX_NEFT; i++)
        {
            if(GetNeftData(i, N_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"oil\",\"Нефтевышка №%d\",%d,5,0]",
                string_owned, i, GetNeftData(i, N_RENT_DATE));
            }
        }
    }
	if(GetPlayerCount(playerid, 4) > 0)
    {
        for(new i; i < MAX_GARDENS; i++)
        {
            if(GetGardenData(i, G_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"garden\",\"Огород №%d\",%d,30,0]",
                string_owned, i, GetGardenData(i, G_RENT_DATE));
            }
        }
    }
	if(GetPlayerCount(playerid, 5) > 0)
    {
        for(new i; i < MAX_GARAGE; i++)
        {
            if(GetGarageData(i, G_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"garage\",\"Гараж №%d\",%d,30,0]",
                string_owned, i, GetGarageData(i, G_RENT_DATE) <= gettime() ? 0 :
                GetElapsedTime(GetGarageData(i, G_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS));
            }
        }
    }
	if(GetPlayerCount(playerid, 6) > 0)
    {
        for(new i; i < MAX_KIOSKS; i++)
        {
            if(GetKioskData(i, K_OWNER_ID) == GetPlayerAccountID(playerid))
            {
                if(strlen(string_owned) > 0) strcat(string_owned, ",");
                format(string_owned, sizeof string_owned, "%s[\"stall\",\"Киоск №%d\",%d,7,0]",
                string_owned, i, GetKioskData(i, K_RENT_DATE));
            }
        }
    }

    if(strlen(string_owned) == 0)
        format(string_owned, sizeof string_owned, "[]");
    else format(string_owned, sizeof string_owned, "[%s]", string_owned);

	return 1;
}

stock FractionPlayer(playerid)
{
    if(GetPlayerTeamEx(playerid) > 0)
    {
        new rank_value[3];
        new player_rank = GetPlayerJob(playerid);

        if(player_rank >= 1 && player_rank <= 10)
        {
            valstr(rank_value, player_rank);
        }
        else
        {
            format(rank_value, sizeof(rank_value), "10");
        }

        format(org_status, sizeof(org_status), "[\"%s\",\"%s\",\"%s\"]", rank_value, GetPlayerRankNameTeam(playerid), GetPlayerTeamName(playerid));
    }
    else 
    {
        format(org_status, sizeof(org_status), "[]");
    }

	return 1;
}

stock OverlayScreen(playerid)
{
	CEF_CREATE(playerid, 2, 4, "Overlay", "[500, 250, 1.00, 1, 500]");
	TogglePlayerControllable(playerid, false);
	SetTimerEx("StopFreeze", 4000, false, "i", playerid);
	return 1;
}

CMD:battlepass_settime(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 8)
        return SendClientMessage(playerid, COLOR_GREY, "Команда доступна только администраторам 8 уровня и выше.");

    if(!admin_logged[playerid])
        return SendClientMessage(playerid, COLOR_GREY, "Вы не авторизованы. Используйте /alogin для авторизации.");

    new days, hours;
    if(sscanf(params, "dd", days, hours) || days < 0 || hours < 0 || hours >= 24)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Использование: /battlepass_settime [дней] [часов]");

    new totalSeconds = (days * 86400) + (hours * 3600);
    new timestamp = gettime() + totalSeconds;

    new query[128];
    format(query, sizeof(query), "UPDATE server_config SET time_battlepass = %d", timestamp);
    mysql_tquery(mysql, query, "LoadBattlePassTimer", "");

    new msg[96];
    format(msg, sizeof(msg), "Время окончания BattlePass установлено на %d дней и %d часов вперёд.", days, hours);
    SendClientMessage(playerid, COLOR_GREEN, msg);
    return 1;
}

public: LoadBattlePassTimer()
{
    new Cache:result = mysql_query(mysql, "SELECT time_battlepass FROM server_config LIMIT 1", true);

    if(cache_num_rows())
    {
        bp_timer = cache_get_field_content_int(0, "time_battlepass");
    }

    cache_delete(result);
}

stock GetBattlePassRemainingTime()
{
    new current_time = gettime(); 
    new remaining_time = bp_timer - current_time; 

    if(remaining_time <= 0)
    {
        return 0; 
    }

    return remaining_time;
}

stock LoadDecoration()
{
	mysql_query(mysql, "SELECT * FROM `decoration` WHERE 1");
	TOTALDECOR = cache_num_rows();

    if(TOTALDECOR)
    {
    	for(new i; i < TOTALDECOR; i++)
    	{
			DecorInfo[i][Decor_ID] = cache_get_field_content_int(i, "id", mysql);
    		DecorInfo[i][Decor_Model] = cache_get_field_content_int(i, "Model", mysql);
    		DecorInfo[i][Decor_PosX] = cache_get_field_content_float(i, "PosX", mysql);
    		DecorInfo[i][Decor_PosY] = cache_get_field_content_float(i, "PosY", mysql);
    		DecorInfo[i][Decor_PosZ] = cache_get_field_content_float(i, "PosZ", mysql);
    		DecorInfo[i][Decor_RotX] = cache_get_field_content_float(i, "RotX", mysql);
    		DecorInfo[i][Decor_RotY] = cache_get_field_content_float(i, "RotY", mysql);
    		DecorInfo[i][Decor_RotZ] = cache_get_field_content_float(i, "RotZ", mysql);
			DecorInfo[i][Decor_Owner] = cache_get_field_content_int(i, "Owner", mysql);
			DecorInfo[i][Decor_Status] = cache_get_field_content_int(i, "Status", mysql);

			if(DecorInfo[i][Decor_Status] == 0)
			{
    			DecorInfo[i][Decor_Object] = CreateDynamicObject(DecorInfo[i][Decor_Model], DecorInfo[i][Decor_PosX], DecorInfo[i][Decor_PosY], DecorInfo[i][Decor_PosZ], DecorInfo[i][Decor_RotX], DecorInfo[i][Decor_RotY], DecorInfo[i][Decor_RotZ]);
			}
		}
    	printf("[Decoration]: Декораций загружено: %d", TOTALDECOR);
    }
}

stock EditDecorationObject(playerid, id, model_id)
{
	if(GetPlayerHousesBySQL(playerid) == -1) return SCM(playerid, 0xC0C0C0FF, "У вас нету дома");
	new home = GetNearestHouse(playerid, 15.0);
	if(home < 0) return SCM(playerid, 0xC0C0C0FF, "Вы должны находиться рядом с домом");

	static const mysql_str[] = "SELECT * FROM `decoration` WHERE `Owner` = %d AND Status = 0";
	new str[sizeof(mysql_str) + (-2 + 30)];

	format(str, sizeof(str), mysql_str, GetPlayerHousesBySQL(playerid));
	mysql_query(mysql, str);
	if(cache_num_rows() > 10)
		return SendClientMessage(playerid, COLOR_GREY, "Максимальное количество украшений!");

	new
		Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);
	EditObjectPlayer[playerid] = CreateDynamicObject(model_id, x+2, y+2, z, 0, 0, 0);
	EditDynamicObject(playerid, EditObjectPlayer[playerid]);
	new text[40];
	format(text, 40, "Дом %d", home);
	SetString(ObjectNamePlayer[playerid], text);
	SetPVarInt(playerid, "home_obj_edit", 1);
	SetPVarInt(playerid, "home_obj_model", model_id);
	SetPVarInt(playerid, "home_inv_obj_id", id);
	SetPVarInt(playerid, "home_id_obj", home);
	return 1;
}

stock GetPlayerHousesBySQL(playerid)
{
	new houseid = -1;
	for(new i; i < g_house_loaded; i++)
	{
		if(GetPlayerAccountID(playerid) == GetHouseData(i, H_OWNER_ID))
		{
			houseid = i;
			break;
		}
	}
	return houseid;
}

CMD:pa_edit(playerid, params[])
{
	if(g_player_use_editing[playerid] == false)
	{
		new fmt_str[15];

		#pragma unused params
		g_player_use_editing[playerid] = true;
		SCM(playerid, 0xFFA500FF, "Вы включили режим редактирования. Используйте /pa_edit [ID объекта]");

		for(new i; i < TOTALDECOR; i++)
		{
			if(DecorInfo[i][Decor_Owner] != GetPlayerHousesBySQL(playerid)) continue;
			if(DecorInfo[i][Decor_Status] == 1) continue;
			format(fmt_str, sizeof fmt_str, "[ID: %d]", DecorInfo[i][Decor_ID]);
			g_object_text[playerid][i] = CreatePlayer3DTextLabel(playerid, fmt_str, 0xFFA500FF, DecorInfo[i][Decor_PosX], DecorInfo[i][Decor_PosY], DecorInfo[i][Decor_PosZ], 5.0);
		}
	}
	else
	{
		extract params -> new model_id; else SCM(playerid, 0xFFA500FF, "Используйте: /pa_edit [ID объекта]");

		model_id--;

		if(model_id == -1)
		{
			for(new i; i < TOTALDECOR; i++)
			{
				DeletePlayer3DTextLabel(playerid, g_object_text[playerid][i]);
				g_object_text[playerid][i] = PlayerText3D: -1;
			}
			SCM(playerid, 0xFFA500FF, "Вы выключили режим редактирования");
			g_player_use_editing[playerid] = false;
			return 1;
		}

		if(!IsPlayerInRangeOfPoint(playerid, 3.5, DecorInfo[model_id][Decor_PosX], DecorInfo[model_id][Decor_PosY], DecorInfo[model_id][Decor_PosZ]))
			return SCM(playerid, 0xFFA500FF, "Вы должны находиться рядом с обьектом");

		if(DecorInfo[model_id][Decor_Status] == 1) return SCM(playerid, 0xFFA500FF, "Такого ID объекта не существует на сервере");

		if(DecorInfo[model_id][Decor_Owner] != GetPlayerHousesBySQL(playerid)) return SCM(playerid, 0xFFA500FF, "Вы не владелец дома, на котором установлен данный объект");

		g_decoration_mysql_id[playerid] = model_id;

		g_decoration_id[playerid] = DecorInfo[model_id][Decor_Model];

		IntfDialogCallRemote(playerid, DIALOG_DECOR, DIALOG_STYLE_LIST, "Подтверждение", "1. Переместить\n2. Забрать в инвентарь", "Выбрать", "Закрыть");
	}
	return 1;
}

stock GetFreeCarAccessorySlot(vehicleid)
{
    for(new i = 0; i < sizeof(car_accessories[]); i++)
    {
        if(car_accessories[vehicleid][i] == INVALID_OBJECT_ID)
            return i;
    }
    return -1;
}

forward DeleteActiveAcs(playerid);
public DeleteActiveAcs(playerid)
{
	if(active_acs[playerid] != INVALID_VEHICLE_ID){			
		DestroyVehicle(active_acs[playerid]);
		active_acs[playerid] = INVALID_VEHICLE_ID;
		active_acs_id[playerid] = -1;	
	}
}

stock DeleteAcsHome(playerid, to_player)
{
	if(g_player_use_editing[playerid] == true)
		g_player_use_editing[playerid] = false;

	for(new i = 0; i < TOTALDECOR; i++){
		if(to_player == INVALID_PLAYER_ID){
			if(DecorInfo[i][Decor_Owner] != GetPlayerHousesBySQL(playerid)) continue;
			if(DecorInfo[i][Decor_Status] == 1) continue;

			DeletePlayer3DTextLabel(playerid, g_object_text[playerid][i]);
			g_object_text[playerid][i] = PlayerText3D: -1;

			GiveAcs(playerid, DecorInfo[i][Decor_Model], 23);

			new str[256];

			format(str, sizeof(str), "UPDATE decoration SET Status = 1 WHERE id = %d LIMIT 1", i + 1);
			mysql_tquery(mysql, str);

			DestroyDynamicObject(DecorInfo[i][Decor_Object]);
			DecorInfo[i][Decor_Status] = 1;
		}else{
			DeletePlayer3DTextLabel(playerid, g_object_text[playerid][i]);
			g_object_text[playerid][i] = PlayerText3D: -1;
		}
    }
	return 1;
}

public: Speed_OnPlayerToggleKey(playerid, Key)
{
	switch(Key){
		case 0: callcmd::key(playerid, "");
	}
	return 1;
}

stock ZoneShow(playerid, zoneid, color[], Float:minX, Float:minY, Float:maxX, Float:maxY)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.addGangZones([[%d,\"%s\",[%.2f,%.2f],[%.2f,%.2f]]])", zoneid, color, minX, minY, maxX, maxY);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}

stock ZoneHide(playerid, zoneid)
{
	STRING_GLOBAL[0] = EOS;
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.removeGangZone(%d)", zoneid);
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);
	return 1;
}

#include "systems/family_tablet.inc"

stock P3_OnPlayerChangeVolume(playerid, volume)
{
	new Volume_Voice[128];

	Volume_Voice[0] = EOS;

	format(Volume_Voice, sizeof(Volume_Voice), "window.App.$store.commit(\"settings/setSettingsProperty\", { key: \"voiceChatSound\", value: %d });", volume);
	CEF_CREATE(playerid, 1, 2, Volume_Voice);

	return 1;
}

stock StartPainting(playerid)
{
	if(gIsPainting[playerid] == true) return 1;

    gIsPainting[playerid] = true;
    if(gPaintProgress[playerid] == 0) gPaintProgress[playerid] = 0;

    gPaintTimer[playerid] = SetTimerEx("ProgressPaintStage", 4500, true, "i", playerid);
	return 1;
}

stock CancelPainting(playerid)
{
	if(gIsPainting[playerid] == false) return 1;

    gIsPainting[playerid] = false;
	SetPVarInt(playerid, "livery", 0);
    KillTimer(gPaintTimer[playerid]);
    gPaintTimer[playerid] = -1;
    gPaintProgress[playerid] = 0;
    ResetPlayerWeapons(playerid);
	ClearAnimations(playerid);
	return 1;
}

stock ShowPaintProgress(playerid)
{
    new text[128];
    format(text, sizeof text, "~w~Покраска ТС~n~~g~Прогресс: [%d из %d]", gPaintProgress[playerid], MAX_STAGE);
    GameTextForParams(playerid, 1, text, 2500, 0, -1, 1, 0, 3.00);
	return 1;
}

stock FinishPainting(playerid)
{
    new vehicleid = GetNearestVehicleID(playerid, 10.0); 
	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	SetOwnableCarData(index, OC_VINIL, GetPVarInt(playerid, "livery"));
	SetOwnableCarData(index, OC_VINILTYPE, 1);

	new query[148];
	format(query, sizeof query, "UPDATE ownable_cars SET vinil=%d, viniltype=%d WHERE id=%d", GetOwnableCarData(index, OC_VINIL), GetOwnableCarData(index, OC_VINILTYPE), GetOwnableCarData(index, OC_SQL_ID));
	mysql_query(mysql, query, false);

    new id_vinils = GetPVarInt(playerid, "livery");

	if(id_vinils == 9) DeleteSpecificItem(playerid, 279, 479);
	if(id_vinils == 11) DeleteSpecificItem(playerid, 279, 481);
	if(id_vinils == 28) DeleteSpecificItem(playerid, 279, 532);
	if(id_vinils == 29) DeleteSpecificItem(playerid, 279, 533);
	if(id_vinils == 30) DeleteSpecificItem(playerid, 279, 566);
	if(id_vinils == 31) DeleteSpecificItem(playerid, 279, 567);
	if(id_vinils == 32) DeleteSpecificItem(playerid, 279, 568);
	if(id_vinils == 33) DeleteSpecificItem(playerid, 279, 569);
	if(id_vinils == 34) DeleteSpecificItem(playerid, 279, 570);
	if(id_vinils == 35) DeleteSpecificItem(playerid, 279, 571);
	if(id_vinils == 38) DeleteSpecificItem(playerid, 279, 648);
	if(id_vinils == 39) DeleteSpecificItem(playerid, 279, 649);
	if(id_vinils == 40) DeleteSpecificItem(playerid, 279, 650);
	if(id_vinils == 41) DeleteSpecificItem(playerid, 279, 651);
	if(id_vinils == 42) DeleteSpecificItem(playerid, 279, 689);
	if(id_vinils == 43) DeleteSpecificItem(playerid, 279, 690);
	if(id_vinils == 45) DeleteSpecificItem(playerid, 279, 700);
	if(id_vinils == 46) DeleteSpecificItem(playerid, 279, 701);
	if(id_vinils == 48) DeleteSpecificItem(playerid, 279, 703);
	if(id_vinils == 49) DeleteSpecificItem(playerid, 279, 704);
	if(id_vinils == 50) DeleteSpecificItem(playerid, 279, 705);

	ChangeVehicleViniljob(vehicleid, id_vinils);

    CancelPainting(playerid);
    GameTextForParams(playerid, 1, "~y~Транспорт успешно покрашен", 3500, 0, -1, 1, 0, 3.00);
	return 1;
}

forward ProgressPaintStage(playerid);
public ProgressPaintStage(playerid)
{
    gPaintProgress[playerid]++;

	ShowPaintProgress(playerid);

    if(gPaintProgress[playerid] == MAX_STAGE)
    {
        FinishPainting(playerid);
    }
	return 1;
}

stock DeleteSpecificItem(playerid, itemid, count)
{
    for(new i = 0; i < MAX_PLAYER_ITEMS; i++)
    {
        if(GetPlayerItem(i, PI_OWNER_ID) != GetPlayerAccountID(playerid)) continue;
        if(GetPlayerItem(i, PI_ITEM) != itemid) continue;
        if(GetPlayerItem(i, PI_COUNT) != count) continue;

        new id = GetPlayerItem(i, PI_SQL_ID);

        new query[94];
        format(query, sizeof query, "DELETE FROM items WHERE id=%d LIMIT 1", id);
        mysql_query(mysql, query, false);

        DeleteItems(i);
        AddItemsLog(playerid, itemid, 0, -count, "Удаление предмета через DeleteSpecificItem");

        return 1;
    }
    return 0;
}

stock GenerateGoogleToken(playerid)
{
    new key[17];
    static const base32[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

    for(new i = 0; i < 16; i++)
    {
        key[i] = base32[random(sizeof(base32) - 1)];
    }
    key[16] = '\0';

    format(g_player[playerid][P_AUTH_TOKEN], TOKEN_BUFFER, "%s", key);
    return 1;
}

stock AuthorizationCompleted(playerid)
{
    SetPVarInt(playerid, "Login_1", 1);
	status_authorization[playerid] = 1;
	CEF_CREATE(playerid, 2, 4, "Loading", "[3000]");
	SetTimerEx("OnPlayerLoading", 3000, false, "i", playerid);
	return 1;
}

cmd:forbes(playerid)
{
    if(!IsPlayerLogged(playerid)) return 0;

    IntfDialogCallRemote(playerid, DIALOG_FORBES_MENU, DIALOG_STYLE_LIST, "Каталог FORBES", "1. FORBES - Игровая Валюта\n2. FORBES - Донат Валюта\n 3. FROBES - Фишки\n 4. FROBES - Количество часов", "Выбрать", "Закрыть");
    
	return 1;
}

forward OnPasswordHash(playerid);
public OnPasswordHash(playerid)
{
    new hash[BCRYPT_HASH_LENGTH];
    bcrypt_get_hash(hash);

    new query[1024];

	SetPlayerData(playerid, P_SKIN, _player_skin[playerid]);

	format(g_player[playerid][P_MONEY], 21, "100000000");
	format(g_player[playerid][P_BANK], 21, "0");

    mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts_canvasdev "\
			"(name,players_password,email,refer,sex,reg_time,reg_ip,last_ip,last_login,skin,serialid,bank,money) "\
			"VALUES "\
			"('%e','%e','%e','%s',%d,%d,'%e','%e','%d', %d, '%e','%e','%e')",
		GetPlayerNameEx(playerid),
		hash,
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		_player_skin_sex[playerid],
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME),
		GetPlayerData(playerid, P_SKIN),
		GetPlayerData(playerid, P_HARDWARE_ID_TEMP),
		GetPlayerData(playerid, P_BANK),
		GetPlayerData(playerid, P_MONEY)
	);
	mysql_tquery(mysql, query, "OnPlayerRegisterFinish", "i", playerid);

	return 1;
}

forward OnPlayerRegisterFinish(playerid);
public OnPlayerRegisterFinish(playerid)
{
    SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());

	if(GetPlayerData(playerid, P_DAILY_CLAIM) != 1 && GetPlayerData(playerid, P_DAILY_CLAIM_COMPLETE) != 4)
	{
        DailyreWards_Time[playerid] = 7200;
	}
	else
	{
		DailyreWards_Time[playerid] = -1;
	}

	if(g_battlepass_time_bonus[playerid] == 0)
	{
		new current_time = gettime();

        if(bp_timer > current_time)
        {
            g_battlepass_time_bonus[playerid] = 3540;
		}
	}

	SetPVarInt(playerid, "LoginPlayer", 0);

	GiveSkin(playerid, GetPlayerData(playerid, P_SKIN));

	TogglePlayerSpectating(playerid, false);
	SetPlayerData(playerid, P_SELECT_SKIN, -1);
	SetPlayerData(playerid, P_PREMIUM, 0);

	SetPlayerData(playerid, P_LEVEL, 1);
	UpdatePlayerDatabaseInt(playerid, "level", GetPlayerData(playerid, P_LEVEL));
	
	AddPlayerData(playerid, P_CAR_SLOTS, +, 2);
	UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

	SetPlayerData(playerid, P_DRIVING_LIC, 1);
	UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_LIC));
	SetPlayerData(playerid, P_GARAGE_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "garage_slots", GetPlayerData(playerid, P_GARAGE_SLOTS));
	SetPlayerData(playerid, P_BIZ_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "biz_slots", GetPlayerData(playerid, P_BIZ_SLOTS));
	SetPlayerData(playerid, P_AUCTION_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "auction_slots", GetPlayerData(playerid, P_AUCTION_SLOTS));
	SetPlayerData(playerid, P_HOUSE_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "house_slots", GetPlayerData(playerid, P_HOUSE_SLOTS));
	SetPlayerData(playerid, P_KIOSK_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "kiosk_slots", GetPlayerData(playerid, P_KIOSK_SLOTS));
	SetPlayerData(playerid, P_GARDEN_SLOTS, 1);
	UpdatePlayerDatabaseInt(playerid, "garden_slots", GetPlayerData(playerid, P_GARDEN_SLOTS));

	SetPlayerSkin(playerid, _player_skin[playerid]);
	SetPlayerSpawnInit(playerid);
	SpawnPlayer(playerid);

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
	SetPlayerInit(playerid);

	MainMenuUpdate(playerid);

	CEF_CREATE(playerid, 1, 4, "GameText");
	CEF_CREATE(playerid, 1, 4, "TrainingRole");
	CEF_HIDE(playerid, "Authorization");
	CEF_CREATE(playerid, 1, 2, "stopSound()");
	CEF_CREATE(playerid, 1, 2, "client.setChatStatus(true)");
	CEF_CREATE(playerid, 1, 2, "showInterface('Hud')");
	CEF_CREATE(playerid, 1, 2, "client.setHudStatus(true)");
	CEF_CREATE(playerid, 1, 2, "interface('Hud')");
	CEF_CREATE(playerid, 1, 2, "interface('Hud').updateHungerLevel(100)");

    CEF_CREATE(playerid, 1, 2, "window.setPlayerConnectedStatus(1)");

	SetPlayerData(playerid, P_SNOW, 0);
	UpdatePlayerDatabaseInt(playerid, "snow", 0);

	SetPlayerData(playerid, P_IN_GARAGE, -1);
	
	UpdateSettingsInterface(playerid);

	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "window.interface('Hud').info.money = %s", QueryPlayerBalance(playerid));
	CEF_CREATE(playerid, 1, 2, STRING_GLOBAL);

	CEF_CREATE(playerid, 1, 2, "window.stopSound()");
	SetFullness(playerid, 0);
	SetPVarInt(playerid, "Login_1", 1);
	DestroyObject(ObjectTrain[playerid]);
	DestroyRegActor(playerid);
	status_authorization[playerid] = 1;
	g_player_auth_inputs[playerid] = 1;
	SetPlayerWeather(playerid, 0);

	OnBattlePass_TimeTasks(playerid);
	SetPVarInt(playerid, "Login", 1);
	if(GetPlayerSnow(playerid) == 1)
    {
        SnowStatus(playerid, 2);
        if(GetPlayerSnowInsible(playerid) == 1)
        {
            SnowStatus(playerid, 1);
	    }
    }
    else SnowStatus(playerid, 0);

    return 1;
}

forward OnPasswordVerify(playerid, bool:success);
public OnPasswordVerify(playerid, bool:success)
{
	new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
	new bool: wrong_password = false;

    if(success)
    {
		DeletePVar(playerid, "password_error");

        if(GetPlayerData(playerid, P_2FA_ENABLED) == 1)
		{
            new current_ip[16], reg_ip[16];
            format(current_ip, sizeof current_ip, "%s", GetPlayerIpEx(playerid));
            format(reg_ip, sizeof reg_ip, "%s", GetPlayerData(playerid, P_REG_IP));

            if(strcmp(current_ip, reg_ip, false) != 0)
            {
				printf("[AUTH] Пароль верен, запрошен код Google Autenticator игроку %s [%d]", GetPlayerNameEx(playerid), playerid);
                return CEF_CREATE(playerid, 1, 2, "interface(\"Authorization\").$refs.auth.setStage(2)");
            }
		}

        printf("[AUTH] Пароль верен, вход в игру разрешен игроку %s [%d]", GetPlayerNameEx(playerid), playerid);
		AuthorizationCompleted(playerid);
    }
	else
	{
		new pErr = GetPVarInt(playerid, "password_error");
		if(pErr >= 2)
	    {
		    IntfDialogCallRemote(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,"{FF9933}Лимит попыток авторизации","{FFFFFF}Вы ввели неправильный пароль 3 раза подряд","","Закрыть");
		    CEF_HIDE(playerid, "Authorization");
		    return FixKick(playerid);
	    }

		SetPVarInt(playerid, "password_error", pErr + 1);

		wrong_password = true;
		login_step--;
		ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
		CEF_CREATE(playerid, 1, 2, "interface('Authorization').$refs.auth.setError(\"password\", \"Неправильный пароль\")");
	}

	return 1;
}

CMD:doc(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SCM(playerid, 0xCECECEFF, "Вы не состоите в организации");
	extract params -> new to_player; else return SCM(playerid, 0x999999FF, "Используйте: /docs [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, COLOR_GREY, " Игрок не найден");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "Игрок находится слишком далеко");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	if(to_player == playerid)
	{
		if(GetPlayerTeamEx(playerid) != 7)
		{
            str_q[0] = EOS;
		    format(str_q, sizeof str_q, "[[3,[\"%s\",\"%s\",\"%s\",\"%s\",1,0]]]", GetPlayerTeamName(playerid), GetPlayerTeamName(playerid), GetPlayerNameEx(playerid), GetPlayerJobAndRankName(playerid));
	        CEF_CREATE(to_player, 2, 4, "Docs", str_q);
		}
		else
		{
            STRING_GLOBAL[0] = EOS;
	        format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[\"%s\",%d,\"%s\",%d,%d,%d]", GetPlayerNameEx(playerid), GetPlayerSkin(playerid), GetPlayerJobAndRankName(playerid),
			GetPlayerData(playerid, P_REG_DATA_FSB), GetPlayerData(playerid, P_UID_FSB), GetPlayerData(playerid, P_EXPIRE_DATA_FSB));
	        CEF_CREATE(playerid, 2, 4, "IdentityCard", STRING_GLOBAL);
		}

     	Action(playerid, "просматривает свое удостоверение", _, false);
	}
	else
	{
		new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
		if(0.5 <= dist <= 3.0)
		{
			SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOWDOC);
		}
		else SCM(playerid, 0xFF6600FF, "Вы находитесь слишком далеко от игрока");
	}


	return 1;
}

stock LoadPlayerJobs(playerid)
{
	mysql_string[0] = EOS;
	format(mysql_string, sizeof mysql_string, "SELECT * FROM jobs_player WHERE uid = %d LIMIT 1", GetPlayerAccountID(playerid));
	mysql_pquery(mysql, mysql_string, "CB_LoadPlayerJobs", "i", playerid);
}

public: CB_LoadPlayerJobs(playerid)
{
	if(cache_num_rows())
	{
		new string[32];
		cache_get_field_content(0, "jobs", string);

		sscanf(string, "P<,,>a<i>[3]", g_player_jobs[playerid]);
	}
	else
	{
		mysql_string[0] = EOS;
		format(mysql_string, sizeof(mysql_string), "INSERT INTO `jobs_player` (`uid`, `jobs`) VALUES ('%d', '%s')", GetPlayerAccountID(playerid), "-1,-1,-1");
		mysql_pquery(mysql, mysql_string);

		for(new i; i < 3; i ++) g_player_jobs[playerid][i] = -1;
	}
}

CMD:myjobs(playerid)
{
    if(g_player_jobs[playerid][0] == -1 && g_player_jobs[playerid][1] == -1 && g_player_jobs[playerid][2] == -1)
    {
        SendClientMessage(playerid, 0xe4ca74FF, "Вы не владеете рабочими профессиями.");
        SendClientMessage(playerid, 0xe4ca74FF, "Воспользуйтесь центром занятости или предложениями частных предпринимателей.");
        return 1;
    }

    new job_count = 0;
    new temp_line[128];

    string_dialog[0] = EOS;

    strcat(string_dialog, "Специальность\tДолжность\n\n");

    for(new i = 0; i < 3; i++)
    {
        new job_id = g_player_jobs[playerid][i];

        if(job_id == -1) continue;
        if(job_id < 0 || job_id >= sizeof(Job_Name)) continue;

        format(temp_line, sizeof temp_line, "%d. %s\tОбычная\n", job_count + 1, Job_Name[job_id]);
        strcat(string_dialog, temp_line);

        SetPlayerListitemValue(playerid, job_count, i);
        job_count++;
    }

    if(job_count > 0) IntfDialogCallRemote(playerid, DIALOG_MY_JOBS, 5, "Мои профессии", string_dialog, "Уволиться", "Закрыть");
    return 1;
}

stock HasJob(playerid, jobid)
{
	for(new i = 0; i < 3; i++)
	{
		if(g_player_jobs[playerid][i] == jobid)
		    return 1;
	}
	return 0;
}

stock JobsEmploymentMainMenu(playerid)
{
    g_jobs_str[0] = EOS;
    strcat(g_jobs_str, "[");

    new count = 0;

    for(new i = 0; i < 3; i++)
    {
        new job_id = g_player_jobs[playerid][i];
        if(job_id == -1) continue;

        if(count > 0) strcat(g_jobs_str, ",");

        new buf[128];
        format(buf, sizeof(buf), "[%d,\"%s\",\"%s\",1,0]", count + 1, Job_Name[job_id], Job_Icon[job_id]);
        strcat(g_jobs_str, buf);

        count++;
    }

    strcat(g_jobs_str, "]");
    return 1;
}

stock DiskiStyling(playerid)
{
	new Float:x, Float:y, Float:z, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	SetPVarFloat(playerid, "styling_x", x);
	SetPVarFloat(playerid, "styling_y", y);
	SetPVarFloat(playerid, "styling_z", z);
	SetPVarFloat(playerid, "styling_a", a);

	STRING_GLOBAL[0] = EOS;
										
	new query[124];
	strcat(STRING_GLOBAL, "[\"Стоковые\",-1,5000],");
	for(new i = 1; i < sizeof g_tuning_diski_id; i++)
	{
		format(query, sizeof query, "[\"%d\",%d,%d],", i, g_tuning_diski_id[i][1], g_tuning_diski_id[i][2]);
		strcat(STRING_GLOBAL, query);
	}
	new str_len = strlen(STRING_GLOBAL);
	strdel(STRING_GLOBAL, str_len - 1, str_len);
					
	format(STRING_GLOBAL, sizeof STRING_GLOBAL, "[0,[%s]]", STRING_GLOBAL);
	CEF_CREATE(playerid, 2, 4, "TuningStyling", STRING_GLOBAL);

	return 1;
}

new const RP_FirstNames[][] = {
    "Ivan", "Dmitry", "Alexey", "Sergey", "Nikolay", "Andrey", "Mikhail",
    "Pavel", "Yuri", "Viktor", "Artyom", "Vladimir", "Egor", "Denis",
    "Shadow", "Razor", "Smoke", "Grom", "Blade", "Vandal", "Skull", "Strike",
    "Demon", "Brat", "Narko", "Xanax", "Killa", "Loko", "Drago", "Flame",
    "Max", "Tony", "Jax", "Ace", "Spike", "Chase", "Neo", "Hawk", "Frost",
    "Wolf", "Hunter", "Ice", "Ghost", "Diesel", "Rex", "Tank", "Bullet",
    "Cash", "Flex", "Boom", "Jet", "Steel", "Brick", "Zane", "Blaze", "Knox"
};

new const RP_LastNames[][] = {
    "Petrov", "Ivanov", "Sidorov", "Smirnov", "Kuznetsov", "Popov", "Volkov",
    "Morozov", "Lebedev", "Novikov", "Kozlov", "Solovyov", "Vasiliev", "Zaitsev",
    "Boss", "Gang", "Family", "Hood", "Zone", "Mob", "Crew", "Squad", "Cartel",
    "Pack", "Clan", "Kings", "Mafia", "Outlaw", "Union", "Fam", "Wave", "Set",
    "Steel", "Stone", "Black", "Red", "Gold", "Viper", "Shadow", "Wolf", "Snake",
    "Razor", "Ghost", "Blade", "Bullet", "Fang", "Storm", "Crusher", "Fury",
    "Rogue", "Venom", "Reaper", "Sniper", "Talon", "Havoc", "Blitz", "Phantom"
};

GenerateRPName(name[], size)
{
    new first = random(sizeof(RP_FirstNames));
    new last = random(sizeof(RP_LastNames));
    format(name, size, "%s_%s", RP_FirstNames[first], RP_LastNames[last]);
}

CMD:gh(playerid, params[])
{
    if(IsPlayerAdminLevel(playerid) < 3) return 1;
    else if(admin_logged[playerid] == false) return SendClientMessage(playerid, 0x999999FF, "Вы не авторизированы, для этого используйте /alogin");

    if(GetPVarInt(playerid, "Nick_Active") != 0){
        SCM(playerid, COLOR_BLUENEW, "Вы вернули себе свой настоящий ник.");

        format(g_player[playerid][P_NAME], 21, "%s", old_nickname[playerid]);
        SetPlayerName(playerid, old_nickname[playerid]);

        DeletePVar(playerid, "Nick_Active");
        return 0;
    }

    format(old_nickname[playerid], 64, "%s", GetPlayerNameEx(playerid));

    new randomName[24];
    GenerateRPName(randomName, sizeof(randomName));

    format(g_player[playerid][P_NAME], 21, "%s", randomName);
    SetPlayerName(playerid, randomName);

    SCMF(playerid, COLOR_BLUENEW, "Вы получили временный ник {FFFFFF}%s.", randomName);

    new fmt_msg[128];
    format(fmt_msg, sizeof fmt_msg, "Администратор %s подменил свой ник на временный: %s.", old_nickname[playerid], randomName);
    SendMessageToAdmins(fmt_msg, 0x999999FF);

    SetPVarInt(playerid, "Nick_Active", 1);
    return 1;
}

#include "systems/auth_overlay.inc"
#include "systems/cars/custom_syncs_car.inc"

public: DeleteSkinIznos(playerid)
{
	new tick = GetTickCount();
    new lastTick = GetPVarInt(playerid, "SkinIznosTick");

    if(tick - lastTick < 10000) return;

	if(!IsPlayerConnected(playerid)) return;
	if(!IsPlayerLogged(playerid)) return;

	for(new i = 0; i < MAX_PLAYER_ITEMS; i++)
	{
        if(GetPlayerItem(i, PI_TYPE) != 3) continue;
        if(GetPlayerItem(i, PI_SKIN_ACTIVE) == 0) continue;
        if(GetPlayerItem(i, PI_SKIN_IZNOS) < 100) continue;
 
        new query[128];
        mysql_format(mysql, query, sizeof query, "DELETE FROM items WHERE id=%d", GetPlayerItem(i, PI_SQL_ID));
		mysql_pquery(mysql, query);
		DeleteItems(i);
    }
	SetPVarInt(playerid, "SkinIznosTick", tick);
}

stock UpdateSkinWearAsync() {
    for(new i = 0; i < MAX_PLAYER_ITEMS; i++){
        new skinWear = GetPlayerItem(i, PI_SKIN_IZNOS);
        new sqlId = GetPlayerItem(i, PI_SQL_ID);

        if(GetPlayerItem(i, PI_SKIN_ACTIVE) != 1) continue;

		SetPlayerItem(i, PI_SKIN_IZNOS, skinWear + 2);

        new query[128];
        format(query, sizeof(query), "UPDATE items SET skin_iznos=%d WHERE id=%d", GetPlayerItem(i, PI_SKIN_IZNOS), sqlId);
        mysql_pquery(mysql, query);
    }
}
